==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--symbol.1_end #b11001000000000000000000110010011)
(= input.memlabel-mem--symbol.1_begin #b11001000000000000000000000000100)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= dst_symbol_addr.1 #b11001000000000000000000000000100)
(= symbol.1 #b11001000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000001100000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000001100000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000001100000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x00800248)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x008003d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffffe4f)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun symbol.1 () (_ BitVec 32)
    #x00800248)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x00800248)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x39705670)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x397057ff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x79705707)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x79705704)
  (define-fun symbol.1 () (_ BitVec 32)
    #x39705670)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x39705670)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x79705704)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (= false true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x118 (concat ?x115 (concat ?x111 ?x109)))))
 (let (($x120 (= ?x119 input.dst.llvm-%n)))
 (let (($x121 (= $x120 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x94)))
 (let ((?x92 (bvand symbol.1 (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x92)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x38 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x37 (= input.memlabel-mem--symbol.1_end ?x38)))
 (let (($x79 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x64 (and $x79 $x37)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x73 $x64)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (and $x56 $x71)))
 (let (($x10 (not $x75)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (and $x65 $x34)))
 (let (($x24 (and (not $x50) $x10)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x26 $x17)))
 (let (($x6 (not $x83)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x27 $x19)))
 (let (($x55 (and (not $x48) $x6)))
 (let (($x101 (and (and (and (and (and (and $x55 $x24) $x49) $x77) $x88) $x91) $x93)))
 (let (($x102 (and $x101 $x95)))
 (let (($x12 (= symbol.1 dst_symbol_addr.1)))
 (let (($x103 (and $x12 $x102)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x44 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x44) (or $x52 $x69)))))))
 (let (($x104 (and $x31 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x28 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x7 (= $x28 true)))
 (let (($x106 (and $x7 $x105)))
 (let (($x122 (and $x106 $x121)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x60 $x122)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x67 $x123)))
 (let (($x81 (forall ((input.ind-%var65X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var65X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var65X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var64X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var64X)))
 (= $x39 false)))
 ))
 (let (($x61 (and $x36 $x81)))
 (let (($x125 (and $x61 $x124)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x11 $x125)))
 (let (($x128 (=> $x126 $x127)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (= false true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x118 (concat ?x115 (concat ?x111 ?x109)))))
 (let (($x120 (= ?x119 input.dst.llvm-%n)))
 (let (($x121 (= $x120 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x94)))
 (let ((?x92 (bvand symbol.1 (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x92)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x38 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x37 (= input.memlabel-mem--symbol.1_end ?x38)))
 (let (($x79 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x64 (and $x79 $x37)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x73 $x64)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (and $x56 $x71)))
 (let (($x10 (not $x75)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (and $x65 $x34)))
 (let (($x24 (and (not $x50) $x10)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x26 $x17)))
 (let (($x6 (not $x83)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x27 $x19)))
 (let (($x55 (and (not $x48) $x6)))
 (let (($x101 (and (and (and (and (and (and $x55 $x24) $x49) $x77) $x88) $x91) $x93)))
 (let (($x102 (and $x101 $x95)))
 (let (($x12 (= symbol.1 dst_symbol_addr.1)))
 (let (($x103 (and $x12 $x102)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x44 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x44) (or $x52 $x69)))))))
 (let (($x104 (and $x31 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x28 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x7 (= $x28 true)))
 (let (($x106 (and $x7 $x105)))
 (let (($x122 (and $x106 $x121)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x60 $x122)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x67 $x123)))
 (let (($x81 (forall ((input.ind-%var65X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var65X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var65X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var64X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var64X)))
 (= $x39 false)))
 ))
 (let (($x61 (and $x36 $x81)))
 (let (($x125 (and $x61 $x124)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x11 $x125)))
 (let (($x128 (=> $x126 $x127)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xab50fee7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000006f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffee0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x31)))
 (let ((?x56 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x56)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x10 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x10)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (and $x89 $x101)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x6 $x9)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x83 (and $x38 $x103)))
 (let (($x57 (not $x83)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x48 (and $x26 $x86)))
 (let (($x75 (and (not $x48) $x57)))
 (let (($x96 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x93 $x96)))
 (let (($x64 (not $x90)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x97 $x88)))
 (let (($x84 (and (not $x50) $x64)))
 (let (($x114 (and (and (and (and (and (and $x84 $x75) $x91) $x69) $x94) $x77) $x37)))
 (let (($x115 (and $x114 $x71)))
 (let (($x80 (= symbol.1 dst_symbol_addr.1)))
 (let (($x110 (and $x80 $x115)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x99 (or (bvugt input.memlabel-mem--symbol.1_begin ?x27) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x99) (or $x32 $x60)))))))
 (let (($x111 (and $x33 $x110)))
 (let (($x8 (= $x111 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x127 (concat ?x124 (concat ?x120 ?x116)))))
 (let (($x129 (= input.dst.llvm-%n ?x128)))
 (let (($x41 (and $x111 $x129)))
 (let (($x104 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x108 (and $x104 $x41)))
 (let (($x35 (= $x108 true)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x45 (and $x19 $x35)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x46 (and $x18 $x45)))
 (let (($x17 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x39 false)))
 ))
 (let (($x98 (and $x70 $x17)))
 (let (($x58 (and $x98 $x46)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x43 $x58)))
 (let (($x82 (=> $x29 $x8)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x31)))
 (let ((?x56 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x56)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x10 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x10)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (and $x89 $x101)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x6 $x9)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x83 (and $x38 $x103)))
 (let (($x57 (not $x83)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x48 (and $x26 $x86)))
 (let (($x75 (and (not $x48) $x57)))
 (let (($x96 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x93 $x96)))
 (let (($x64 (not $x90)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x97 $x88)))
 (let (($x84 (and (not $x50) $x64)))
 (let (($x114 (and (and (and (and (and (and $x84 $x75) $x91) $x69) $x94) $x77) $x37)))
 (let (($x115 (and $x114 $x71)))
 (let (($x80 (= symbol.1 dst_symbol_addr.1)))
 (let (($x110 (and $x80 $x115)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x99 (or (bvugt input.memlabel-mem--symbol.1_begin ?x27) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x99) (or $x32 $x60)))))))
 (let (($x111 (and $x33 $x110)))
 (let (($x8 (= $x111 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x127 (concat ?x124 (concat ?x120 ?x116)))))
 (let (($x129 (= input.dst.llvm-%n ?x128)))
 (let (($x41 (and $x111 $x129)))
 (let (($x104 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x108 (and $x104 $x41)))
 (let (($x35 (= $x108 true)))
 (let (($x19 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x45 (and $x19 $x35)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x46 (and $x18 $x45)))
 (let (($x17 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x70 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x39 false)))
 ))
 (let (($x98 (and $x70 $x17)))
 (let (($x58 (and $x98 $x46)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x43 $x58)))
 (let (($x82 (=> $x29 $x8)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x40 (= $x25 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x76 (concat ?x8 (concat ?x45 ?x108)))))
 (let (($x112 (= input.dst.llvm-%n ?x78)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x126)))
 (let ((?x111 (bvand symbol.1 (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x111)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x56 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x37 (= input.memlabel-mem--symbol.1_end ?x56)))
 (let (($x77 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (and $x77 $x37)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x65 $x114)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x6 $x89)))
 (let (($x10 (not $x49)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x117 (and $x100 $x69)))
 (let (($x9 (and (not $x117) $x10)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x83 $x57)))
 (let (($x106 (not $x75)))
 (let (($x38 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x55 $x38)))
 (let (($x107 (and (not $x103) $x106)))
 (let (($x116 (and (and (and (and (and (and $x107 $x9) $x94) $x79) $x31) $x110) $x109)))
 (let (($x121 (and $x116 $x127)))
 (let (($x48 (= symbol.1 dst_symbol_addr.1)))
 (let (($x125 (and $x48 $x121)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x80 (or (bvugt input.memlabel-mem--symbol.1_begin ?x33) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x80) (or $x54 $x93)))))))
 (let (($x128 (and $x86 $x125)))
 (let (($x51 (and $x128 $x112)))
 (let (($x62 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x61 (and $x62 $x51)))
 (let (($x30 (= $x61 true)))
 (let (($x73 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (and $x73 $x30)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x27 $x15)))
 (let (($x47 (forall ((input.ind-%var97X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var97X)))
 (=> $x70 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var97X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var96X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var96X)))
 (= $x70 false)))
 ))
 (let (($x42 (and $x85 $x47)))
 (let (($x20 (and $x42 $x11)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x22 (and $x43 $x20)))
 (let (($x23 (=> $x22 $x40)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x40 (= $x25 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x76 (concat ?x8 (concat ?x45 ?x108)))))
 (let (($x112 (= input.dst.llvm-%n ?x78)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x126)))
 (let ((?x111 (bvand symbol.1 (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x111)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x56 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x37 (= input.memlabel-mem--symbol.1_end ?x56)))
 (let (($x77 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (and $x77 $x37)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x65 $x114)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x6 $x89)))
 (let (($x10 (not $x49)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x117 (and $x100 $x69)))
 (let (($x9 (and (not $x117) $x10)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x83 $x57)))
 (let (($x106 (not $x75)))
 (let (($x38 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x55 $x38)))
 (let (($x107 (and (not $x103) $x106)))
 (let (($x116 (and (and (and (and (and (and $x107 $x9) $x94) $x79) $x31) $x110) $x109)))
 (let (($x121 (and $x116 $x127)))
 (let (($x48 (= symbol.1 dst_symbol_addr.1)))
 (let (($x125 (and $x48 $x121)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x80 (or (bvugt input.memlabel-mem--symbol.1_begin ?x33) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x80) (or $x54 $x93)))))))
 (let (($x128 (and $x86 $x125)))
 (let (($x51 (and $x128 $x112)))
 (let (($x62 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x61 (and $x62 $x51)))
 (let (($x30 (= $x61 true)))
 (let (($x73 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (and $x73 $x30)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x27 $x15)))
 (let (($x47 (forall ((input.ind-%var97X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var97X)))
 (=> $x70 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var97X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var96X (_ BitVec 32)) )(let (($x70 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var96X)))
 (= $x70 false)))
 ))
 (let (($x42 (and $x85 $x47)))
 (let (($x20 (and $x42 $x11)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x22 (and $x43 $x20)))
 (let (($x23 (=> $x22 $x40)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa61d4183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun symbol.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x98)))
 (let (($x74 (= ?x24 input.dst.llvm-%n)))
 (let (($x16 (= $x74 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x13 (concat ?x25 (concat ?x15 ?x61)))))
 (let (($x32 (= input.dst.llvm-%n ?x95)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x5)))
 (let ((?x128 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x128)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x111 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x109 (= input.memlabel-mem--symbol.1_end ?x111)))
 (let (($x110 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x116 (and $x110 $x109)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x115 $x116)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (and $x65 $x77)))
 (let (($x56 (not $x113)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x124 (and $x118 $x79)))
 (let (($x114 (and (not $x124) $x56)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x49 $x10)))
 (let (($x122 (not $x9)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x101 $x6)))
 (let (($x123 (and (not $x89) $x122)))
 (let (($x108 (and (and (and (and (and (and $x123 $x114) $x31) $x71) $x126) $x125) $x129)))
 (let (($x46 (and $x108 $x76)))
 (let (($x117 (= symbol.1 dst_symbol_addr.1)))
 (let (($x82 (and $x117 $x46)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x48 (or (bvugt input.memlabel-mem--symbol.1_begin ?x86) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x48) (or $x91 $x83)))))))
 (let (($x78 (and $x69 $x82)))
 (let (($x41 (and $x78 $x32)))
 (let (($x97 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x81 (and $x97 $x41)))
 (let (($x92 (= $x81 true)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (and $x44 $x92)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x53 (and $x33 $x59)))
 (let (($x102 (forall ((input.ind-%var115X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var115X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var115X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var114X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var114X)))
 (= $x52 false)))
 ))
 (let (($x26 (and $x104 $x102)))
 (let (($x39 (and $x26 $x53)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x63 $x39)))
 (let (($x130 (=> $x21 $x16)))
 (not $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x98)))
 (let (($x74 (= ?x24 input.dst.llvm-%n)))
 (let (($x16 (= $x74 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x13 (concat ?x25 (concat ?x15 ?x61)))))
 (let (($x32 (= input.dst.llvm-%n ?x95)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x5)))
 (let ((?x128 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x128)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x111 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x109 (= input.memlabel-mem--symbol.1_end ?x111)))
 (let (($x110 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x116 (and $x110 $x109)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x115 $x116)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (and $x65 $x77)))
 (let (($x56 (not $x113)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x124 (and $x118 $x79)))
 (let (($x114 (and (not $x124) $x56)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x49 $x10)))
 (let (($x122 (not $x9)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x101 $x6)))
 (let (($x123 (and (not $x89) $x122)))
 (let (($x108 (and (and (and (and (and (and $x123 $x114) $x31) $x71) $x126) $x125) $x129)))
 (let (($x46 (and $x108 $x76)))
 (let (($x117 (= symbol.1 dst_symbol_addr.1)))
 (let (($x82 (and $x117 $x46)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x48 (or (bvugt input.memlabel-mem--symbol.1_begin ?x86) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x48) (or $x91 $x83)))))))
 (let (($x78 (and $x69 $x82)))
 (let (($x41 (and $x78 $x32)))
 (let (($x97 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x81 (and $x97 $x41)))
 (let (($x92 (= $x81 true)))
 (let (($x44 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (and $x44 $x92)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x53 (and $x33 $x59)))
 (let (($x102 (forall ((input.ind-%var115X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var115X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var115X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var114X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var114X)))
 (= $x52 false)))
 ))
 (let (($x26 (and $x104 $x102)))
 (let (($x39 (and $x26 $x53)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x63 $x39)))
 (let (($x130 (=> $x21 $x16)))
 (not $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x43)))
 (let (($x73 (= ?x18 input.spec-%var-n-1)))
 (let (($x47 (= $x73 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x74 (concat ?x19 (concat ?x59 ?x81)))))
 (let (($x130 (= input.dst.llvm-%n ?x16)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x23)))
 (let ((?x78 (bvand symbol.1 (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x78)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x129 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x108 (and $x125 $x129)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x121 $x108)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x115 $x110)))
 (let (($x111 (not $x120)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x119 $x71)))
 (let (($x116 (and (not $x8) $x111)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x113 $x56)))
 (let (($x58 (not $x114)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x37 $x65)))
 (let (($x29 (and (not $x77) $x58)))
 (let (($x61 (and (and (and (and (and (and $x29 $x116) $x126) $x127) $x5) $x82) $x112)))
 (let (($x11 (and $x61 $x13)))
 (let (($x124 (= symbol.1 dst_symbol_addr.1)))
 (let (($x40 (and $x124 $x11)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x117 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x117) (or $x94 $x49)))))))
 (let (($x95 (and $x79 $x40)))
 (let (($x131 (and $x95 $x130)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x88 (and $x55 $x131)))
 (let (($x54 (= $x88 true)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x60 $x54)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x86 $x51)))
 (let (($x90 (forall ((input.ind-%var125X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var125X)))
 (=> $x104 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var125X) (_ bv0 32)))))
 ))
 (let (($x68 (forall ((input.ind-%var124X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var124X)))
 (= $x104 false)))
 ))
 (let (($x100 (and $x68 $x90)))
 (let (($x27 (and $x100 $x85)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x42 (and $x63 $x27)))
 (let (($x99 (=> $x42 $x47)))
 (not $x99)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x43)))
 (let (($x73 (= ?x18 input.spec-%var-n-1)))
 (let (($x47 (= $x73 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x74 (concat ?x19 (concat ?x59 ?x81)))))
 (let (($x130 (= input.dst.llvm-%n ?x16)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x23)))
 (let ((?x78 (bvand symbol.1 (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x78)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x129 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x108 (and $x125 $x129)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x121 $x108)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x115 $x110)))
 (let (($x111 (not $x120)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x119 $x71)))
 (let (($x116 (and (not $x8) $x111)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x113 $x56)))
 (let (($x58 (not $x114)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x37 $x65)))
 (let (($x29 (and (not $x77) $x58)))
 (let (($x61 (and (and (and (and (and (and $x29 $x116) $x126) $x127) $x5) $x82) $x112)))
 (let (($x11 (and $x61 $x13)))
 (let (($x124 (= symbol.1 dst_symbol_addr.1)))
 (let (($x40 (and $x124 $x11)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x117 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x117) (or $x94 $x49)))))))
 (let (($x95 (and $x79 $x40)))
 (let (($x131 (and $x95 $x130)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x88 (and $x55 $x131)))
 (let (($x54 (= $x88 true)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x60 $x54)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x86 $x51)))
 (let (($x90 (forall ((input.ind-%var125X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var125X)))
 (=> $x104 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var125X) (_ bv0 32)))))
 ))
 (let (($x68 (forall ((input.ind-%var124X (_ BitVec 32)) )(let (($x104 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var124X)))
 (= $x104 false)))
 ))
 (let (($x100 (and $x68 $x90)))
 (let (($x27 (and $x100 $x85)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x42 (and $x63 $x27)))
 (let (($x99 (=> $x42 $x47)))
 (not $x99)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x52 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x12 (= $x52 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x18 (concat ?x42 (concat ?x54 ?x131)))))
 (let (($x47 (= input.dst.llvm-%n ?x73)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x32)))
 (let ((?x40 (bvand symbol.1 (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x40)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x15 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x78 (= input.memlabel-mem--symbol.1_end ?x15)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x112 (and $x46 $x78)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x76 $x112)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x125 (and $x25 $x121)))
 (let (($x45 (not $x125)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (and $x22 $x35)))
 (let (($x129 (and (not $x127) $x45)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x110 $x120)))
 (let (($x116 (not $x111)))
 (let (($x109 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x8 $x109)))
 (let (($x126 (and (not $x115) $x116)))
 (let (($x59 (and (and (and (and (and (and $x126 $x129) $x108) $x30) $x61) $x11) $x95)))
 (let (($x81 (and $x59 $x24)))
 (let (($x71 (= symbol.1 dst_symbol_addr.1)))
 (let (($x53 (and $x71 $x81)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x83 (or (bvugt input.memlabel-mem--symbol.1_begin ?x123) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x83) (or $x77 $x31)))))))
 (let (($x98 (and $x119 $x53)))
 (let (($x99 (and $x98 $x47)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x17 (and $x117 $x99)))
 (let (($x91 (= $x17 true)))
 (let (($x107 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x107 $x91)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x28 (and $x106 $x41)))
 (let (($x57 (forall ((input.ind-%var135X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var135X)))
 (=> $x62 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var135X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var134X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var134X)))
 (= $x62 false)))
 ))
 (let (($x75 (and $x97 $x57)))
 (let (($x105 (and $x75 $x28)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x66 $x105)))
 (let (($x44 (=> $x14 $x12)))
 (not $x44)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x52 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x12 (= $x52 true)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x18 (concat ?x42 (concat ?x54 ?x131)))))
 (let (($x47 (= input.dst.llvm-%n ?x73)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x32)))
 (let ((?x40 (bvand symbol.1 (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x40)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x15 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x78 (= input.memlabel-mem--symbol.1_end ?x15)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x112 (and $x46 $x78)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x76 $x112)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x125 (and $x25 $x121)))
 (let (($x45 (not $x125)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (and $x22 $x35)))
 (let (($x129 (and (not $x127) $x45)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x110 $x120)))
 (let (($x116 (not $x111)))
 (let (($x109 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x8 $x109)))
 (let (($x126 (and (not $x115) $x116)))
 (let (($x59 (and (and (and (and (and (and $x126 $x129) $x108) $x30) $x61) $x11) $x95)))
 (let (($x81 (and $x59 $x24)))
 (let (($x71 (= symbol.1 dst_symbol_addr.1)))
 (let (($x53 (and $x71 $x81)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x83 (or (bvugt input.memlabel-mem--symbol.1_begin ?x123) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x83) (or $x77 $x31)))))))
 (let (($x98 (and $x119 $x53)))
 (let (($x99 (and $x98 $x47)))
 (let (($x117 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x17 (and $x117 $x99)))
 (let (($x91 (= $x17 true)))
 (let (($x107 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x107 $x91)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x28 (and $x106 $x41)))
 (let (($x57 (forall ((input.ind-%var135X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var135X)))
 (=> $x62 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var135X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var134X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var134X)))
 (= $x62 false)))
 ))
 (let (($x75 (and $x97 $x57)))
 (let (($x105 (and $x75 $x28)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x66 $x105)))
 (let (($x44 (=> $x14 $x12)))
 (not $x44)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffff7fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffff7ff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffff7fc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x102 (= $x84 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x12 (concat ?x14 (concat ?x91 ?x99)))))
 (let (($x26 (= input.dst.llvm-%n ?x44)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x16)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x53)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x92 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x92)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (and $x13 $x40)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x23 $x95)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x46 (and $x21 $x76)))
 (let (($x82 (not $x46)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x30 (and $x39 $x5)))
 (let (($x78 (and (not $x30) $x82)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x121 $x125)))
 (let (($x129 (not $x45)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x127 $x128)))
 (let (($x108 (and (not $x25) $x129)))
 (let (($x54 (and (and (and (and (and (and $x108 $x78) $x112) $x19) $x59) $x81) $x98)))
 (let (($x131 (and $x54 $x43)))
 (let (($x35 (= symbol.1 dst_symbol_addr.1)))
 (let (($x51 (and $x35 $x131)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x89 (or (bvugt input.memlabel-mem--symbol.1_begin ?x58) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x89) (or $x115 $x20)))))))
 (let (($x87 (and $x22 $x51)))
 (let (($x6 (and $x87 $x26)))
 (let (($x83 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x130 (and $x83 $x6)))
 (let (($x68 (= $x130 true)))
 (let (($x122 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and $x122 $x68)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x9 $x86)))
 (let (($x49 (forall ((input.ind-%var153X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var153X)))
 (=> $x7 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var153X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var152X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var152X)))
 (= $x7 false)))
 ))
 (let (($x10 (and $x48 $x49)))
 (let (($x63 (and $x10 $x100)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x34 (and $x38 $x63)))
 (let (($x90 (=> $x34 $x102)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x102 (= $x84 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x12 (concat ?x14 (concat ?x91 ?x99)))))
 (let (($x26 (= input.dst.llvm-%n ?x44)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x16)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x53)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x92 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x92)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (and $x13 $x40)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x23 $x95)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x46 (and $x21 $x76)))
 (let (($x82 (not $x46)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x30 (and $x39 $x5)))
 (let (($x78 (and (not $x30) $x82)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x121 $x125)))
 (let (($x129 (not $x45)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x127 $x128)))
 (let (($x108 (and (not $x25) $x129)))
 (let (($x54 (and (and (and (and (and (and $x108 $x78) $x112) $x19) $x59) $x81) $x98)))
 (let (($x131 (and $x54 $x43)))
 (let (($x35 (= symbol.1 dst_symbol_addr.1)))
 (let (($x51 (and $x35 $x131)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x89 (or (bvugt input.memlabel-mem--symbol.1_begin ?x58) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x89) (or $x115 $x20)))))))
 (let (($x87 (and $x22 $x51)))
 (let (($x6 (and $x87 $x26)))
 (let (($x83 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x130 (and $x83 $x6)))
 (let (($x68 (= $x130 true)))
 (let (($x122 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and $x122 $x68)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x9 $x86)))
 (let (($x49 (forall ((input.ind-%var153X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var153X)))
 (=> $x7 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var153X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var152X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var152X)))
 (= $x7 false)))
 ))
 (let (($x10 (and $x48 $x49)))
 (let (($x63 (and $x10 $x100)))
 (let (($x38 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x34 (and $x38 $x63)))
 (let (($x90 (=> $x34 $x102)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x9ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x9ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x9ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x64 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x50 (= $x64 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x102 (concat ?x34 (concat ?x68 ?x6)))))
 (let (($x60 (= input.dst.llvm-%n ?x90)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x73)))
 (let ((?x51 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x51)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let ((?x88 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x53 (= input.memlabel-mem--symbol.1_end ?x88)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x98 (and $x24 $x53)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x32 $x98)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (and $x27 $x23)))
 (let (($x11 (not $x13)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x85 $x61)))
 (let (($x40 (and (not $x19) $x11)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x76 $x46)))
 (let (($x78 (not $x82)))
 (let (($x15 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x30 $x15)))
 (let (($x112 (and (not $x21) $x78)))
 (let (($x91 (and (and (and (and (and (and $x112 $x40) $x95) $x42) $x54) $x131) $x87)))
 (let (($x99 (and $x91 $x52)))
 (let (($x5 (= symbol.1 dst_symbol_addr.1)))
 (let (($x41 (and $x5 $x99)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x65 (or (bvugt input.memlabel-mem--symbol.1_begin ?x116) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x65) (or $x25 $x74)))))))
 (let (($x36 (and $x39 $x41)))
 (let (($x37 (and $x36 $x60)))
 (let (($x89 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x47 (and $x89 $x37)))
 (let (($x97 (= $x47 true)))
 (let (($x114 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (and $x114 $x97)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x56 $x106)))
 (let (($x31 (forall ((input.ind-%var171X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var171X)))
 (=> $x72 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var171X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var170X)))
 (= $x72 false)))
 ))
 (let (($x113 (and $x93 $x31)))
 (let (($x66 (and $x113 $x75)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x104 (and $x101 $x66)))
 (let (($x96 (=> $x104 $x50)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x64 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x50 (= $x64 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x102 (concat ?x34 (concat ?x68 ?x6)))))
 (let (($x60 (= input.dst.llvm-%n ?x90)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x73)))
 (let ((?x51 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x51)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let ((?x88 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x53 (= input.memlabel-mem--symbol.1_end ?x88)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x98 (and $x24 $x53)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x32 $x98)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (and $x27 $x23)))
 (let (($x11 (not $x13)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x85 $x61)))
 (let (($x40 (and (not $x19) $x11)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x76 $x46)))
 (let (($x78 (not $x82)))
 (let (($x15 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x30 $x15)))
 (let (($x112 (and (not $x21) $x78)))
 (let (($x91 (and (and (and (and (and (and $x112 $x40) $x95) $x42) $x54) $x131) $x87)))
 (let (($x99 (and $x91 $x52)))
 (let (($x5 (= symbol.1 dst_symbol_addr.1)))
 (let (($x41 (and $x5 $x99)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x65 (or (bvugt input.memlabel-mem--symbol.1_begin ?x116) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x65) (or $x25 $x74)))))))
 (let (($x36 (and $x39 $x41)))
 (let (($x37 (and $x36 $x60)))
 (let (($x89 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x47 (and $x89 $x37)))
 (let (($x97 (= $x47 true)))
 (let (($x114 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (and $x114 $x97)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x56 $x106)))
 (let (($x31 (forall ((input.ind-%var171X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var171X)))
 (=> $x72 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var171X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var170X)))
 (= $x72 false)))
 ))
 (let (($x113 (and $x93 $x31)))
 (let (($x66 (and $x113 $x75)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x104 (and $x101 $x66)))
 (let (($x96 (=> $x104 $x50)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (forall ((input.ind-%var193X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var193X))))
 ))
 (let (($x67 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x49 (spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var192X)))
 (= false $x49)))
 ))
 (let (($x141 (and $x67 $x140)))
 (let (($x142 (= $x141 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x57 (concat ?x64 (concat ?x106 ?x47)))))
 (let (($x8 (= input.dst.llvm-%n ?x71)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x84)))
 (let ((?x36 (bvand symbol.1 (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x36)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x51 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x87 (= input.memlabel-mem--symbol.1_end ?x51)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x91 (and $x131 $x87)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x43 $x91)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (and $x32 $x24)))
 (let (($x88 (not $x81)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (and $x59 $x42)))
 (let (($x98 (and (not $x105) $x88)))
 (let (($x11 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x13 $x11)))
 (let (($x12 (not $x40)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x92 $x27)))
 (let (($x28 (and (not $x23) $x12)))
 (let (($x6 (and (and (and (and (and (and $x28 $x98) $x54) $x16) $x73) $x41) $x44)))
 (let (($x86 (and $x6 $x102)))
 (let (($x19 (= symbol.1 dst_symbol_addr.1)))
 (let (($x33 (and $x19 $x86)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x5 (or (bvugt input.memlabel-mem--symbol.1_begin ?x39) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x5) (or $x18 $x76)))))))
 (let (($x90 (and $x61 $x33)))
 (let (($x26 (and $x90 $x8)))
 (let (($x35 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x48 (and $x35 $x26)))
 (let (($x9 (= $x48 true)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (and $x77 $x9)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x38 (and $x116 $x10)))
 (let (($x110 (forall ((input.ind-%var181X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var181X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var181X) (_ bv0 32)))))
 ))
 (let (($x83 (forall ((input.ind-%var180X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var180X)))
 (= $x93 false)))
 ))
 (let (($x108 (and $x83 $x110)))
 (let (($x62 (and $x108 $x38)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x101 $x62)))
 (let (($x143 (=> $x118 $x142)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (forall ((input.ind-%var193X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var193X))))
 ))
 (let (($x67 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x49 (spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var192X)))
 (= false $x49)))
 ))
 (let (($x141 (and $x67 $x140)))
 (let (($x142 (= $x141 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x57 (concat ?x64 (concat ?x106 ?x47)))))
 (let (($x8 (= input.dst.llvm-%n ?x71)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x84)))
 (let ((?x36 (bvand symbol.1 (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x36)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x51 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x87 (= input.memlabel-mem--symbol.1_end ?x51)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x91 (and $x131 $x87)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x43 $x91)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (and $x32 $x24)))
 (let (($x88 (not $x81)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (and $x59 $x42)))
 (let (($x98 (and (not $x105) $x88)))
 (let (($x11 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x13 $x11)))
 (let (($x12 (not $x40)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x92 $x27)))
 (let (($x28 (and (not $x23) $x12)))
 (let (($x6 (and (and (and (and (and (and $x28 $x98) $x54) $x16) $x73) $x41) $x44)))
 (let (($x86 (and $x6 $x102)))
 (let (($x19 (= symbol.1 dst_symbol_addr.1)))
 (let (($x33 (and $x19 $x86)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x5 (or (bvugt input.memlabel-mem--symbol.1_begin ?x39) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x5) (or $x18 $x76)))))))
 (let (($x90 (and $x61 $x33)))
 (let (($x26 (and $x90 $x8)))
 (let (($x35 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x48 (and $x35 $x26)))
 (let (($x9 (= $x48 true)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (and $x77 $x9)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x38 (and $x116 $x10)))
 (let (($x110 (forall ((input.ind-%var181X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var181X)))
 (=> $x93 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var181X) (_ bv0 32)))))
 ))
 (let (($x83 (forall ((input.ind-%var180X (_ BitVec 32)) )(let (($x93 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var180X)))
 (= $x93 false)))
 ))
 (let (($x108 (and $x83 $x110)))
 (let (($x62 (and $x108 $x38)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x101 $x62)))
 (let (($x143 (=> $x118 $x142)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04000400)
  (define-fun input.ind-%var192X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x60001000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04000403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x6000118f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04000400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x60001000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x60001000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var192X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x10000200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf1179be4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf1179be7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1000038f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf1179be4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x10000200)
  (define-fun symbol.1 () (_ BitVec 32)
    #x10000200)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (forall ((input.ind-%var231X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var231X))))
 ))
 (let (($x126 (forall ((input.ind-%var230X (_ BitVec 32)) )(let (($x58 (spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var230X)))
 (= false $x58)))
 ))
 (let (($x107 (and $x126 $x133)))
 (let (($x136 (= $x107 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x134 (concat ?x49 (concat ?x10 ?x48)))))
 (let (($x139 (= input.dst.llvm-%n ?x138)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x96)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x90)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x36 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x44 (= input.memlabel-mem--symbol.1_end ?x36)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (and $x41 $x44)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x99 $x6)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (and $x43 $x131)))
 (let (($x51 (not $x17)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x14 $x16)))
 (let (($x91 (and (not $x34) $x51)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x81 $x88)))
 (let (($x100 (not $x98)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x53 $x32)))
 (let (($x63 (and (not $x24) $x100)))
 (let (($x47 (and (and (and (and (and (and $x63 $x91) $x73) $x52) $x84) $x33) $x60)))
 (let (($x75 (and $x47 $x57)))
 (let (($x105 (= symbol.1 dst_symbol_addr.1)))
 (let (($x50 (and $x105 $x75)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x19 (or (bvugt input.memlabel-mem--symbol.1_begin ?x61) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x19) (or $x95 $x13)))))))
 (let (($x71 (and $x42 $x50)))
 (let (($x140 (and $x71 $x139)))
 (let (($x30 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x141 (and $x30 $x140)))
 (let (($x142 (= $x141 true)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x109 $x142)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x39 $x143)))
 (let (($x125 (forall ((input.ind-%var219X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var219X)))
 (=> $x83 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var219X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var218X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var218X)))
 (= $x83 false)))
 ))
 (let (($x85 (and $x20 $x125)))
 (let (($x127 (and $x85 $x144)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x25 (and $x101 $x127)))
 (let (($x137 (=> $x25 $x136)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (forall ((input.ind-%var231X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var231X))))
 ))
 (let (($x126 (forall ((input.ind-%var230X (_ BitVec 32)) )(let (($x58 (spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var230X)))
 (= false $x58)))
 ))
 (let (($x107 (and $x126 $x133)))
 (let (($x136 (= $x107 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x134 (concat ?x49 (concat ?x10 ?x48)))))
 (let (($x139 (= input.dst.llvm-%n ?x138)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x96)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x90)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x36 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x44 (= input.memlabel-mem--symbol.1_end ?x36)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (and $x41 $x44)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x99 $x6)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (and $x43 $x131)))
 (let (($x51 (not $x17)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x14 $x16)))
 (let (($x91 (and (not $x34) $x51)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x81 $x88)))
 (let (($x100 (not $x98)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x53 $x32)))
 (let (($x63 (and (not $x24) $x100)))
 (let (($x47 (and (and (and (and (and (and $x63 $x91) $x73) $x52) $x84) $x33) $x60)))
 (let (($x75 (and $x47 $x57)))
 (let (($x105 (= symbol.1 dst_symbol_addr.1)))
 (let (($x50 (and $x105 $x75)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x19 (or (bvugt input.memlabel-mem--symbol.1_begin ?x61) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x19) (or $x95 $x13)))))))
 (let (($x71 (and $x42 $x50)))
 (let (($x140 (and $x71 $x139)))
 (let (($x30 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x141 (and $x30 $x140)))
 (let (($x142 (= $x141 true)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x109 $x142)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x39 $x143)))
 (let (($x125 (forall ((input.ind-%var219X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var219X)))
 (=> $x83 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var219X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var218X (_ BitVec 32)) )(let (($x83 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var218X)))
 (= $x83 false)))
 ))
 (let (($x85 (and $x20 $x125)))
 (let (($x127 (and $x85 $x144)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x25 (and $x101 $x127)))
 (let (($x137 (=> $x25 $x136)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var230X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x10000200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf1179be4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf1179be7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1000038f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf1179be4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x10000200)
  (define-fun symbol.1 () (_ BitVec 32)
    #x10000200)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04000400)
  (define-fun input.ind-%var230X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x60001000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04000403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x6000118f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04000400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x60001000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x60001000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x173 (forall ((input.ind-%var273X (_ BitVec 32)) )(let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x164 (concat ?x163 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32)))))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x135 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var273X)))
 (let (($x22 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var273X)))
 (=> $x22 (= ?x135 (concat ?x169 (concat ?x166 ?x164)))))))))))
 ))
 (let (($x65 (forall ((input.ind-%var272X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var272X)))
 (= $x22 (and (bvule (_ bv0 32) input.ind-%var272X) (bvult input.ind-%var272X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x65 $x173)))
 (let (($x175 (= $x174 true)))
 (let ((?x140 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x126 (concat ?x25 (concat ?x142 ?x140)))))
 (let (($x79 (= input.dst.llvm-%n ?x123)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x8)))
 (let ((?x50 (bvand symbol.1 (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x50)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x106 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x90 (= input.memlabel-mem--symbol.1_end ?x106)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x60 (and $x86 $x90)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x102 $x60)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x41 (and $x64 $x99)))
 (let (($x68 (not $x41)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (and $x104 $x130)))
 (let (($x44 (and (not $x52) $x68)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x131 $x17)))
 (let (($x91 (not $x51)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x34 $x87)))
 (let (($x73 (and (not $x43) $x91)))
 (let (($x10 (and (and (and (and (and (and $x73 $x44) $x6) $x97) $x47) $x75) $x71)))
 (let (($x48 (and $x10 $x67)))
 (let (($x16 (= symbol.1 dst_symbol_addr.1)))
 (let (($x38 (and $x16 $x48)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x28) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x76) (or $x24 $x54)))))))
 (let (($x80 (and $x14 $x38)))
 (let (($x55 (and $x80 $x79)))
 (let (($x19 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (and $x19 $x55)))
 (let (($x107 (= $x133 true)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x112 $x107)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x78 $x136)))
 (let (($x46 (forall ((input.ind-%var261X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var261X)))
 (=> $x89 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var261X) (_ bv0 32)))))
 ))
 (let (($x35 (forall ((input.ind-%var260X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var260X)))
 (= $x89 false)))
 ))
 (let (($x82 (and $x35 $x46)))
 (let (($x117 (and $x82 $x137)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x124 $x117)))
 (let (($x176 (=> $x18 $x175)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x173 (forall ((input.ind-%var273X (_ BitVec 32)) )(let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x164 (concat ?x163 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32)))))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x135 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var273X)))
 (let (($x22 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var273X)))
 (=> $x22 (= ?x135 (concat ?x169 (concat ?x166 ?x164)))))))))))
 ))
 (let (($x65 (forall ((input.ind-%var272X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var272X)))
 (= $x22 (and (bvule (_ bv0 32) input.ind-%var272X) (bvult input.ind-%var272X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x65 $x173)))
 (let (($x175 (= $x174 true)))
 (let ((?x140 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x126 (concat ?x25 (concat ?x142 ?x140)))))
 (let (($x79 (= input.dst.llvm-%n ?x123)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x8)))
 (let ((?x50 (bvand symbol.1 (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x50)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x106 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x90 (= input.memlabel-mem--symbol.1_end ?x106)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x60 (and $x86 $x90)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x102 $x60)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x41 (and $x64 $x99)))
 (let (($x68 (not $x41)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (and $x104 $x130)))
 (let (($x44 (and (not $x52) $x68)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x131 $x17)))
 (let (($x91 (not $x51)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x34 $x87)))
 (let (($x73 (and (not $x43) $x91)))
 (let (($x10 (and (and (and (and (and (and $x73 $x44) $x6) $x97) $x47) $x75) $x71)))
 (let (($x48 (and $x10 $x67)))
 (let (($x16 (= symbol.1 dst_symbol_addr.1)))
 (let (($x38 (and $x16 $x48)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x28) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x76) (or $x24 $x54)))))))
 (let (($x80 (and $x14 $x38)))
 (let (($x55 (and $x80 $x79)))
 (let (($x19 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (and $x19 $x55)))
 (let (($x107 (= $x133 true)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x112 $x107)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x78 $x136)))
 (let (($x46 (forall ((input.ind-%var261X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var261X)))
 (=> $x89 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var261X) (_ bv0 32)))))
 ))
 (let (($x35 (forall ((input.ind-%var260X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var260X)))
 (= $x89 false)))
 ))
 (let (($x82 (and $x35 $x46)))
 (let (($x117 (and $x82 $x137)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x124 $x117)))
 (let (($x176 (=> $x18 $x175)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var273X!1 () (_ BitVec 32)
    #x00000062)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.ind-%var272X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfff7ff0c)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfff7ff0f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfff7ff0c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfff7ff0c) #x01
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var273X!1 () (_ BitVec 32)
    #x20000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x148 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x26 (concat ?x72 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32)))))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x154 (concat ?x110 ?x26)))))))))
 ))
 (let (($x172 (forall ((input.ind-%var312X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var312X) (bvult input.ind-%var312X (_ bv0 32)))))
 ))
 (let (($x149 (and $x172 $x148)))
 (let (($x147 (= $x149 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x93 (concat ?x18 (concat ?x107 ?x55)))))
 (let (($x108 (= input.dst.llvm-%n ?x77)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x138)))
 (let ((?x38 (bvand symbol.1 (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x38)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x9 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x50 (= input.memlabel-mem--symbol.1_end ?x9)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (and $x57 $x50)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x96 $x71)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (and $x118 $x102)))
 (let (($x33 (not $x86)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (and $x62 $x84)))
 (let (($x90 (and (not $x97) $x33)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x99 $x41)))
 (let (($x44 (not $x68)))
 (let (($x36 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x52 $x36)))
 (let (($x6 (and (not $x64) $x44)))
 (let (($x142 (and (and (and (and (and (and $x6 $x90) $x60) $x49) $x10) $x48) $x80)))
 (let (($x140 (and $x142 $x31)))
 (let (($x130 (= symbol.1 dst_symbol_addr.1)))
 (let (($x143 (and $x130 $x140)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x100) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x43 $x66)))))))
 (let (($x58 (and $x104 $x143)))
 (let (($x65 (and $x58 $x108)))
 (let (($x76 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (and $x76 $x65)))
 (let (($x132 (= $x135 true)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x12 $x132)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x40 $x159)))
 (let (($x13 (forall ((input.ind-%var303X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var303X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var303X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var302X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var302X)))
 (= $x111 false)))
 ))
 (let (($x11 (and $x5 $x13)))
 (let (($x168 (and $x11 $x160)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x94 $x168)))
 (let (($x150 (=> $x169 $x147)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x148 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x26 (concat ?x72 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32)))))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x154 (concat ?x110 ?x26)))))))))
 ))
 (let (($x172 (forall ((input.ind-%var312X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var312X) (bvult input.ind-%var312X (_ bv0 32)))))
 ))
 (let (($x149 (and $x172 $x148)))
 (let (($x147 (= $x149 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x93 (concat ?x18 (concat ?x107 ?x55)))))
 (let (($x108 (= input.dst.llvm-%n ?x77)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x138)))
 (let ((?x38 (bvand symbol.1 (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x38)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x9 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x50 (= input.memlabel-mem--symbol.1_end ?x9)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (and $x57 $x50)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x96 $x71)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (and $x118 $x102)))
 (let (($x33 (not $x86)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (and $x62 $x84)))
 (let (($x90 (and (not $x97) $x33)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x99 $x41)))
 (let (($x44 (not $x68)))
 (let (($x36 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x52 $x36)))
 (let (($x6 (and (not $x64) $x44)))
 (let (($x142 (and (and (and (and (and (and $x6 $x90) $x60) $x49) $x10) $x48) $x80)))
 (let (($x140 (and $x142 $x31)))
 (let (($x130 (= symbol.1 dst_symbol_addr.1)))
 (let (($x143 (and $x130 $x140)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x100) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x43 $x66)))))))
 (let (($x58 (and $x104 $x143)))
 (let (($x65 (and $x58 $x108)))
 (let (($x76 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x135 (and $x76 $x65)))
 (let (($x132 (= $x135 true)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x12 $x132)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x40 $x159)))
 (let (($x13 (forall ((input.ind-%var303X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var303X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var303X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var302X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var302X)))
 (= $x111 false)))
 ))
 (let (($x11 (and $x5 $x13)))
 (let (($x168 (and $x11 $x160)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x94 $x168)))
 (let (($x150 (=> $x169 $x147)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x162 (forall ((input.ind-%var333X (_ BitVec 32)) )(let ((?x121 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x85 (concat ?x121 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32)))))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x92 (concat ?x122 ?x85)))))))))
 ))
 (let (($x147 (forall ((input.ind-%var332X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var332X) (bvult input.ind-%var332X input.dst.llvm-%n))))
 ))
 (let (($x163 (and $x147 $x162)))
 (let (($x161 (= $x163 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x171 (concat ?x167 (concat ?x159 ?x135)))))
 (let (($x175 (= input.dst.llvm-%n ?x172)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x119)))
 (let ((?x58 (bvand symbol.1 (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x58)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x38 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x80 (= input.memlabel-mem--symbol.1_end ?x38)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (and $x48 $x80)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x67 $x142)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (and $x96 $x57)))
 (let (($x9 (not $x75)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (and $x47 $x49)))
 (let (($x71 (and (not $x127) $x9)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x86 $x33)))
 (let (($x126 (not $x90)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x106 $x118)))
 (let (($x144 (and (not $x102) $x126)))
 (let (($x55 (and (and (and (and (and (and $x144 $x71) $x10) $x8) $x138) $x143) $x123)))
 (let (($x136 (and $x55 $x93)))
 (let (($x97 (= symbol.1 dst_symbol_addr.1)))
 (let (($x22 (and $x97 $x136)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x130 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x130) (or $x134 $x99)))))))
 (let (($x77 (and $x84 $x22)))
 (let (($x129 (and $x77 $x175)))
 (let (($x16 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (and $x16 $x129)))
 (let (($x146 (= $x125 true)))
 (let (($x95 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x95 $x146)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x100 $x154)))
 (let (($x81 (forall ((input.ind-%var323X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var323X)))
 (=> $x5 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var323X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var322X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var322X)))
 (= $x5 false)))
 ))
 (let (($x73 (and $x19 $x81)))
 (let (($x110 (and $x73 $x114)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x7 (and $x94 $x110)))
 (let (($x103 (=> $x7 $x161)))
 (not $x103)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x162 (forall ((input.ind-%var333X (_ BitVec 32)) )(let ((?x121 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x85 (concat ?x121 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32)))))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x92 (concat ?x122 ?x85)))))))))
 ))
 (let (($x147 (forall ((input.ind-%var332X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var332X) (bvult input.ind-%var332X input.dst.llvm-%n))))
 ))
 (let (($x163 (and $x147 $x162)))
 (let (($x161 (= $x163 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x171 (concat ?x167 (concat ?x159 ?x135)))))
 (let (($x175 (= input.dst.llvm-%n ?x172)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x119)))
 (let ((?x58 (bvand symbol.1 (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x58)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x38 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x80 (= input.memlabel-mem--symbol.1_end ?x38)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (and $x48 $x80)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x67 $x142)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (and $x96 $x57)))
 (let (($x9 (not $x75)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (and $x47 $x49)))
 (let (($x71 (and (not $x127) $x9)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x86 $x33)))
 (let (($x126 (not $x90)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x106 $x118)))
 (let (($x144 (and (not $x102) $x126)))
 (let (($x55 (and (and (and (and (and (and $x144 $x71) $x10) $x8) $x138) $x143) $x123)))
 (let (($x136 (and $x55 $x93)))
 (let (($x97 (= symbol.1 dst_symbol_addr.1)))
 (let (($x22 (and $x97 $x136)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x130 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x130) (or $x134 $x99)))))))
 (let (($x77 (and $x84 $x22)))
 (let (($x129 (and $x77 $x175)))
 (let (($x16 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x125 (and $x16 $x129)))
 (let (($x146 (= $x125 true)))
 (let (($x95 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x95 $x146)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x100 $x154)))
 (let (($x81 (forall ((input.ind-%var323X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var323X)))
 (=> $x5 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var323X) (_ bv0 32)))))
 ))
 (let (($x19 (forall ((input.ind-%var322X (_ BitVec 32)) )(let (($x5 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var322X)))
 (= $x5 false)))
 ))
 (let (($x73 (and $x19 $x81)))
 (let (($x110 (and $x73 $x114)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x7 (and $x94 $x110)))
 (let (($x103 (=> $x7 $x161)))
 (not $x103)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var332X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var332X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x121 (= false true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x149 (concat ?x152 (concat ?x154 ?x125)))))
 (let (($x174 (= input.dst.llvm-%n ?x147)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x170)))
 (let ((?x77 (bvand symbol.1 (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x77)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let ((?x58 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x123 (= input.memlabel-mem--symbol.1_end ?x58)))
 (let (($x143 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x55 (and $x143 $x123)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x140 $x55)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x67 $x48)))
 (let (($x38 (not $x141)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (and $x25 $x8)))
 (let (($x142 (and (not $x18) $x38)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x75 $x9)))
 (let (($x137 (not $x71)))
 (let (($x96 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x50 $x96)))
 (let (($x117 (and (not $x57) $x137)))
 (let (($x135 (and (and (and (and (and (and $x117 $x142) $x138) $x31) $x119) $x22) $x108)))
 (let (($x160 (and $x135 $x171)))
 (let (($x127 (= symbol.1 dst_symbol_addr.1)))
 (let (($x164 (and $x127 $x160)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x97 (or (bvugt input.memlabel-mem--symbol.1_begin ?x84) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x97) (or $x60 $x86)))))))
 (let (($x172 (and $x49 $x164)))
 (let (($x165 (and $x172 $x174)))
 (let (($x52 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x166 (and $x52 $x165)))
 (let (($x139 (= $x166 true)))
 (let (($x32 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x32 $x139)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x39 (and $x104 $x92)))
 (let (($x17 (forall ((input.ind-%var351X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var351X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var351X) (_ bv0 32)))))
 ))
 (let (($x54 (forall ((input.ind-%var350X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var350X)))
 (= $x19 false)))
 ))
 (let (($x62 (and $x54 $x17)))
 (let (($x122 (and $x62 $x39)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x94 $x122)))
 (let (($x176 (=> $x177 $x121)))
 (not $x176))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x121 (= false true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x149 (concat ?x152 (concat ?x154 ?x125)))))
 (let (($x174 (= input.dst.llvm-%n ?x147)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x170)))
 (let ((?x77 (bvand symbol.1 (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x77)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let ((?x58 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x123 (= input.memlabel-mem--symbol.1_end ?x58)))
 (let (($x143 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x55 (and $x143 $x123)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x140 $x55)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x141 (and $x67 $x48)))
 (let (($x38 (not $x141)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (and $x25 $x8)))
 (let (($x142 (and (not $x18) $x38)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x75 $x9)))
 (let (($x137 (not $x71)))
 (let (($x96 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x50 $x96)))
 (let (($x117 (and (not $x57) $x137)))
 (let (($x135 (and (and (and (and (and (and $x117 $x142) $x138) $x31) $x119) $x22) $x108)))
 (let (($x160 (and $x135 $x171)))
 (let (($x127 (= symbol.1 dst_symbol_addr.1)))
 (let (($x164 (and $x127 $x160)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x97 (or (bvugt input.memlabel-mem--symbol.1_begin ?x84) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x97) (or $x60 $x86)))))))
 (let (($x172 (and $x49 $x164)))
 (let (($x165 (and $x172 $x174)))
 (let (($x52 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x166 (and $x52 $x165)))
 (let (($x139 (= $x166 true)))
 (let (($x32 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x32 $x139)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x39 (and $x104 $x92)))
 (let (($x17 (forall ((input.ind-%var351X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var351X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var351X) (_ bv0 32)))))
 ))
 (let (($x54 (forall ((input.ind-%var350X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var350X)))
 (= $x19 false)))
 ))
 (let (($x62 (and $x54 $x17)))
 (let (($x122 (and $x62 $x39)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x94 $x122)))
 (let (($x176 (=> $x177 $x121)))
 (not $x176))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xab50fee7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000006f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffee0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x175)))
 (let ((?x164 (bvand symbol.1 (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x164)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x159 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x77 (= input.memlabel-mem--symbol.1_end ?x159)))
 (let (($x136 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x108 (and $x136 $x77)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x93 $x108)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (and $x167 $x140)))
 (let (($x107 (not $x143)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x31 (and $x169 $x133)))
 (let (($x123 (and (not $x31) $x107)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x48 $x141)))
 (let (($x142 (not $x38)))
 (let (($x80 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x18 $x80)))
 (let (($x138 (and (not $x67) $x142)))
 (let (($x154 (and (and (and (and (and (and $x138 $x123) $x55) $x132) $x135) $x160) $x172)))
 (let (($x125 (and $x154 $x148)))
 (let (($x8 (= symbol.1 dst_symbol_addr.1)))
 (let (($x114 (and $x8 $x125)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x99 (or (bvugt input.memlabel-mem--symbol.1_begin ?x144) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x99) (or $x57 $x10)))))))
 (let (($x151 (and $x25 $x114)))
 (let (($x150 (= $x151 true)))
 (let ((?x165 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x85 (concat ?x177 (concat ?x139 ?x165)))))
 (let (($x129 (= input.dst.llvm-%n ?x134)))
 (let (($x40 (and $x151 $x129)))
 (let (($x97 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x14 (and $x97 $x40)))
 (let (($x88 (= $x14 true)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x6 $x88)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x5 (and $x44 $x115)))
 (let (($x41 (forall ((input.ind-%var369X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var369X)))
 (=> $x76 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var369X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var368X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var368X)))
 (= $x76 false)))
 ))
 (let (($x68 (and $x16 $x41)))
 (let (($x42 (and $x68 $x5)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x95 (and $x70 $x42)))
 (let (($x73 (=> $x95 $x150)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x175)))
 (let ((?x164 (bvand symbol.1 (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x164)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x159 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x77 (= input.memlabel-mem--symbol.1_end ?x159)))
 (let (($x136 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x108 (and $x136 $x77)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x93 $x108)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (and $x167 $x140)))
 (let (($x107 (not $x143)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x31 (and $x169 $x133)))
 (let (($x123 (and (not $x31) $x107)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x48 $x141)))
 (let (($x142 (not $x38)))
 (let (($x80 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x18 $x80)))
 (let (($x138 (and (not $x67) $x142)))
 (let (($x154 (and (and (and (and (and (and $x138 $x123) $x55) $x132) $x135) $x160) $x172)))
 (let (($x125 (and $x154 $x148)))
 (let (($x8 (= symbol.1 dst_symbol_addr.1)))
 (let (($x114 (and $x8 $x125)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x99 (or (bvugt input.memlabel-mem--symbol.1_begin ?x144) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x99) (or $x57 $x10)))))))
 (let (($x151 (and $x25 $x114)))
 (let (($x150 (= $x151 true)))
 (let ((?x165 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x85 (concat ?x177 (concat ?x139 ?x165)))))
 (let (($x129 (= input.dst.llvm-%n ?x134)))
 (let (($x40 (and $x151 $x129)))
 (let (($x97 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x14 (and $x97 $x40)))
 (let (($x88 (= $x14 true)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x115 (and $x6 $x88)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x5 (and $x44 $x115)))
 (let (($x41 (forall ((input.ind-%var369X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var369X)))
 (=> $x76 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var369X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var368X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var368X)))
 (= $x76 false)))
 ))
 (let (($x68 (and $x16 $x41)))
 (let (($x42 (and $x68 $x5)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x95 (and $x70 $x42)))
 (let (($x73 (=> $x95 $x150)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x81 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x17 (= $x81 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x106 (concat ?x150 (concat ?x115 ?x14)))))
 (let (($x174 (= input.dst.llvm-%n ?x118)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x176)))
 (let ((?x151 (bvand symbol.1 (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x151)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x164 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x172 (= input.memlabel-mem--symbol.1_end ?x164)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (and $x160 $x172)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x171 $x154)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (and $x93 $x136)))
 (let (($x159 (not $x22)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x119 $x132)))
 (let (($x108 (and (not $x7) $x159)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x143 $x107)))
 (let (($x149 (not $x123)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x58 $x167)))
 (let (($x110 (and (not $x140) $x149)))
 (let (($x165 (and (and (and (and (and (and $x110 $x108) $x135) $x170) $x175) $x114) $x147)))
 (let (($x92 (and $x165 $x85)))
 (let (($x31 (= symbol.1 dst_symbol_addr.1)))
 (let (($x121 (and $x31 $x92)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x8 (or (bvugt input.memlabel-mem--symbol.1_begin ?x25) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x8) (or $x168 $x48)))))))
 (let (($x134 (and $x133 $x121)))
 (let (($x54 (and $x134 $x174)))
 (let (($x127 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x104 (and $x127 $x54)))
 (let (($x62 (= $x104 true)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (and $x64 $x62)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x74 (and $x144 $x94)))
 (let (($x33 (forall ((input.ind-%var379X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var379X)))
 (=> $x16 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var379X) (_ bv0 32)))))
 ))
 (let (($x52 (forall ((input.ind-%var378X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var378X)))
 (= $x16 false)))
 ))
 (let (($x117 (and $x52 $x33)))
 (let (($x100 (and $x117 $x74)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x91 (and $x70 $x100)))
 (let (($x32 (=> $x91 $x17)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x81 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x17 (= $x81 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x106 (concat ?x150 (concat ?x115 ?x14)))))
 (let (($x174 (= input.dst.llvm-%n ?x118)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x176)))
 (let ((?x151 (bvand symbol.1 (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x151)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x164 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x172 (= input.memlabel-mem--symbol.1_end ?x164)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (and $x160 $x172)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x171 $x154)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (and $x93 $x136)))
 (let (($x159 (not $x22)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x119 $x132)))
 (let (($x108 (and (not $x7) $x159)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x143 $x107)))
 (let (($x149 (not $x123)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x58 $x167)))
 (let (($x110 (and (not $x140) $x149)))
 (let (($x165 (and (and (and (and (and (and $x110 $x108) $x135) $x170) $x175) $x114) $x147)))
 (let (($x92 (and $x165 $x85)))
 (let (($x31 (= symbol.1 dst_symbol_addr.1)))
 (let (($x121 (and $x31 $x92)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x8 (or (bvugt input.memlabel-mem--symbol.1_begin ?x25) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x8) (or $x168 $x48)))))))
 (let (($x134 (and $x133 $x121)))
 (let (($x54 (and $x134 $x174)))
 (let (($x127 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x104 (and $x127 $x54)))
 (let (($x62 (= $x104 true)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (and $x64 $x62)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x74 (and $x144 $x94)))
 (let (($x33 (forall ((input.ind-%var379X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var379X)))
 (=> $x16 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var379X) (_ bv0 32)))))
 ))
 (let (($x52 (forall ((input.ind-%var378X (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var378X)))
 (= $x16 false)))
 ))
 (let (($x117 (and $x52 $x33)))
 (let (($x100 (and $x117 $x74)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x91 (and $x70 $x100)))
 (let (($x32 (=> $x91 $x17)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa61d4183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun symbol.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x131)))
 (let (($x66 (= ?x68 input.dst.llvm-%n)))
 (let (($x20 (= $x66 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x27 (concat ?x81 (concat ?x94 ?x104)))))
 (let (($x57 (= input.dst.llvm-%n ?x50)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x23)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x134)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x151 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x151)))
 (let (($x114 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x165 (and $x114 $x147)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x125 $x165)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x146 (and $x171 $x160)))
 (let (($x164 (not $x146)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (and $x152 $x170)))
 (let (($x154 (and (not $x177) $x164)))
 (let (($x159 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x22 $x159)))
 (let (($x39 (not $x108)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x77 $x93)))
 (let (($x122 (and (not $x136) $x39)))
 (let (($x14 (and (and (and (and (and (and $x122 $x154) $x175) $x148) $x176) $x121) $x129)))
 (let (($x5 (and $x14 $x106)))
 (let (($x7 (= symbol.1 dst_symbol_addr.1)))
 (let (($x73 (and $x7 $x5)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x31 (or (bvugt input.memlabel-mem--symbol.1_begin ?x133) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x31) (or $x55 $x143)))))))
 (let (($x118 (and $x132 $x73)))
 (let (($x40 (and $x118 $x57)))
 (let (($x18 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x51 (and $x18 $x40)))
 (let (($x84 (= $x51 true)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x47 (and $x102 $x84)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x25 $x47)))
 (let (($x9 (forall ((input.ind-%var397X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var397X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var397X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var396X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var396X)))
 (= $x52 false)))
 ))
 (let (($x169 (and $x86 $x9)))
 (let (($x76 (and $x169 $x19)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x70 $x76)))
 (let (($x113 (=> $x24 $x20)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x131)))
 (let (($x66 (= ?x68 input.dst.llvm-%n)))
 (let (($x20 (= $x66 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x27 (concat ?x81 (concat ?x94 ?x104)))))
 (let (($x57 (= input.dst.llvm-%n ?x50)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x23)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x134)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x151 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x151)))
 (let (($x114 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x165 (and $x114 $x147)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x125 $x165)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x146 (and $x171 $x160)))
 (let (($x164 (not $x146)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (and $x152 $x170)))
 (let (($x154 (and (not $x177) $x164)))
 (let (($x159 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x22 $x159)))
 (let (($x39 (not $x108)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x77 $x93)))
 (let (($x122 (and (not $x136) $x39)))
 (let (($x14 (and (and (and (and (and (and $x122 $x154) $x175) $x148) $x176) $x121) $x129)))
 (let (($x5 (and $x14 $x106)))
 (let (($x7 (= symbol.1 dst_symbol_addr.1)))
 (let (($x73 (and $x7 $x5)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x31 (or (bvugt input.memlabel-mem--symbol.1_begin ?x133) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x31) (or $x55 $x143)))))))
 (let (($x118 (and $x132 $x73)))
 (let (($x40 (and $x118 $x57)))
 (let (($x18 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x51 (and $x18 $x40)))
 (let (($x84 (= $x51 true)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x47 (and $x102 $x84)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x25 $x47)))
 (let (($x9 (forall ((input.ind-%var397X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var397X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var397X) (_ bv0 32)))))
 ))
 (let (($x86 (forall ((input.ind-%var396X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var396X)))
 (= $x52 false)))
 ))
 (let (($x169 (and $x86 $x9)))
 (let (($x76 (and $x169 $x19)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x70 $x76)))
 (let (($x113 (=> $x24 $x20)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x16 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x87 (= $x16 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x66 (concat ?x6 (concat ?x47 ?x51)))))
 (let (($x113 (= input.dst.llvm-%n ?x20)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x32)))
 (let ((?x118 (bvand symbol.1 (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x118)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let ((?x134 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x129 (= input.memlabel-mem--symbol.1_end ?x134)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x121 $x129)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x92 $x14)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x125 $x114)))
 (let (($x151 (not $x139)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x150 (and $x166 $x148)))
 (let (($x165 (and (not $x150) $x151)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x146 $x164)))
 (let (($x42 (not $x154)))
 (let (($x171 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x172 $x171)))
 (let (($x95 (and (not $x160) $x42)))
 (let (($x104 (and (and (and (and (and (and $x95 $x165) $x176) $x85) $x23) $x73) $x174)))
 (let (($x74 (and $x104 $x27)))
 (let (($x177 (= symbol.1 dst_symbol_addr.1)))
 (let (($x17 (and $x177 $x74)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x132) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x135 $x22)))))))
 (let (($x50 (and $x170 $x17)))
 (let (($x101 (and $x50 $x113)))
 (let (($x58 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x80 (and $x58 $x101)))
 (let (($x168 (= $x80 true)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (and $x10 $x168)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x44 (and $x133 $x54)))
 (let (($x38 (forall ((input.ind-%var407X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var407X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var407X) (_ bv0 32)))))
 ))
 (let (($x75 (forall ((input.ind-%var406X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var406X)))
 (= $x86 false)))
 ))
 (let (($x119 (and $x75 $x38)))
 (let (($x49 (and $x119 $x44)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x90 (and $x70 $x49)))
 (let (($x64 (=> $x90 $x87)))
 (not $x64)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x16 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x87 (= $x16 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x66 (concat ?x6 (concat ?x47 ?x51)))))
 (let (($x113 (= input.dst.llvm-%n ?x20)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x32)))
 (let ((?x118 (bvand symbol.1 (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x118)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let ((?x134 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x129 (= input.memlabel-mem--symbol.1_end ?x134)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x121 $x129)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x92 $x14)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x125 $x114)))
 (let (($x151 (not $x139)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x150 (and $x166 $x148)))
 (let (($x165 (and (not $x150) $x151)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x146 $x164)))
 (let (($x42 (not $x154)))
 (let (($x171 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x172 $x171)))
 (let (($x95 (and (not $x160) $x42)))
 (let (($x104 (and (and (and (and (and (and $x95 $x165) $x176) $x85) $x23) $x73) $x174)))
 (let (($x74 (and $x104 $x27)))
 (let (($x177 (= symbol.1 dst_symbol_addr.1)))
 (let (($x17 (and $x177 $x74)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x132) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x135 $x22)))))))
 (let (($x50 (and $x170 $x17)))
 (let (($x101 (and $x50 $x113)))
 (let (($x58 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x80 (and $x58 $x101)))
 (let (($x168 (= $x80 true)))
 (let (($x10 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x54 (and $x10 $x168)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x44 (and $x133 $x54)))
 (let (($x38 (forall ((input.ind-%var407X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var407X)))
 (=> $x86 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var407X) (_ bv0 32)))))
 ))
 (let (($x75 (forall ((input.ind-%var406X (_ BitVec 32)) )(let (($x86 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var406X)))
 (= $x86 false)))
 ))
 (let (($x119 (and $x75 $x38)))
 (let (($x49 (and $x119 $x44)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x90 (and $x70 $x49)))
 (let (($x64 (=> $x90 $x87)))
 (not $x64)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffff7fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffff7ff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffff7fc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x33 (= $x102 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x64 (concat ?x98 (concat ?x54 ?x80)))))
 (let (($x167 (= input.dst.llvm-%n ?x41)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x68)))
 (let ((?x50 (bvand symbol.1 (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x50)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x118 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x174 (= input.memlabel-mem--symbol.1_end ?x118)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x73 $x174)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x5 $x104)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x92 $x121)))
 (let (($x134 (not $x115)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (and $x88 $x85)))
 (let (($x14 (and (not $x81) $x134)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x139 $x151)))
 (let (($x100 (not $x165)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x147 $x125)))
 (let (($x91 (and (not $x114) $x100)))
 (let (($x51 (and (and (and (and (and (and $x91 $x14) $x23) $x106) $x32) $x17) $x57)))
 (let (($x19 (and $x51 $x66)))
 (let (($x150 (= symbol.1 dst_symbol_addr.1)))
 (let (($x131 (and $x150 $x19)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x177 (or (bvugt input.memlabel-mem--symbol.1_begin ?x170) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x177) (or $x175 $x146)))))))
 (let (($x20 (and $x148 $x131)))
 (let (($x55 (and $x20 $x167)))
 (let (($x77 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (and $x77 $x55)))
 (let (($x144 (= $x40 true)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and $x48 $x144)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x132 $x60)))
 (let (($x123 (forall ((input.ind-%var425X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var425X)))
 (=> $x75 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var425X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var424X)))
 (= $x75 false)))
 ))
 (let (($x152 (and $x141 $x123)))
 (let (($x130 (and $x152 $x71)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x52 (and $x70 $x130)))
 (let (($x169 (=> $x52 $x33)))
 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x33 (= $x102 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x64 (concat ?x98 (concat ?x54 ?x80)))))
 (let (($x167 (= input.dst.llvm-%n ?x41)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x68)))
 (let ((?x50 (bvand symbol.1 (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x50)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x118 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x174 (= input.memlabel-mem--symbol.1_end ?x118)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x73 $x174)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x5 $x104)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x92 $x121)))
 (let (($x134 (not $x115)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (and $x88 $x85)))
 (let (($x14 (and (not $x81) $x134)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x139 $x151)))
 (let (($x100 (not $x165)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x147 $x125)))
 (let (($x91 (and (not $x114) $x100)))
 (let (($x51 (and (and (and (and (and (and $x91 $x14) $x23) $x106) $x32) $x17) $x57)))
 (let (($x19 (and $x51 $x66)))
 (let (($x150 (= symbol.1 dst_symbol_addr.1)))
 (let (($x131 (and $x150 $x19)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x177 (or (bvugt input.memlabel-mem--symbol.1_begin ?x170) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x177) (or $x175 $x146)))))))
 (let (($x20 (and $x148 $x131)))
 (let (($x55 (and $x20 $x167)))
 (let (($x77 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (and $x77 $x55)))
 (let (($x144 (= $x40 true)))
 (let (($x48 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (and $x48 $x144)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x132 $x60)))
 (let (($x123 (forall ((input.ind-%var425X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var425X)))
 (=> $x75 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var425X) (_ bv0 32)))))
 ))
 (let (($x141 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var424X)))
 (= $x75 false)))
 ))
 (let (($x152 (and $x141 $x123)))
 (let (($x130 (and $x152 $x71)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x52 (and $x70 $x130)))
 (let (($x169 (=> $x52 $x33)))
 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x9ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x9ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x9ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x10 (= $x137 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x169 (concat ?x126 (concat ?x60 ?x40)))))
 (let (($x93 (= input.dst.llvm-%n ?x8)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x87)))
 (let ((?x20 (bvand symbol.1 (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x20)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x50 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x57 (= input.memlabel-mem--symbol.1_end ?x50)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (and $x17 $x57)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x74 $x51)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x94 (and $x5 $x73)))
 (let (($x118 (not $x94)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x6 (and $x62 $x106)))
 (let (($x104 (and (not $x6) $x118)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x115 $x134)))
 (let (($x76 (not $x14)))
 (let (($x92 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x129 $x92)))
 (let (($x24 (and (not $x121) $x76)))
 (let (($x80 (and (and (and (and (and (and $x24 $x104) $x32) $x27) $x68) $x131) $x113)))
 (let (($x44 (and $x80 $x64)))
 (let (($x81 (= symbol.1 dst_symbol_addr.1)))
 (let (($x16 (and $x81 $x44)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x150 (or (bvugt input.memlabel-mem--symbol.1_begin ?x148) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x150) (or $x176 $x139)))))))
 (let (($x41 (and $x85 $x16)))
 (let (($x135 (and $x41 $x93)))
 (let (($x172 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x101 (and $x172 $x135)))
 (let (($x25 (= $x101 true)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x143 $x25)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x142 (and $x170 $x96)))
 (let (($x108 (forall ((input.ind-%var443X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var443X)))
 (=> $x141 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var443X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var442X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var442X)))
 (= $x141 false)))
 ))
 (let (($x166 (and $x107 $x108)))
 (let (($x97 (and $x166 $x142)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x70 $x97)))
 (let (($x9 (=> $x86 $x10)))
 (not $x9)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x10 (= $x137 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x169 (concat ?x126 (concat ?x60 ?x40)))))
 (let (($x93 (= input.dst.llvm-%n ?x8)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x87)))
 (let ((?x20 (bvand symbol.1 (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x20)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x50 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x57 (= input.memlabel-mem--symbol.1_end ?x50)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (and $x17 $x57)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x74 $x51)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x94 (and $x5 $x73)))
 (let (($x118 (not $x94)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x6 (and $x62 $x106)))
 (let (($x104 (and (not $x6) $x118)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x115 $x134)))
 (let (($x76 (not $x14)))
 (let (($x92 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x129 $x92)))
 (let (($x24 (and (not $x121) $x76)))
 (let (($x80 (and (and (and (and (and (and $x24 $x104) $x32) $x27) $x68) $x131) $x113)))
 (let (($x44 (and $x80 $x64)))
 (let (($x81 (= symbol.1 dst_symbol_addr.1)))
 (let (($x16 (and $x81 $x44)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x148 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x150 (or (bvugt input.memlabel-mem--symbol.1_begin ?x148) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x150) (or $x176 $x139)))))))
 (let (($x41 (and $x85 $x16)))
 (let (($x135 (and $x41 $x93)))
 (let (($x172 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x101 (and $x172 $x135)))
 (let (($x25 (= $x101 true)))
 (let (($x143 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x143 $x25)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x142 (and $x170 $x96)))
 (let (($x108 (forall ((input.ind-%var443X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var443X)))
 (=> $x141 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var443X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var442X (_ BitVec 32)) )(let (($x141 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var442X)))
 (= $x141 false)))
 ))
 (let (($x166 (and $x107 $x108)))
 (let (($x97 (and $x166 $x142)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x70 $x97)))
 (let (($x9 (=> $x86 $x10)))
 (not $x9)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (forall ((input.ind-%var463X (_ BitVec 32)) )(let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x83 (concat ?x30 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32)))))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x59 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var463X)))
 (let (($x152 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var463X)))
 (=> $x152 (= ?x59 (concat ?x112 (concat ?x26 ?x83)))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var462X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var462X)))
 (= $x152 (and (bvule (_ bv0 32) input.ind-%var462X) (bvult input.ind-%var462X input.dst.llvm-%n)))))
 ))
 (let (($x69 (and $x153 $x120)))
 (let (($x157 (= $x69 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x119 (concat ?x137 (concat ?x96 ?x101)))))
 (let (($x175 (= input.dst.llvm-%n ?x171)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x33)))
 (let ((?x41 (bvand symbol.1 (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x41)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x20 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x113 (= input.memlabel-mem--symbol.1_end ?x20)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (and $x131 $x113)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x19 $x80)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x74 $x17)))
 (let (($x50 (not $x47)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x98 (and $x84 $x27)))
 (let (($x51 (and (not $x98) $x50)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x94 $x118)))
 (let (($x49 (not $x104)))
 (let (($x5 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x174 $x5)))
 (let (($x90 (and (not $x73) $x49)))
 (let (($x40 (and (and (and (and (and (and $x90 $x51) $x68) $x66) $x87) $x16) $x167)))
 (let (($x71 (and $x40 $x169)))
 (let (($x6 (= symbol.1 dst_symbol_addr.1)))
 (let (($x102 (and $x6 $x71)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x81 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x81) (or $x23 $x115)))))))
 (let (($x8 (and $x106 $x102)))
 (let (($x55 (and $x8 $x175)))
 (let (($x147 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (and $x147 $x55)))
 (let (($x67 (= $x133 true)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x22 $x67)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x127 (and $x148 $x149)))
 (let (($x154 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var453X)))
 (=> $x107 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var453X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var452X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var452X)))
 (= $x107 false)))
 ))
 (let (($x88 (and $x159 $x154)))
 (let (($x75 (and $x88 $x127)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x138 (and $x70 $x75)))
 (let (($x29 (=> $x138 $x157)))
 (not $x29)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (forall ((input.ind-%var463X (_ BitVec 32)) )(let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x83 (concat ?x30 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32)))))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x59 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var463X)))
 (let (($x152 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var463X)))
 (=> $x152 (= ?x59 (concat ?x112 (concat ?x26 ?x83)))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var462X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var462X)))
 (= $x152 (and (bvule (_ bv0 32) input.ind-%var462X) (bvult input.ind-%var462X input.dst.llvm-%n)))))
 ))
 (let (($x69 (and $x153 $x120)))
 (let (($x157 (= $x69 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x119 (concat ?x137 (concat ?x96 ?x101)))))
 (let (($x175 (= input.dst.llvm-%n ?x171)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x33)))
 (let ((?x41 (bvand symbol.1 (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x41)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x20 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x113 (= input.memlabel-mem--symbol.1_end ?x20)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (and $x131 $x113)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x19 $x80)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x74 $x17)))
 (let (($x50 (not $x47)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x98 (and $x84 $x27)))
 (let (($x51 (and (not $x98) $x50)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x94 $x118)))
 (let (($x49 (not $x104)))
 (let (($x5 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x174 $x5)))
 (let (($x90 (and (not $x73) $x49)))
 (let (($x40 (and (and (and (and (and (and $x90 $x51) $x68) $x66) $x87) $x16) $x167)))
 (let (($x71 (and $x40 $x169)))
 (let (($x6 (= symbol.1 dst_symbol_addr.1)))
 (let (($x102 (and $x6 $x71)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x81 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x81) (or $x23 $x115)))))))
 (let (($x8 (and $x106 $x102)))
 (let (($x55 (and $x8 $x175)))
 (let (($x147 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (and $x147 $x55)))
 (let (($x67 (= $x133 true)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x22 $x67)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x127 (and $x148 $x149)))
 (let (($x154 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var453X)))
 (=> $x107 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var453X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var452X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var452X)))
 (= $x107 false)))
 ))
 (let (($x88 (and $x159 $x154)))
 (let (($x75 (and $x88 $x127)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x138 (and $x70 $x75)))
 (let (($x29 (=> $x138 $x157)))
 (not $x29)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var463X!1 () (_ BitVec 32)
    #x20000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var462X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfff7ff0c)
  (define-fun input.ind-%var463X!1 () (_ BitVec 32)
    #x00000062)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfff7ff0f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfff7ff0c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfff7ff0c) #x01
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (= false true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x103 (concat ?x152 (concat ?x149 ?x133)))))
 (let (($x153 (= input.dst.llvm-%n ?x116)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x9)))
 (let ((?x8 (bvand symbol.1 (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x8)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x167 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x16 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (and $x16 $x167)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x44 $x40)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x19 $x131)))
 (let (($x20 (not $x54)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x126 (and $x168 $x66)))
 (let (($x80 (and (not $x126) $x20)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x47 $x50)))
 (let (($x130 (not $x51)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x57 $x74)))
 (let (($x52 (and (not $x17) $x130)))
 (let (($x101 (and (and (and (and (and (and $x52 $x80) $x87) $x64) $x33) $x102) $x93)))
 (let (($x142 (and $x101 $x119)))
 (let (($x98 (= symbol.1 dst_symbol_addr.1)))
 (let (($x10 (and $x98 $x142)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x106) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x32 $x94)))))))
 (let (($x171 (and $x27 $x10)))
 (let (($x59 (and $x171 $x153)))
 (let (($x129 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x63 (and $x129 $x59)))
 (let (($x15 (= $x63 true)))
 (let (($x146 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x35 (and $x146 $x15)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x155 (and $x85 $x35)))
 (let (($x165 (forall ((input.ind-%var489X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var489X)))
 (=> $x159 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var489X) (_ bv0 32)))))
 ))
 (let (($x164 (forall ((input.ind-%var488X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var488X)))
 (= $x159 false)))
 ))
 (let (($x62 (and $x164 $x165)))
 (let (($x112 (and $x62 $x155)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x46 (and $x70 $x112)))
 (let (($x79 (=> $x46 $x26)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (= false true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x103 (concat ?x152 (concat ?x149 ?x133)))))
 (let (($x153 (= input.dst.llvm-%n ?x116)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x9)))
 (let ((?x8 (bvand symbol.1 (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x8)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x167 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x16 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (and $x16 $x167)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x44 $x40)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x19 $x131)))
 (let (($x20 (not $x54)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x126 (and $x168 $x66)))
 (let (($x80 (and (not $x126) $x20)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x47 $x50)))
 (let (($x130 (not $x51)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x57 $x74)))
 (let (($x52 (and (not $x17) $x130)))
 (let (($x101 (and (and (and (and (and (and $x52 $x80) $x87) $x64) $x33) $x102) $x93)))
 (let (($x142 (and $x101 $x119)))
 (let (($x98 (= symbol.1 dst_symbol_addr.1)))
 (let (($x10 (and $x98 $x142)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x106) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x32 $x94)))))))
 (let (($x171 (and $x27 $x10)))
 (let (($x59 (and $x171 $x153)))
 (let (($x129 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x63 (and $x129 $x59)))
 (let (($x15 (= $x63 true)))
 (let (($x146 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x35 (and $x146 $x15)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x155 (and $x85 $x35)))
 (let (($x165 (forall ((input.ind-%var489X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var489X)))
 (=> $x159 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var489X) (_ bv0 32)))))
 ))
 (let (($x164 (forall ((input.ind-%var488X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var488X)))
 (= $x159 false)))
 ))
 (let (($x62 (and $x164 $x165)))
 (let (($x112 (and $x62 $x155)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x46 (and $x70 $x112)))
 (let (($x79 (=> $x46 $x26)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xab50fee7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000006f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffee0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x153 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x153 false)))
 (let (($x18 (= $x39 true)))
 (let (($x176 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x135 (= $x176 true)))
 (let ((?x157 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x157)))
 (let (($x158 (= ?x29 input.dst.llvm-%n)))
 (let (($x13 (= $x158 true)))
 (let (($x156 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x56 (= $x156 true)))
 (let (($x83 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x83 true)))
 (let (($x88 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x88 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x122 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x15 (bvadd symbol.1 ?x63)))
 (let (($x55 (and (bvule input.memlabel-mem--symbol.1_begin ?x15) (bvule (bvadd ?x15 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x58 (=> (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32))) (or false (or false $x55)))))
 (let (($x155 (=> (and $x153 (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x55)))))
 (let (($x112 (= $x155 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x10)))
 (let ((?x119 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x119)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x71 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x102 (= input.memlabel-mem--symbol.1_end ?x71)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x96 (and $x25 $x102)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x33 $x96)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x137 (and $x144 $x64)))
 (let (($x44 (not $x137)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (and $x97 $x87)))
 (let (($x60 (and (not $x86) $x44)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x113 $x19)))
 (let (($x54 (not $x131)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x168 $x66)))
 (let (($x80 (and (not $x126) $x54)))
 (let (($x152 (and (and (and (and (and (and $x80 $x60) $x41) $x40) $x8) $x9) $x142)))
 (let (($x67 (and $x152 $x171)))
 (let (($x52 (= symbol.1 dst_symbol_addr.1)))
 (let (($x149 (and $x52 $x67)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x27 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x27) (or $x57 $x74)))))))
 (let (($x133 (and $x130 $x149)))
 (let (($x127 (= $x133 true)))
 (let (($x107 (and $x127 $x112)))
 (let (($x34 (and $x107 $x22)))
 (let (($x78 (and $x34 $x150)))
 (let (($x37 (and $x78 $x145)))
 (let (($x120 (and $x37 $x56)))
 (let (($x125 (and $x120 $x13)))
 (let (($x132 (and $x125 $x135)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and $x24 $x132)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x76 $x140)))
 (let (($x134 (forall ((input.ind-%var507X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var507X)))
 (=> $x159 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var507X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var506X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var506X)))
 (= $x159 false)))
 ))
 (let (($x14 (and $x147 $x134)))
 (let (($x28 (and $x14 $x7)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x108 (and $x124 $x28)))
 (let (($x141 (=> $x108 $x18)))
 (not $x141))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x153 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x153 false)))
 (let (($x18 (= $x39 true)))
 (let (($x176 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x135 (= $x176 true)))
 (let ((?x157 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x157)))
 (let (($x158 (= ?x29 input.dst.llvm-%n)))
 (let (($x13 (= $x158 true)))
 (let (($x156 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x56 (= $x156 true)))
 (let (($x83 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x83 true)))
 (let (($x88 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x88 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x122 true)))
 (let ((?x63 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x15 (bvadd symbol.1 ?x63)))
 (let (($x55 (and (bvule input.memlabel-mem--symbol.1_begin ?x15) (bvule (bvadd ?x15 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x58 (=> (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32))) (or false (or false $x55)))))
 (let (($x155 (=> (and $x153 (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x55)))))
 (let (($x112 (= $x155 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x10)))
 (let ((?x119 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x119)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x71 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x102 (= input.memlabel-mem--symbol.1_end ?x71)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x96 (and $x25 $x102)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x33 $x96)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x137 (and $x144 $x64)))
 (let (($x44 (not $x137)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (and $x97 $x87)))
 (let (($x60 (and (not $x86) $x44)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x113 $x19)))
 (let (($x54 (not $x131)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x168 $x66)))
 (let (($x80 (and (not $x126) $x54)))
 (let (($x152 (and (and (and (and (and (and $x80 $x60) $x41) $x40) $x8) $x9) $x142)))
 (let (($x67 (and $x152 $x171)))
 (let (($x52 (= symbol.1 dst_symbol_addr.1)))
 (let (($x149 (and $x52 $x67)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x27 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x27) (or $x57 $x74)))))))
 (let (($x133 (and $x130 $x149)))
 (let (($x127 (= $x133 true)))
 (let (($x107 (and $x127 $x112)))
 (let (($x34 (and $x107 $x22)))
 (let (($x78 (and $x34 $x150)))
 (let (($x37 (and $x78 $x145)))
 (let (($x120 (and $x37 $x56)))
 (let (($x125 (and $x120 $x13)))
 (let (($x132 (and $x125 $x135)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and $x24 $x132)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x76 $x140)))
 (let (($x134 (forall ((input.ind-%var507X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var507X)))
 (=> $x159 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var507X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var506X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var506X)))
 (= $x159 false)))
 ))
 (let (($x14 (and $x147 $x134)))
 (let (($x28 (and $x14 $x7)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x108 (and $x124 $x28)))
 (let (($x141 (=> $x108 $x18)))
 (not $x141))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x08f3be78)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00008003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x08f3c007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00008000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x08f3be78)
  (define-fun symbol.1 () (_ BitVec 32)
    #x08f3be78)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x153)))
 (let ((?x161 (bvand symbol.1 (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x161)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let ((?x152 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x10 (= input.memlabel-mem--symbol.1_end ?x152)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x171 (and $x119 $x10)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x138 $x171)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x102 (and $x169 $x71)))
 (let (($x96 (not $x102)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x103 $x33)))
 (let (($x75 (and (not $x25) $x96)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x60 $x175)))
 (let (($x163 (not $x41)))
 (let (($x137 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x64 $x137)))
 (let (($x40 (and (not $x44) $x163)))
 (let (($x79 (and (and (and (and (and (and $x40 $x75) $x93) $x9) $x67) $x127) $x116)))
 (let (($x30 (and $x79 $x59)))
 (let (($x144 (= symbol.1 dst_symbol_addr.1)))
 (let (($x23 (and $x144 $x30)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x5) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x19 $x131)))))))
 (let (($x55 (and $x16 $x23)))
 (let (($x158 (= $x55 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x78 (concat ?x34 (concat ?x112 ?x58)))))
 (let (($x145 (= input.dst.llvm-%n ?x83)))
 (let (($x37 (and $x55 $x145)))
 (let (($x57 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x156 (and $x57 $x37)))
 (let (($x56 (= $x156 true)))
 (let (($x121 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and $x121 $x56)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x69 (and $x118 $x120)))
 (let (($x94 (forall ((input.ind-%var525X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var525X)))
 (=> $x147 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var525X) (_ bv0 32)))))
 ))
 (let (($x129 (forall ((input.ind-%var524X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var524X)))
 (= $x147 false)))
 ))
 (let (($x104 (and $x129 $x94)))
 (let (($x157 (and $x104 $x69)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x124 $x157)))
 (let (($x13 (=> $x29 $x158)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x153)))
 (let ((?x161 (bvand symbol.1 (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x161)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let ((?x152 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x10 (= input.memlabel-mem--symbol.1_end ?x152)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x171 (and $x119 $x10)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x138 $x171)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x102 (and $x169 $x71)))
 (let (($x96 (not $x102)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x103 $x33)))
 (let (($x75 (and (not $x25) $x96)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x60 $x175)))
 (let (($x163 (not $x41)))
 (let (($x137 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x64 $x137)))
 (let (($x40 (and (not $x44) $x163)))
 (let (($x79 (and (and (and (and (and (and $x40 $x75) $x93) $x9) $x67) $x127) $x116)))
 (let (($x30 (and $x79 $x59)))
 (let (($x144 (= symbol.1 dst_symbol_addr.1)))
 (let (($x23 (and $x144 $x30)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x5) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x19 $x131)))))))
 (let (($x55 (and $x16 $x23)))
 (let (($x158 (= $x55 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x78 (concat ?x34 (concat ?x112 ?x58)))))
 (let (($x145 (= input.dst.llvm-%n ?x83)))
 (let (($x37 (and $x55 $x145)))
 (let (($x57 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x156 (and $x57 $x37)))
 (let (($x56 (= $x156 true)))
 (let (($x121 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and $x121 $x56)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x69 (and $x118 $x120)))
 (let (($x94 (forall ((input.ind-%var525X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var525X)))
 (=> $x147 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var525X) (_ bv0 32)))))
 ))
 (let (($x129 (forall ((input.ind-%var524X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var524X)))
 (= $x147 false)))
 ))
 (let (($x104 (and $x129 $x94)))
 (let (($x157 (and $x104 $x69)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x124 $x157)))
 (let (($x13 (=> $x29 $x158)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x14 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x14)))
 (let (($x176 (= ?x32 input.dst.llvm-%n)))
 (let (($x135 (= $x176 true)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x98 (concat ?x158 (concat ?x120 ?x156)))))
 (let (($x136 (= input.dst.llvm-%n ?x74)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x150)))
 (let ((?x55 (bvand symbol.1 (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x55)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x161 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x116 (= input.memlabel-mem--symbol.1_end ?x161)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x79 (and $x127 $x116)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x133 $x79)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (and $x138 $x119)))
 (let (($x152 (not $x142)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x46 (and $x101 $x9)))
 (let (($x171 (and (not $x46) $x152)))
 (let (($x96 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x102 $x96)))
 (let (($x63 (not $x75)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x8 $x169)))
 (let (($x15 (and (not $x71) $x63)))
 (let (($x58 (and (and (and (and (and (and $x15 $x171) $x67) $x149) $x153) $x23) $x170)))
 (let (($x107 (and $x58 $x78)))
 (let (($x25 (= symbol.1 dst_symbol_addr.1)))
 (let (($x88 (and $x25 $x107)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x144 (or (bvugt input.memlabel-mem--symbol.1_begin ?x16) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x144) (or $x167 $x60)))))))
 (let (($x83 (and $x33 $x88)))
 (let (($x100 (and $x83 $x136)))
 (let (($x126 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x106 (and $x126 $x100)))
 (let (($x151 (= $x106 true)))
 (let (($x168 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x84 (and $x168 $x151)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x5 $x84)))
 (let (($x50 (forall ((input.ind-%var535X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var535X)))
 (=> $x129 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var535X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var534X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var534X)))
 (= $x129 false)))
 ))
 (let (($x86 (and $x51 $x50)))
 (let (($x159 (and $x86 $x77)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x160 (and $x124 $x159)))
 (let (($x132 (=> $x160 $x135)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x14 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x14)))
 (let (($x176 (= ?x32 input.dst.llvm-%n)))
 (let (($x135 (= $x176 true)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x98 (concat ?x158 (concat ?x120 ?x156)))))
 (let (($x136 (= input.dst.llvm-%n ?x74)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x150)))
 (let ((?x55 (bvand symbol.1 (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x55)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x161 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x116 (= input.memlabel-mem--symbol.1_end ?x161)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x79 (and $x127 $x116)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x133 $x79)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (and $x138 $x119)))
 (let (($x152 (not $x142)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x46 (and $x101 $x9)))
 (let (($x171 (and (not $x46) $x152)))
 (let (($x96 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x102 $x96)))
 (let (($x63 (not $x75)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x8 $x169)))
 (let (($x15 (and (not $x71) $x63)))
 (let (($x58 (and (and (and (and (and (and $x15 $x171) $x67) $x149) $x153) $x23) $x170)))
 (let (($x107 (and $x58 $x78)))
 (let (($x25 (= symbol.1 dst_symbol_addr.1)))
 (let (($x88 (and $x25 $x107)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x144 (or (bvugt input.memlabel-mem--symbol.1_begin ?x16) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x144) (or $x167 $x60)))))))
 (let (($x83 (and $x33 $x88)))
 (let (($x100 (and $x83 $x136)))
 (let (($x126 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x106 (and $x126 $x100)))
 (let (($x151 (= $x106 true)))
 (let (($x168 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x84 (and $x168 $x151)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x5 $x84)))
 (let (($x50 (forall ((input.ind-%var535X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var535X)))
 (=> $x129 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var535X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var534X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var534X)))
 (= $x129 false)))
 ))
 (let (($x86 (and $x51 $x50)))
 (let (($x159 (and $x86 $x77)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x160 (and $x124 $x159)))
 (let (($x132 (=> $x160 $x135)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x95)))
 (let (($x114 (= ?x147 input.spec-%var-n-1)))
 (let (($x121 (= $x114 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x176 (concat ?x24 (concat ?x84 ?x106)))))
 (let (($x132 (= input.dst.llvm-%n ?x135)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x125)))
 (let ((?x83 (bvand symbol.1 (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x83)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x55 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x170 (= input.memlabel-mem--symbol.1_end ?x55)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x58 (and $x23 $x170)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x30 $x58)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x133 $x127)))
 (let (($x161 (not $x42)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x26 $x149)))
 (let (($x79 (and (not $x34) $x161)))
 (let (($x152 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x142 $x152)))
 (let (($x122 (not $x171)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x10 $x138)))
 (let (($x22 (and (not $x119) $x122)))
 (let (($x156 (and (and (and (and (and (and $x22 $x79) $x153) $x59) $x150) $x88) $x145)))
 (let (($x69 (and $x156 $x98)))
 (let (($x46 (= symbol.1 dst_symbol_addr.1)))
 (let (($x13 (and $x46 $x69)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x25 (or (bvugt input.memlabel-mem--symbol.1_begin ?x33) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x25) (or $x93 $x102)))))))
 (let (($x74 (and $x9 $x13)))
 (let (($x140 (and $x74 $x132)))
 (let (($x64 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x20 (and $x64 $x140)))
 (let (($x19 (= $x20 true)))
 (let (($x68 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (and $x68 $x19)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x76 (and $x16 $x37)))
 (let (($x80 (forall ((input.ind-%var545X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var545X)))
 (=> $x51 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var545X) (_ bv0 32)))))
 ))
 (let (($x47 (forall ((input.ind-%var544X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var544X)))
 (= $x51 false)))
 ))
 (let (($x103 (and $x47 $x80)))
 (let (($x90 (and $x103 $x76)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x134 (and $x124 $x90)))
 (let (($x104 (=> $x134 $x121)))
 (not $x104)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x95)))
 (let (($x114 (= ?x147 input.spec-%var-n-1)))
 (let (($x121 (= $x114 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x176 (concat ?x24 (concat ?x84 ?x106)))))
 (let (($x132 (= input.dst.llvm-%n ?x135)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x125)))
 (let ((?x83 (bvand symbol.1 (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x83)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x55 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x170 (= input.memlabel-mem--symbol.1_end ?x55)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x58 (and $x23 $x170)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x30 $x58)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x133 $x127)))
 (let (($x161 (not $x42)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x26 $x149)))
 (let (($x79 (and (not $x34) $x161)))
 (let (($x152 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x142 $x152)))
 (let (($x122 (not $x171)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x10 $x138)))
 (let (($x22 (and (not $x119) $x122)))
 (let (($x156 (and (and (and (and (and (and $x22 $x79) $x153) $x59) $x150) $x88) $x145)))
 (let (($x69 (and $x156 $x98)))
 (let (($x46 (= symbol.1 dst_symbol_addr.1)))
 (let (($x13 (and $x46 $x69)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x25 (or (bvugt input.memlabel-mem--symbol.1_begin ?x33) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x25) (or $x93 $x102)))))))
 (let (($x74 (and $x9 $x13)))
 (let (($x140 (and $x74 $x132)))
 (let (($x64 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x20 (and $x64 $x140)))
 (let (($x19 (= $x20 true)))
 (let (($x68 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (and $x68 $x19)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x76 (and $x16 $x37)))
 (let (($x80 (forall ((input.ind-%var545X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var545X)))
 (=> $x51 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var545X) (_ bv0 32)))))
 ))
 (let (($x47 (forall ((input.ind-%var544X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var544X)))
 (= $x51 false)))
 ))
 (let (($x103 (and $x47 $x80)))
 (let (($x90 (and $x103 $x76)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x134 (and $x124 $x90)))
 (let (($x104 (=> $x134 $x121)))
 (not $x104)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x130 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x81 (= $x130 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x114 (concat ?x49 (concat ?x37 ?x20)))))
 (let (($x104 (= input.dst.llvm-%n ?x121)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x32)))
 (let ((?x74 (bvand symbol.1 (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x74)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x145 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x156 (and $x88 $x145)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x107 $x156)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (and $x30 $x23)))
 (let (($x55 (not $x112)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x158 (and $x155 $x59)))
 (let (($x58 (and (not $x158) $x55)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x42 $x161)))
 (let (($x157 (not $x79)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x116 $x133)))
 (let (($x29 (and (not $x127) $x157)))
 (let (($x106 (and (and (and (and (and (and $x29 $x58) $x150) $x78) $x125) $x13) $x136)))
 (let (($x77 (and $x106 $x176)))
 (let (($x34 (= symbol.1 dst_symbol_addr.1)))
 (let (($x14 (and $x34 $x77)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x46 (or (bvugt input.memlabel-mem--symbol.1_begin ?x9) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x46) (or $x67 $x142)))))))
 (let (($x135 (and $x149 $x14)))
 (let (($x115 (and $x135 $x104)))
 (let (($x8 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x137 (and $x8 $x115)))
 (let (($x167 (= $x137 true)))
 (let (($x131 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x100 (and $x131 $x167)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x118 (and $x33 $x100)))
 (let (($x41 (forall ((input.ind-%var555X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var555X)))
 (=> $x47 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var555X) (_ bv0 32)))))
 ))
 (let (($x54 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var554X)))
 (= $x47 false)))
 ))
 (let (($x101 (and $x54 $x41)))
 (let (($x52 (and $x101 $x118)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x94 (and $x124 $x52)))
 (let (($x129 (=> $x94 $x81)))
 (not $x129)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x130 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x81 (= $x130 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x114 (concat ?x49 (concat ?x37 ?x20)))))
 (let (($x104 (= input.dst.llvm-%n ?x121)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x32)))
 (let ((?x74 (bvand symbol.1 (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x74)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x145 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x156 (and $x88 $x145)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x107 $x156)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (and $x30 $x23)))
 (let (($x55 (not $x112)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x158 (and $x155 $x59)))
 (let (($x58 (and (not $x158) $x55)))
 (let (($x161 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x42 $x161)))
 (let (($x157 (not $x79)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x116 $x133)))
 (let (($x29 (and (not $x127) $x157)))
 (let (($x106 (and (and (and (and (and (and $x29 $x58) $x150) $x78) $x125) $x13) $x136)))
 (let (($x77 (and $x106 $x176)))
 (let (($x34 (= symbol.1 dst_symbol_addr.1)))
 (let (($x14 (and $x34 $x77)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x46 (or (bvugt input.memlabel-mem--symbol.1_begin ?x9) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x46) (or $x67 $x142)))))))
 (let (($x135 (and $x149 $x14)))
 (let (($x115 (and $x135 $x104)))
 (let (($x8 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x137 (and $x8 $x115)))
 (let (($x167 (= $x137 true)))
 (let (($x131 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x100 (and $x131 $x167)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x118 (and $x33 $x100)))
 (let (($x41 (forall ((input.ind-%var555X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var555X)))
 (=> $x47 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var555X) (_ bv0 32)))))
 ))
 (let (($x54 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var554X)))
 (= $x47 false)))
 ))
 (let (($x101 (and $x54 $x41)))
 (let (($x52 (and $x101 $x118)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x94 (and $x124 $x52)))
 (let (($x129 (=> $x94 $x81)))
 (not $x129)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x12 (forall ((input.ind-%var575X (_ BitVec 32)) )(let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x48 (concat ?x65 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32)))))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x105 (concat ?x117 ?x48)))))))))
 ))
 (let (($x108 (forall ((input.ind-%var574X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var574X) (bvult input.ind-%var574X (_ bv0 32)))))
 ))
 (let (($x11 (and $x108 $x12)))
 (let (($x61 (= $x11 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x27 (concat ?x130 (concat ?x100 ?x137)))))
 (let (($x93 (= input.dst.llvm-%n ?x169)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x147)))
 (let ((?x135 (bvand symbol.1 (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x135)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x74 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x136 (= input.memlabel-mem--symbol.1_end ?x74)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (and $x13 $x136)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x69 $x106)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x107 $x88)))
 (let (($x83 (not $x120)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x24 (and $x56 $x78)))
 (let (($x156 (and (not $x24) $x83)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x112 $x55)))
 (let (($x159 (not $x58)))
 (let (($x30 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x170 $x30)))
 (let (($x160 (and (not $x23) $x159)))
 (let (($x20 (and (and (and (and (and (and $x160 $x156) $x125) $x98) $x32) $x14) $x132)))
 (let (($x76 (and $x20 $x114)))
 (let (($x158 (= symbol.1 dst_symbol_addr.1)))
 (let (($x95 (and $x158 $x76)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x34 (or (bvugt input.memlabel-mem--symbol.1_begin ?x149) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x153 $x42)))))))
 (let (($x121 (and $x59 $x95)))
 (let (($x140 (and $x121 $x93)))
 (let (($x10 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (and $x10 $x140)))
 (let (($x17 (= $x5 true)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (and $x60 $x17)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x97 (and $x9 $x50)))
 (let (($x75 (forall ((input.ind-%var565X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var565X)))
 (=> $x54 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var565X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var564X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var564X)))
 (= $x54 false)))
 ))
 (let (($x26 (and $x175 $x75)))
 (let (($x73 (and $x26 $x97)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x51 (and $x124 $x73)))
 (let (($x21 (=> $x51 $x61)))
 (not $x21)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x12 (forall ((input.ind-%var575X (_ BitVec 32)) )(let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x48 (concat ?x65 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32)))))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x105 (concat ?x117 ?x48)))))))))
 ))
 (let (($x108 (forall ((input.ind-%var574X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var574X) (bvult input.ind-%var574X (_ bv0 32)))))
 ))
 (let (($x11 (and $x108 $x12)))
 (let (($x61 (= $x11 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x27 (concat ?x130 (concat ?x100 ?x137)))))
 (let (($x93 (= input.dst.llvm-%n ?x169)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x147)))
 (let ((?x135 (bvand symbol.1 (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x135)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x74 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x136 (= input.memlabel-mem--symbol.1_end ?x74)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (and $x13 $x136)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x69 $x106)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x107 $x88)))
 (let (($x83 (not $x120)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x24 (and $x56 $x78)))
 (let (($x156 (and (not $x24) $x83)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x112 $x55)))
 (let (($x159 (not $x58)))
 (let (($x30 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x170 $x30)))
 (let (($x160 (and (not $x23) $x159)))
 (let (($x20 (and (and (and (and (and (and $x160 $x156) $x125) $x98) $x32) $x14) $x132)))
 (let (($x76 (and $x20 $x114)))
 (let (($x158 (= symbol.1 dst_symbol_addr.1)))
 (let (($x95 (and $x158 $x76)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x34 (or (bvugt input.memlabel-mem--symbol.1_begin ?x149) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x153 $x42)))))))
 (let (($x121 (and $x59 $x95)))
 (let (($x140 (and $x121 $x93)))
 (let (($x10 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (and $x10 $x140)))
 (let (($x17 (= $x5 true)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (and $x60 $x17)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x97 (and $x9 $x50)))
 (let (($x75 (forall ((input.ind-%var565X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var565X)))
 (=> $x54 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var565X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var564X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var564X)))
 (= $x54 false)))
 ))
 (let (($x26 (and $x175 $x75)))
 (let (($x73 (and $x26 $x97)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x51 (and $x124 $x73)))
 (let (($x21 (=> $x51 $x61)))
 (not $x21)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x217 (= $x190 false)))
 (let (($x218 (= $x217 true)))
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x34)))
 (let (($x210 (= ?x116 input.dst.llvm-%n)))
 (let (($x211 (= $x210 true)))
 (let (($x207 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x207 true)))
 (let ((?x191 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x192 (bvadd symbol.1 ?x191)))
 (let (($x201 (and (bvule input.memlabel-mem--symbol.1_begin ?x192) (bvule (bvadd ?x192 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x205 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false $x201)))))
 (let (($x194 (=> (and $x190 (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x201)))))
 (let (($x195 (= $x194 true)))
 (let (($x187 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x187 true)))
 (let (($x184 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x184 true)))
 (let (($x181 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x181 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x178 true)))
 (let (($x99 (forall ((input.ind-%var591X (_ BitVec 32)) )(let ((?x6 (bvadd symbol.1 (bvmul input.ind-%var591X (_ bv4 32)))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x6))))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv2 32))) ?x70)))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv3 32))) ?x144)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var591X)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var591X)))
 (=> $x117 (= ?x67 ?x154)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var590X (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) input.ind-%var590X) (bvult input.ind-%var590X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var590X)))
 (= $x117 $x12))))
 ))
 (let (($x162 (and $x61 $x99)))
 (let (($x128 (= $x162 true)))
 (let (($x143 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x166 (= $x143 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x140)))
 (let ((?x169 (bvand symbol.1 (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x169)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x94 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x130 (= input.memlabel-mem--symbol.1_end ?x94)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x167 (and $x27 $x130)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x129 $x167)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x20 (and $x135 $x132)))
 (let (($x147 (not $x20)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x77 $x14)))
 (let (($x76 (and (not $x37) $x147)))
 (let (($x136 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x74 $x136)))
 (let (($x32 (not $x106)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x69 $x13)))
 (let (($x176 (and (not $x84) $x32)))
 (let (($x66 (and (and (and (and (and (and $x176 $x76) $x95) $x104) $x100) $x81) $x93)))
 (let (($x86 (and $x66 $x5)))
 (let (($x49 (= symbol.1 dst_symbol_addr.1)))
 (let (($x7 (and $x49 $x86)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x24 (or (bvugt input.memlabel-mem--symbol.1_begin ?x160) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x24) (or $x120 $x83)))))))
 (let (($x28 (and $x98 $x7)))
 (let (($x108 (= $x28 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x142 (= $x119 true)))
 (let (($x157 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x29 (= $x157 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x161 (= $x42 true)))
 (let (($x133 (= ?x116 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (= $x133 true)))
 (let (($x79 (and $x153 $x161)))
 (let (($x59 (and $x79 $x29)))
 (let (($x158 (and $x59 $x142)))
 (let (($x141 (and $x158 $x108)))
 (let (($x111 (and $x141 $x166)))
 (let (($x43 (and $x111 $x128)))
 (let (($x180 (and $x43 $x179)))
 (let (($x183 (and $x180 $x182)))
 (let (($x186 (and $x183 $x185)))
 (let (($x189 (and $x186 $x188)))
 (let (($x206 (and $x189 $x195)))
 (let (($x209 (and $x206 $x208)))
 (let (($x212 (and $x209 $x211)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x213 (and $x22 $x212)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x214 (and $x122 $x213)))
 (let (($x152 (forall ((input.ind-%var601X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var601X)))
 (=> $x54 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var601X) (_ bv0 32)))))
 ))
 (let (($x8 (forall ((input.ind-%var600X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var600X)))
 (= $x54 false)))
 ))
 (let (($x171 (and $x8 $x152)))
 (let (($x215 (and $x171 $x214)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x216 (and $x124 $x215)))
 (let (($x219 (=> $x216 $x218)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x217 (= $x190 false)))
 (let (($x218 (= $x217 true)))
 (let ((?x34 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x34)))
 (let (($x210 (= ?x116 input.dst.llvm-%n)))
 (let (($x211 (= $x210 true)))
 (let (($x207 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x207 true)))
 (let ((?x191 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x192 (bvadd symbol.1 ?x191)))
 (let (($x201 (and (bvule input.memlabel-mem--symbol.1_begin ?x192) (bvule (bvadd ?x192 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x205 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false $x201)))))
 (let (($x194 (=> (and $x190 (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x201)))))
 (let (($x195 (= $x194 true)))
 (let (($x187 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x187 true)))
 (let (($x184 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x184 true)))
 (let (($x181 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x181 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x178 true)))
 (let (($x99 (forall ((input.ind-%var591X (_ BitVec 32)) )(let ((?x6 (bvadd symbol.1 (bvmul input.ind-%var591X (_ bv4 32)))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x6))))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv2 32))) ?x70)))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv3 32))) ?x144)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var591X)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var591X)))
 (=> $x117 (= ?x67 ?x154)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var590X (_ BitVec 32)) )(let (($x12 (and (bvule (_ bv0 32) input.ind-%var590X) (bvult input.ind-%var590X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var590X)))
 (= $x117 $x12))))
 ))
 (let (($x162 (and $x61 $x99)))
 (let (($x128 (= $x162 true)))
 (let (($x143 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x166 (= $x143 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x140)))
 (let ((?x169 (bvand symbol.1 (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x169)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x94 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x130 (= input.memlabel-mem--symbol.1_end ?x94)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x167 (and $x27 $x130)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x129 $x167)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x20 (and $x135 $x132)))
 (let (($x147 (not $x20)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x77 $x14)))
 (let (($x76 (and (not $x37) $x147)))
 (let (($x136 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x74 $x136)))
 (let (($x32 (not $x106)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x69 $x13)))
 (let (($x176 (and (not $x84) $x32)))
 (let (($x66 (and (and (and (and (and (and $x176 $x76) $x95) $x104) $x100) $x81) $x93)))
 (let (($x86 (and $x66 $x5)))
 (let (($x49 (= symbol.1 dst_symbol_addr.1)))
 (let (($x7 (and $x49 $x86)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x24 (or (bvugt input.memlabel-mem--symbol.1_begin ?x160) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x24) (or $x120 $x83)))))))
 (let (($x28 (and $x98 $x7)))
 (let (($x108 (= $x28 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x142 (= $x119 true)))
 (let (($x157 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x29 (= $x157 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x161 (= $x42 true)))
 (let (($x133 (= ?x116 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x153 (= $x133 true)))
 (let (($x79 (and $x153 $x161)))
 (let (($x59 (and $x79 $x29)))
 (let (($x158 (and $x59 $x142)))
 (let (($x141 (and $x158 $x108)))
 (let (($x111 (and $x141 $x166)))
 (let (($x43 (and $x111 $x128)))
 (let (($x180 (and $x43 $x179)))
 (let (($x183 (and $x180 $x182)))
 (let (($x186 (and $x183 $x185)))
 (let (($x189 (and $x186 $x188)))
 (let (($x206 (and $x189 $x195)))
 (let (($x209 (and $x206 $x208)))
 (let (($x212 (and $x209 $x211)))
 (let (($x22 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x213 (and $x22 $x212)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x214 (and $x122 $x213)))
 (let (($x152 (forall ((input.ind-%var601X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var601X)))
 (=> $x54 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var601X) (_ bv0 32)))))
 ))
 (let (($x8 (forall ((input.ind-%var600X (_ BitVec 32)) )(let (($x54 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var600X)))
 (= $x54 false)))
 ))
 (let (($x171 (and $x8 $x152)))
 (let (($x215 (and $x171 $x214)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x216 (and $x124 $x215)))
 (let (($x219 (=> $x216 $x218)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x35000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x32003f2c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x32003f2f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x3500019f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x32003f2c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x35000010)
  (define-fun symbol.1 () (_ BitVec 32)
    #x35000010)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x35000013 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x35000012 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x35000011 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x35000010 (bvmul #x00000004 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000001c)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000001c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x7ffffe83 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe82 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe81 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe80 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x63 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (not $x63)))
 (let (($x91 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x109 (not $x91)))
 (let (($x75 (or $x109 $x62)))
 (let (($x60 (= $x75 true)))
 (let ((?x174 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x174)))
 (let (($x131 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x131 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x105)))
 (let (($x110 (= ?x65 input.dst.llvm-%n)))
 (let (($x139 (= $x110 true)))
 (let (($x48 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (= $x48 true)))
 (let (($x18 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x175 (= $x18 true)))
 (let (($x96 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x26 (= $x96 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x115 true)))
 (let (($x170 (forall ((input.ind-%var777X (_ BitVec 32)) )(let ((?x208 (bvadd symbol.1 (bvmul input.ind-%var777X (_ bv4 32)))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x208))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv2 32))) ?x212)))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv3 32))) ?x215)))
 (let ((?x187 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var777X)))
 (let (($x99 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var777X)))
 (=> $x99 (= ?x187 ?x218)))))))))
 ))
 (let (($x183 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x181 (and (bvule (_ bv0 32) input.ind-%var776X) (bvult input.ind-%var776X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x99 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var776X)))
 (= $x99 $x181))))
 ))
 (let (($x193 (and $x183 $x170)))
 (let (($x30 (= $x193 true)))
 (let (($x70 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x144 (= $x70 true)))
 (let (($x35 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x85 (= $x35 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x165 (= $x101 true)))
 (let (($x6 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x168 (= $x6 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x166)))
 (let ((?x141 (bvand symbol.1 (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x141)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x140 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_end ?x140)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x93 $x5)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x169 $x86)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x167 (and $x94 $x130)))
 (let (($x100 (not $x167)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (and $x129 $x27)))
 (let (($x137 (and (not $x52) $x100)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x17 $x95)))
 (let (($x121 (not $x50)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x20 $x147)))
 (let (($x97 (and (not $x76) $x121)))
 (let (($x11 (and (and (and (and (and (and $x97 $x137) $x118) $x51) $x7) $x108) $x143)))
 (let (($x61 (and $x11 $x111)))
 (let (($x23 (= symbol.1 dst_symbol_addr.1)))
 (let (($x67 (and $x23 $x61)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x19 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x19) (or $x32 $x176)))))))
 (let (($x16 (and $x132 $x67)))
 (let (($x41 (= $x16 true)))
 (let (($x146 (and $x41 $x168)))
 (let (($x103 (and $x146 $x165)))
 (let (($x172 (and $x103 $x85)))
 (let (($x154 (and $x172 $x144)))
 (let (($x123 (and $x154 $x30)))
 (let (($x9 (and $x123 $x64)))
 (let (($x92 (and $x9 $x26)))
 (let (($x15 (and $x92 $x175)))
 (let (($x57 (and $x15 $x163)))
 (let (($x25 (and $x57 $x139)))
 (let (($x80 (and $x25 $x47)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (and $x125 $x80)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x83 $x68)))
 (let (($x107 (forall ((input.ind-%var787X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var787X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var787X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var786X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var786X)))
 (= $x29 false)))
 ))
 (let (($x120 (and $x158 $x107)))
 (let (($x31 (and $x120 $x164)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x89 (and $x42 $x31)))
 (let ((?x54 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd symbol.1 ?x54)))
 (let (($x34 (and (bvule input.memlabel-mem--symbol.1_begin ?x124) (bvule (bvadd ?x124 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x127 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false $x34)))))
 (let (($x44 (=> (and $x63 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x34)))))
 (let (($x53 (and $x44 $x89)))
 (let (($x39 (=> $x53 $x60)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x63 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (not $x63)))
 (let (($x91 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x109 (not $x91)))
 (let (($x75 (or $x109 $x62)))
 (let (($x60 (= $x75 true)))
 (let ((?x174 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x174)))
 (let (($x131 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x47 (= $x131 true)))
 (let ((?x105 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x105)))
 (let (($x110 (= ?x65 input.dst.llvm-%n)))
 (let (($x139 (= $x110 true)))
 (let (($x48 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (= $x48 true)))
 (let (($x18 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x175 (= $x18 true)))
 (let (($x96 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x26 (= $x96 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x115 true)))
 (let (($x170 (forall ((input.ind-%var777X (_ BitVec 32)) )(let ((?x208 (bvadd symbol.1 (bvmul input.ind-%var777X (_ bv4 32)))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x208))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv2 32))) ?x212)))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv3 32))) ?x215)))
 (let ((?x187 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var777X)))
 (let (($x99 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var777X)))
 (=> $x99 (= ?x187 ?x218)))))))))
 ))
 (let (($x183 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x181 (and (bvule (_ bv0 32) input.ind-%var776X) (bvult input.ind-%var776X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x99 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var776X)))
 (= $x99 $x181))))
 ))
 (let (($x193 (and $x183 $x170)))
 (let (($x30 (= $x193 true)))
 (let (($x70 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x144 (= $x70 true)))
 (let (($x35 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x85 (= $x35 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x165 (= $x101 true)))
 (let (($x6 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x168 (= $x6 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x166)))
 (let ((?x141 (bvand symbol.1 (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x141)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x140 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x5 (= input.memlabel-mem--symbol.1_end ?x140)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x93 $x5)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x169 $x86)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x167 (and $x94 $x130)))
 (let (($x100 (not $x167)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (and $x129 $x27)))
 (let (($x137 (and (not $x52) $x100)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x17 $x95)))
 (let (($x121 (not $x50)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x20 $x147)))
 (let (($x97 (and (not $x76) $x121)))
 (let (($x11 (and (and (and (and (and (and $x97 $x137) $x118) $x51) $x7) $x108) $x143)))
 (let (($x61 (and $x11 $x111)))
 (let (($x23 (= symbol.1 dst_symbol_addr.1)))
 (let (($x67 (and $x23 $x61)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x19 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x19) (or $x32 $x176)))))))
 (let (($x16 (and $x132 $x67)))
 (let (($x41 (= $x16 true)))
 (let (($x146 (and $x41 $x168)))
 (let (($x103 (and $x146 $x165)))
 (let (($x172 (and $x103 $x85)))
 (let (($x154 (and $x172 $x144)))
 (let (($x123 (and $x154 $x30)))
 (let (($x9 (and $x123 $x64)))
 (let (($x92 (and $x9 $x26)))
 (let (($x15 (and $x92 $x175)))
 (let (($x57 (and $x15 $x163)))
 (let (($x25 (and $x57 $x139)))
 (let (($x80 (and $x25 $x47)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (and $x125 $x80)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x83 $x68)))
 (let (($x107 (forall ((input.ind-%var787X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var787X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var787X) (_ bv0 32)))))
 ))
 (let (($x158 (forall ((input.ind-%var786X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var786X)))
 (= $x29 false)))
 ))
 (let (($x120 (and $x158 $x107)))
 (let (($x31 (and $x120 $x164)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x89 (and $x42 $x31)))
 (let ((?x54 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd symbol.1 ?x54)))
 (let (($x34 (and (bvule input.memlabel-mem--symbol.1_begin ?x124) (bvule (bvadd ?x124 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x127 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false $x34)))))
 (let (($x44 (=> (and $x63 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x34)))))
 (let (($x53 (and $x44 $x89)))
 (let (($x39 (=> $x53 $x60)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x246 (bvmul (_ bv4294967295 32) ?x245)))
 (let ((?x247 (bvneg ?x246)))
 (let (($x249 (= ?x247 ?x248)))
 (let (($x250 (= $x249 true)))
 (let ((?x233 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x233)))
 (let (($x235 (= ?x234 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x235 true)))
 (let (($x230 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x231 (= $x230 true)))
 (let (($x227 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x228 (= $x227 true)))
 (let (($x224 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x225 (= $x224 true)))
 (let (($x78 (forall ((input.ind-%var797X (_ BitVec 32)) )(let ((?x197 (bvadd symbol.1 (bvmul input.ind-%var797X (_ bv4 32)))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x197))))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv2 32))) ?x202)))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv3 32))) ?x82)))
 (let ((?x162 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var797X)))
 (let (($x31 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var797X)))
 (=> $x31 (= ?x162 ?x185)))))))))
 ))
 (let (($x190 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x39 (and (bvule (_ bv0 32) input.ind-%var796X) (bvult input.ind-%var796X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x31 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var796X)))
 (= $x31 $x39))))
 ))
 (let (($x21 (and $x190 $x78)))
 (let (($x222 (= $x21 true)))
 (let (($x131 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x47 (= $x131 true)))
 (let (($x25 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x174 (= $x25 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x92 (bvsub ?x36 ?x152)))
 (let (($x138 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x92) (bvult ?x36 ?x92))))
 (let ((?x64 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x9 (bvmul (_ bv4 64) ?x64)))
 (let ((?x96 ((_ extract 63 32) ?x9)))
 (let (($x26 (= (_ bv0 32) ?x96)))
 (let (($x123 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x48 (and (and (and true $x123) $x26) $x138)))
 (let (($x219 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x163 (and $x219 $x48)))
 (let (($x63 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (=> $x63 $x163)))
 (let (($x110 (= $x57 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x209 (= $x211 true)))
 (let (($x213 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x214 (= $x213 true)))
 (let (($x217 (= $x63 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x144)))
 (let ((?x172 (bvand symbol.1 (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x172)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x146 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x146)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x165 (and $x6 $x101)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x148 $x165)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x11 (and $x141 $x143)))
 (let (($x166 (not $x11)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x28 $x108)))
 (let (($x61 (and (not $x12) $x166)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x66 $x140)))
 (let (($x86 (not $x5)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x177 $x169)))
 (let (($x173 (and (not $x93) $x86)))
 (let (($x183 (and (and (and (and (and (and $x173 $x61) $x67) $x41) $x103) $x85) $x70)))
 (let (($x187 (and $x183 $x154)))
 (let (($x95 (= symbol.1 dst_symbol_addr.1)))
 (let (($x189 (and $x95 $x187)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x97) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x167 $x100)))))))
 (let (($x207 (and $x51 $x189)))
 (let (($x208 (= $x207 true)))
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x114)))
 (let (($x20 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x147 (= $x20 true)))
 (let (($x98 (= ?x132 input.dst.llvm-%n)))
 (let (($x23 (= $x98 true)))
 (let (($x76 (and $x23 $x147)))
 (let (($x216 (and $x76 $x208)))
 (let (($x199 (and $x216 $x217)))
 (let (($x210 (and $x199 $x214)))
 (let (($x212 (and $x210 $x209)))
 (let (($x139 (and $x212 $x110)))
 (let (($x87 (and $x139 $x174)))
 (let (($x80 (and $x87 $x47)))
 (let (($x223 (and $x80 $x222)))
 (let (($x226 (and $x223 $x225)))
 (let (($x229 (and $x226 $x228)))
 (let (($x232 (and $x229 $x231)))
 (let (($x237 (and $x232 $x236)))
 (let (($x14 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and (not $x14) $x237)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and $x176 $x239)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x241 (and $x136 $x240)))
 (let (($x84 (forall ((input.ind-%var807X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var807X)))
 (=> $x56 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var807X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var806X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var806X)))
 (= $x56 false)))
 ))
 (let (($x19 (and $x120 $x84)))
 (let (($x242 (and $x19 $x241)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x243 (and $x29 $x242)))
 (let (($x127 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x157 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x127)))))
 (let (($x171 (=> (and $x63 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x127)))))
 (let (($x244 (and $x171 $x243)))
 (let (($x251 (=> $x244 $x250)))
 (not $x251)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x246 (bvmul (_ bv4294967295 32) ?x245)))
 (let ((?x247 (bvneg ?x246)))
 (let (($x249 (= ?x247 ?x248)))
 (let (($x250 (= $x249 true)))
 (let ((?x233 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x233)))
 (let (($x235 (= ?x234 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x235 true)))
 (let (($x230 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x231 (= $x230 true)))
 (let (($x227 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x228 (= $x227 true)))
 (let (($x224 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x225 (= $x224 true)))
 (let (($x78 (forall ((input.ind-%var797X (_ BitVec 32)) )(let ((?x197 (bvadd symbol.1 (bvmul input.ind-%var797X (_ bv4 32)))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x197))))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv2 32))) ?x202)))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x197 (_ bv3 32))) ?x82)))
 (let ((?x162 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var797X)))
 (let (($x31 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var797X)))
 (=> $x31 (= ?x162 ?x185)))))))))
 ))
 (let (($x190 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x39 (and (bvule (_ bv0 32) input.ind-%var796X) (bvult input.ind-%var796X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x31 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var796X)))
 (= $x31 $x39))))
 ))
 (let (($x21 (and $x190 $x78)))
 (let (($x222 (= $x21 true)))
 (let (($x131 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x47 (= $x131 true)))
 (let (($x25 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x174 (= $x25 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x92 (bvsub ?x36 ?x152)))
 (let (($x138 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x92) (bvult ?x36 ?x92))))
 (let ((?x64 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x9 (bvmul (_ bv4 64) ?x64)))
 (let ((?x96 ((_ extract 63 32) ?x9)))
 (let (($x26 (= (_ bv0 32) ?x96)))
 (let (($x123 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x48 (and (and (and true $x123) $x26) $x138)))
 (let (($x219 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x163 (and $x219 $x48)))
 (let (($x63 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (=> $x63 $x163)))
 (let (($x110 (= $x57 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x209 (= $x211 true)))
 (let (($x213 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x214 (= $x213 true)))
 (let (($x217 (= $x63 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x144)))
 (let ((?x172 (bvand symbol.1 (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x172)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x146 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x146)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x165 (and $x6 $x101)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x148 $x165)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x11 (and $x141 $x143)))
 (let (($x166 (not $x11)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x28 $x108)))
 (let (($x61 (and (not $x12) $x166)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x66 $x140)))
 (let (($x86 (not $x5)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x177 $x169)))
 (let (($x173 (and (not $x93) $x86)))
 (let (($x183 (and (and (and (and (and (and $x173 $x61) $x67) $x41) $x103) $x85) $x70)))
 (let (($x187 (and $x183 $x154)))
 (let (($x95 (= symbol.1 dst_symbol_addr.1)))
 (let (($x189 (and $x95 $x187)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x97) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x167 $x100)))))))
 (let (($x207 (and $x51 $x189)))
 (let (($x208 (= $x207 true)))
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x132 (bvneg ?x114)))
 (let (($x20 (= ?x132 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x147 (= $x20 true)))
 (let (($x98 (= ?x132 input.dst.llvm-%n)))
 (let (($x23 (= $x98 true)))
 (let (($x76 (and $x23 $x147)))
 (let (($x216 (and $x76 $x208)))
 (let (($x199 (and $x216 $x217)))
 (let (($x210 (and $x199 $x214)))
 (let (($x212 (and $x210 $x209)))
 (let (($x139 (and $x212 $x110)))
 (let (($x87 (and $x139 $x174)))
 (let (($x80 (and $x87 $x47)))
 (let (($x223 (and $x80 $x222)))
 (let (($x226 (and $x223 $x225)))
 (let (($x229 (and $x226 $x228)))
 (let (($x232 (and $x229 $x231)))
 (let (($x237 (and $x232 $x236)))
 (let (($x14 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and (not $x14) $x237)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and $x176 $x239)))
 (let (($x136 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x241 (and $x136 $x240)))
 (let (($x84 (forall ((input.ind-%var807X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var807X)))
 (=> $x56 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var807X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var806X (_ BitVec 32)) )(let (($x56 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var806X)))
 (= $x56 false)))
 ))
 (let (($x19 (and $x120 $x84)))
 (let (($x242 (and $x19 $x241)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x243 (and $x29 $x242)))
 (let (($x127 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x157 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x127)))))
 (let (($x171 (=> (and $x63 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x127)))))
 (let (($x244 (and $x171 $x243)))
 (let (($x251 (=> $x244 $x250)))
 (not $x251)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x109 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x62 (bvsle ?x109 (_ bv3 32))))
 (let (($x205 (= $x62 true)))
 (let ((?x151 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x151)))
 (let (($x192 (= ?x191 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x192 true)))
 (let (($x53 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x91 (= $x53 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x134 (= $x49 true)))
 (let (($x142 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x158 (= $x142 true)))
 (let ((?x249 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x250 (= (_ bv0 32) ?x249)))
 (let ((?x247 (bvand symbol.1 (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x247)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x245)))
 (let ((?x241 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x242 (= input.memlabel-mem--symbol.1_end ?x241)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x243 (and $x239 $x242)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x237 $x243)))
 (let (($x236 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x230 (and $x228 $x229)))
 (let (($x231 (not $x230)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x227 (and $x225 $x226)))
 (let (($x233 (and (not $x227) $x231)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x55 $x78)))
 (let (($x222 (not $x21)))
 (let (($x185 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x82 $x185)))
 (let (($x224 (and (not $x206) $x222)))
 (let (($x89 (and (and (and (and (and (and $x224 $x233) $x234) $x236) $x244) $x246) $x248)))
 (let (($x188 (and $x89 $x250)))
 (let (($x60 (= symbol.1 dst_symbol_addr.1)))
 (let (($x24 (and $x60 $x188)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x221 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x221)))
 (let (($x59 (or (bvugt input.memlabel-mem--symbol.1_begin ?x221) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x202 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x59) (or $x195 $x186)))))))
 (let (($x125 (and $x202 $x24)))
 (let (($x88 (= $x125 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x131 (= $x87 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (= $x139 true)))
 (let (($x48 (forall ((input.ind-%var817X (_ BitVec 32)) )(let ((?x123 (bvadd symbol.1 (bvmul input.ind-%var817X (_ bv4 32)))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x123))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x123 (_ bv2 32))) ?x9)))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x123 (_ bv3 32))) ?x65)))
 (let ((?x187 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var817X)))
 (let (($x168 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var817X)))
 (=> $x168 (= ?x187 ?x175)))))))))
 ))
 (let (($x70 (forall ((input.ind-%var816X (_ BitVec 32)) )(let (($x182 (and (bvule (_ bv0 32) input.ind-%var816X) (bvult input.ind-%var816X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x168 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var816X)))
 (= $x168 $x182))))
 ))
 (let (($x163 (and $x70 $x48)))
 (let (($x57 (= $x163 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x166)))
 (let (($x16 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x16 true)))
 (let (($x99 (= ?x61 input.dst.llvm-%n)))
 (let (($x67 (= $x99 true)))
 (let (($x111 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x141 (= $x111 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x177 (bvsub ?x36 ?x152)))
 (let (($x66 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x177) (bvult ?x36 ?x177))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x51 (bvmul (_ bv4 64) ?x72)))
 (let ((?x17 ((_ extract 63 32) ?x51)))
 (let (($x95 (= (_ bv0 32) ?x17)))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x86 (and (and (and true $x117) $x95) $x66)))
 (let (($x94 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x173 (and $x94 $x86)))
 (let (($x160 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x28 (=> $x160 $x173)))
 (let (($x108 (= $x28 true)))
 (let (($x97 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x129 (= $x97 true)))
 (let (($x81 (= $x160 true)))
 (let (($x27 (and $x81 $x129)))
 (let (($x12 (and $x27 $x108)))
 (let (($x143 (and $x12 $x141)))
 (let (($x180 (and $x143 $x67)))
 (let (($x179 (and $x180 $x41)))
 (let (($x110 (and $x179 $x57)))
 (let (($x174 (and $x110 $x25)))
 (let (($x47 (and $x174 $x131)))
 (let (($x156 (and $x47 $x88)))
 (let (($x145 (and $x156 $x158)))
 (let (($x68 (and $x145 $x134)))
 (let (($x112 (and $x68 $x91)))
 (let (($x128 (and $x112 $x45)))
 (let (($x121 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (and (not $x121) $x128)))
 (let (($x76 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (and $x76 $x119)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x23 $x161)))
 (let (($x114 (forall ((input.ind-%var827X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var827X)))
 (=> $x90 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var827X) (_ bv0 32)))))
 ))
 (let (($x84 (forall ((input.ind-%var826X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var826X)))
 (= $x90 false)))
 ))
 (let (($x132 (and $x84 $x114)))
 (let (($x43 (and $x132 $x159)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x58 $x43)))
 (let (($x46 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x29 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x46)))))
 (let (($x71 (=> (and $x160 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x46)))))
 (let (($x164 (and $x71 $x203)))
 (let (($x8 (=> $x164 $x205)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x109 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x62 (bvsle ?x109 (_ bv3 32))))
 (let (($x205 (= $x62 true)))
 (let ((?x151 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x151)))
 (let (($x192 (= ?x191 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x192 true)))
 (let (($x53 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x91 (= $x53 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x134 (= $x49 true)))
 (let (($x142 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x158 (= $x142 true)))
 (let ((?x249 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x250 (= (_ bv0 32) ?x249)))
 (let ((?x247 (bvand symbol.1 (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x247)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x245)))
 (let ((?x241 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x242 (= input.memlabel-mem--symbol.1_end ?x241)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x243 (and $x239 $x242)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x237 $x243)))
 (let (($x236 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x230 (and $x228 $x229)))
 (let (($x231 (not $x230)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x227 (and $x225 $x226)))
 (let (($x233 (and (not $x227) $x231)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x55 $x78)))
 (let (($x222 (not $x21)))
 (let (($x185 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x82 $x185)))
 (let (($x224 (and (not $x206) $x222)))
 (let (($x89 (and (and (and (and (and (and $x224 $x233) $x234) $x236) $x244) $x246) $x248)))
 (let (($x188 (and $x89 $x250)))
 (let (($x60 (= symbol.1 dst_symbol_addr.1)))
 (let (($x24 (and $x60 $x188)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x221 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x221)))
 (let (($x59 (or (bvugt input.memlabel-mem--symbol.1_begin ?x221) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x202 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x59) (or $x195 $x186)))))))
 (let (($x125 (and $x202 $x24)))
 (let (($x88 (= $x125 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x131 (= $x87 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (= $x139 true)))
 (let (($x48 (forall ((input.ind-%var817X (_ BitVec 32)) )(let ((?x123 (bvadd symbol.1 (bvmul input.ind-%var817X (_ bv4 32)))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x123))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x123 (_ bv2 32))) ?x9)))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x123 (_ bv3 32))) ?x65)))
 (let ((?x187 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var817X)))
 (let (($x168 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var817X)))
 (=> $x168 (= ?x187 ?x175)))))))))
 ))
 (let (($x70 (forall ((input.ind-%var816X (_ BitVec 32)) )(let (($x182 (and (bvule (_ bv0 32) input.ind-%var816X) (bvult input.ind-%var816X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x168 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var816X)))
 (= $x168 $x182))))
 ))
 (let (($x163 (and $x70 $x48)))
 (let (($x57 (= $x163 true)))
 (let ((?x166 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x166)))
 (let (($x16 (= ?x61 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (= $x16 true)))
 (let (($x99 (= ?x61 input.dst.llvm-%n)))
 (let (($x67 (= $x99 true)))
 (let (($x111 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x141 (= $x111 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x177 (bvsub ?x36 ?x152)))
 (let (($x66 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x177) (bvult ?x36 ?x177))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x51 (bvmul (_ bv4 64) ?x72)))
 (let ((?x17 ((_ extract 63 32) ?x51)))
 (let (($x95 (= (_ bv0 32) ?x17)))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x86 (and (and (and true $x117) $x95) $x66)))
 (let (($x94 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x173 (and $x94 $x86)))
 (let (($x160 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x28 (=> $x160 $x173)))
 (let (($x108 (= $x28 true)))
 (let (($x97 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x129 (= $x97 true)))
 (let (($x81 (= $x160 true)))
 (let (($x27 (and $x81 $x129)))
 (let (($x12 (and $x27 $x108)))
 (let (($x143 (and $x12 $x141)))
 (let (($x180 (and $x143 $x67)))
 (let (($x179 (and $x180 $x41)))
 (let (($x110 (and $x179 $x57)))
 (let (($x174 (and $x110 $x25)))
 (let (($x47 (and $x174 $x131)))
 (let (($x156 (and $x47 $x88)))
 (let (($x145 (and $x156 $x158)))
 (let (($x68 (and $x145 $x134)))
 (let (($x112 (and $x68 $x91)))
 (let (($x128 (and $x112 $x45)))
 (let (($x121 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (and (not $x121) $x128)))
 (let (($x76 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (and $x76 $x119)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x23 $x161)))
 (let (($x114 (forall ((input.ind-%var827X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var827X)))
 (=> $x90 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var827X) (_ bv0 32)))))
 ))
 (let (($x84 (forall ((input.ind-%var826X (_ BitVec 32)) )(let (($x90 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var826X)))
 (= $x90 false)))
 ))
 (let (($x132 (and $x84 $x114)))
 (let (($x43 (and $x132 $x159)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x58 $x43)))
 (let (($x46 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x29 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x46)))))
 (let (($x71 (=> (and $x160 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x46)))))
 (let (($x164 (and $x71 $x203)))
 (let (($x8 (=> $x164 $x205)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa0800000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000002)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x80600000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa0800003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8060018f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa0800000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x80600000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x80600000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x80600003 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x80600002 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x80600001 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x80600000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) false
      (not (bvule #x00000003 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00200002)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x4000fbf8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8e3ffd18)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8e3ffd1b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x4000fd87)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8e3ffd18)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x4000fbf8)
  (define-fun symbol.1 () (_ BitVec 32)
    #x4000fbf8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00200002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00200002)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x4000fbfb (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x4000fbfa (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x4000fbf9 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x4000fbf8 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x144 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x193 (bvule ?x144 (_ bv4 32))))
 (let (($x74 (= $x193 true)))
 (let ((?x209 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x209)))
 (let (($x213 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x213 true)))
 (let (($x217 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x217 true)))
 (let (($x101 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x165 (= $x101 true)))
 (let (($x77 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x154 (= $x77 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x200)))
 (let ((?x205 (bvand symbol.1 (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x205)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let ((?x159 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x43 (= input.memlabel-mem--symbol.1_end ?x159)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x203 (and $x119 $x43)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x128 $x203)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x53 (and $x134 $x68)))
 (let (($x91 (not $x53)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x158 $x145)))
 (let (($x151 (and (not $x49) $x91)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x188 $x24)))
 (let (($x88 (not $x125)))
 (let (($x249 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x89 $x249)))
 (let (($x142 (and (not $x250) $x88)))
 (let (($x106 (and (and (and (and (and (and $x142 $x151) $x191) $x45) $x164) $x62) $x8)))
 (let (($x19 (and $x106 $x40)))
 (let (($x234 (= symbol.1 dst_symbol_addr.1)))
 (let (($x136 (and $x234 $x19)))
 (let (($x244 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x236 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x236)))
 (let (($x239 (or (bvugt input.memlabel-mem--symbol.1_begin ?x236) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x248 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x239) (or $x243 $x244)))))))
 (let (($x56 (and $x248 $x136)))
 (let (($x107 (= $x56 true)))
 (let (($x229 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x230 (= $x229 true)))
 (let (($x227 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (= $x227 true)))
 (let (($x222 (forall ((input.ind-%var907X (_ BitVec 32)) )(let ((?x38 (bvadd symbol.1 (bvmul input.ind-%var907X (_ bv4 32)))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x38))))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x38 (_ bv2 32))) ?x31)))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x38 (_ bv3 32))) ?x185)))
 (let ((?x110 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var907X)))
 (let (($x211 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var907X)))
 (=> $x211 (= ?x110 ?x55)))))))))
 ))
 (let (($x138 (forall ((input.ind-%var906X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var906X) (bvult input.ind-%var906X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x211 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var906X)))
 (= $x211 $x175))))
 ))
 (let (($x224 (and $x138 $x222)))
 (let (($x225 (= $x224 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x35)))
 (let (($x207 (= ?x182 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (= $x207 true)))
 (let (($x172 (= ?x182 input.dst.llvm-%n)))
 (let (($x70 (= $x172 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x179 (= $x41 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x108 (bvsub ?x36 ?x152)))
 (let (($x143 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x108) (bvult ?x36 ?x108))))
 (let ((?x66 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvmul (_ bv4 64) ?x66)))
 (let ((?x173 ((_ extract 63 32) ?x86)))
 (let (($x28 (= (_ bv0 32) ?x173)))
 (let (($x93 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x61 (and (and (and true $x93) $x28) $x143)))
 (let (($x17 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x99 (and $x17 $x61)))
 (let (($x208 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x67 (=> $x208 $x99)))
 (let (($x180 (= $x67 true)))
 (let (($x117 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x140 (= $x117 true)))
 (let (($x137 (= $x208 true)))
 (let (($x118 (and $x137 $x140)))
 (let (($x16 (and $x118 $x180)))
 (let (($x168 (and $x16 $x179)))
 (let (($x187 (and $x168 $x70)))
 (let (($x123 (and $x187 $x30)))
 (let (($x226 (and $x123 $x225)))
 (let (($x228 (and $x226 $x232)))
 (let (($x231 (and $x228 $x230)))
 (let (($x69 (and $x231 $x107)))
 (let (($x148 (and $x69 $x154)))
 (let (($x216 (and $x148 $x165)))
 (let (($x219 (and $x216 $x218)))
 (let (($x199 (and $x219 $x214)))
 (let (($x100 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x100) $x199)))
 (let (($x130 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x130 $x215)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x52 $x170)))
 (let (($x97 (forall ((input.ind-%var917X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var917X)))
 (=> $x32 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var917X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var916X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var916X)))
 (= $x32 false)))
 ))
 (let (($x129 (and $x114 $x97)))
 (let (($x103 (and $x129 $x6)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x120 $x103)))
 (let (($x171 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x58 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x171)))))
 (let (($x22 (=> (and $x208 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x171)))))
 (let (($x220 (and $x22 $x181)))
 (let (($x14 (=> $x220 $x74)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x144 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x193 (bvule ?x144 (_ bv4 32))))
 (let (($x74 (= $x193 true)))
 (let ((?x209 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x209)))
 (let (($x213 (= ?x212 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x213 true)))
 (let (($x217 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x217 true)))
 (let (($x101 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x165 (= $x101 true)))
 (let (($x77 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x154 (= $x77 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x200)))
 (let ((?x205 (bvand symbol.1 (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x205)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let ((?x159 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x43 (= input.memlabel-mem--symbol.1_end ?x159)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x203 (and $x119 $x43)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x128 $x203)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x53 (and $x134 $x68)))
 (let (($x91 (not $x53)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x158 $x145)))
 (let (($x151 (and (not $x49) $x91)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x188 $x24)))
 (let (($x88 (not $x125)))
 (let (($x249 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x89 $x249)))
 (let (($x142 (and (not $x250) $x88)))
 (let (($x106 (and (and (and (and (and (and $x142 $x151) $x191) $x45) $x164) $x62) $x8)))
 (let (($x19 (and $x106 $x40)))
 (let (($x234 (= symbol.1 dst_symbol_addr.1)))
 (let (($x136 (and $x234 $x19)))
 (let (($x244 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x236 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x236)))
 (let (($x239 (or (bvugt input.memlabel-mem--symbol.1_begin ?x236) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x248 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x239) (or $x243 $x244)))))))
 (let (($x56 (and $x248 $x136)))
 (let (($x107 (= $x56 true)))
 (let (($x229 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x230 (= $x229 true)))
 (let (($x227 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (= $x227 true)))
 (let (($x222 (forall ((input.ind-%var907X (_ BitVec 32)) )(let ((?x38 (bvadd symbol.1 (bvmul input.ind-%var907X (_ bv4 32)))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x38))))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x38 (_ bv2 32))) ?x31)))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x38 (_ bv3 32))) ?x185)))
 (let ((?x110 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var907X)))
 (let (($x211 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var907X)))
 (=> $x211 (= ?x110 ?x55)))))))))
 ))
 (let (($x138 (forall ((input.ind-%var906X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var906X) (bvult input.ind-%var906X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x211 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var906X)))
 (= $x211 $x175))))
 ))
 (let (($x224 (and $x138 $x222)))
 (let (($x225 (= $x224 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x35)))
 (let (($x207 (= ?x182 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (= $x207 true)))
 (let (($x172 (= ?x182 input.dst.llvm-%n)))
 (let (($x70 (= $x172 true)))
 (let (($x41 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x179 (= $x41 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x108 (bvsub ?x36 ?x152)))
 (let (($x143 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x108) (bvult ?x36 ?x108))))
 (let ((?x66 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x86 (bvmul (_ bv4 64) ?x66)))
 (let ((?x173 ((_ extract 63 32) ?x86)))
 (let (($x28 (= (_ bv0 32) ?x173)))
 (let (($x93 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x61 (and (and (and true $x93) $x28) $x143)))
 (let (($x17 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x99 (and $x17 $x61)))
 (let (($x208 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x67 (=> $x208 $x99)))
 (let (($x180 (= $x67 true)))
 (let (($x117 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x140 (= $x117 true)))
 (let (($x137 (= $x208 true)))
 (let (($x118 (and $x137 $x140)))
 (let (($x16 (and $x118 $x180)))
 (let (($x168 (and $x16 $x179)))
 (let (($x187 (and $x168 $x70)))
 (let (($x123 (and $x187 $x30)))
 (let (($x226 (and $x123 $x225)))
 (let (($x228 (and $x226 $x232)))
 (let (($x231 (and $x228 $x230)))
 (let (($x69 (and $x231 $x107)))
 (let (($x148 (and $x69 $x154)))
 (let (($x216 (and $x148 $x165)))
 (let (($x219 (and $x216 $x218)))
 (let (($x199 (and $x219 $x214)))
 (let (($x100 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x100) $x199)))
 (let (($x130 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x130 $x215)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x6 (and $x52 $x170)))
 (let (($x97 (forall ((input.ind-%var917X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var917X)))
 (=> $x32 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var917X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var916X (_ BitVec 32)) )(let (($x32 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var916X)))
 (= $x32 false)))
 ))
 (let (($x129 (and $x114 $x97)))
 (let (($x103 (and $x129 $x6)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x120 $x103)))
 (let (($x171 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x58 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x171)))))
 (let (($x22 (=> (and $x208 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x171)))))
 (let (($x220 (and $x22 $x181)))
 (let (($x14 (=> $x220 $x74)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2001fffc)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2001ffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000187)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2001fffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffff8)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) false
      (not (bvule #x00000004 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00080001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x1d100014)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa3500004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa3500007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1d1001a3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa3500004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x1d100014)
  (define-fun symbol.1 () (_ BitVec 32)
    #x1d100014)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00080001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00080001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x1d100017 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x1d100016 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x1d100015 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x1d100014 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x163 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x186 (bvule ?x163 (_ bv399 32))))
 (let (($x98 (= $x186 true)))
 (let ((?x190 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x190)))
 (let (($x75 (= ?x162 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x75 true)))
 (let (($x131 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x201 (= $x131 true)))
 (let (($x26 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x115 (= $x26 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x57 (= $x50 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x33)))
 (let ((?x74 (bvand symbol.1 (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x74)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x6 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x6)))
 (let (($x170 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x181 (and $x170 $x103)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x215 $x181)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x218 (and $x216 $x217)))
 (let (($x219 (not $x218)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x165 (and $x148 $x101)))
 (let (($x212 (and (not $x165) $x219)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x136 $x56)))
 (let (($x69 (not $x107)))
 (let (($x40 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x200 $x40)))
 (let (($x154 (and (not $x19) $x69)))
 (let (($x147 (and (and (and (and (and (and $x154 $x212) $x213) $x199) $x220) $x193) $x14)))
 (let (($x132 (and $x147 $x124)))
 (let (($x80 (= symbol.1 dst_symbol_addr.1)))
 (let (($x23 (and $x80 $x132)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x146 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x146)))
 (let (($x161 (or (bvugt input.memlabel-mem--symbol.1_begin ?x146) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x161) (or $x164 $x189)))))))
 (let (($x90 (and $x106 $x23)))
 (let (($x13 (= $x90 true)))
 (let (($x53 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x91 (= $x53 true)))
 (let (($x112 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x112 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x158 true)))
 (let (($x24 (forall ((input.ind-%var997X (_ BitVec 32)) )(let ((?x244 (bvadd symbol.1 (bvmul input.ind-%var997X (_ bv4 32)))))
 (let ((?x104 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x244))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv2 32))) ?x104)))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv3 32))) ?x234)))
 (let ((?x224 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var997X)))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var997X)))
 (=> $x206 (= ?x224 ?x250)))))))))
 ))
 (let (($x55 (forall ((input.ind-%var996X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var996X) (bvult input.ind-%var996X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var996X)))
 (= $x206 $x31))))
 ))
 (let (($x125 (and $x55 $x24)))
 (let (($x88 (= $x125 true)))
 (let ((?x211 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x211)))
 (let (($x138 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (= $x138 true)))
 (let (($x9 (= ?x65 input.dst.llvm-%n)))
 (let (($x175 (= $x9 true)))
 (let (($x187 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x207 (= $x187 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x61 (bvsub ?x36 ?x152)))
 (let (($x16 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x61) (bvult ?x36 ?x61))))
 (let ((?x108 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x111 (bvmul (_ bv4 64) ?x108)))
 (let ((?x141 ((_ extract 63 32) ?x111)))
 (let (($x143 (= (_ bv0 32) ?x141)))
 (let (($x166 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x168 (and (and (and true $x166) $x143) $x16)))
 (let (($x7 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x85 (and $x7 $x168)))
 (let (($x174 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (=> $x174 $x85)))
 (let (($x182 (= $x35 true)))
 (let (($x177 (= $x174 true)))
 (let (($x172 (and $x177 $x182)))
 (let (($x30 (and $x172 $x207)))
 (let (($x15 (and $x30 $x175)))
 (let (($x25 (and $x15 $x110)))
 (let (($x142 (and $x25 $x88)))
 (let (($x49 (and $x142 $x145)))
 (let (($x68 (and $x49 $x134)))
 (let (($x151 (and $x68 $x91)))
 (let (($x238 (and $x151 $x13)))
 (let (($x18 (and $x238 $x57)))
 (let (($x87 (and $x18 $x115)))
 (let (($x197 (and $x87 $x201)))
 (let (($x47 (and $x197 $x39)))
 (let (($x169 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (and (not $x169) $x47)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x195 (and $x5 $x59)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x72 $x195)))
 (let (($x117 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1007X)))
 (=> $x20 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1007X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (= $x20 false)))
 ))
 (let (($x140 (and $x97 $x117)))
 (let (($x64 (and $x140 $x92)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x84 $x64)))
 (let (($x71 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x120 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x71)))))
 (let (($x34 (=> (and $x174 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x71)))))
 (let (($x178 (and $x34 $x105)))
 (let (($x121 (=> $x178 $x98)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x163 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x186 (bvule ?x163 (_ bv399 32))))
 (let (($x98 (= $x186 true)))
 (let ((?x190 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x190)))
 (let (($x75 (= ?x162 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x75 true)))
 (let (($x131 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x201 (= $x131 true)))
 (let (($x26 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x115 (= $x26 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x57 (= $x50 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x33)))
 (let ((?x74 (bvand symbol.1 (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x74)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x6 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x6)))
 (let (($x170 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x181 (and $x170 $x103)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x215 $x181)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x218 (and $x216 $x217)))
 (let (($x219 (not $x218)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x165 (and $x148 $x101)))
 (let (($x212 (and (not $x165) $x219)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x136 $x56)))
 (let (($x69 (not $x107)))
 (let (($x40 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x200 $x40)))
 (let (($x154 (and (not $x19) $x69)))
 (let (($x147 (and (and (and (and (and (and $x154 $x212) $x213) $x199) $x220) $x193) $x14)))
 (let (($x132 (and $x147 $x124)))
 (let (($x80 (= symbol.1 dst_symbol_addr.1)))
 (let (($x23 (and $x80 $x132)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x146 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x146)))
 (let (($x161 (or (bvugt input.memlabel-mem--symbol.1_begin ?x146) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x161) (or $x164 $x189)))))))
 (let (($x90 (and $x106 $x23)))
 (let (($x13 (= $x90 true)))
 (let (($x53 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x91 (= $x53 true)))
 (let (($x112 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x112 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (= $x158 true)))
 (let (($x24 (forall ((input.ind-%var997X (_ BitVec 32)) )(let ((?x244 (bvadd symbol.1 (bvmul input.ind-%var997X (_ bv4 32)))))
 (let ((?x104 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x244))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv2 32))) ?x104)))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x244 (_ bv3 32))) ?x234)))
 (let ((?x224 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var997X)))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var997X)))
 (=> $x206 (= ?x224 ?x250)))))))))
 ))
 (let (($x55 (forall ((input.ind-%var996X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var996X) (bvult input.ind-%var996X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var996X)))
 (= $x206 $x31))))
 ))
 (let (($x125 (and $x55 $x24)))
 (let (($x88 (= $x125 true)))
 (let ((?x211 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x211)))
 (let (($x138 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (= $x138 true)))
 (let (($x9 (= ?x65 input.dst.llvm-%n)))
 (let (($x175 (= $x9 true)))
 (let (($x187 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x207 (= $x187 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x61 (bvsub ?x36 ?x152)))
 (let (($x16 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x61) (bvult ?x36 ?x61))))
 (let ((?x108 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x111 (bvmul (_ bv4 64) ?x108)))
 (let ((?x141 ((_ extract 63 32) ?x111)))
 (let (($x143 (= (_ bv0 32) ?x141)))
 (let (($x166 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x168 (and (and (and true $x166) $x143) $x16)))
 (let (($x7 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x85 (and $x7 $x168)))
 (let (($x174 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (=> $x174 $x85)))
 (let (($x182 (= $x35 true)))
 (let (($x177 (= $x174 true)))
 (let (($x172 (and $x177 $x182)))
 (let (($x30 (and $x172 $x207)))
 (let (($x15 (and $x30 $x175)))
 (let (($x25 (and $x15 $x110)))
 (let (($x142 (and $x25 $x88)))
 (let (($x49 (and $x142 $x145)))
 (let (($x68 (and $x49 $x134)))
 (let (($x151 (and $x68 $x91)))
 (let (($x238 (and $x151 $x13)))
 (let (($x18 (and $x238 $x57)))
 (let (($x87 (and $x18 $x115)))
 (let (($x197 (and $x87 $x201)))
 (let (($x47 (and $x197 $x39)))
 (let (($x169 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (and (not $x169) $x47)))
 (let (($x5 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x195 (and $x5 $x59)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x72 $x195)))
 (let (($x117 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1007X)))
 (=> $x20 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1007X) (_ bv0 32)))))
 ))
 (let (($x97 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x20 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (= $x20 false)))
 ))
 (let (($x140 (and $x97 $x117)))
 (let (($x64 (and $x140 $x92)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x84 $x64)))
 (let (($x71 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x120 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x71)))))
 (let (($x34 (=> (and $x174 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x71)))))
 (let (($x178 (and $x34 $x105)))
 (let (($x121 (=> $x178 $x98)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x243 (bvsle ?x21 (_ bv399 32))))
 (let (($x27 (= $x243 true)))
 (let ((?x247 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x247)))
 (let (($x230 (= ?x236 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x231 (= $x230 true)))
 (let (($x228 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x237 (= $x228 true)))
 (let (($x221 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x60 (= $x221 true)))
 (let (($x167 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x222 (= $x167 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x183)))
 (let ((?x98 (bvand symbol.1 (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x98)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x92 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x64 (= input.memlabel-mem--symbol.1_end ?x92)))
 (let (($x195 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x105 (and $x195 $x64)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x59 $x105)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x201 (and $x87 $x131)))
 (let (($x197 (not $x201)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x18 $x26)))
 (let (($x162 (and (not $x115) $x197)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x23 $x90)))
 (let (($x238 (not $x13)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x33 $x124)))
 (let (($x57 (and (not $x132) $x238)))
 (let (($x94 (and (and (and (and (and (and $x57 $x162) $x75) $x47) $x178) $x186) $x121)))
 (let (($x129 (and $x94 $x126)))
 (let (($x213 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x213 $x129)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x199 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x199)))
 (let (($x170 (or (bvugt input.memlabel-mem--symbol.1_begin ?x199) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x170) (or $x220 $x139)))))))
 (let (($x32 (and $x147 $x52)))
 (let (($x37 (= $x32 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x218 (= $x217 true)))
 (let (($x165 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x209 (= $x165 true)))
 (let (($x154 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x154 true)))
 (let (($x136 (forall ((input.ind-%var1017X (_ BitVec 32)) )(let ((?x203 (bvadd symbol.1 (bvmul input.ind-%var1017X (_ bv4 32)))))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x203))))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv2 32))) ?x150)))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv3 32))) ?x191)))
 (let ((?x142 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1017X)))
 (let (($x235 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1017X)))
 (=> $x235 (= ?x142 ?x40)))))))))
 ))
 (let (($x188 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let (($x250 (and (bvule (_ bv0 32) input.ind-%var1016X) (bvult input.ind-%var1016X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x235 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1016X)))
 (= $x235 $x250))))
 ))
 (let (($x56 (and $x188 $x136)))
 (let (($x107 (= $x56 true)))
 (let ((?x202 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x202)))
 (let (($x226 (= ?x31 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x242 (= $x226 true)))
 (let (($x185 (= ?x31 input.dst.llvm-%n)))
 (let (($x55 (= $x185 true)))
 (let (($x110 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x25 (= $x110 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x182 (bvsub ?x36 ?x152)))
 (let (($x207 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x182) (bvult ?x36 ?x182))))
 (let ((?x16 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvmul (_ bv4 64) ?x16)))
 (let ((?x85 ((_ extract 63 32) ?x168)))
 (let (($x35 (= (_ bv0 32) ?x85)))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x211 (and (and (and true $x67) $x35) $x207)))
 (let (($x141 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x65 (and $x141 $x211)))
 (let (($x227 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x227 $x65)))
 (let (($x175 (= $x9 true)))
 (let (($x12 (= $x227 true)))
 (let (($x15 (and $x12 $x175)))
 (let (($x206 (and $x15 $x25)))
 (let (($x224 (and $x206 $x55)))
 (let (($x244 (and $x224 $x242)))
 (let (($x69 (and $x244 $x107)))
 (let (($x101 (and $x69 $x148)))
 (let (($x216 (and $x101 $x209)))
 (let (($x219 (and $x216 $x218)))
 (let (($x79 (and $x219 $x37)))
 (let (($x194 (and $x79 $x222)))
 (let (($x232 (and $x194 $x60)))
 (let (($x239 (and $x232 $x237)))
 (let (($x229 (and $x239 $x231)))
 (let (($x41 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (and (not $x41) $x229)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and $x28 $x10)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x38 (and $x86 $x240)))
 (let (($x93 (forall ((input.ind-%var1027X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1027X)))
 (=> $x73 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1027X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var1026X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1026X)))
 (= $x73 false)))
 ))
 (let (($x11 (and $x117 $x93)))
 (let (($x82 (and $x11 $x38)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x198 (and $x114 $x82)))
 (let (($x22 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x84 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x22)))))
 (let (($x133 (=> (and $x227 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x22)))))
 (let (($x241 (and $x133 $x198)))
 (let (($x100 (=> $x241 $x27)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x243 (bvsle ?x21 (_ bv399 32))))
 (let (($x27 (= $x243 true)))
 (let ((?x247 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x247)))
 (let (($x230 (= ?x236 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x231 (= $x230 true)))
 (let (($x228 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x237 (= $x228 true)))
 (let (($x221 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x60 (= $x221 true)))
 (let (($x167 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x222 (= $x167 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x183)))
 (let ((?x98 (bvand symbol.1 (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x98)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x92 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x64 (= input.memlabel-mem--symbol.1_end ?x92)))
 (let (($x195 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x105 (and $x195 $x64)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x59 $x105)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x201 (and $x87 $x131)))
 (let (($x197 (not $x201)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x18 $x26)))
 (let (($x162 (and (not $x115) $x197)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x23 $x90)))
 (let (($x238 (not $x13)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x33 $x124)))
 (let (($x57 (and (not $x132) $x238)))
 (let (($x94 (and (and (and (and (and (and $x57 $x162) $x75) $x47) $x178) $x186) $x121)))
 (let (($x129 (and $x94 $x126)))
 (let (($x213 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x213 $x129)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x199 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x199)))
 (let (($x170 (or (bvugt input.memlabel-mem--symbol.1_begin ?x199) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x147 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x170) (or $x220 $x139)))))))
 (let (($x32 (and $x147 $x52)))
 (let (($x37 (= $x32 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x218 (= $x217 true)))
 (let (($x165 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x209 (= $x165 true)))
 (let (($x154 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x154 true)))
 (let (($x136 (forall ((input.ind-%var1017X (_ BitVec 32)) )(let ((?x203 (bvadd symbol.1 (bvmul input.ind-%var1017X (_ bv4 32)))))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x203))))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv2 32))) ?x150)))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv3 32))) ?x191)))
 (let ((?x142 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1017X)))
 (let (($x235 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1017X)))
 (=> $x235 (= ?x142 ?x40)))))))))
 ))
 (let (($x188 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let (($x250 (and (bvule (_ bv0 32) input.ind-%var1016X) (bvult input.ind-%var1016X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x235 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1016X)))
 (= $x235 $x250))))
 ))
 (let (($x56 (and $x188 $x136)))
 (let (($x107 (= $x56 true)))
 (let ((?x202 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x202)))
 (let (($x226 (= ?x31 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x242 (= $x226 true)))
 (let (($x185 (= ?x31 input.dst.llvm-%n)))
 (let (($x55 (= $x185 true)))
 (let (($x110 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x25 (= $x110 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x182 (bvsub ?x36 ?x152)))
 (let (($x207 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x182) (bvult ?x36 ?x182))))
 (let ((?x16 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvmul (_ bv4 64) ?x16)))
 (let ((?x85 ((_ extract 63 32) ?x168)))
 (let (($x35 (= (_ bv0 32) ?x85)))
 (let (($x67 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x211 (and (and (and true $x67) $x35) $x207)))
 (let (($x141 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x65 (and $x141 $x211)))
 (let (($x227 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x227 $x65)))
 (let (($x175 (= $x9 true)))
 (let (($x12 (= $x227 true)))
 (let (($x15 (and $x12 $x175)))
 (let (($x206 (and $x15 $x25)))
 (let (($x224 (and $x206 $x55)))
 (let (($x244 (and $x224 $x242)))
 (let (($x69 (and $x244 $x107)))
 (let (($x101 (and $x69 $x148)))
 (let (($x216 (and $x101 $x209)))
 (let (($x219 (and $x216 $x218)))
 (let (($x79 (and $x219 $x37)))
 (let (($x194 (and $x79 $x222)))
 (let (($x232 (and $x194 $x60)))
 (let (($x239 (and $x232 $x237)))
 (let (($x229 (and $x239 $x231)))
 (let (($x41 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (and (not $x41) $x229)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and $x28 $x10)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x38 (and $x86 $x240)))
 (let (($x93 (forall ((input.ind-%var1027X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1027X)))
 (=> $x73 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1027X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var1026X (_ BitVec 32)) )(let (($x73 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1026X)))
 (= $x73 false)))
 ))
 (let (($x11 (and $x117 $x93)))
 (let (($x82 (and $x11 $x38)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x198 (and $x114 $x82)))
 (let (($x22 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x84 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x22)))))
 (let (($x133 (=> (and $x227 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x22)))))
 (let (($x241 (and $x133 $x198)))
 (let (($x100 (=> $x241 $x27)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x125 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x43 (bvsge ?x125 (_ bv0 32))))
 (let (($x118 (= $x43 true)))
 (let ((?x45 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x45)))
 (let (($x53 (= ?x8 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x53 true)))
 (let (($x134 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x128 (= $x134 true)))
 (let (($x251 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x245 (= $x251 true)))
 (let (($x95 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x95 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x48)))
 (let ((?x27 (bvand symbol.1 (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x27)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x38 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x82 (= input.memlabel-mem--symbol.1_end ?x38)))
 (let (($x240 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (and $x240 $x82)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (and $x10 $x198)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x237 (and $x232 $x228)))
 (let (($x239 (not $x237)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x194 $x221)))
 (let (($x236 (and (not $x60) $x239)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x52 $x32)))
 (let (($x79 (not $x37)))
 (let (($x126 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x183 $x126)))
 (let (($x222 (and (not $x129) $x79)))
 (let (($x17 (and (and (and (and (and (and $x222 $x236) $x230) $x229) $x241) $x243) $x100)))
 (let (($x140 (and $x17 $x54)))
 (let (($x75 (= symbol.1 dst_symbol_addr.1)))
 (let (($x72 (and $x75 $x140)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x195 (or (bvugt input.memlabel-mem--symbol.1_begin ?x47) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x195) (or $x178 $x225)))))))
 (let (($x20 (and $x94 $x72)))
 (let (($x81 (= $x20 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x201 (= $x131 true)))
 (let (($x115 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (= $x115 true)))
 (let (($x57 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (= $x57 true)))
 (let (($x23 (forall ((input.ind-%var1037X (_ BitVec 32)) )(let ((?x181 (bvadd symbol.1 (bvmul input.ind-%var1037X (_ bv4 32)))))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x181))))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv2 32))) ?x176)))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv3 32))) ?x42)))
 (let ((?x69 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1037X)))
 (let (($x192 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1037X)))
 (=> $x192 (= ?x69 ?x124)))))))))
 ))
 (let (($x77 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let (($x40 (and (bvule (_ bv0 32) input.ind-%var1036X) (bvult input.ind-%var1036X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x192 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1036X)))
 (= $x192 $x40))))
 ))
 (let (($x90 (and $x77 $x23)))
 (let (($x13 (= $x90 true)))
 (let ((?x104 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x104)))
 (let (($x145 (= ?x250 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (= $x145 true)))
 (let (($x156 (= ?x250 input.dst.llvm-%n)))
 (let (($x188 (= $x156 true)))
 (let (($x242 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x244 (= $x242 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x175 (bvsub ?x36 ?x152)))
 (let (($x25 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x175) (bvult ?x36 ?x175))))
 (let ((?x207 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x211 (bvmul (_ bv4 64) ?x207)))
 (let ((?x65 ((_ extract 63 32) ?x211)))
 (let (($x9 (= (_ bv0 32) ?x65)))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x202 (and (and (and true $x70) $x9) $x25)))
 (let (($x85 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x31 (and $x85 $x202)))
 (let (($x49 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (=> $x49 $x31)))
 (let (($x55 (= $x185 true)))
 (let (($x180 (= $x49 true)))
 (let (($x224 (and $x180 $x55)))
 (let (($x235 (and $x224 $x244)))
 (let (($x142 (and $x235 $x188)))
 (let (($x203 (and $x142 $x164)))
 (let (($x238 (and $x203 $x13)))
 (let (($x26 (and $x238 $x18)))
 (let (($x87 (and $x26 $x190)))
 (let (($x197 (and $x87 $x201)))
 (let (($x210 (and $x197 $x81)))
 (let (($x89 (and $x210 $x88)))
 (let (($x112 (and $x89 $x245)))
 (let (($x119 (and $x112 $x128)))
 (let (($x68 (and $x119 $x91)))
 (let (($x30 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and (not $x30) $x68)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (and $x61 $x146)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x249 (and $x179 $x161)))
 (let (($x108 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1047X)))
 (=> $x51 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1047X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1046X)))
 (= $x51 false)))
 ))
 (let (($x111 (and $x93 $x108)))
 (let (($x246 (and $x111 $x249)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x97 $x246)))
 (let (($x34 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x114 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x34)))))
 (let (($x44 (=> (and $x49 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x34)))))
 (let (($x159 (and $x44 $x113)))
 (let (($x169 (=> $x159 $x118)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x125 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x43 (bvsge ?x125 (_ bv0 32))))
 (let (($x118 (= $x43 true)))
 (let ((?x45 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x45)))
 (let (($x53 (= ?x8 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x91 (= $x53 true)))
 (let (($x134 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x128 (= $x134 true)))
 (let (($x251 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x245 (= $x251 true)))
 (let (($x95 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x95 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x48)))
 (let ((?x27 (bvand symbol.1 (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x27)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x38 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x82 (= input.memlabel-mem--symbol.1_end ?x38)))
 (let (($x240 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (and $x240 $x82)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (and $x10 $x198)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x237 (and $x232 $x228)))
 (let (($x239 (not $x237)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x194 $x221)))
 (let (($x236 (and (not $x60) $x239)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x52 $x32)))
 (let (($x79 (not $x37)))
 (let (($x126 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x183 $x126)))
 (let (($x222 (and (not $x129) $x79)))
 (let (($x17 (and (and (and (and (and (and $x222 $x236) $x230) $x229) $x241) $x243) $x100)))
 (let (($x140 (and $x17 $x54)))
 (let (($x75 (= symbol.1 dst_symbol_addr.1)))
 (let (($x72 (and $x75 $x140)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x195 (or (bvugt input.memlabel-mem--symbol.1_begin ?x47) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x195) (or $x178 $x225)))))))
 (let (($x20 (and $x94 $x72)))
 (let (($x81 (= $x20 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x201 (= $x131 true)))
 (let (($x115 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (= $x115 true)))
 (let (($x57 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (= $x57 true)))
 (let (($x23 (forall ((input.ind-%var1037X (_ BitVec 32)) )(let ((?x181 (bvadd symbol.1 (bvmul input.ind-%var1037X (_ bv4 32)))))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x181))))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv2 32))) ?x176)))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv3 32))) ?x42)))
 (let ((?x69 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1037X)))
 (let (($x192 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1037X)))
 (=> $x192 (= ?x69 ?x124)))))))))
 ))
 (let (($x77 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let (($x40 (and (bvule (_ bv0 32) input.ind-%var1036X) (bvult input.ind-%var1036X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x192 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1036X)))
 (= $x192 $x40))))
 ))
 (let (($x90 (and $x77 $x23)))
 (let (($x13 (= $x90 true)))
 (let ((?x104 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x104)))
 (let (($x145 (= ?x250 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (= $x145 true)))
 (let (($x156 (= ?x250 input.dst.llvm-%n)))
 (let (($x188 (= $x156 true)))
 (let (($x242 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x244 (= $x242 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x175 (bvsub ?x36 ?x152)))
 (let (($x25 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x175) (bvult ?x36 ?x175))))
 (let ((?x207 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x211 (bvmul (_ bv4 64) ?x207)))
 (let ((?x65 ((_ extract 63 32) ?x211)))
 (let (($x9 (= (_ bv0 32) ?x65)))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x202 (and (and (and true $x70) $x9) $x25)))
 (let (($x85 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x31 (and $x85 $x202)))
 (let (($x49 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (=> $x49 $x31)))
 (let (($x55 (= $x185 true)))
 (let (($x180 (= $x49 true)))
 (let (($x224 (and $x180 $x55)))
 (let (($x235 (and $x224 $x244)))
 (let (($x142 (and $x235 $x188)))
 (let (($x203 (and $x142 $x164)))
 (let (($x238 (and $x203 $x13)))
 (let (($x26 (and $x238 $x18)))
 (let (($x87 (and $x26 $x190)))
 (let (($x197 (and $x87 $x201)))
 (let (($x210 (and $x197 $x81)))
 (let (($x89 (and $x210 $x88)))
 (let (($x112 (and $x89 $x245)))
 (let (($x119 (and $x112 $x128)))
 (let (($x68 (and $x119 $x91)))
 (let (($x30 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and (not $x30) $x68)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (and $x61 $x146)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x249 (and $x179 $x161)))
 (let (($x108 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1047X)))
 (=> $x51 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1047X) (_ bv0 32)))))
 ))
 (let (($x93 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x51 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1046X)))
 (= $x51 false)))
 ))
 (let (($x111 (and $x93 $x108)))
 (let (($x246 (and $x111 $x249)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x97 $x246)))
 (let (($x34 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x114 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x34)))))
 (let (($x44 (=> (and $x49 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x34)))))
 (let (($x159 (and $x44 $x113)))
 (let (($x169 (=> $x159 $x118)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (bvule ?x56 (_ bv399 32))))
 (let (($x7 (= $x103 true)))
 (let ((?x214 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x214)))
 (let (($x217 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x218 (= $x217 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x96 (= $x209 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x109 (= $x106 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x166 true)))
 (let (($x86 (forall ((input.ind-%var1057X (_ BitVec 32)) )(let ((?x125 (bvadd symbol.1 (bvmul input.ind-%var1057X (_ bv4 32)))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x125))))
 (let ((?x162 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv2 32))) ?x78)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv3 32))) ?x162)))
 (let ((?x95 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1057X)))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1057X)))
 (=> $x158 (= ?x95 ?x5)))))))))
 ))
 (let (($x72 (forall ((input.ind-%var1056X (_ BitVec 32)) )(let (($x54 (and (bvule (_ bv0 32) input.ind-%var1056X) (bvult input.ind-%var1056X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1056X)))
 (= $x158 $x54))))
 ))
 (let (($x73 (and $x72 $x86)))
 (let (($x137 (= $x73 true)))
 (let (($x240 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x38 (= $x240 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x232 (bvsub ?x36 ?x152)))
 (let (($x236 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x232) (bvult ?x36 ?x232))))
 (let ((?x194 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x194)))
 (let ((?x60 ((_ extract 63 32) ?x221)))
 (let (($x247 (= (_ bv0 32) ?x60)))
 (let (($x79 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x212 (and (and (and true $x79) $x247) $x236)))
 (let (($x129 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x231 (and $x129 $x212)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (=> $x101 $x231)))
 (let (($x248 (= $x229 true)))
 (let (($x155 (= $x101 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x223)))
 (let ((?x121 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x121)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x87 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x131 (= input.memlabel-mem--symbol.1_end ?x87)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x201 (and $x190 $x131)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (and $x115 $x201)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (and $x132 $x50)))
 (let (($x90 (not $x23)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x124 (and $x176 $x42)))
 (let (($x238 (and (not $x124) $x90)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x233 $x74)))
 (let (($x144 (not $x147)))
 (let (($x213 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x181 $x213)))
 (let (($x139 (and (not $x33) $x144)))
 (let (($x225 (and (and (and (and (and (and $x139 $x238) $x57) $x26) $x197) $x39) $x47)))
 (let (($x163 (and $x225 $x59)))
 (let (($x234 (= symbol.1 dst_symbol_addr.1)))
 (let (($x186 (and $x234 $x163)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x156) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x220 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x191 $x150)))))))
 (let (($x76 (and $x220 $x186)))
 (let (($x98 (= $x76 true)))
 (let (($x224 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x224 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x175)))
 (let (($x31 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (= $x31 true)))
 (let (($x110 (= ?x138 input.dst.llvm-%n)))
 (let (($x25 (= $x110 true)))
 (let (($x65 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x9 (= $x65 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x211 (= $x207 true)))
 (let (($x196 (and $x211 $x9)))
 (let (($x202 (and $x196 $x25)))
 (let (($x55 (and $x202 $x185)))
 (let (($x242 (and $x55 $x226)))
 (let (($x94 (and $x242 $x98)))
 (let (($x75 (and $x94 $x155)))
 (let (($x10 (and $x75 $x248)))
 (let (($x82 (and $x10 $x38)))
 (let (($x204 (and $x82 $x137)))
 (let (($x80 (and $x204 $x107)))
 (let (($x165 (and $x80 $x109)))
 (let (($x215 (and $x165 $x96)))
 (let (($x216 (and $x215 $x218)))
 (let (($x206 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (and (not $x206) $x216)))
 (let (($x182 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x182 $x199)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x200 (and $x123 $x170)))
 (let (($x16 (forall ((input.ind-%var1067X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1067X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1067X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var1066X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1066X)))
 (= $x66 false)))
 ))
 (let (($x168 (and $x108 $x16)))
 (let (($x62 (and $x168 $x200)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x117 $x62)))
 (let (($x133 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x97 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x133)))))
 (let (($x157 (=> (and $x101 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x133)))))
 (let (($x6 (and $x157 $x189)))
 (let (($x41 (=> $x6 $x7)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (bvule ?x56 (_ bv399 32))))
 (let (($x7 (= $x103 true)))
 (let ((?x214 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x214)))
 (let (($x217 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x218 (= $x217 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x96 (= $x209 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x109 (= $x106 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x166 true)))
 (let (($x86 (forall ((input.ind-%var1057X (_ BitVec 32)) )(let ((?x125 (bvadd symbol.1 (bvmul input.ind-%var1057X (_ bv4 32)))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x125))))
 (let ((?x162 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv2 32))) ?x78)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv3 32))) ?x162)))
 (let ((?x95 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1057X)))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1057X)))
 (=> $x158 (= ?x95 ?x5)))))))))
 ))
 (let (($x72 (forall ((input.ind-%var1056X (_ BitVec 32)) )(let (($x54 (and (bvule (_ bv0 32) input.ind-%var1056X) (bvult input.ind-%var1056X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x158 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1056X)))
 (= $x158 $x54))))
 ))
 (let (($x73 (and $x72 $x86)))
 (let (($x137 (= $x73 true)))
 (let (($x240 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x38 (= $x240 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x232 (bvsub ?x36 ?x152)))
 (let (($x236 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x232) (bvult ?x36 ?x232))))
 (let ((?x194 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x194)))
 (let ((?x60 ((_ extract 63 32) ?x221)))
 (let (($x247 (= (_ bv0 32) ?x60)))
 (let (($x79 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x212 (and (and (and true $x79) $x247) $x236)))
 (let (($x129 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x231 (and $x129 $x212)))
 (let (($x101 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (=> $x101 $x231)))
 (let (($x248 (= $x229 true)))
 (let (($x155 (= $x101 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x223)))
 (let ((?x121 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x121)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x87 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x131 (= input.memlabel-mem--symbol.1_end ?x87)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x201 (and $x190 $x131)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (and $x115 $x201)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (and $x132 $x50)))
 (let (($x90 (not $x23)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x124 (and $x176 $x42)))
 (let (($x238 (and (not $x124) $x90)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x233 $x74)))
 (let (($x144 (not $x147)))
 (let (($x213 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x181 $x213)))
 (let (($x139 (and (not $x33) $x144)))
 (let (($x225 (and (and (and (and (and (and $x139 $x238) $x57) $x26) $x197) $x39) $x47)))
 (let (($x163 (and $x225 $x59)))
 (let (($x234 (= symbol.1 dst_symbol_addr.1)))
 (let (($x186 (and $x234 $x163)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x156) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x220 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x191 $x150)))))))
 (let (($x76 (and $x220 $x186)))
 (let (($x98 (= $x76 true)))
 (let (($x224 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x224 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x175)))
 (let (($x31 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x185 (= $x31 true)))
 (let (($x110 (= ?x138 input.dst.llvm-%n)))
 (let (($x25 (= $x110 true)))
 (let (($x65 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x9 (= $x65 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x211 (= $x207 true)))
 (let (($x196 (and $x211 $x9)))
 (let (($x202 (and $x196 $x25)))
 (let (($x55 (and $x202 $x185)))
 (let (($x242 (and $x55 $x226)))
 (let (($x94 (and $x242 $x98)))
 (let (($x75 (and $x94 $x155)))
 (let (($x10 (and $x75 $x248)))
 (let (($x82 (and $x10 $x38)))
 (let (($x204 (and $x82 $x137)))
 (let (($x80 (and $x204 $x107)))
 (let (($x165 (and $x80 $x109)))
 (let (($x215 (and $x165 $x96)))
 (let (($x216 (and $x215 $x218)))
 (let (($x206 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (and (not $x206) $x216)))
 (let (($x182 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x182 $x199)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x200 (and $x123 $x170)))
 (let (($x16 (forall ((input.ind-%var1067X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1067X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1067X) (_ bv0 32)))))
 ))
 (let (($x108 (forall ((input.ind-%var1066X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1066X)))
 (= $x66 false)))
 ))
 (let (($x168 (and $x108 $x16)))
 (let (($x62 (and $x168 $x200)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x117 $x62)))
 (let (($x133 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x97 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x133)))))
 (let (($x157 (=> (and $x101 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x133)))))
 (let (($x6 (and $x157 $x189)))
 (let (($x41 (=> $x6 $x7)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x81 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (bvsle ?x81 (_ bv399 32))))
 (let (($x141 (= $x113 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x53)))
 (let (($x128 (= ?x91 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x128 true)))
 (let (($x112 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x112 true)))
 (let (($x243 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x130 (= $x243 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x67 true)))
 (let (($x179 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let ((?x56 (bvadd symbol.1 (bvmul input.ind-%var1077X (_ bv4 32)))))
 (let ((?x24 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x56))))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv2 32))) ?x24)))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv3 32))) ?x244)))
 (let ((?x166 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1077X)))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1077X)))
 (=> $x63 (= ?x166 ?x28)))))))))
 ))
 (let (($x86 (forall ((input.ind-%var1076X (_ BitVec 32)) )(let (($x173 (and (bvule (_ bv0 32) input.ind-%var1076X) (bvult input.ind-%var1076X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1076X)))
 (= $x63 $x173))))
 ))
 (let (($x51 (and $x86 $x179)))
 (let (($x177 (= $x51 true)))
 (let (($x159 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x125 (= $x159 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x10 (bvsub ?x36 ?x152)))
 (let (($x158 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x10) (bvult ?x36 ?x10))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvmul (_ bv4 64) ?x212)))
 (let ((?x229 ((_ extract 63 32) ?x231)))
 (let (($x248 (= (_ bv0 32) ?x229)))
 (let (($x239 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x54 (and (and (and true $x239) $x248) $x158)))
 (let (($x247 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x140 (and $x247 $x54)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (=> $x251 $x140)))
 (let (($x95 (= $x72 true)))
 (let (($x222 (= $x251 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x98)))
 (let ((?x186 (bvand symbol.1 (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x186)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x121 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x47 (= input.memlabel-mem--symbol.1_end ?x121)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x225 (and $x105 $x47)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (and $x39 $x225)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x64 $x115)))
 (let (($x87 (not $x190)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x26 (and $x92 $x18)))
 (let (($x201 (and (not $x26) $x87)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x50 $x23)))
 (let (($x238 (not $x90)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x124 $x13)))
 (let (($x57 (and (not $x132) $x238)))
 (let (($x52 (and (and (and (and (and (and $x57 $x201) $x197) $x149) $x223) $x163) $x76)))
 (let (($x167 (and $x52 $x94)))
 (let (($x40 (= symbol.1 dst_symbol_addr.1)))
 (let (($x32 (and $x40 $x167)))
 (let (($x233 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x234 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x234) (or $x193 $x233)))))))
 (let (($x37 (and $x42 $x32)))
 (let (($x79 (= $x37 true)))
 (let (($x164 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x203 (= $x164 true)))
 (let ((?x242 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x242)))
 (let (($x188 (= ?x104 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x188 true)))
 (let (($x250 (= ?x104 input.dst.llvm-%n)))
 (let (($x148 (= $x250 true)))
 (let (($x185 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x55 (= $x185 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x31 (= $x202 true)))
 (let (($x224 (and $x31 $x55)))
 (let (($x156 (and $x224 $x148)))
 (let (($x145 (and $x156 $x142)))
 (let (($x191 (and $x145 $x203)))
 (let (($x153 (and $x191 $x79)))
 (let (($x194 (and $x153 $x222)))
 (let (($x89 (and $x194 $x95)))
 (let (($x205 (and $x89 $x125)))
 (let (($x252 (and $x205 $x177)))
 (let (($x198 (and $x252 $x210)))
 (let (($x245 (and $x198 $x130)))
 (let (($x161 (and $x245 $x146)))
 (let (($x134 (and $x161 $x119)))
 (let (($x110 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (and (not $x110) $x134)))
 (let (($x175 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and $x175 $x68)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x241 (and $x9 $x249)))
 (let (($x207 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1087X)))
 (=> $x143 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1087X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1086X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1086X)))
 (= $x143 false)))
 ))
 (let (($x211 (and $x16 $x207)))
 (let (($x27 (and $x211 $x241)))
 (let (($x93 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x93 $x27)))
 (let (($x44 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x117 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x44)))))
 (let (($x29 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x44)))))
 (let (($x246 (and $x29 $x100)))
 (let (($x30 (=> $x246 $x141)))
 (not $x30))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x81 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (bvsle ?x81 (_ bv399 32))))
 (let (($x141 (= $x113 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x53)))
 (let (($x128 (= ?x91 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x119 (= $x128 true)))
 (let (($x112 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x112 true)))
 (let (($x243 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x130 (= $x243 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x67 true)))
 (let (($x179 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let ((?x56 (bvadd symbol.1 (bvmul input.ind-%var1077X (_ bv4 32)))))
 (let ((?x24 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x56))))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv2 32))) ?x24)))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x56 (_ bv3 32))) ?x244)))
 (let ((?x166 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1077X)))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1077X)))
 (=> $x63 (= ?x166 ?x28)))))))))
 ))
 (let (($x86 (forall ((input.ind-%var1076X (_ BitVec 32)) )(let (($x173 (and (bvule (_ bv0 32) input.ind-%var1076X) (bvult input.ind-%var1076X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1076X)))
 (= $x63 $x173))))
 ))
 (let (($x51 (and $x86 $x179)))
 (let (($x177 (= $x51 true)))
 (let (($x159 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x125 (= $x159 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x10 (bvsub ?x36 ?x152)))
 (let (($x158 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x10) (bvult ?x36 ?x10))))
 (let ((?x212 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvmul (_ bv4 64) ?x212)))
 (let ((?x229 ((_ extract 63 32) ?x231)))
 (let (($x248 (= (_ bv0 32) ?x229)))
 (let (($x239 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x54 (and (and (and true $x239) $x248) $x158)))
 (let (($x247 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x140 (and $x247 $x54)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (=> $x251 $x140)))
 (let (($x95 (= $x72 true)))
 (let (($x222 (= $x251 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x98)))
 (let ((?x186 (bvand symbol.1 (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x186)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x121 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x47 (= input.memlabel-mem--symbol.1_end ?x121)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x225 (and $x105 $x47)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (and $x39 $x225)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x64 $x115)))
 (let (($x87 (not $x190)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x26 (and $x92 $x18)))
 (let (($x201 (and (not $x26) $x87)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x50 $x23)))
 (let (($x238 (not $x90)))
 (let (($x13 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x124 $x13)))
 (let (($x57 (and (not $x132) $x238)))
 (let (($x52 (and (and (and (and (and (and $x57 $x201) $x197) $x149) $x223) $x163) $x76)))
 (let (($x167 (and $x52 $x94)))
 (let (($x40 (= symbol.1 dst_symbol_addr.1)))
 (let (($x32 (and $x40 $x167)))
 (let (($x233 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x234 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x234) (or $x193 $x233)))))))
 (let (($x37 (and $x42 $x32)))
 (let (($x79 (= $x37 true)))
 (let (($x164 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x203 (= $x164 true)))
 (let ((?x242 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x242)))
 (let (($x188 (= ?x104 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x188 true)))
 (let (($x250 (= ?x104 input.dst.llvm-%n)))
 (let (($x148 (= $x250 true)))
 (let (($x185 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x55 (= $x185 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x31 (= $x202 true)))
 (let (($x224 (and $x31 $x55)))
 (let (($x156 (and $x224 $x148)))
 (let (($x145 (and $x156 $x142)))
 (let (($x191 (and $x145 $x203)))
 (let (($x153 (and $x191 $x79)))
 (let (($x194 (and $x153 $x222)))
 (let (($x89 (and $x194 $x95)))
 (let (($x205 (and $x89 $x125)))
 (let (($x252 (and $x205 $x177)))
 (let (($x198 (and $x252 $x210)))
 (let (($x245 (and $x198 $x130)))
 (let (($x161 (and $x245 $x146)))
 (let (($x134 (and $x161 $x119)))
 (let (($x110 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (and (not $x110) $x134)))
 (let (($x175 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and $x175 $x68)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x241 (and $x9 $x249)))
 (let (($x207 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1087X)))
 (=> $x143 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1087X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1086X (_ BitVec 32)) )(let (($x143 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1086X)))
 (= $x143 false)))
 ))
 (let (($x211 (and $x16 $x207)))
 (let (($x27 (and $x211 $x241)))
 (let (($x93 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x93 $x27)))
 (let (($x44 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x117 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x44)))))
 (let (($x29 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x44)))))
 (let (($x246 (and $x29 $x100)))
 (let (($x30 (=> $x246 $x141)))
 (not $x30))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x137 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x189 (bvsge ?x137 (_ bv0 32))))
 (let (($x85 (= $x189 true)))
 (let ((?x217 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x218 (bvneg ?x217)))
 (let (($x96 (= ?x218 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x96 true)))
 (let (($x165 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x199 (= $x165 true)))
 (let (($x118 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x118 true)))
 (let (($x70 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x204 (= $x70 true)))
 (let (($x123 (forall ((input.ind-%var1097X (_ BitVec 32)) )(let ((?x81 (bvadd symbol.1 (bvmul input.ind-%var1097X (_ bv4 32)))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x81))))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv2 32))) ?x136)))
 (let ((?x61 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv3 32))) ?x192)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1097X)))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1097X)))
 (=> $x160 (= ?x67 ?x61)))))))))
 ))
 (let (($x179 (forall ((input.ind-%var1096X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var1096X) (bvult input.ind-%var1096X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1096X)))
 (= $x160 $x99))))
 ))
 (let (($x66 (and $x179 $x123)))
 (let (($x12 (= $x66 true)))
 (let (($x6 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x56 (= $x6 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x89 (bvsub ?x36 ?x152)))
 (let (($x63 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x89) (bvult ?x36 ?x89))))
 (let ((?x54 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvmul (_ bv4 64) ?x54)))
 (let ((?x72 ((_ extract 63 32) ?x140)))
 (let (($x95 (= (_ bv0 32) ?x72)))
 (let (($x82 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x173 (and (and (and true $x82) $x95) $x63)))
 (let (($x248 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x11 (and $x248 $x173)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (=> $x106 $x11)))
 (let (($x166 (= $x86 true)))
 (let (($x236 (= $x106 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x79)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x32)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x186 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x76 (= input.memlabel-mem--symbol.1_end ?x186)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (and $x129 $x76)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x163 $x52)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (and $x183 $x39)))
 (let (($x121 (not $x105)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x149 (and $x75 $x178)))
 (let (($x225 (and (not $x149) $x121)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x115 $x190)))
 (let (($x201 (not $x87)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x26 $x131)))
 (let (($x197 (and (not $x64) $x201)))
 (let (($x228 (and (and (and (and (and (and $x197 $x225) $x223) $x59) $x98) $x167) $x37)))
 (let (($x230 (and $x228 $x153)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x232 (and $x74 $x230)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x40 (or (bvugt input.memlabel-mem--symbol.1_begin ?x139) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x40) (or $x195 $x50)))))))
 (let (($x237 (and $x18 $x232)))
 (let (($x239 (= $x237 true)))
 (let (($x181 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x213 (= $x181 true)))
 (let ((?x191 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x191)))
 (let (($x220 (= ?x19 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x235 (= $x220 true)))
 (let (($x77 (= ?x19 input.dst.llvm-%n)))
 (let (($x176 (= $x77 true)))
 (let (($x142 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x145 (= $x142 true)))
 (let (($x156 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x188 (= $x156 true)))
 (let (($x164 (and $x188 $x145)))
 (let (($x69 (and $x164 $x176)))
 (let (($x234 (and $x69 $x235)))
 (let (($x193 (and $x234 $x213)))
 (let (($x48 (and $x193 $x239)))
 (let (($x212 (and $x48 $x236)))
 (let (($x80 (and $x212 $x166)))
 (let (($x21 (and $x80 $x56)))
 (let (($x151 (and $x21 $x12)))
 (let (($x154 (and $x151 $x204)))
 (let (($x109 (and $x154 $x169)))
 (let (($x170 (and $x109 $x199)))
 (let (($x209 (and $x170 $x215)))
 (let (($x250 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (and (not $x250) $x209)))
 (let (($x242 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and $x242 $x216)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x8 (and $x55 $x200)))
 (let (($x202 (forall ((input.ind-%var1107X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1107X)))
 (=> $x35 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1107X) (_ bv0 32)))))
 ))
 (let (($x207 (forall ((input.ind-%var1106X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1106X)))
 (= $x35 false)))
 ))
 (let (($x31 (and $x207 $x202)))
 (let (($x43 (and $x31 $x8)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x78 (and $x108 $x43)))
 (let (($x157 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x93 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x157)))))
 (let (($x58 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x157)))))
 (let (($x62 (and $x58 $x78)))
 (let (($x206 (=> $x62 $x85)))
 (not $x206))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x137 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x189 (bvsge ?x137 (_ bv0 32))))
 (let (($x85 (= $x189 true)))
 (let ((?x217 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x218 (bvneg ?x217)))
 (let (($x96 (= ?x218 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x96 true)))
 (let (($x165 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x199 (= $x165 true)))
 (let (($x118 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x118 true)))
 (let (($x70 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x204 (= $x70 true)))
 (let (($x123 (forall ((input.ind-%var1097X (_ BitVec 32)) )(let ((?x81 (bvadd symbol.1 (bvmul input.ind-%var1097X (_ bv4 32)))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x81))))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv2 32))) ?x136)))
 (let ((?x61 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x81 (_ bv3 32))) ?x192)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1097X)))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1097X)))
 (=> $x160 (= ?x67 ?x61)))))))))
 ))
 (let (($x179 (forall ((input.ind-%var1096X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var1096X) (bvult input.ind-%var1096X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x160 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1096X)))
 (= $x160 $x99))))
 ))
 (let (($x66 (and $x179 $x123)))
 (let (($x12 (= $x66 true)))
 (let (($x6 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x56 (= $x6 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x89 (bvsub ?x36 ?x152)))
 (let (($x63 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x89) (bvult ?x36 ?x89))))
 (let ((?x54 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvmul (_ bv4 64) ?x54)))
 (let ((?x72 ((_ extract 63 32) ?x140)))
 (let (($x95 (= (_ bv0 32) ?x72)))
 (let (($x82 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x173 (and (and (and true $x82) $x95) $x63)))
 (let (($x248 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x11 (and $x248 $x173)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (=> $x106 $x11)))
 (let (($x166 (= $x86 true)))
 (let (($x236 (= $x106 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x79)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x32)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x186 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x76 (= input.memlabel-mem--symbol.1_end ?x186)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (and $x129 $x76)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x163 $x52)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (and $x183 $x39)))
 (let (($x121 (not $x105)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x149 (and $x75 $x178)))
 (let (($x225 (and (not $x149) $x121)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x115 $x190)))
 (let (($x201 (not $x87)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x26 $x131)))
 (let (($x197 (and (not $x64) $x201)))
 (let (($x228 (and (and (and (and (and (and $x197 $x225) $x223) $x59) $x98) $x167) $x37)))
 (let (($x230 (and $x228 $x153)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x232 (and $x74 $x230)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x40 (or (bvugt input.memlabel-mem--symbol.1_begin ?x139) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x40) (or $x195 $x50)))))))
 (let (($x237 (and $x18 $x232)))
 (let (($x239 (= $x237 true)))
 (let (($x181 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x213 (= $x181 true)))
 (let ((?x191 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x191)))
 (let (($x220 (= ?x19 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x235 (= $x220 true)))
 (let (($x77 (= ?x19 input.dst.llvm-%n)))
 (let (($x176 (= $x77 true)))
 (let (($x142 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x145 (= $x142 true)))
 (let (($x156 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x188 (= $x156 true)))
 (let (($x164 (and $x188 $x145)))
 (let (($x69 (and $x164 $x176)))
 (let (($x234 (and $x69 $x235)))
 (let (($x193 (and $x234 $x213)))
 (let (($x48 (and $x193 $x239)))
 (let (($x212 (and $x48 $x236)))
 (let (($x80 (and $x212 $x166)))
 (let (($x21 (and $x80 $x56)))
 (let (($x151 (and $x21 $x12)))
 (let (($x154 (and $x151 $x204)))
 (let (($x109 (and $x154 $x169)))
 (let (($x170 (and $x109 $x199)))
 (let (($x209 (and $x170 $x215)))
 (let (($x250 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (and (not $x250) $x209)))
 (let (($x242 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and $x242 $x216)))
 (let (($x55 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x8 (and $x55 $x200)))
 (let (($x202 (forall ((input.ind-%var1107X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1107X)))
 (=> $x35 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1107X) (_ bv0 32)))))
 ))
 (let (($x207 (forall ((input.ind-%var1106X (_ BitVec 32)) )(let (($x35 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1106X)))
 (= $x35 false)))
 ))
 (let (($x31 (and $x207 $x202)))
 (let (($x43 (and $x31 $x8)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x78 (and $x108 $x43)))
 (let (($x157 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x93 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x157)))))
 (let (($x58 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x157)))))
 (let (($x62 (and $x58 $x78)))
 (let (($x206 (=> $x62 $x85)))
 (not $x206))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x177 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (bvule ?x177 input.dst.llvm-%n)))
 (let (($x65 (= $x100 true)))
 (let ((?x128 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x128)))
 (let (($x146 (= ?x119 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x161 (= $x146 true)))
 (let ((?x193 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x193)))
 (let (($x245 (= ?x147 input.dst.llvm-%n)))
 (let (($x68 (= $x245 true)))
 (let (($x7 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x41 (= $x7 true)))
 (let (($x138 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x252 (= $x138 true)))
 (let (($x143 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (= $x143 true)))
 (let (($x182 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let ((?x43 (bvadd symbol.1 (bvmul input.ind-%var1117X (_ bv4 32)))))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x43))))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv2 32))) ?x189)))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv3 32))) ?x20)))
 (let ((?x66 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1117X)))
 (let (($x102 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1117X)))
 (=> $x102 (= ?x66 ?x33)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x136 (and (bvule (_ bv0 32) input.ind-%var1116X) (bvult input.ind-%var1116X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x102 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1116X)))
 (= $x102 $x136))))
 ))
 (let (($x15 (and $x61 $x182)))
 (let (($x211 (= $x15 true)))
 (let (($x179 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x67 (= $x179 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x11 (bvsub ?x36 ?x152)))
 (let (($x6 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x11) (bvult ?x36 ?x11))))
 (let ((?x125 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x205 (bvmul (_ bv4 64) ?x125)))
 (let ((?x63 ((_ extract 63 32) ?x205)))
 (let (($x173 (= (_ bv0 32) ?x63)))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x160 (and (and (and true $x159) $x173) $x6)))
 (let (($x54 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x28 (and $x54 $x160)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (=> $x243 $x28)))
 (let (($x99 (= $x244 true)))
 (let (($x38 (= $x243 true)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x232 (= (_ bv0 32) ?x230)))
 (let ((?x79 (bvand symbol.1 (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x79)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x94 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x167 (= input.memlabel-mem--symbol.1_end ?x94)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x247 (and $x60 $x167)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x98 $x247)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (and $x194 $x126)))
 (let (($x221 (not $x59)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (and $x225 $x222)))
 (let (($x129 (and (not $x223) $x221)))
 (let (($x47 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (and $x149 $x47)))
 (let (($x39 (not $x183)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x197 $x75)))
 (let (($x121 (and (not $x178) $x39)))
 (let (($x231 (and (and (and (and (and (and $x121 $x129) $x186) $x52) $x32) $x228) $x153)))
 (let (($x229 (and $x231 $x232)))
 (let (($x195 (= symbol.1 dst_symbol_addr.1)))
 (let (($x248 (and $x195 $x229)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x57 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x57) (or $x26 $x131)))))))
 (let (($x240 (and $x201 $x248)))
 (let (($x17 (= $x240 true)))
 (let (($x42 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x150 (= $x42 true)))
 (let (($x144 (= ?x147 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (= $x144 true)))
 (let (($x235 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x234 (= $x235 true)))
 (let (($x69 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x220 (= $x69 true)))
 (let (($x181 (and $x220 $x234)))
 (let (($x139 (and $x181 $x92)))
 (let (($x40 (and $x139 $x150)))
 (let (($x10 (and $x40 $x17)))
 (let (($x82 (and $x10 $x38)))
 (let (($x111 (and $x82 $x99)))
 (let (($x198 (and $x111 $x67)))
 (let (($x9 (and $x198 $x211)))
 (let (($x219 (and $x9 $x180)))
 (let (($x88 (and $x219 $x252)))
 (let (($x130 (and $x88 $x41)))
 (let (($x249 (and $x130 $x68)))
 (let (($x112 (and $x249 $x161)))
 (let (($x77 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and (not $x77) $x112)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x241 (and $x191 $x134)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x14 (and $x145 $x241)))
 (let (($x156 (forall ((input.ind-%var1127X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1127X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1127X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var1126X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1126X)))
 (= $x196 false)))
 ))
 (let (($x188 (and $x202 $x156)))
 (let (($x103 (and $x188 $x14)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x16 $x103)))
 (let (($x29 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x108 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x29)))))
 (let (($x120 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x29)))))
 (let (($x27 (and $x120 $x24)))
 (let (($x110 (=> $x27 $x65)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x177 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (bvule ?x177 input.dst.llvm-%n)))
 (let (($x65 (= $x100 true)))
 (let ((?x128 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x119 (bvneg ?x128)))
 (let (($x146 (= ?x119 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x161 (= $x146 true)))
 (let ((?x193 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x193)))
 (let (($x245 (= ?x147 input.dst.llvm-%n)))
 (let (($x68 (= $x245 true)))
 (let (($x7 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x41 (= $x7 true)))
 (let (($x138 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x252 (= $x138 true)))
 (let (($x143 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (= $x143 true)))
 (let (($x182 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let ((?x43 (bvadd symbol.1 (bvmul input.ind-%var1117X (_ bv4 32)))))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x43))))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv2 32))) ?x189)))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x43 (_ bv3 32))) ?x20)))
 (let ((?x66 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1117X)))
 (let (($x102 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1117X)))
 (=> $x102 (= ?x66 ?x33)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x136 (and (bvule (_ bv0 32) input.ind-%var1116X) (bvult input.ind-%var1116X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x102 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1116X)))
 (= $x102 $x136))))
 ))
 (let (($x15 (and $x61 $x182)))
 (let (($x211 (= $x15 true)))
 (let (($x179 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x67 (= $x179 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x11 (bvsub ?x36 ?x152)))
 (let (($x6 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x11) (bvult ?x36 ?x11))))
 (let ((?x125 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x205 (bvmul (_ bv4 64) ?x125)))
 (let ((?x63 ((_ extract 63 32) ?x205)))
 (let (($x173 (= (_ bv0 32) ?x63)))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x160 (and (and (and true $x159) $x173) $x6)))
 (let (($x54 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x28 (and $x54 $x160)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (=> $x243 $x28)))
 (let (($x99 (= $x244 true)))
 (let (($x38 (= $x243 true)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x232 (= (_ bv0 32) ?x230)))
 (let ((?x79 (bvand symbol.1 (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x79)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x94 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x167 (= input.memlabel-mem--symbol.1_end ?x94)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x247 (and $x60 $x167)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x98 $x247)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (and $x194 $x126)))
 (let (($x221 (not $x59)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (and $x225 $x222)))
 (let (($x129 (and (not $x223) $x221)))
 (let (($x47 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (and $x149 $x47)))
 (let (($x39 (not $x183)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x197 $x75)))
 (let (($x121 (and (not $x178) $x39)))
 (let (($x231 (and (and (and (and (and (and $x121 $x129) $x186) $x52) $x32) $x228) $x153)))
 (let (($x229 (and $x231 $x232)))
 (let (($x195 (= symbol.1 dst_symbol_addr.1)))
 (let (($x248 (and $x195 $x229)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x57 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x57) (or $x26 $x131)))))))
 (let (($x240 (and $x201 $x248)))
 (let (($x17 (= $x240 true)))
 (let (($x42 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x150 (= $x42 true)))
 (let (($x144 (= ?x147 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (= $x144 true)))
 (let (($x235 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x234 (= $x235 true)))
 (let (($x69 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x220 (= $x69 true)))
 (let (($x181 (and $x220 $x234)))
 (let (($x139 (and $x181 $x92)))
 (let (($x40 (and $x139 $x150)))
 (let (($x10 (and $x40 $x17)))
 (let (($x82 (and $x10 $x38)))
 (let (($x111 (and $x82 $x99)))
 (let (($x198 (and $x111 $x67)))
 (let (($x9 (and $x198 $x211)))
 (let (($x219 (and $x9 $x180)))
 (let (($x88 (and $x219 $x252)))
 (let (($x130 (and $x88 $x41)))
 (let (($x249 (and $x130 $x68)))
 (let (($x112 (and $x249 $x161)))
 (let (($x77 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and (not $x77) $x112)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x241 (and $x191 $x134)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x14 (and $x145 $x241)))
 (let (($x156 (forall ((input.ind-%var1127X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1127X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1127X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var1126X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1126X)))
 (= $x196 false)))
 ))
 (let (($x188 (and $x202 $x156)))
 (let (($x103 (and $x188 $x14)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x16 $x103)))
 (let (($x29 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x108 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x29)))))
 (let (($x120 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x29)))))
 (let (($x27 (and $x120 $x24)))
 (let (($x110 (=> $x27 $x65)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x301 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let ((?x205 (bvadd symbol.1 (bvmul input.ind-%var1165X (_ bv4 32)))))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x29 (bvadd ?x36 (_ bv3 32))))
 (let ((?x268 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x36 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x271 (store ?x268 (bvadd ?x36 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x274 (store ?x271 (bvadd ?x36 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x276 (store ?x274 ?x29 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x295 (concat (select ?x276 (bvadd ?x205 (_ bv2 32))) (concat (select ?x276 (bvadd ?x205 (_ bv1 32))) (select ?x276 ?x205)))))
 (let ((?x230 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1165X)))
 (let (($x256 (= input.ind-%var1165X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x299 (= (ite $x256 input.spec-%var-i-0.L3%6%bbentry ?x230) (concat (select ?x276 (bvadd ?x205 (_ bv3 32))) ?x295))))
 (let (($x48 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (let (($x257 (or $x48 $x256)))
 (=> $x257 $x299))))))))))))))))
 ))
 (let (($x259 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x236 (bvule (_ bv0 32) input.ind-%var1164X)))
 (let (($x255 (and $x236 (bvult input.ind-%var1164X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x256 (= input.ind-%var1164X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x48 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (let (($x257 (or $x48 $x256)))
 (= $x257 $x255)))))))
 ))
 (let (($x302 (and $x259 $x301)))
 (let (($x303 (= $x302 true)))
 (let ((?x170 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x217 (bvneg ?x170)))
 (let (($x169 (= ?x217 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x169 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x55)))
 (let ((?x226 (bvand symbol.1 (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x226)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x227 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x46 (= input.memlabel-mem--symbol.1_end ?x227)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (and $x73 $x46)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x110 $x124)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x134 $x241)))
 (let (($x103 (not $x14)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (and $x146 $x161)))
 (let (($x27 (and (not $x112) $x103)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x130 $x245)))
 (let (($x249 (not $x68)))
 (let (($x7 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x88 $x7)))
 (let (($x119 (and (not $x41) $x249)))
 (let (($x91 (and (and (and (and (and (and $x119 $x27) $x177) $x65) $x107) $x175) $x31)))
 (let (($x208 (and $x91 $x35)))
 (let (($x206 (= symbol.1 dst_symbol_addr.1)))
 (let (($x204 (and $x206 $x208)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x33 (or (bvugt input.memlabel-mem--symbol.1_begin ?x78) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x252 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x33) (or $x15 $x211)))))))
 (let (($x154 (and $x252 $x204)))
 (let (($x96 (= $x154 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x43 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x151 (= $x66 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (= $x136 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (= $x102 true)))
 (let (($x111 (forall ((input.ind-%var1141X (_ BitVec 32)) )(let ((?x205 (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32)))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x205))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv2 32))) ?x86)))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv3 32))) ?x80)))
 (let ((?x230 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1141X)))
 (let (($x48 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1141X)))
 (=> $x48 (= ?x230 ?x28)))))))))
 ))
 (let (($x212 (forall ((input.ind-%var1140X (_ BitVec 32)) )(let (($x236 (bvule (_ bv0 32) input.ind-%var1140X)))
 (let (($x48 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1140X)))
 (= $x48 (and $x236 (bvult input.ind-%var1140X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x179 (and $x212 $x111)))
 (let (($x67 (= $x179 true)))
 (let (($x237 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x186 (= $x237 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x183 (bvsub ?x36 ?x152)))
 (let (($x222 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x183) (bvult ?x36 ?x183))))
 (let ((?x178 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x105 (bvmul (_ bv4 64) ?x178)))
 (let ((?x149 ((_ extract 63 32) ?x105)))
 (let (($x47 (= (_ bv0 32) ?x149)))
 (let (($x197 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x194 (and (and (and true $x197) $x47) $x222)))
 (let (($x115 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x126 (and $x115 $x194)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (=> $x243 $x126)))
 (let (($x221 (= $x59 true)))
 (let (($x26 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x74 (= $x26 true)))
 (let (($x57 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x18 (= $x57 true)))
 (let (($x23 (= $x243 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x139)))
 (let (($x132 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (= $x132 true)))
 (let (($x150 (= ?x42 input.dst.llvm-%n)))
 (let (($x40 (= $x150 true)))
 (let (($x87 (and $x40 $x50)))
 (let (($x90 (and $x87 $x23)))
 (let (($x233 (and $x90 $x18)))
 (let (($x131 (and $x233 $x74)))
 (let (($x129 (and $x131 $x221)))
 (let (($x239 (and $x129 $x186)))
 (let (($x198 (and $x239 $x67)))
 (let (($x30 (and $x198 $x113)))
 (let (($x61 (and $x30 $x192)))
 (let (($x8 (and $x61 $x151)))
 (let (($x127 (and $x8 $x174)))
 (let (($x215 (and $x127 $x96)))
 (let (($x118 (and $x215 $x109)))
 (let (($x144 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (and (not $x144) $x118)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x209 (and $x193 $x218)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x81 (and $x234 $x209)))
 (let (($x69 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1151X)))
 (=> $x224 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1151X) (_ bv0 32)))))
 ))
 (let (($x156 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1150X)))
 (= $x224 false)))
 ))
 (let (($x220 (and $x156 $x69)))
 (let (($x116 (and $x220 $x81)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x207 $x116)))
 (let (($x58 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x16 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x84 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x58)))))
 (let (($x216 (and $x84 $x141)))
 (let (($x304 (=> $x216 $x303)))
 (not $x304)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x301 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let ((?x205 (bvadd symbol.1 (bvmul input.ind-%var1165X (_ bv4 32)))))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x29 (bvadd ?x36 (_ bv3 32))))
 (let ((?x268 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x36 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x271 (store ?x268 (bvadd ?x36 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x274 (store ?x271 (bvadd ?x36 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x276 (store ?x274 ?x29 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x295 (concat (select ?x276 (bvadd ?x205 (_ bv2 32))) (concat (select ?x276 (bvadd ?x205 (_ bv1 32))) (select ?x276 ?x205)))))
 (let ((?x230 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1165X)))
 (let (($x256 (= input.ind-%var1165X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x299 (= (ite $x256 input.spec-%var-i-0.L3%6%bbentry ?x230) (concat (select ?x276 (bvadd ?x205 (_ bv3 32))) ?x295))))
 (let (($x48 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (let (($x257 (or $x48 $x256)))
 (=> $x257 $x299))))))))))))))))
 ))
 (let (($x259 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x236 (bvule (_ bv0 32) input.ind-%var1164X)))
 (let (($x255 (and $x236 (bvult input.ind-%var1164X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x256 (= input.ind-%var1164X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x48 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (let (($x257 (or $x48 $x256)))
 (= $x257 $x255)))))))
 ))
 (let (($x302 (and $x259 $x301)))
 (let (($x303 (= $x302 true)))
 (let ((?x170 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x217 (bvneg ?x170)))
 (let (($x169 (= ?x217 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x169 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x55)))
 (let ((?x226 (bvand symbol.1 (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x226)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x227 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x46 (= input.memlabel-mem--symbol.1_end ?x227)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (and $x73 $x46)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x110 $x124)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x134 $x241)))
 (let (($x103 (not $x14)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (and $x146 $x161)))
 (let (($x27 (and (not $x112) $x103)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x130 $x245)))
 (let (($x249 (not $x68)))
 (let (($x7 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x88 $x7)))
 (let (($x119 (and (not $x41) $x249)))
 (let (($x91 (and (and (and (and (and (and $x119 $x27) $x177) $x65) $x107) $x175) $x31)))
 (let (($x208 (and $x91 $x35)))
 (let (($x206 (= symbol.1 dst_symbol_addr.1)))
 (let (($x204 (and $x206 $x208)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x33 (or (bvugt input.memlabel-mem--symbol.1_begin ?x78) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x252 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x33) (or $x15 $x211)))))))
 (let (($x154 (and $x252 $x204)))
 (let (($x96 (= $x154 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x43 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x151 (= $x66 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (= $x136 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (= $x102 true)))
 (let (($x111 (forall ((input.ind-%var1141X (_ BitVec 32)) )(let ((?x205 (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32)))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x205))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv2 32))) ?x86)))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv3 32))) ?x80)))
 (let ((?x230 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1141X)))
 (let (($x48 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1141X)))
 (=> $x48 (= ?x230 ?x28)))))))))
 ))
 (let (($x212 (forall ((input.ind-%var1140X (_ BitVec 32)) )(let (($x236 (bvule (_ bv0 32) input.ind-%var1140X)))
 (let (($x48 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1140X)))
 (= $x48 (and $x236 (bvult input.ind-%var1140X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x179 (and $x212 $x111)))
 (let (($x67 (= $x179 true)))
 (let (($x237 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x186 (= $x237 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x183 (bvsub ?x36 ?x152)))
 (let (($x222 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x183) (bvult ?x36 ?x183))))
 (let ((?x178 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x105 (bvmul (_ bv4 64) ?x178)))
 (let ((?x149 ((_ extract 63 32) ?x105)))
 (let (($x47 (= (_ bv0 32) ?x149)))
 (let (($x197 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x194 (and (and (and true $x197) $x47) $x222)))
 (let (($x115 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x126 (and $x115 $x194)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (=> $x243 $x126)))
 (let (($x221 (= $x59 true)))
 (let (($x26 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x74 (= $x26 true)))
 (let (($x57 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x18 (= $x57 true)))
 (let (($x23 (= $x243 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x139)))
 (let (($x132 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x50 (= $x132 true)))
 (let (($x150 (= ?x42 input.dst.llvm-%n)))
 (let (($x40 (= $x150 true)))
 (let (($x87 (and $x40 $x50)))
 (let (($x90 (and $x87 $x23)))
 (let (($x233 (and $x90 $x18)))
 (let (($x131 (and $x233 $x74)))
 (let (($x129 (and $x131 $x221)))
 (let (($x239 (and $x129 $x186)))
 (let (($x198 (and $x239 $x67)))
 (let (($x30 (and $x198 $x113)))
 (let (($x61 (and $x30 $x192)))
 (let (($x8 (and $x61 $x151)))
 (let (($x127 (and $x8 $x174)))
 (let (($x215 (and $x127 $x96)))
 (let (($x118 (and $x215 $x109)))
 (let (($x144 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x218 (and (not $x144) $x118)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x209 (and $x193 $x218)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x81 (and $x234 $x209)))
 (let (($x69 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1151X)))
 (=> $x224 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1151X) (_ bv0 32)))))
 ))
 (let (($x156 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let (($x224 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1150X)))
 (= $x224 false)))
 ))
 (let (($x220 (and $x156 $x69)))
 (let (($x116 (and $x220 $x81)))
 (let (($x207 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x207 $x116)))
 (let (($x58 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x16 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x58)))))
 (let (($x84 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x58)))))
 (let (($x216 (and $x84 $x141)))
 (let (($x304 (=> $x216 $x303)))
 (not $x304)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x242 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x203 (bvmul (_ bv4294967295 32) ?x242)))
 (let ((?x188 (bvneg ?x203)))
 (let (($x196 (= ?x188 ?x145)))
 (let (($x25 (= $x196 true)))
 (let ((?x299 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x299)))
 (let (($x301 (= ?x300 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x301 true)))
 (let (($x293 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x295 (= $x293 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x292 (= $x294 true)))
 (let (($x275 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (= $x275 true)))
 (let (($x273 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x272 (= $x273 true)))
 (let (($x268 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let ((?x116 (bvadd symbol.1 (bvmul input.ind-%var1175X (_ bv4 32)))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x116))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv2 32))) ?x257)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv3 32))) ?x255)))
 (let ((?x175 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1175X)))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (=> $x187 (= ?x175 ?x298)))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x227 (and (bvule (_ bv0 32) input.ind-%var1174X) (bvult input.ind-%var1174X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (= $x187 $x227))))
 ))
 (let (($x270 (and $x124 $x268)))
 (let (($x269 (= $x270 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x241 (= $x134 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x7 (bvsub ?x36 ?x152)))
 (let (($x245 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x7) (bvult ?x36 ?x7))))
 (let ((?x252 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvmul (_ bv4 64) ?x252)))
 (let ((?x206 ((_ extract 63 32) ?x85)))
 (let (($x88 (= (_ bv0 32) ?x206)))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x119 (and (and (and true $x180) $x88) $x245)))
 (let (($x15 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x146 (and $x15 $x119)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (=> $x251 $x146)))
 (let (($x112 (= $x161 true)))
 (let (($x189 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x20 (= $x189 true)))
 (let (($x137 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x138 (= $x137 true)))
 (let (($x127 (= $x251 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x67)))
 (let ((?x111 (bvand symbol.1 (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x111)))
 (let ((?x244 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x244)))
 (let ((?x63 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x63)))
 (let (($x173 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (and $x173 $x86)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x166 $x80)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x229 (and $x212 $x230)))
 (let (($x125 (not $x229)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x228 (and $x32 $x37)))
 (let (($x6 (and (not $x228) $x125)))
 (let (($x237 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x129 $x237)))
 (let (($x239 (not $x186)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x126 $x59)))
 (let (($x236 (and (not $x221) $x239)))
 (let (($x61 (and (and (and (and (and (and $x236 $x6) $x160) $x11) $x28) $x99) $x179)))
 (let (($x66 (and $x61 $x198)))
 (let (($x201 (= symbol.1 dst_symbol_addr.1)))
 (let (($x151 (and $x201 $x66)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x75 (or (bvugt input.memlabel-mem--symbol.1_begin ?x195) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x75) (or $x47 $x163)))))))
 (let (($x8 (and $x194 $x151)))
 (let (($x43 (= $x8 true)))
 (let ((?x57 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x57)))
 (let (($x74 (= ?x18 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x131 (= $x74 true)))
 (let (($x233 (= ?x18 input.dst.llvm-%n)))
 (let (($x26 (= $x233 true)))
 (let (($x64 (and $x26 $x131)))
 (let (($x174 (and $x64 $x43)))
 (let (($x62 (and $x174 $x127)))
 (let (($x78 (and $x62 $x138)))
 (let (($x33 (and $x78 $x20)))
 (let (($x24 (and $x33 $x112)))
 (let (($x14 (and $x24 $x241)))
 (let (($x271 (and $x14 $x269)))
 (let (($x274 (and $x271 $x272)))
 (let (($x296 (and $x274 $x276)))
 (let (($x291 (and $x296 $x292)))
 (let (($x297 (and $x291 $x295)))
 (let (($x303 (and $x297 $x302)))
 (let (($x90 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x305 (and (not $x90) $x303)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x49 (and $x87 $x305)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x40 $x49)))
 (let (($x139 (forall ((input.ind-%var1185X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1185X)))
 (=> $x164 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1185X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var1184X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1184X)))
 (= $x164 false)))
 ))
 (let (($x42 (and $x69 $x139)))
 (let (($x199 (and $x42 $x171)))
 (let (($x202 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x202 $x199)))
 (let (($x120 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x207 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x120)))))
 (let (($x114 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x120)))))
 (let (($x232 (and $x114 $x98)))
 (let (($x214 (=> $x232 $x25)))
 (not $x214)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x242 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x203 (bvmul (_ bv4294967295 32) ?x242)))
 (let ((?x188 (bvneg ?x203)))
 (let (($x196 (= ?x188 ?x145)))
 (let (($x25 (= $x196 true)))
 (let ((?x299 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x299)))
 (let (($x301 (= ?x300 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x301 true)))
 (let (($x293 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x295 (= $x293 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x292 (= $x294 true)))
 (let (($x275 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (= $x275 true)))
 (let (($x273 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x272 (= $x273 true)))
 (let (($x268 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let ((?x116 (bvadd symbol.1 (bvmul input.ind-%var1175X (_ bv4 32)))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x116))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv2 32))) ?x257)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv3 32))) ?x255)))
 (let ((?x175 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1175X)))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (=> $x187 (= ?x175 ?x298)))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x227 (and (bvule (_ bv0 32) input.ind-%var1174X) (bvult input.ind-%var1174X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x187 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (= $x187 $x227))))
 ))
 (let (($x270 (and $x124 $x268)))
 (let (($x269 (= $x270 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x241 (= $x134 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x7 (bvsub ?x36 ?x152)))
 (let (($x245 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x7) (bvult ?x36 ?x7))))
 (let ((?x252 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvmul (_ bv4 64) ?x252)))
 (let ((?x206 ((_ extract 63 32) ?x85)))
 (let (($x88 (= (_ bv0 32) ?x206)))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x119 (and (and (and true $x180) $x88) $x245)))
 (let (($x15 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x146 (and $x15 $x119)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (=> $x251 $x146)))
 (let (($x112 (= $x161 true)))
 (let (($x189 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x20 (= $x189 true)))
 (let (($x137 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x138 (= $x137 true)))
 (let (($x127 (= $x251 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x67)))
 (let ((?x111 (bvand symbol.1 (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x111)))
 (let ((?x244 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x244)))
 (let ((?x63 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x63)))
 (let (($x173 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (and $x173 $x86)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x166 $x80)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x229 (and $x212 $x230)))
 (let (($x125 (not $x229)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x228 (and $x32 $x37)))
 (let (($x6 (and (not $x228) $x125)))
 (let (($x237 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x129 $x237)))
 (let (($x239 (not $x186)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x126 $x59)))
 (let (($x236 (and (not $x221) $x239)))
 (let (($x61 (and (and (and (and (and (and $x236 $x6) $x160) $x11) $x28) $x99) $x179)))
 (let (($x66 (and $x61 $x198)))
 (let (($x201 (= symbol.1 dst_symbol_addr.1)))
 (let (($x151 (and $x201 $x66)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x75 (or (bvugt input.memlabel-mem--symbol.1_begin ?x195) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x75) (or $x47 $x163)))))))
 (let (($x8 (and $x194 $x151)))
 (let (($x43 (= $x8 true)))
 (let ((?x57 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x18 (bvneg ?x57)))
 (let (($x74 (= ?x18 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x131 (= $x74 true)))
 (let (($x233 (= ?x18 input.dst.llvm-%n)))
 (let (($x26 (= $x233 true)))
 (let (($x64 (and $x26 $x131)))
 (let (($x174 (and $x64 $x43)))
 (let (($x62 (and $x174 $x127)))
 (let (($x78 (and $x62 $x138)))
 (let (($x33 (and $x78 $x20)))
 (let (($x24 (and $x33 $x112)))
 (let (($x14 (and $x24 $x241)))
 (let (($x271 (and $x14 $x269)))
 (let (($x274 (and $x271 $x272)))
 (let (($x296 (and $x274 $x276)))
 (let (($x291 (and $x296 $x292)))
 (let (($x297 (and $x291 $x295)))
 (let (($x303 (and $x297 $x302)))
 (let (($x90 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x305 (and (not $x90) $x303)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x49 (and $x87 $x305)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x40 $x49)))
 (let (($x139 (forall ((input.ind-%var1185X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1185X)))
 (=> $x164 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1185X) (_ bv0 32)))))
 ))
 (let (($x69 (forall ((input.ind-%var1184X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1184X)))
 (= $x164 false)))
 ))
 (let (($x42 (and $x69 $x139)))
 (let (($x199 (and $x42 $x171)))
 (let (($x202 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x202 $x199)))
 (let (($x120 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x207 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x120)))))
 (let (($x114 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x120)))))
 (let (($x232 (and $x114 $x98)))
 (let (($x214 (=> $x232 $x25)))
 (not $x214)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x104 (bvule ?x65 (_ bv399 32))))
 (let (($x218 (= $x104 true)))
 (let ((?x55 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x55)))
 (let (($x109 (= ?x169 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x109 true)))
 (let (($x45 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x100 (= $x45 true)))
 (let (($x147 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x12 (= $x147 true)))
 (let (($x224 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x148 (= $x224 true)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x196)))
 (let ((?x188 (bvand symbol.1 (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x188)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x242)))
 (let ((?x171 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x199 (= input.memlabel-mem--symbol.1_end ?x171)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x98 (and $x49 $x199)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x305 $x98)))
 (let (($x303 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x295 (and $x291 $x293)))
 (let (($x297 (not $x295)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x292 (and $x296 $x294)))
 (let (($x300 (and (not $x292) $x297)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x271 $x273)))
 (let (($x274 (not $x272)))
 (let (($x270 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x268 $x270)))
 (let (($x276 (and (not $x269) $x274)))
 (let (($x177 (and (and (and (and (and (and $x276 $x300) $x301) $x303) $x232) $x203) $x145)))
 (let (($x246 (and $x177 $x25)))
 (let (($x124 (= symbol.1 dst_symbol_addr.1)))
 (let (($x191 (and $x124 $x246)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x259 (or (bvugt input.memlabel-mem--symbol.1_begin ?x81) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x266 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x259) (or $x216 $x256)))))))
 (let (($x213 (and $x266 $x191)))
 (let (($x220 (= $x213 true)))
 (let (($x187 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x73 (= $x187 true)))
 (let (($x134 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x134 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x161 true)))
 (let (($x130 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x9 (bvadd symbol.1 (bvmul input.ind-%var1195X (_ bv4 32)))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x9))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv2 32))) ?x219)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv3 32))) ?x206)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1195X)))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x166 (= ?x67 ?x41)))))))))
 ))
 (let (($x192 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x244 (and (bvule (_ bv0 32) input.ind-%var1194X) (bvult input.ind-%var1194X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x166 $x244))))
 ))
 (let (($x245 (and $x192 $x130)))
 (let (($x119 (= $x245 true)))
 (let ((?x230 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x229 (bvneg ?x230)))
 (let (($x160 (= ?x229 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (= $x160 true)))
 (let (($x125 (= ?x229 input.dst.llvm-%n)))
 (let (($x6 (= $x125 true)))
 (let (($x37 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x228 (= $x37 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x194 (bvsub ?x36 ?x152)))
 (let (($x59 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x194) (bvult ?x36 ?x194))))
 (let ((?x39 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x39)))
 (let ((?x121 ((_ extract 63 32) ?x183)))
 (let (($x225 (= (_ bv0 32) ?x121)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x129 (and (and (and true $x149) $x225) $x59)))
 (let (($x223 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x237 (and $x223 $x129)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (=> $x70 $x237)))
 (let (($x239 (= $x186 true)))
 (let (($x222 (= $x70 true)))
 (let (($x236 (and $x222 $x239)))
 (let (($x205 (and $x236 $x228)))
 (let (($x102 (and $x205 $x6)))
 (let (($x158 (and $x102 $x113)))
 (let (($x146 (and $x158 $x119)))
 (let (($x24 (and $x146 $x112)))
 (let (($x14 (and $x24 $x241)))
 (let (($x110 (and $x14 $x73)))
 (let (($x234 (and $x110 $x220)))
 (let (($x53 (and $x234 $x148)))
 (let (($x103 (and $x53 $x12)))
 (let (($x91 (and $x103 $x100)))
 (let (($x170 (and $x91 $x215)))
 (let (($x13 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x204 (and (not $x13) $x170)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x35 (and $x64 $x204)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x26 $x35)))
 (let (($x57 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1205X)))
 (=> $x181 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1205X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1204X)))
 (= $x181 false)))
 ))
 (let (($x18 (and $x139 $x57)))
 (let (($x217 (and $x18 $x154)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x156 $x217)))
 (let (($x84 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x202 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x84)))))
 (let (($x97 (=> (and $x70 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x84)))))
 (let (($x27 (and $x97 $x118)))
 (let (($x123 (=> $x27 $x218)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x104 (bvule ?x65 (_ bv399 32))))
 (let (($x218 (= $x104 true)))
 (let ((?x55 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x169 (bvneg ?x55)))
 (let (($x109 (= ?x169 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x109 true)))
 (let (($x45 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x100 (= $x45 true)))
 (let (($x147 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x12 (= $x147 true)))
 (let (($x224 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x148 (= $x224 true)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x196)))
 (let ((?x188 (bvand symbol.1 (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x188)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x242)))
 (let ((?x171 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x199 (= input.memlabel-mem--symbol.1_end ?x171)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x98 (and $x49 $x199)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x305 $x98)))
 (let (($x303 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x295 (and $x291 $x293)))
 (let (($x297 (not $x295)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x292 (and $x296 $x294)))
 (let (($x300 (and (not $x292) $x297)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x271 $x273)))
 (let (($x274 (not $x272)))
 (let (($x270 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x268 $x270)))
 (let (($x276 (and (not $x269) $x274)))
 (let (($x177 (and (and (and (and (and (and $x276 $x300) $x301) $x303) $x232) $x203) $x145)))
 (let (($x246 (and $x177 $x25)))
 (let (($x124 (= symbol.1 dst_symbol_addr.1)))
 (let (($x191 (and $x124 $x246)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x259 (or (bvugt input.memlabel-mem--symbol.1_begin ?x81) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x266 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x259) (or $x216 $x256)))))))
 (let (($x213 (and $x266 $x191)))
 (let (($x220 (= $x213 true)))
 (let (($x187 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x73 (= $x187 true)))
 (let (($x134 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x134 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x161 true)))
 (let (($x130 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x9 (bvadd symbol.1 (bvmul input.ind-%var1195X (_ bv4 32)))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x9))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv2 32))) ?x219)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x9 (_ bv3 32))) ?x206)))
 (let ((?x67 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1195X)))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x166 (= ?x67 ?x41)))))))))
 ))
 (let (($x192 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x244 (and (bvule (_ bv0 32) input.ind-%var1194X) (bvult input.ind-%var1194X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x166 $x244))))
 ))
 (let (($x245 (and $x192 $x130)))
 (let (($x119 (= $x245 true)))
 (let ((?x230 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x229 (bvneg ?x230)))
 (let (($x160 (= ?x229 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x113 (= $x160 true)))
 (let (($x125 (= ?x229 input.dst.llvm-%n)))
 (let (($x6 (= $x125 true)))
 (let (($x37 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x228 (= $x37 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x194 (bvsub ?x36 ?x152)))
 (let (($x59 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x194) (bvult ?x36 ?x194))))
 (let ((?x39 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x39)))
 (let ((?x121 ((_ extract 63 32) ?x183)))
 (let (($x225 (= (_ bv0 32) ?x121)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x129 (and (and (and true $x149) $x225) $x59)))
 (let (($x223 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x237 (and $x223 $x129)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (=> $x70 $x237)))
 (let (($x239 (= $x186 true)))
 (let (($x222 (= $x70 true)))
 (let (($x236 (and $x222 $x239)))
 (let (($x205 (and $x236 $x228)))
 (let (($x102 (and $x205 $x6)))
 (let (($x158 (and $x102 $x113)))
 (let (($x146 (and $x158 $x119)))
 (let (($x24 (and $x146 $x112)))
 (let (($x14 (and $x24 $x241)))
 (let (($x110 (and $x14 $x73)))
 (let (($x234 (and $x110 $x220)))
 (let (($x53 (and $x234 $x148)))
 (let (($x103 (and $x53 $x12)))
 (let (($x91 (and $x103 $x100)))
 (let (($x170 (and $x91 $x215)))
 (let (($x13 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x204 (and (not $x13) $x170)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x35 (and $x64 $x204)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x26 $x35)))
 (let (($x57 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1205X)))
 (=> $x181 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1205X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1204X)))
 (= $x181 false)))
 ))
 (let (($x18 (and $x139 $x57)))
 (let (($x217 (and $x18 $x154)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x156 $x217)))
 (let (($x84 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x202 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x84)))))
 (let (($x97 (=> (and $x70 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x84)))))
 (let (($x27 (and $x97 $x118)))
 (let (($x123 (=> $x27 $x218)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x211 (bvsle ?x179 (_ bv399 32))))
 (let (($x150 (= $x211 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x78)))
 (let (($x127 (= ?x189 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x127 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x33 (= $x43 true)))
 (let (($x21 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x63 (= $x21 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x61 (= $x23 true)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x209)))
 (let ((?x218 (bvand symbol.1 (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x218)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x154 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x217 (= input.memlabel-mem--symbol.1_end ?x154)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x118 (and $x35 $x217)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x204 $x118)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x103 $x45)))
 (let (($x91 (not $x100)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x53 $x147)))
 (let (($x169 (and (not $x12) $x91)))
 (let (($x213 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x191 $x213)))
 (let (($x234 (not $x220)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x196 $x25)))
 (let (($x148 (and (not $x246) $x234)))
 (let (($x50 (and (and (and (and (and (and $x148 $x169) $x109) $x170) $x27) $x104) $x123)))
 (let (($x42 (and $x50 $x248)))
 (let (($x301 (= symbol.1 dst_symbol_addr.1)))
 (let (($x40 (and $x301 $x42)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x303 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x303)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x303) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x232 $x71)))))))
 (let (($x164 (and $x177 $x40)))
 (let (($x176 (= $x164 true)))
 (let (($x293 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x295 (= $x293 true)))
 (let (($x292 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x299 (= $x292 true)))
 (let (($x276 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x296 (= $x276 true)))
 (let (($x271 (forall ((input.ind-%var1215X (_ BitVec 32)) )(let ((?x254 (bvadd symbol.1 (bvmul input.ind-%var1215X (_ bv4 32)))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x254))))
 (let ((?x46 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x254 (_ bv2 32))) ?x255)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x254 (_ bv3 32))) ?x46)))
 (let ((?x146 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1215X)))
 (let (($x138 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1215X)))
 (=> $x138 (= ?x146 ?x270)))))))))
 ))
 (let (($x128 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x41 (and (bvule (_ bv0 32) input.ind-%var1214X) (bvult input.ind-%var1214X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x138 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1214X)))
 (= $x138 $x41))))
 ))
 (let (($x273 (and $x128 $x271)))
 (let (($x272 (= $x273 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x28)))
 (let (($x66 (= ?x244 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (= $x66 true)))
 (let (($x99 (= ?x244 input.dst.llvm-%n)))
 (let (($x192 (= $x99 true)))
 (let (($x113 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x158 (= $x113 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x239 (bvsub ?x36 ?x152)))
 (let (($x228 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x239) (bvult ?x36 ?x239))))
 (let ((?x59 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x129 (bvmul (_ bv4 64) ?x59)))
 (let ((?x237 ((_ extract 63 32) ?x129)))
 (let (($x186 (= (_ bv0 32) ?x237)))
 (let (($x201 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x230 (and (and (and true $x201) $x186) $x228)))
 (let (($x121 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x229 (and $x121 $x230)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (=> $x106 $x229)))
 (let (($x6 (= $x125 true)))
 (let (($x163 (= $x106 true)))
 (let (($x102 (and $x163 $x6)))
 (let (($x166 (and $x102 $x158)))
 (let (($x67 (and $x166 $x192)))
 (let (($x9 (and $x67 $x182)))
 (let (($x274 (and $x9 $x272)))
 (let (($x294 (and $x274 $x296)))
 (let (($x291 (and $x294 $x299)))
 (let (($x297 (and $x291 $x295)))
 (let (($x165 (and $x297 $x176)))
 (let (($x11 (and $x165 $x61)))
 (let (($x8 (and $x11 $x63)))
 (let (($x122 (and $x8 $x33)))
 (let (($x174 (and $x122 $x62)))
 (let (($x221 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and (not $x221) $x174)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x210 (and $x47 $x20)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x30 (and $x178 $x210)))
 (let (($x195 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x132 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1225X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x132 false)))
 ))
 (let (($x197 (and $x57 $x195)))
 (let (($x86 (and $x197 $x30)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x80 (and $x69 $x86)))
 (let (($x114 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x156 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x117 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x114)))))
 (let (($x15 (and $x117 $x80)))
 (let (($x90 (=> $x15 $x150)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x211 (bvsle ?x179 (_ bv399 32))))
 (let (($x150 (= $x211 true)))
 (let ((?x78 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x78)))
 (let (($x127 (= ?x189 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x127 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x33 (= $x43 true)))
 (let (($x21 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x63 (= $x21 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x61 (= $x23 true)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x209)))
 (let ((?x218 (bvand symbol.1 (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x218)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x154 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x217 (= input.memlabel-mem--symbol.1_end ?x154)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x118 (and $x35 $x217)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x204 $x118)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x103 $x45)))
 (let (($x91 (not $x100)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x53 $x147)))
 (let (($x169 (and (not $x12) $x91)))
 (let (($x213 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x191 $x213)))
 (let (($x234 (not $x220)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x196 $x25)))
 (let (($x148 (and (not $x246) $x234)))
 (let (($x50 (and (and (and (and (and (and $x148 $x169) $x109) $x170) $x27) $x104) $x123)))
 (let (($x42 (and $x50 $x248)))
 (let (($x301 (= symbol.1 dst_symbol_addr.1)))
 (let (($x40 (and $x301 $x42)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x303 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x303)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x303) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x232 $x71)))))))
 (let (($x164 (and $x177 $x40)))
 (let (($x176 (= $x164 true)))
 (let (($x293 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x295 (= $x293 true)))
 (let (($x292 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x299 (= $x292 true)))
 (let (($x276 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x296 (= $x276 true)))
 (let (($x271 (forall ((input.ind-%var1215X (_ BitVec 32)) )(let ((?x254 (bvadd symbol.1 (bvmul input.ind-%var1215X (_ bv4 32)))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x254))))
 (let ((?x46 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x254 (_ bv2 32))) ?x255)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x254 (_ bv3 32))) ?x46)))
 (let ((?x146 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1215X)))
 (let (($x138 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1215X)))
 (=> $x138 (= ?x146 ?x270)))))))))
 ))
 (let (($x128 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x41 (and (bvule (_ bv0 32) input.ind-%var1214X) (bvult input.ind-%var1214X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x138 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1214X)))
 (= $x138 $x41))))
 ))
 (let (($x273 (and $x128 $x271)))
 (let (($x272 (= $x273 true)))
 (let ((?x28 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x28)))
 (let (($x66 (= ?x244 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (= $x66 true)))
 (let (($x99 (= ?x244 input.dst.llvm-%n)))
 (let (($x192 (= $x99 true)))
 (let (($x113 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x158 (= $x113 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x239 (bvsub ?x36 ?x152)))
 (let (($x228 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x239) (bvult ?x36 ?x239))))
 (let ((?x59 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x129 (bvmul (_ bv4 64) ?x59)))
 (let ((?x237 ((_ extract 63 32) ?x129)))
 (let (($x186 (= (_ bv0 32) ?x237)))
 (let (($x201 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x230 (and (and (and true $x201) $x186) $x228)))
 (let (($x121 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x229 (and $x121 $x230)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (=> $x106 $x229)))
 (let (($x6 (= $x125 true)))
 (let (($x163 (= $x106 true)))
 (let (($x102 (and $x163 $x6)))
 (let (($x166 (and $x102 $x158)))
 (let (($x67 (and $x166 $x192)))
 (let (($x9 (and $x67 $x182)))
 (let (($x274 (and $x9 $x272)))
 (let (($x294 (and $x274 $x296)))
 (let (($x291 (and $x294 $x299)))
 (let (($x297 (and $x291 $x295)))
 (let (($x165 (and $x297 $x176)))
 (let (($x11 (and $x165 $x61)))
 (let (($x8 (and $x11 $x63)))
 (let (($x122 (and $x8 $x33)))
 (let (($x174 (and $x122 $x62)))
 (let (($x221 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and (not $x221) $x174)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x210 (and $x47 $x20)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x30 (and $x178 $x210)))
 (let (($x195 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x132 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1225X) (_ bv0 32)))))
 ))
 (let (($x57 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x132 false)))
 ))
 (let (($x197 (and $x57 $x195)))
 (let (($x86 (and $x197 $x30)))
 (let (($x69 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x80 (and $x69 $x86)))
 (let (($x114 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x156 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x114)))))
 (let (($x117 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x114)))))
 (let (($x15 (and $x117 $x80)))
 (let (($x90 (=> $x15 $x150)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x245 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x83 (bvsge ?x245 (_ bv0 32))))
 (let (($x233 (= $x83 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x267 (bvneg ?x226)))
 (let (($x187 (= ?x267 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x73 (= $x187 true)))
 (let (($x241 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x116 (= $x241 true)))
 (let (($x85 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x180 (= $x85 true)))
 (let (($x190 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x119 (= $x190 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x107)))
 (let ((?x150 (bvand symbol.1 (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x150)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x30 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x30)))
 (let (($x210 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (and $x210 $x86)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x20 $x80)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x8 $x43)))
 (let (($x122 (not $x33)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x11 $x21)))
 (let (($x189 (and (not $x63) $x122)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x40 $x164)))
 (let (($x165 (not $x176)))
 (let (($x248 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x209 $x248)))
 (let (($x61 (and (not $x42) $x165)))
 (let (($x131 (and (and (and (and (and (and $x61 $x189) $x127) $x174) $x15) $x211) $x90)))
 (let (($x18 (and $x131 $x31)))
 (let (($x109 (= symbol.1 dst_symbol_addr.1)))
 (let (($x26 (and $x109 $x18)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x35 (or (bvugt input.memlabel-mem--symbol.1_begin ?x170) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x35) (or $x27 $x198)))))))
 (let (($x181 (and $x50 $x26)))
 (let (($x92 (= $x181 true)))
 (let (($x45 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x100 (= $x45 true)))
 (let (($x12 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x55 (= $x12 true)))
 (let (($x148 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (= $x148 true)))
 (let (($x191 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let ((?x98 (bvadd symbol.1 (bvmul input.ind-%var1235X (_ bv4 32)))))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x98))))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv2 32))) ?x155)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv3 32))) ?x214)))
 (let ((?x274 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1235X)))
 (let (($x175 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (=> $x175 (= ?x274 ?x25)))))))))
 ))
 (let (($x275 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x270 (and (bvule (_ bv0 32) input.ind-%var1234X) (bvult input.ind-%var1234X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x175 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1234X)))
 (= $x175 $x270))))
 ))
 (let (($x213 (and $x275 $x191)))
 (let (($x220 (= $x213 true)))
 (let ((?x219 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x219)))
 (let (($x112 (= ?x41 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (= $x112 true)))
 (let (($x7 (= ?x41 input.dst.llvm-%n)))
 (let (($x128 (= $x7 true)))
 (let (($x182 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x9 (= $x182 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x6 (bvsub ?x36 ?x152)))
 (let (($x158 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x6) (bvult ?x36 ?x6))))
 (let ((?x228 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x230 (bvmul (_ bv4 64) ?x228)))
 (let ((?x229 ((_ extract 63 32) ?x230)))
 (let (($x125 (= (_ bv0 32) ?x229)))
 (let (($x32 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x28 (and (and (and true $x32) $x125) $x158)))
 (let (($x237 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x244 (and $x237 $x28)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (=> $x243 $x244)))
 (let (($x192 (= $x99 true)))
 (let (($x126 (= $x243 true)))
 (let (($x67 (and $x126 $x192)))
 (let (($x138 (and $x67 $x9)))
 (let (($x146 (and $x138 $x128)))
 (let (($x254 (and $x146 $x216)))
 (let (($x234 (and $x254 $x220)))
 (let (($x147 (and $x234 $x53)))
 (let (($x103 (and $x147 $x55)))
 (let (($x91 (and $x103 $x100)))
 (let (($x304 (and $x91 $x92)))
 (let (($x88 (and $x304 $x119)))
 (let (($x134 (and $x88 $x180)))
 (let (($x258 (and $x134 $x116)))
 (let (($x14 (and $x258 $x73)))
 (let (($x205 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and (not $x205) $x14)))
 (let (($x194 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x259 (and $x194 $x81)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x249 (and $x48 $x259)))
 (let (($x39 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1245X)))
 (=> $x74 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1245X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1244X)))
 (= $x74 false)))
 ))
 (let (($x183 (and $x195 $x39)))
 (let (($x68 (and $x183 $x249)))
 (let (($x139 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x143 (and $x139 $x68)))
 (let (($x97 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x69 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x97)))))
 (let (($x93 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x97)))))
 (let (($x96 (and $x93 $x143)))
 (let (($x13 (=> $x96 $x233)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x245 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x83 (bvsge ?x245 (_ bv0 32))))
 (let (($x233 (= $x83 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x267 (bvneg ?x226)))
 (let (($x187 (= ?x267 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x73 (= $x187 true)))
 (let (($x241 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x116 (= $x241 true)))
 (let (($x85 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x180 (= $x85 true)))
 (let (($x190 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x119 (= $x190 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x107)))
 (let ((?x150 (bvand symbol.1 (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x150)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x30 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x30)))
 (let (($x210 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (and $x210 $x86)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x20 $x80)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x8 $x43)))
 (let (($x122 (not $x33)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x11 $x21)))
 (let (($x189 (and (not $x63) $x122)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x40 $x164)))
 (let (($x165 (not $x176)))
 (let (($x248 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x209 $x248)))
 (let (($x61 (and (not $x42) $x165)))
 (let (($x131 (and (and (and (and (and (and $x61 $x189) $x127) $x174) $x15) $x211) $x90)))
 (let (($x18 (and $x131 $x31)))
 (let (($x109 (= symbol.1 dst_symbol_addr.1)))
 (let (($x26 (and $x109 $x18)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x35 (or (bvugt input.memlabel-mem--symbol.1_begin ?x170) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x35) (or $x27 $x198)))))))
 (let (($x181 (and $x50 $x26)))
 (let (($x92 (= $x181 true)))
 (let (($x45 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x100 (= $x45 true)))
 (let (($x12 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x55 (= $x12 true)))
 (let (($x148 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (= $x148 true)))
 (let (($x191 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let ((?x98 (bvadd symbol.1 (bvmul input.ind-%var1235X (_ bv4 32)))))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x98))))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv2 32))) ?x155)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv3 32))) ?x214)))
 (let ((?x274 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1235X)))
 (let (($x175 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (=> $x175 (= ?x274 ?x25)))))))))
 ))
 (let (($x275 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x270 (and (bvule (_ bv0 32) input.ind-%var1234X) (bvult input.ind-%var1234X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x175 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1234X)))
 (= $x175 $x270))))
 ))
 (let (($x213 (and $x275 $x191)))
 (let (($x220 (= $x213 true)))
 (let ((?x219 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x219)))
 (let (($x112 (= ?x41 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (= $x112 true)))
 (let (($x7 (= ?x41 input.dst.llvm-%n)))
 (let (($x128 (= $x7 true)))
 (let (($x182 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x9 (= $x182 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x6 (bvsub ?x36 ?x152)))
 (let (($x158 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x6) (bvult ?x36 ?x6))))
 (let ((?x228 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x230 (bvmul (_ bv4 64) ?x228)))
 (let ((?x229 ((_ extract 63 32) ?x230)))
 (let (($x125 (= (_ bv0 32) ?x229)))
 (let (($x32 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x28 (and (and (and true $x32) $x125) $x158)))
 (let (($x237 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x244 (and $x237 $x28)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (=> $x243 $x244)))
 (let (($x192 (= $x99 true)))
 (let (($x126 (= $x243 true)))
 (let (($x67 (and $x126 $x192)))
 (let (($x138 (and $x67 $x9)))
 (let (($x146 (and $x138 $x128)))
 (let (($x254 (and $x146 $x216)))
 (let (($x234 (and $x254 $x220)))
 (let (($x147 (and $x234 $x53)))
 (let (($x103 (and $x147 $x55)))
 (let (($x91 (and $x103 $x100)))
 (let (($x304 (and $x91 $x92)))
 (let (($x88 (and $x304 $x119)))
 (let (($x134 (and $x88 $x180)))
 (let (($x258 (and $x134 $x116)))
 (let (($x14 (and $x258 $x73)))
 (let (($x205 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and (not $x205) $x14)))
 (let (($x194 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x259 (and $x194 $x81)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x249 (and $x48 $x259)))
 (let (($x39 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1245X)))
 (=> $x74 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1245X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1244X)))
 (= $x74 false)))
 ))
 (let (($x183 (and $x195 $x39)))
 (let (($x68 (and $x183 $x249)))
 (let (($x139 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x143 (and $x139 $x68)))
 (let (($x97 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x69 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x97)))))
 (let (($x93 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x97)))))
 (let (($x96 (and $x93 $x143)))
 (let (($x13 (=> $x96 $x233)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x199 (bvule ?x273 (_ bv399 32))))
 (let (($x223 (= $x199 true)))
 (let ((?x302 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x302)))
 (let (($x293 (= ?x145 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x295 (= $x293 true)))
 (let (($x299 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x101 (= $x299 true)))
 (let (($x266 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (= $x266 true)))
 (let (($x149 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x272 (= $x149 true)))
 (let (($x178 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let ((?x245 (bvadd symbol.1 (bvmul input.ind-%var1255X (_ bv4 32)))))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x245))))
 (let ((?x169 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv2 32))) ?x111)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv3 32))) ?x169)))
 (let ((?x190 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1255X)))
 (let (($x161 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1255X)))
 (=> $x161 (= ?x190 ?x64)))))))))
 ))
 (let (($x26 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var1254X) (bvult input.ind-%var1254X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x161 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1254X)))
 (= $x161 $x31))))
 ))
 (let (($x132 (and $x26 $x178)))
 (let (($x238 (= $x132 true)))
 (let (($x210 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x30 (= $x210 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x8 (bvsub ?x36 ?x152)))
 (let (($x189 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x8) (bvult ?x36 ?x8))))
 (let ((?x11 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x21 (bvmul (_ bv4 64) ?x11)))
 (let ((?x63 ((_ extract 63 32) ?x21)))
 (let (($x78 (= (_ bv0 32) ?x63)))
 (let (($x165 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x300 (and (and (and true $x165) $x78) $x189)))
 (let (($x42 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x62 (and $x42 $x300)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (=> $x251 $x62)))
 (let (($x252 (= $x174 true)))
 (let (($x22 (= $x251 true)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x173)))
 (let ((?x123 (bvand symbol.1 (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x123)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let ((?x103 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x45 (= input.memlabel-mem--symbol.1_end ?x103)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (and $x55 $x45)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x12 $x100)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x191 (and $x246 $x224)))
 (let (($x213 (not $x191)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x155 $x214)))
 (let (($x234 (and (not $x25) $x213)))
 (let (($x188 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x19 $x188)))
 (let (($x242 (not $x177)))
 (let (($x301 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x98 $x301)))
 (let (($x71 (and (not $x196) $x242)))
 (let (($x198 (and (and (and (and (and (and $x71 $x234) $x148) $x147) $x91) $x215) $x170)))
 (let (($x65 (and $x198 $x204)))
 (let (($x206 (= symbol.1 dst_symbol_addr.1)))
 (let (($x104 (and $x206 $x65)))
 (let (($x255 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x112 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x232 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x112) (or $x46 $x255)))))))
 (let (($x193 (and $x232 $x104)))
 (let (($x218 (= $x193 true)))
 (let (($x67 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x67 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x160 (bvneg ?x6)))
 (let (($x244 (= ?x160 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (= $x244 true)))
 (let (($x113 (= ?x160 input.dst.llvm-%n)))
 (let (($x158 (= $x113 true)))
 (let (($x229 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x125 (= $x229 true)))
 (let (($x228 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x230 (= $x228 true)))
 (let (($x136 (and $x230 $x125)))
 (let (($x28 (and $x136 $x158)))
 (let (($x192 (and $x28 $x99)))
 (let (($x182 (and $x192 $x66)))
 (let (($x50 (and $x182 $x218)))
 (let (($x109 (and $x50 $x22)))
 (let (($x20 (and $x109 $x252)))
 (let (($x86 (and $x20 $x30)))
 (let (($x208 (and $x86 $x238)))
 (let (($x124 (and $x208 $x272)))
 (let (($x292 (and $x124 $x141)))
 (let (($x305 (and $x292 $x101)))
 (let (($x291 (and $x305 $x295)))
 (let (($x166 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x303 (and (not $x166) $x291)))
 (let (($x239 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x49 (and $x239 $x303)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x212 $x49)))
 (let (($x59 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1265X)))
 (=> $x75 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1265X) (_ bv0 32)))))
 ))
 (let (($x39 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1264X)))
 (= $x75 false)))
 ))
 (let (($x129 (and $x39 $x59)))
 (let (($x257 (and $x129 $x268)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x256 (and $x57 $x257)))
 (let (($x117 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x139 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x117)))))
 (let (($x108 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x117)))))
 (let (($x171 (and $x108 $x256)))
 (let (($x221 (=> $x171 $x223)))
 (not $x221))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x199 (bvule ?x273 (_ bv399 32))))
 (let (($x223 (= $x199 true)))
 (let ((?x302 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x302)))
 (let (($x293 (= ?x145 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x295 (= $x293 true)))
 (let (($x299 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x101 (= $x299 true)))
 (let (($x266 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (= $x266 true)))
 (let (($x149 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x272 (= $x149 true)))
 (let (($x178 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let ((?x245 (bvadd symbol.1 (bvmul input.ind-%var1255X (_ bv4 32)))))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x245))))
 (let ((?x169 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv2 32))) ?x111)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv3 32))) ?x169)))
 (let ((?x190 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1255X)))
 (let (($x161 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1255X)))
 (=> $x161 (= ?x190 ?x64)))))))))
 ))
 (let (($x26 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var1254X) (bvult input.ind-%var1254X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x161 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1254X)))
 (= $x161 $x31))))
 ))
 (let (($x132 (and $x26 $x178)))
 (let (($x238 (= $x132 true)))
 (let (($x210 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x30 (= $x210 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x8 (bvsub ?x36 ?x152)))
 (let (($x189 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x8) (bvult ?x36 ?x8))))
 (let ((?x11 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x21 (bvmul (_ bv4 64) ?x11)))
 (let ((?x63 ((_ extract 63 32) ?x21)))
 (let (($x78 (= (_ bv0 32) ?x63)))
 (let (($x165 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x300 (and (and (and true $x165) $x78) $x189)))
 (let (($x42 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x62 (and $x42 $x300)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (=> $x251 $x62)))
 (let (($x252 (= $x174 true)))
 (let (($x22 (= $x251 true)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x173)))
 (let ((?x123 (bvand symbol.1 (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x123)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let ((?x103 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x45 (= input.memlabel-mem--symbol.1_end ?x103)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (and $x55 $x45)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x12 $x100)))
 (let (($x147 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x191 (and $x246 $x224)))
 (let (($x213 (not $x191)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x155 $x214)))
 (let (($x234 (and (not $x25) $x213)))
 (let (($x188 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x19 $x188)))
 (let (($x242 (not $x177)))
 (let (($x301 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x98 $x301)))
 (let (($x71 (and (not $x196) $x242)))
 (let (($x198 (and (and (and (and (and (and $x71 $x234) $x148) $x147) $x91) $x215) $x170)))
 (let (($x65 (and $x198 $x204)))
 (let (($x206 (= symbol.1 dst_symbol_addr.1)))
 (let (($x104 (and $x206 $x65)))
 (let (($x255 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x112 (or (bvugt input.memlabel-mem--symbol.1_begin ?x7) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x232 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x112) (or $x46 $x255)))))))
 (let (($x193 (and $x232 $x104)))
 (let (($x218 (= $x193 true)))
 (let (($x67 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x67 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x160 (bvneg ?x6)))
 (let (($x244 (= ?x160 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (= $x244 true)))
 (let (($x113 (= ?x160 input.dst.llvm-%n)))
 (let (($x158 (= $x113 true)))
 (let (($x229 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x125 (= $x229 true)))
 (let (($x228 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x230 (= $x228 true)))
 (let (($x136 (and $x230 $x125)))
 (let (($x28 (and $x136 $x158)))
 (let (($x192 (and $x28 $x99)))
 (let (($x182 (and $x192 $x66)))
 (let (($x50 (and $x182 $x218)))
 (let (($x109 (and $x50 $x22)))
 (let (($x20 (and $x109 $x252)))
 (let (($x86 (and $x20 $x30)))
 (let (($x208 (and $x86 $x238)))
 (let (($x124 (and $x208 $x272)))
 (let (($x292 (and $x124 $x141)))
 (let (($x305 (and $x292 $x101)))
 (let (($x291 (and $x305 $x295)))
 (let (($x166 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x303 (and (not $x166) $x291)))
 (let (($x239 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x49 (and $x239 $x303)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x212 $x49)))
 (let (($x59 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1265X)))
 (=> $x75 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1265X) (_ bv0 32)))))
 ))
 (let (($x39 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x75 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1264X)))
 (= $x75 false)))
 ))
 (let (($x129 (and $x39 $x59)))
 (let (($x257 (and $x129 $x268)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x256 (and $x57 $x257)))
 (let (($x117 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x139 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x117)))))
 (let (($x108 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x117)))))
 (let (($x171 (and $x108 $x256)))
 (let (($x221 (=> $x171 $x223)))
 (not $x221))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (bvsle ?x92 (_ bv399 32))))
 (let (($x121 (= $x143 true)))
 (let ((?x187 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x187)))
 (let (($x116 (= ?x73 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x116 true)))
 (let (($x134 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x81 (= $x134 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x87 (= $x211 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x304 (= $x201 true)))
 (let (($x48 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let ((?x273 (bvadd symbol.1 (bvmul input.ind-%var1275X (_ bv4 32)))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x273))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv2 32))) ?x130)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv3 32))) ?x9)))
 (let ((?x149 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1275X)))
 (let (($x151 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1275X)))
 (=> $x151 (= ?x149 ?x47)))))))))
 ))
 (let (($x178 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var1274X) (bvult input.ind-%var1274X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x151 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1274X)))
 (= $x151 $x105))))
 ))
 (let (($x74 (and $x178 $x48)))
 (let (($x222 (= $x74 true)))
 (let (($x96 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x245 (= $x96 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x20 (bvsub ?x36 ?x152)))
 (let (($x161 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x20) (bvult ?x36 ?x20))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x62 (bvmul (_ bv4 64) ?x300)))
 (let ((?x174 ((_ extract 63 32) ?x62)))
 (let (($x252 (= (_ bv0 32) ?x174)))
 (let (($x122 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x31 (and (and (and true $x122) $x252) $x161)))
 (let (($x78 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x18 (and $x78 $x31)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (=> $x70 $x18)))
 (let (($x190 (= $x26 true)))
 (let (($x61 (= $x70 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x218)))
 (let ((?x104 (bvand symbol.1 (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x104)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x204)))
 (let ((?x123 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x170 (= input.memlabel-mem--symbol.1_end ?x123)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (and $x118 $x170)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x215 $x198)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x217 $x12)))
 (let (($x103 (not $x55)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (and $x154 $x53)))
 (let (($x100 (and (not $x147) $x103)))
 (let (($x191 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x224 $x191)))
 (let (($x234 (not $x213)))
 (let (($x220 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x25 $x220)))
 (let (($x148 (and (not $x246) $x234)))
 (let (($x40 (and (and (and (and (and (and $x148 $x100) $x91) $x227) $x173) $x65) $x193)))
 (let (($x23 (and $x40 $x50)))
 (let (($x270 (= symbol.1 dst_symbol_addr.1)))
 (let (($x164 (and $x270 $x23)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x274 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x274)))
 (let (($x206 (or (bvugt input.memlabel-mem--symbol.1_begin ?x274) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x214 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x206) (or $x203 $x19)))))))
 (let (($x176 (and $x214 $x164)))
 (let (($x165 (= $x176 true)))
 (let (($x216 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x254 (= $x216 true)))
 (let ((?x182 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x182)))
 (let (($x128 (= ?x219 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (= $x128 true)))
 (let (($x41 (= ?x219 input.dst.llvm-%n)))
 (let (($x296 (= $x41 true)))
 (let (($x99 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x192 (= $x99 true)))
 (let (($x28 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x244 (= $x28 true)))
 (let (($x67 (and $x244 $x192)))
 (let (($x7 (and $x67 $x296)))
 (let (($x112 (and $x7 $x146)))
 (let (($x46 (and $x112 $x254)))
 (let (($x34 (and $x46 $x165)))
 (let (($x11 (and $x34 $x61)))
 (let (($x88 (and $x11 $x190)))
 (let (($x298 (and $x88 $x245)))
 (let (($x137 (and $x298 $x222)))
 (let (($x80 (and $x137 $x304)))
 (let (($x180 (and $x80 $x87)))
 (let (($x259 (and $x180 $x81)))
 (let (($x241 (and $x259 $x258)))
 (let (($x113 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (and (not $x113) $x241)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and $x6 $x14)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x15 (and $x125 $x249)))
 (let (($x228 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1285X)))
 (=> $x225 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1285X) (_ bv0 32)))))
 ))
 (let (($x59 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1284X)))
 (= $x225 false)))
 ))
 (let (($x230 (and $x59 $x228)))
 (let (($x150 (and $x230 $x15)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x90 (and $x195 $x150)))
 (let (($x93 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x93)))))
 (let (($x16 (=> (and $x70 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x93)))))
 (let (($x68 (and $x16 $x90)))
 (let (($x205 (=> $x68 $x121)))
 (not $x205))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (bvsle ?x92 (_ bv399 32))))
 (let (($x121 (= $x143 true)))
 (let ((?x187 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x187)))
 (let (($x116 (= ?x73 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x116 true)))
 (let (($x134 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x81 (= $x134 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x87 (= $x211 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x304 (= $x201 true)))
 (let (($x48 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let ((?x273 (bvadd symbol.1 (bvmul input.ind-%var1275X (_ bv4 32)))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x273))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv2 32))) ?x130)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv3 32))) ?x9)))
 (let ((?x149 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1275X)))
 (let (($x151 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1275X)))
 (=> $x151 (= ?x149 ?x47)))))))))
 ))
 (let (($x178 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var1274X) (bvult input.ind-%var1274X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x151 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1274X)))
 (= $x151 $x105))))
 ))
 (let (($x74 (and $x178 $x48)))
 (let (($x222 (= $x74 true)))
 (let (($x96 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x245 (= $x96 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x20 (bvsub ?x36 ?x152)))
 (let (($x161 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x20) (bvult ?x36 ?x20))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x62 (bvmul (_ bv4 64) ?x300)))
 (let ((?x174 ((_ extract 63 32) ?x62)))
 (let (($x252 (= (_ bv0 32) ?x174)))
 (let (($x122 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x31 (and (and (and true $x122) $x252) $x161)))
 (let (($x78 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x18 (and $x78 $x31)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x26 (=> $x70 $x18)))
 (let (($x190 (= $x26 true)))
 (let (($x61 (= $x70 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x218)))
 (let ((?x104 (bvand symbol.1 (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x104)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x204)))
 (let ((?x123 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x170 (= input.memlabel-mem--symbol.1_end ?x123)))
 (let (($x118 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (and $x118 $x170)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x215 $x198)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x217 $x12)))
 (let (($x103 (not $x55)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (and $x154 $x53)))
 (let (($x100 (and (not $x147) $x103)))
 (let (($x191 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x224 $x191)))
 (let (($x234 (not $x213)))
 (let (($x220 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x25 $x220)))
 (let (($x148 (and (not $x246) $x234)))
 (let (($x40 (and (and (and (and (and (and $x148 $x100) $x91) $x227) $x173) $x65) $x193)))
 (let (($x23 (and $x40 $x50)))
 (let (($x270 (= symbol.1 dst_symbol_addr.1)))
 (let (($x164 (and $x270 $x23)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x274 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x274)))
 (let (($x206 (or (bvugt input.memlabel-mem--symbol.1_begin ?x274) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x214 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x206) (or $x203 $x19)))))))
 (let (($x176 (and $x214 $x164)))
 (let (($x165 (= $x176 true)))
 (let (($x216 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x254 (= $x216 true)))
 (let ((?x182 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x182)))
 (let (($x128 (= ?x219 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (= $x128 true)))
 (let (($x41 (= ?x219 input.dst.llvm-%n)))
 (let (($x296 (= $x41 true)))
 (let (($x99 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x192 (= $x99 true)))
 (let (($x28 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x244 (= $x28 true)))
 (let (($x67 (and $x244 $x192)))
 (let (($x7 (and $x67 $x296)))
 (let (($x112 (and $x7 $x146)))
 (let (($x46 (and $x112 $x254)))
 (let (($x34 (and $x46 $x165)))
 (let (($x11 (and $x34 $x61)))
 (let (($x88 (and $x11 $x190)))
 (let (($x298 (and $x88 $x245)))
 (let (($x137 (and $x298 $x222)))
 (let (($x80 (and $x137 $x304)))
 (let (($x180 (and $x80 $x87)))
 (let (($x259 (and $x180 $x81)))
 (let (($x241 (and $x259 $x258)))
 (let (($x113 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (and (not $x113) $x241)))
 (let (($x6 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and $x6 $x14)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x15 (and $x125 $x249)))
 (let (($x228 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1285X)))
 (=> $x225 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1285X) (_ bv0 32)))))
 ))
 (let (($x59 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1284X)))
 (= $x225 false)))
 ))
 (let (($x230 (and $x59 $x228)))
 (let (($x150 (and $x230 $x15)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x90 (and $x195 $x150)))
 (let (($x93 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x93)))))
 (let (($x16 (=> (and $x70 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x93)))))
 (let (($x68 (and $x16 $x90)))
 (let (($x205 (=> $x68 $x121)))
 (not $x205))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (bvsge ?x238 (_ bv0 32))))
 (let (($x237 (= $x256 true)))
 (let ((?x293 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x295 (bvneg ?x293)))
 (let (($x101 (= ?x295 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x305 (= $x101 true)))
 (let (($x292 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x303 (= $x292 true)))
 (let (($x233 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x13 (= $x233 true)))
 (let (($x32 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x32 true)))
 (let (($x212 (forall ((input.ind-%var1295X (_ BitVec 32)) )(let ((?x92 (bvadd symbol.1 (bvmul input.ind-%var1295X (_ bv4 32)))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x92))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x92 (_ bv2 32))) ?x271)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x92 (_ bv3 32))) ?x175)))
 (let ((?x201 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1295X)))
 (let (($x24 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1295X)))
 (=> $x24 (= ?x201 ?x194)))))))))
 ))
 (let (($x48 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let (($x115 (and (bvule (_ bv0 32) input.ind-%var1294X) (bvult input.ind-%var1294X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x24 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1294X)))
 (= $x24 $x115))))
 ))
 (let (($x75 (and $x48 $x212)))
 (let (($x163 (= $x75 true)))
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x273 (= $x171 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x88 (bvsub ?x36 ?x152)))
 (let (($x151 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x88) (bvult ?x36 ?x88))))
 (let ((?x31 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x18 (bvmul (_ bv4 64) ?x31)))
 (let ((?x26 ((_ extract 63 32) ?x18)))
 (let (($x190 (= (_ bv0 32) ?x26)))
 (let (($x86 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x105 (and (and (and true $x86) $x190) $x151)))
 (let (($x252 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x197 (and $x252 $x105)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (=> $x106 $x197)))
 (let (($x149 (= $x178 true)))
 (let (($x189 (= $x106 true)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x165)))
 (let ((?x164 (bvand symbol.1 (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x164)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x193 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (and $x42 $x193)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x65 $x40)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (and $x209 $x215)))
 (let (($x123 (not $x118)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x227 (and $x109 $x27)))
 (let (($x198 (and (not $x227) $x123)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x12 $x55)))
 (let (($x100 (not $x103)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x147 $x45)))
 (let (($x91 (and (not $x217) $x100)))
 (let (($x43 (and (and (and (and (and (and $x91 $x198) $x173) $x204) $x218) $x23) $x176)))
 (let (($x127 (and $x43 $x34)))
 (let (($x188 (= symbol.1 dst_symbol_addr.1)))
 (let (($x8 (and $x188 $x127)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x270 (or (bvugt input.memlabel-mem--symbol.1_begin ?x71) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x270) (or $x35 $x224)))))))
 (let (($x33 (and $x53 $x8)))
 (let (($x122 (= $x33 true)))
 (let (($x98 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x301 (= $x98 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x46)))
 (let (($x232 (= ?x269 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (= $x232 true)))
 (let (($x275 (= ?x269 input.dst.llvm-%n)))
 (let (($x155 (= $x275 true)))
 (let (($x146 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x146 true)))
 (let (($x7 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x7 true)))
 (let (($x216 (and $x128 $x112)))
 (let (($x274 (and $x216 $x155)))
 (let (($x206 (and $x274 $x138)))
 (let (($x203 (and $x206 $x301)))
 (let (($x107 (and $x203 $x122)))
 (let (($x300 (and $x107 $x189)))
 (let (($x124 (and $x300 $x149)))
 (let (($x179 (and $x124 $x273)))
 (let (($x110 (and $x179 $x163)))
 (let (($x276 (and $x110 $x208)))
 (let (($x141 (and $x276 $x13)))
 (let (($x49 (and $x141 $x303)))
 (let (($x299 (and $x49 $x305)))
 (let (($x41 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x291 (and (not $x41) $x299)))
 (let (($x182 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x268 (and $x182 $x291)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x192 $x268)))
 (let (($x28 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1305X)))
 (=> $x186 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1305X) (_ bv0 32)))))
 ))
 (let (($x228 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1304X)))
 (= $x186 false)))
 ))
 (let (($x244 (and $x228 $x28)))
 (let (($x83 (and $x244 $x267)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x111 (and $x39 $x83)))
 (let (($x108 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x195 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x108)))))
 (let (($x207 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x108)))))
 (let (($x257 (and $x207 $x111)))
 (let (($x166 (=> $x257 $x237)))
 (not $x166))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (bvsge ?x238 (_ bv0 32))))
 (let (($x237 (= $x256 true)))
 (let ((?x293 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x295 (bvneg ?x293)))
 (let (($x101 (= ?x295 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x305 (= $x101 true)))
 (let (($x292 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x303 (= $x292 true)))
 (let (($x233 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x13 (= $x233 true)))
 (let (($x32 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x32 true)))
 (let (($x212 (forall ((input.ind-%var1295X (_ BitVec 32)) )(let ((?x92 (bvadd symbol.1 (bvmul input.ind-%var1295X (_ bv4 32)))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x92))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x92 (_ bv2 32))) ?x271)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x92 (_ bv3 32))) ?x175)))
 (let ((?x201 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1295X)))
 (let (($x24 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1295X)))
 (=> $x24 (= ?x201 ?x194)))))))))
 ))
 (let (($x48 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let (($x115 (and (bvule (_ bv0 32) input.ind-%var1294X) (bvult input.ind-%var1294X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x24 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1294X)))
 (= $x24 $x115))))
 ))
 (let (($x75 (and $x48 $x212)))
 (let (($x163 (= $x75 true)))
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x273 (= $x171 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x88 (bvsub ?x36 ?x152)))
 (let (($x151 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x88) (bvult ?x36 ?x88))))
 (let ((?x31 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x18 (bvmul (_ bv4 64) ?x31)))
 (let ((?x26 ((_ extract 63 32) ?x18)))
 (let (($x190 (= (_ bv0 32) ?x26)))
 (let (($x86 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x105 (and (and (and true $x86) $x190) $x151)))
 (let (($x252 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x197 (and $x252 $x105)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (=> $x106 $x197)))
 (let (($x149 (= $x178 true)))
 (let (($x189 (= $x106 true)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x165)))
 (let ((?x164 (bvand symbol.1 (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x164)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x193 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (and $x42 $x193)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x65 $x40)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (and $x209 $x215)))
 (let (($x123 (not $x118)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x227 (and $x109 $x27)))
 (let (($x198 (and (not $x227) $x123)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x12 $x55)))
 (let (($x100 (not $x103)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x147 $x45)))
 (let (($x91 (and (not $x217) $x100)))
 (let (($x43 (and (and (and (and (and (and $x91 $x198) $x173) $x204) $x218) $x23) $x176)))
 (let (($x127 (and $x43 $x34)))
 (let (($x188 (= symbol.1 dst_symbol_addr.1)))
 (let (($x8 (and $x188 $x127)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x270 (or (bvugt input.memlabel-mem--symbol.1_begin ?x71) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x270) (or $x35 $x224)))))))
 (let (($x33 (and $x53 $x8)))
 (let (($x122 (= $x33 true)))
 (let (($x98 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x301 (= $x98 true)))
 (let ((?x46 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x46)))
 (let (($x232 (= ?x269 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (= $x232 true)))
 (let (($x275 (= ?x269 input.dst.llvm-%n)))
 (let (($x155 (= $x275 true)))
 (let (($x146 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x146 true)))
 (let (($x7 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x7 true)))
 (let (($x216 (and $x128 $x112)))
 (let (($x274 (and $x216 $x155)))
 (let (($x206 (and $x274 $x138)))
 (let (($x203 (and $x206 $x301)))
 (let (($x107 (and $x203 $x122)))
 (let (($x300 (and $x107 $x189)))
 (let (($x124 (and $x300 $x149)))
 (let (($x179 (and $x124 $x273)))
 (let (($x110 (and $x179 $x163)))
 (let (($x276 (and $x110 $x208)))
 (let (($x141 (and $x276 $x13)))
 (let (($x49 (and $x141 $x303)))
 (let (($x299 (and $x49 $x305)))
 (let (($x41 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x291 (and (not $x41) $x299)))
 (let (($x182 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x268 (and $x182 $x291)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x192 $x268)))
 (let (($x28 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1305X)))
 (=> $x186 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1305X) (_ bv0 32)))))
 ))
 (let (($x228 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x186 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1304X)))
 (= $x186 false)))
 ))
 (let (($x244 (and $x228 $x28)))
 (let (($x83 (and $x244 $x267)))
 (let (($x39 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x111 (and $x39 $x83)))
 (let (($x108 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x195 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x108)))))
 (let (($x207 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x108)))))
 (let (($x257 (and $x207 $x111)))
 (let (($x166 (=> $x257 $x237)))
 (not $x166))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (bvule ?x222 input.dst.llvm-%n)))
 (let (($x229 (= $x90 true)))
 (let ((?x116 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x116)))
 (let (($x81 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x259 (= $x81 true)))
 (let ((?x203 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x203)))
 (let (($x180 (= ?x177 input.dst.llvm-%n)))
 (let (($x14 (= $x180 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x221 (= $x223 true)))
 (let (($x160 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x137 (= $x160 true)))
 (let (($x225 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (= $x225 true)))
 (let (($x239 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let ((?x83 (bvadd symbol.1 (bvmul input.ind-%var1315X (_ bv4 32)))))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x83))))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv2 32))) ?x256)))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv3 32))) ?x181)))
 (let ((?x75 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1315X)))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1315X)))
 (=> $x133 (= ?x75 ?x196)))))))))
 ))
 (let (($x194 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var1314X) (bvult input.ind-%var1314X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (= $x133 $x271))))
 ))
 (let (($x102 (and $x194 $x239)))
 (let (($x230 (= $x102 true)))
 (let (($x48 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x201 (= $x48 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x197 (bvsub ?x36 ?x152)))
 (let (($x171 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x197) (bvult ?x36 ?x197))))
 (let ((?x245 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x298 (bvmul (_ bv4 64) ?x245)))
 (let ((?x151 ((_ extract 63 32) ?x298)))
 (let (($x105 (= (_ bv0 32) ?x151)))
 (let (($x96 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x24 (and (and (and true $x96) $x105) $x171)))
 (let (($x31 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x47 (and $x31 $x24)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x243 $x47)))
 (let (($x115 (= $x9 true)))
 (let (($x30 (= $x243 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x127)))
 (let ((?x165 (bvand symbol.1 (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x165)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x50 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x23 (= input.memlabel-mem--symbol.1_end ?x50)))
 (let (($x63 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x78 (and $x63 $x23)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x218 $x78)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x204 (and $x11 $x248)))
 (let (($x21 (not $x204)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x198 $x61)))
 (let (($x42 (and (not $x173) $x21)))
 (let (($x170 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x227 $x170)))
 (let (($x215 (not $x209)))
 (let (($x109 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x91 $x109)))
 (let (($x123 (and (not $x27) $x215)))
 (let (($x62 (and (and (and (and (and (and $x123 $x42) $x104) $x40) $x164) $x43) $x34)))
 (let (($x174 (and $x62 $x8)))
 (let (($x35 (= symbol.1 dst_symbol_addr.1)))
 (let (($x252 (and $x35 $x174)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x191 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x148 (or (bvugt input.memlabel-mem--symbol.1_begin ?x191) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x148) (or $x147 $x45)))))))
 (let (($x210 (and $x100 $x252)))
 (let (($x131 (= $x210 true)))
 (let (($x214 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x255 (= $x214 true)))
 (let (($x242 (= ?x177 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (= $x242 true)))
 (let (($x138 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x206 (= $x138 true)))
 (let (($x274 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x232 (= $x274 true)))
 (let (($x98 (and $x232 $x206)))
 (let (($x71 (and $x98 $x154)))
 (let (($x270 (and $x71 $x255)))
 (let (($x20 (and $x270 $x131)))
 (let (($x86 (and $x20 $x30)))
 (let (($x183 (and $x86 $x115)))
 (let (($x80 (and $x183 $x201)))
 (let (($x125 (and $x80 $x230)))
 (let (($x297 (and $x125 $x126)))
 (let (($x119 (and $x297 $x137)))
 (let (($x87 (and $x119 $x221)))
 (let (($x249 (and $x87 $x14)))
 (let (($x134 (and $x249 $x259)))
 (let (($x275 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x241 (and (not $x275) $x134)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (and $x46 $x241)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x145 (and $x112 $x15)))
 (let (($x7 (forall ((input.ind-%var1325X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1325X)))
 (=> $x136 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1325X) (_ bv0 32)))))
 ))
 (let (($x28 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1324X)))
 (= $x136 false)))
 ))
 (let (($x128 (and $x28 $x7)))
 (let (($x199 (and $x128 $x145)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x59 $x199)))
 (let (($x16 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x16)))))
 (let (($x202 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x16)))))
 (let (($x150 (and $x202 $x130)))
 (let (($x113 (=> $x150 $x229)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (bvule ?x222 input.dst.llvm-%n)))
 (let (($x229 (= $x90 true)))
 (let ((?x116 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x116)))
 (let (($x81 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x259 (= $x81 true)))
 (let ((?x203 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x203)))
 (let (($x180 (= ?x177 input.dst.llvm-%n)))
 (let (($x14 (= $x180 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x221 (= $x223 true)))
 (let (($x160 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x137 (= $x160 true)))
 (let (($x225 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (= $x225 true)))
 (let (($x239 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let ((?x83 (bvadd symbol.1 (bvmul input.ind-%var1315X (_ bv4 32)))))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x83))))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv2 32))) ?x256)))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x83 (_ bv3 32))) ?x181)))
 (let ((?x75 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1315X)))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1315X)))
 (=> $x133 (= ?x75 ?x196)))))))))
 ))
 (let (($x194 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var1314X) (bvult input.ind-%var1314X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x133 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (= $x133 $x271))))
 ))
 (let (($x102 (and $x194 $x239)))
 (let (($x230 (= $x102 true)))
 (let (($x48 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x201 (= $x48 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x197 (bvsub ?x36 ?x152)))
 (let (($x171 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x197) (bvult ?x36 ?x197))))
 (let ((?x245 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x298 (bvmul (_ bv4 64) ?x245)))
 (let ((?x151 ((_ extract 63 32) ?x298)))
 (let (($x105 (= (_ bv0 32) ?x151)))
 (let (($x96 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x24 (and (and (and true $x96) $x105) $x171)))
 (let (($x31 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x47 (and $x31 $x24)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x243 $x47)))
 (let (($x115 (= $x9 true)))
 (let (($x30 (= $x243 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x127)))
 (let ((?x165 (bvand symbol.1 (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x165)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x50 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x23 (= input.memlabel-mem--symbol.1_end ?x50)))
 (let (($x63 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x78 (and $x63 $x23)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x218 $x78)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x204 (and $x11 $x248)))
 (let (($x21 (not $x204)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x198 $x61)))
 (let (($x42 (and (not $x173) $x21)))
 (let (($x170 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x227 $x170)))
 (let (($x215 (not $x209)))
 (let (($x109 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x91 $x109)))
 (let (($x123 (and (not $x27) $x215)))
 (let (($x62 (and (and (and (and (and (and $x123 $x42) $x104) $x40) $x164) $x43) $x34)))
 (let (($x174 (and $x62 $x8)))
 (let (($x35 (= symbol.1 dst_symbol_addr.1)))
 (let (($x252 (and $x35 $x174)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x191 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x148 (or (bvugt input.memlabel-mem--symbol.1_begin ?x191) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x148) (or $x147 $x45)))))))
 (let (($x210 (and $x100 $x252)))
 (let (($x131 (= $x210 true)))
 (let (($x214 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x255 (= $x214 true)))
 (let (($x242 (= ?x177 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (= $x242 true)))
 (let (($x138 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x206 (= $x138 true)))
 (let (($x274 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x232 (= $x274 true)))
 (let (($x98 (and $x232 $x206)))
 (let (($x71 (and $x98 $x154)))
 (let (($x270 (and $x71 $x255)))
 (let (($x20 (and $x270 $x131)))
 (let (($x86 (and $x20 $x30)))
 (let (($x183 (and $x86 $x115)))
 (let (($x80 (and $x183 $x201)))
 (let (($x125 (and $x80 $x230)))
 (let (($x297 (and $x125 $x126)))
 (let (($x119 (and $x297 $x137)))
 (let (($x87 (and $x119 $x221)))
 (let (($x249 (and $x87 $x14)))
 (let (($x134 (and $x249 $x259)))
 (let (($x275 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x241 (and (not $x275) $x134)))
 (let (($x46 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (and $x46 $x241)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x145 (and $x112 $x15)))
 (let (($x7 (forall ((input.ind-%var1325X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1325X)))
 (=> $x136 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1325X) (_ bv0 32)))))
 ))
 (let (($x28 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let (($x136 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1324X)))
 (= $x136 false)))
 ))
 (let (($x128 (and $x28 $x7)))
 (let (($x199 (and $x128 $x145)))
 (let (($x59 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x59 $x199)))
 (let (($x16 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x16)))))
 (let (($x202 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x16)))))
 (let (($x150 (and $x202 $x130)))
 (let (($x113 (=> $x150 $x229)))
 (not $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x289 (forall ((input.ind-%var1359X (_ BitVec 32)) )(let ((?x298 (bvadd symbol.1 (bvmul input.ind-%var1359X (_ bv4 32)))))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x16 (bvadd ?x36 (_ bv3 32))))
 (let ((?x140 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x36 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x167 (store ?x140 (bvadd ?x36 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x153 (store ?x167 (bvadd ?x36 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x142 (store ?x153 ?x16 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x200 (concat (select ?x142 (bvadd ?x298 (_ bv2 32))) (concat (select ?x142 (bvadd ?x298 (_ bv1 32))) (select ?x142 ?x298)))))
 (let ((?x127 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1359X)))
 (let (($x60 (= input.ind-%var1359X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x264 (= (ite $x60 input.spec-%var-i-0.L3%6%bbentry ?x127) (concat (select ?x142 (bvadd ?x298 (_ bv3 32))) ?x200))))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1359X)))
 (let (($x94 (or $x107 $x60)))
 (=> $x94 $x264))))))))))))))))
 ))
 (let (($x17 (forall ((input.ind-%var1358X (_ BitVec 32)) )(let (($x189 (bvule (_ bv0 32) input.ind-%var1358X)))
 (let (($x76 (and $x189 (bvult input.ind-%var1358X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x60 (= input.ind-%var1358X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1358X)))
 (let (($x94 (or $x107 $x60)))
 (= $x94 $x76)))))))
 ))
 (let (($x261 (and $x17 $x289)))
 (let (($x263 (= $x261 true)))
 (let ((?x49 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x293 (bvneg ?x49)))
 (let (($x13 (= ?x293 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x13 true)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x192)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x66)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x266 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x58 (= input.memlabel-mem--symbol.1_end ?x266)))
 (let (($x132 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (and $x132 $x58)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x113 $x25)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (and $x241 $x15)))
 (let (($x199 (not $x145)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x81 $x259)))
 (let (($x150 (and (not $x134) $x199)))
 (let (($x180 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x87 $x180)))
 (let (($x249 (not $x14)))
 (let (($x223 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x119 $x223)))
 (let (($x258 (and (not $x221) $x249)))
 (let (($x73 (and (and (and (and (and (and $x258 $x150) $x222) $x229) $x272) $x6) $x244)))
 (let (($x294 (and $x73 $x186)))
 (let (($x166 (= symbol.1 dst_symbol_addr.1)))
 (let (($x208 (and $x166 $x294)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x196 (or (bvugt input.memlabel-mem--symbol.1_begin ?x111) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x196) (or $x102 $x230)))))))
 (let (($x276 (and $x137 $x208)))
 (let (($x101 (= $x276 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x85 (= $x83 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x110 (= $x75 true)))
 (let (($x271 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x175 (= $x271 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x133 true)))
 (let (($x183 (forall ((input.ind-%var1335X (_ BitVec 32)) )(let ((?x298 (bvadd symbol.1 (bvmul input.ind-%var1335X (_ bv4 32)))))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x298))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv2 32))) ?x178)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv3 32))) ?x124)))
 (let ((?x127 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1335X)))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1335X)))
 (=> $x107 (= ?x127 ?x47)))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let (($x189 (bvule (_ bv0 32) input.ind-%var1334X)))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1334X)))
 (= $x107 (and $x189 (bvult input.ind-%var1334X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x48 (and $x300 $x183)))
 (let (($x201 (= $x48 true)))
 (let (($x33 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x104 (= $x33 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x209 (bvsub ?x36 ?x152)))
 (let (($x61 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x209) (bvult ?x36 ?x209))))
 (let ((?x27 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x118 (bvmul (_ bv4 64) ?x27)))
 (let ((?x227 ((_ extract 63 32) ?x118)))
 (let (($x170 (= (_ bv0 32) ?x227)))
 (let (($x91 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x11 (and (and (and true $x91) $x170) $x61)))
 (let (($x12 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x248 (and $x12 $x11)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x204 (=> $x251 $x248)))
 (let (($x21 (= $x204 true)))
 (let (($x147 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x188 (= $x147 true)))
 (let (($x148 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x53 (= $x148 true)))
 (let (($x191 (= $x251 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x71)))
 (let (($x246 (= ?x214 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (= $x246 true)))
 (let (($x255 (= ?x214 input.dst.llvm-%n)))
 (let (($x270 (= $x255 true)))
 (let (($x103 (and $x270 $x224)))
 (let (($x213 (and $x103 $x191)))
 (let (($x19 (and $x213 $x53)))
 (let (($x45 (and $x19 $x188)))
 (let (($x42 (and $x45 $x21)))
 (let (($x122 (and $x42 $x104)))
 (let (($x80 (and $x122 $x201)))
 (let (($x205 (and $x80 $x143)))
 (let (($x194 (and $x205 $x175)))
 (let (($x267 (and $x194 $x110)))
 (let (($x29 (and $x267 $x85)))
 (let (($x305 (and $x29 $x101)))
 (let (($x233 (and $x305 $x141)))
 (let (($x242 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (and (not $x242) $x233)))
 (let (($x203 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (and $x203 $x295)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x206 $x299)))
 (let (($x274 (forall ((input.ind-%var1345X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1345X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1345X) (_ bv0 32)))))
 ))
 (let (($x7 (forall ((input.ind-%var1344X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1344X)))
 (= $x67 false)))
 ))
 (let (($x232 (and $x7 $x274)))
 (let (($x157 (and $x232 $x92)))
 (let (($x228 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x228 $x157)))
 (let (($x207 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x59 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x207)))))
 (let (($x156 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x207)))))
 (let (($x291 (and $x156 $x121)))
 (let (($x290 (=> $x291 $x263)))
 (not $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x289 (forall ((input.ind-%var1359X (_ BitVec 32)) )(let ((?x298 (bvadd symbol.1 (bvmul input.ind-%var1359X (_ bv4 32)))))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x16 (bvadd ?x36 (_ bv3 32))))
 (let ((?x140 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x36 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x167 (store ?x140 (bvadd ?x36 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x153 (store ?x167 (bvadd ?x36 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x142 (store ?x153 ?x16 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x200 (concat (select ?x142 (bvadd ?x298 (_ bv2 32))) (concat (select ?x142 (bvadd ?x298 (_ bv1 32))) (select ?x142 ?x298)))))
 (let ((?x127 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1359X)))
 (let (($x60 (= input.ind-%var1359X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x264 (= (ite $x60 input.spec-%var-i-0.L3%6%bbentry ?x127) (concat (select ?x142 (bvadd ?x298 (_ bv3 32))) ?x200))))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1359X)))
 (let (($x94 (or $x107 $x60)))
 (=> $x94 $x264))))))))))))))))
 ))
 (let (($x17 (forall ((input.ind-%var1358X (_ BitVec 32)) )(let (($x189 (bvule (_ bv0 32) input.ind-%var1358X)))
 (let (($x76 (and $x189 (bvult input.ind-%var1358X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x60 (= input.ind-%var1358X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1358X)))
 (let (($x94 (or $x107 $x60)))
 (= $x94 $x76)))))))
 ))
 (let (($x261 (and $x17 $x289)))
 (let (($x263 (= $x261 true)))
 (let ((?x49 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x293 (bvneg ?x49)))
 (let (($x13 (= ?x293 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x141 (= $x13 true)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x192)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x66)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x266 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x58 (= input.memlabel-mem--symbol.1_end ?x266)))
 (let (($x132 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (and $x132 $x58)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x113 $x25)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (and $x241 $x15)))
 (let (($x199 (not $x145)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x81 $x259)))
 (let (($x150 (and (not $x134) $x199)))
 (let (($x180 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x87 $x180)))
 (let (($x249 (not $x14)))
 (let (($x223 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x119 $x223)))
 (let (($x258 (and (not $x221) $x249)))
 (let (($x73 (and (and (and (and (and (and $x258 $x150) $x222) $x229) $x272) $x6) $x244)))
 (let (($x294 (and $x73 $x186)))
 (let (($x166 (= symbol.1 dst_symbol_addr.1)))
 (let (($x208 (and $x166 $x294)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x196 (or (bvugt input.memlabel-mem--symbol.1_begin ?x111) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x196) (or $x102 $x230)))))))
 (let (($x276 (and $x137 $x208)))
 (let (($x101 (= $x276 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x85 (= $x83 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x110 (= $x75 true)))
 (let (($x271 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x175 (= $x271 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x133 true)))
 (let (($x183 (forall ((input.ind-%var1335X (_ BitVec 32)) )(let ((?x298 (bvadd symbol.1 (bvmul input.ind-%var1335X (_ bv4 32)))))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x298))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv2 32))) ?x178)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv3 32))) ?x124)))
 (let ((?x127 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1335X)))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1335X)))
 (=> $x107 (= ?x127 ?x47)))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let (($x189 (bvule (_ bv0 32) input.ind-%var1334X)))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1334X)))
 (= $x107 (and $x189 (bvult input.ind-%var1334X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x48 (and $x300 $x183)))
 (let (($x201 (= $x48 true)))
 (let (($x33 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x104 (= $x33 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x209 (bvsub ?x36 ?x152)))
 (let (($x61 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x209) (bvult ?x36 ?x209))))
 (let ((?x27 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x118 (bvmul (_ bv4 64) ?x27)))
 (let ((?x227 ((_ extract 63 32) ?x118)))
 (let (($x170 (= (_ bv0 32) ?x227)))
 (let (($x91 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x11 (and (and (and true $x91) $x170) $x61)))
 (let (($x12 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x248 (and $x12 $x11)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x204 (=> $x251 $x248)))
 (let (($x21 (= $x204 true)))
 (let (($x147 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x188 (= $x147 true)))
 (let (($x148 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x53 (= $x148 true)))
 (let (($x191 (= $x251 true)))
 (let ((?x71 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x71)))
 (let (($x246 (= ?x214 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (= $x246 true)))
 (let (($x255 (= ?x214 input.dst.llvm-%n)))
 (let (($x270 (= $x255 true)))
 (let (($x103 (and $x270 $x224)))
 (let (($x213 (and $x103 $x191)))
 (let (($x19 (and $x213 $x53)))
 (let (($x45 (and $x19 $x188)))
 (let (($x42 (and $x45 $x21)))
 (let (($x122 (and $x42 $x104)))
 (let (($x80 (and $x122 $x201)))
 (let (($x205 (and $x80 $x143)))
 (let (($x194 (and $x205 $x175)))
 (let (($x267 (and $x194 $x110)))
 (let (($x29 (and $x267 $x85)))
 (let (($x305 (and $x29 $x101)))
 (let (($x233 (and $x305 $x141)))
 (let (($x242 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (and (not $x242) $x233)))
 (let (($x203 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x299 (and $x203 $x295)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x206 $x299)))
 (let (($x274 (forall ((input.ind-%var1345X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1345X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1345X) (_ bv0 32)))))
 ))
 (let (($x7 (forall ((input.ind-%var1344X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1344X)))
 (= $x67 false)))
 ))
 (let (($x232 (and $x7 $x274)))
 (let (($x157 (and $x232 $x92)))
 (let (($x228 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x228 $x157)))
 (let (($x207 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x59 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x207)))))
 (let (($x156 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x207)))))
 (let (($x291 (and $x156 $x121)))
 (let (($x290 (=> $x291 $x263)))
 (not $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (not $x70)))
 (let (($x5 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (not $x5)))
 (let (($x52 (or $x10 $x140)))
 (let (($x159 (= $x52 true)))
 (let ((?x121 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x291 (bvneg ?x121)))
 (let (($x60 (= ?x291 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x60 true)))
 (let ((?x293 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x293)))
 (let (($x299 (= ?x13 input.dst.llvm-%n)))
 (let (($x92 (= $x299 true)))
 (let (($x141 (= ?x13 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (= $x141 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x101 (= $x276 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x294 (= $x186 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x73 (= $x244 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x6 true)))
 (let (($x25 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let ((?x145 (bvadd symbol.1 (bvmul input.ind-%var1369X (_ bv4 32)))))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x145 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x145))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x145 (_ bv2 32))) ?x222)))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x145 (_ bv3 32))) ?x229)))
 (let ((?x126 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1369X)))
 (let (($x257 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1369X)))
 (=> $x257 (= ?x126 ?x132)))))))))
 ))
 (let (($x239 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x304 (and (bvule (_ bv0 32) input.ind-%var1368X) (bvult input.ind-%var1368X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x257 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1368X)))
 (= $x257 $x304))))
 ))
 (let (($x272 (and $x239 $x25)))
 (let (($x212 (= $x272 true)))
 (let (($x110 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x267 (= $x110 true)))
 (let (($x175 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x194 (= $x175 true)))
 (let (($x143 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x205 (= $x143 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x105)))
 (let ((?x197 (bvand symbol.1 (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x197)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x174 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x245 (= input.memlabel-mem--symbol.1_end ?x174)))
 (let (($x300 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x298 (and $x300 $x245)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x43 $x298)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x21 $x42)))
 (let (($x104 (not $x33)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x204 (and $x11 $x248)))
 (let (($x107 (and (not $x204) $x104)))
 (let (($x215 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x65 $x215)))
 (let (($x123 (not $x209)))
 (let (($x227 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x118 $x227)))
 (let (($x61 (and (not $x170) $x123)))
 (let (($x115 (and (and (and (and (and (and $x61 $x107) $x189) $x176) $x171) $x161) $x149)))
 (let (($x183 (and $x115 $x179)))
 (let (($x234 (= symbol.1 dst_symbol_addr.1)))
 (let (($x48 (and $x234 $x183)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x45 (or (bvugt input.memlabel-mem--symbol.1_begin ?x19) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x45) (or $x100 $x55)))))))
 (let (($x201 (and $x27 $x48)))
 (let (($x80 (= $x201 true)))
 (let (($x271 (and $x80 $x205)))
 (let (($x75 (and $x271 $x194)))
 (let (($x83 (and $x75 $x267)))
 (let (($x163 (and $x83 $x212)))
 (let (($x66 (and $x163 $x68)))
 (let (($x192 (and $x66 $x73)))
 (let (($x208 (and $x192 $x294)))
 (let (($x305 (and $x208 $x101)))
 (let (($x295 (and $x305 $x233)))
 (let (($x157 (and $x295 $x92)))
 (let (($x235 (and $x157 $x94)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x231 (and $x103 $x235)))
 (let (($x270 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x76 (and $x270 $x231)))
 (let (($x71 (forall ((input.ind-%var1379X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1379X)))
 (=> $x216 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1379X) (_ bv0 32)))))
 ))
 (let (($x274 (forall ((input.ind-%var1378X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1378X)))
 (= $x216 false)))
 ))
 (let (($x214 (and $x274 $x71)))
 (let (($x240 (and $x214 $x76)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x17 (and $x28 $x240)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let (($x202 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x228 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x202)))))
 (let (($x69 (=> (and $x70 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x202)))))
 (let (($x253 (and $x69 $x17)))
 (let (($x167 (=> $x253 $x159)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (not $x70)))
 (let (($x5 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (not $x5)))
 (let (($x52 (or $x10 $x140)))
 (let (($x159 (= $x52 true)))
 (let ((?x121 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x291 (bvneg ?x121)))
 (let (($x60 (= ?x291 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x94 (= $x60 true)))
 (let ((?x293 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x293)))
 (let (($x299 (= ?x13 input.dst.llvm-%n)))
 (let (($x92 (= $x299 true)))
 (let (($x141 (= ?x13 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (= $x141 true)))
 (let (($x276 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x101 (= $x276 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x294 (= $x186 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x73 (= $x244 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x6 true)))
 (let (($x25 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let ((?x145 (bvadd symbol.1 (bvmul input.ind-%var1369X (_ bv4 32)))))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x145 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x145))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x145 (_ bv2 32))) ?x222)))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x145 (_ bv3 32))) ?x229)))
 (let ((?x126 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1369X)))
 (let (($x257 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1369X)))
 (=> $x257 (= ?x126 ?x132)))))))))
 ))
 (let (($x239 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x304 (and (bvule (_ bv0 32) input.ind-%var1368X) (bvult input.ind-%var1368X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x257 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1368X)))
 (= $x257 $x304))))
 ))
 (let (($x272 (and $x239 $x25)))
 (let (($x212 (= $x272 true)))
 (let (($x110 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x267 (= $x110 true)))
 (let (($x175 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x194 (= $x175 true)))
 (let (($x143 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x205 (= $x143 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x105)))
 (let ((?x197 (bvand symbol.1 (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x197)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x174 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x245 (= input.memlabel-mem--symbol.1_end ?x174)))
 (let (($x300 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x298 (and $x300 $x245)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x43 $x298)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x21 $x42)))
 (let (($x104 (not $x33)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x204 (and $x11 $x248)))
 (let (($x107 (and (not $x204) $x104)))
 (let (($x215 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x65 $x215)))
 (let (($x123 (not $x209)))
 (let (($x227 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x118 $x227)))
 (let (($x61 (and (not $x170) $x123)))
 (let (($x115 (and (and (and (and (and (and $x61 $x107) $x189) $x176) $x171) $x161) $x149)))
 (let (($x183 (and $x115 $x179)))
 (let (($x234 (= symbol.1 dst_symbol_addr.1)))
 (let (($x48 (and $x234 $x183)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x45 (or (bvugt input.memlabel-mem--symbol.1_begin ?x19) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x45) (or $x100 $x55)))))))
 (let (($x201 (and $x27 $x48)))
 (let (($x80 (= $x201 true)))
 (let (($x271 (and $x80 $x205)))
 (let (($x75 (and $x271 $x194)))
 (let (($x83 (and $x75 $x267)))
 (let (($x163 (and $x83 $x212)))
 (let (($x66 (and $x163 $x68)))
 (let (($x192 (and $x66 $x73)))
 (let (($x208 (and $x192 $x294)))
 (let (($x305 (and $x208 $x101)))
 (let (($x295 (and $x305 $x233)))
 (let (($x157 (and $x295 $x92)))
 (let (($x235 (and $x157 $x94)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x231 (and $x103 $x235)))
 (let (($x270 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x76 (and $x270 $x231)))
 (let (($x71 (forall ((input.ind-%var1379X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1379X)))
 (=> $x216 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1379X) (_ bv0 32)))))
 ))
 (let (($x274 (forall ((input.ind-%var1378X (_ BitVec 32)) )(let (($x216 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1378X)))
 (= $x216 false)))
 ))
 (let (($x214 (and $x274 $x71)))
 (let (($x240 (and $x214 $x76)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x17 (and $x28 $x240)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let (($x202 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x228 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x202)))))
 (let (($x69 (=> (and $x70 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x202)))))
 (let (($x253 (and $x69 $x17)))
 (let (($x167 (=> $x253 $x159)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x182 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x254 (bvmul (_ bv4294967295 32) ?x182)))
 (let ((?x128 (bvneg ?x254)))
 (let (($x136 (= ?x128 ?x112)))
 (let (($x158 (= $x136 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x265 (bvneg ?x264)))
 (let (($x289 (= ?x265 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x289 true)))
 (let (($x285 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x200 (= $x285 true)))
 (let (($x288 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x282 (= $x288 true)))
 (let (($x89 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x142 (= $x89 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (= $x95 true)))
 (let (($x125 (forall ((input.ind-%var1389X (_ BitVec 32)) )(let ((?x259 (bvadd symbol.1 (bvmul input.ind-%var1389X (_ bv4 32)))))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x259))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv2 32))) ?x116)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv3 32))) ?x258)))
 (let ((?x32 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1389X)))
 (let (($x94 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1389X)))
 (=> $x94 (= ?x32 ?x256)))))))))
 ))
 (let (($x52 (forall ((input.ind-%var1388X (_ BitVec 32)) )(let (($x10 (and (bvule (_ bv0 32) input.ind-%var1388X) (bvult input.ind-%var1388X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x94 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1388X)))
 (= $x94 $x10))))
 ))
 (let (($x241 (and $x52 $x125)))
 (let (($x138 (= $x241 true)))
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x157 (= $x92 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x294 (bvsub ?x36 ?x152)))
 (let (($x305 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x294) (bvult ?x36 ?x294))))
 (let ((?x244 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x73 (bvmul (_ bv4 64) ?x244)))
 (let ((?x192 ((_ extract 63 32) ?x73)))
 (let (($x186 (= (_ bv0 32) ?x192)))
 (let (($x68 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x13 (and (and (and true $x68) $x186) $x305)))
 (let (($x25 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x141 (and $x25 $x13)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (=> $x106 $x141)))
 (let (($x295 (= $x233 true)))
 (let (($x222 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x229 (= $x222 true)))
 (let (($x150 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x37 (= $x150 true)))
 (let (($x226 (= $x106 true)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x257)))
 (let ((?x267 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x267)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x205 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x271 (= input.memlabel-mem--symbol.1_end ?x205)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x175 (and $x133 $x271)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x80 $x175)))
 (let (($x201 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x149 (and $x9 $x197)))
 (let (($x115 (not $x149)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x47 $x24)))
 (let (($x179 (and (not $x161) $x115)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x300 $x127)))
 (let (($x245 (not $x174)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x176 $x124)))
 (let (($x171 (and (not $x43) $x245)))
 (let (($x137 (and (and (and (and (and (and $x171 $x179) $x183) $x201) $x194) $x110) $x83)))
 (let (($x15 (and $x137 $x44)))
 (let (($x65 (= symbol.1 dst_symbol_addr.1)))
 (let (($x145 (and $x65 $x15)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x248 (or (bvugt input.memlabel-mem--symbol.1_begin ?x123) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x164 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x248) (or $x42 $x33)))))))
 (let (($x219 (and $x164 $x145)))
 (let (($x113 (= $x219 true)))
 (let ((?x91 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x91)))
 (let (($x234 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (= $x234 true)))
 (let (($x27 (= ?x173 input.dst.llvm-%n)))
 (let (($x213 (= $x27 true)))
 (let (($x227 (and $x213 $x118)))
 (let (($x180 (and $x227 $x113)))
 (let (($x90 (and $x180 $x226)))
 (let (($x199 (and $x90 $x37)))
 (let (($x132 (and $x199 $x229)))
 (let (($x299 (and $x132 $x295)))
 (let (($x121 (and $x299 $x157)))
 (let (($x242 (and $x121 $x138)))
 (let (($x153 (and $x242 $x247)))
 (let (($x185 (and $x153 $x142)))
 (let (($x279 (and $x185 $x282)))
 (let (($x250 (and $x279 $x200)))
 (let (($x263 (and $x250 $x261)))
 (let (($x220 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and (not $x220) $x263)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x211 (and $x12 $x172)))
 (let (($x217 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x217 $x211)))
 (let (($x147 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1399X)))
 (=> $x98 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1399X) (_ bv0 32)))))
 ))
 (let (($x71 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1398X)))
 (= $x98 false)))
 ))
 (let (($x188 (and $x71 $x147)))
 (let (($x303 (and $x188 $x120)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x218 (and $x7 $x303)))
 (let (($x156 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x28 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x156)))))
 (let (($x139 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x156)))))
 (let (($x8 (and $x139 $x218)))
 (let (($x302 (=> $x8 $x158)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x182 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x254 (bvmul (_ bv4294967295 32) ?x182)))
 (let ((?x128 (bvneg ?x254)))
 (let (($x136 (= ?x128 ?x112)))
 (let (($x158 (= $x136 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x265 (bvneg ?x264)))
 (let (($x289 (= ?x265 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x289 true)))
 (let (($x285 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x200 (= $x285 true)))
 (let (($x288 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x282 (= $x288 true)))
 (let (($x89 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x142 (= $x89 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (= $x95 true)))
 (let (($x125 (forall ((input.ind-%var1389X (_ BitVec 32)) )(let ((?x259 (bvadd symbol.1 (bvmul input.ind-%var1389X (_ bv4 32)))))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x259))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv2 32))) ?x116)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x259 (_ bv3 32))) ?x258)))
 (let ((?x32 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1389X)))
 (let (($x94 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1389X)))
 (=> $x94 (= ?x32 ?x256)))))))))
 ))
 (let (($x52 (forall ((input.ind-%var1388X (_ BitVec 32)) )(let (($x10 (and (bvule (_ bv0 32) input.ind-%var1388X) (bvult input.ind-%var1388X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x94 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1388X)))
 (= $x94 $x10))))
 ))
 (let (($x241 (and $x52 $x125)))
 (let (($x138 (= $x241 true)))
 (let (($x92 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x157 (= $x92 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x294 (bvsub ?x36 ?x152)))
 (let (($x305 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x294) (bvult ?x36 ?x294))))
 (let ((?x244 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x73 (bvmul (_ bv4 64) ?x244)))
 (let ((?x192 ((_ extract 63 32) ?x73)))
 (let (($x186 (= (_ bv0 32) ?x192)))
 (let (($x68 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x13 (and (and (and true $x68) $x186) $x305)))
 (let (($x25 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x141 (and $x25 $x13)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (=> $x106 $x141)))
 (let (($x295 (= $x233 true)))
 (let (($x222 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x229 (= $x222 true)))
 (let (($x150 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x37 (= $x150 true)))
 (let (($x226 (= $x106 true)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x257)))
 (let ((?x267 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x267)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x205 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x271 (= input.memlabel-mem--symbol.1_end ?x205)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x175 (and $x133 $x271)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x80 $x175)))
 (let (($x201 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x149 (and $x9 $x197)))
 (let (($x115 (not $x149)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (and $x47 $x24)))
 (let (($x179 (and (not $x161) $x115)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x300 $x127)))
 (let (($x245 (not $x174)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x176 $x124)))
 (let (($x171 (and (not $x43) $x245)))
 (let (($x137 (and (and (and (and (and (and $x171 $x179) $x183) $x201) $x194) $x110) $x83)))
 (let (($x15 (and $x137 $x44)))
 (let (($x65 (= symbol.1 dst_symbol_addr.1)))
 (let (($x145 (and $x65 $x15)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x248 (or (bvugt input.memlabel-mem--symbol.1_begin ?x123) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x164 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x248) (or $x42 $x33)))))))
 (let (($x219 (and $x164 $x145)))
 (let (($x113 (= $x219 true)))
 (let ((?x91 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x173 (bvneg ?x91)))
 (let (($x234 (= ?x173 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x118 (= $x234 true)))
 (let (($x27 (= ?x173 input.dst.llvm-%n)))
 (let (($x213 (= $x27 true)))
 (let (($x227 (and $x213 $x118)))
 (let (($x180 (and $x227 $x113)))
 (let (($x90 (and $x180 $x226)))
 (let (($x199 (and $x90 $x37)))
 (let (($x132 (and $x199 $x229)))
 (let (($x299 (and $x132 $x295)))
 (let (($x121 (and $x299 $x157)))
 (let (($x242 (and $x121 $x138)))
 (let (($x153 (and $x242 $x247)))
 (let (($x185 (and $x153 $x142)))
 (let (($x279 (and $x185 $x282)))
 (let (($x250 (and $x279 $x200)))
 (let (($x263 (and $x250 $x261)))
 (let (($x220 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x172 (and (not $x220) $x263)))
 (let (($x12 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x211 (and $x12 $x172)))
 (let (($x217 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x217 $x211)))
 (let (($x147 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1399X)))
 (=> $x98 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1399X) (_ bv0 32)))))
 ))
 (let (($x71 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let (($x98 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1398X)))
 (= $x98 false)))
 ))
 (let (($x188 (and $x71 $x147)))
 (let (($x303 (and $x188 $x120)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x218 (and $x7 $x303)))
 (let (($x156 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x28 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x156)))))
 (let (($x139 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x156)))))
 (let (($x8 (and $x139 $x218)))
 (let (($x302 (=> $x8 $x158)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x17 (bvule ?x240 (_ bv399 32))))
 (let (($x166 (= $x17 true)))
 (let ((?x46 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x46)))
 (let (($x160 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x160 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x76 (= $x231 true)))
 (let (($x148 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x56 (= $x148 true)))
 (let (($x216 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x216 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x136)))
 (let ((?x128 (bvand symbol.1 (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x128)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x120 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x303 (= input.memlabel-mem--symbol.1_end ?x120)))
 (let (($x211 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x218 (and $x211 $x303)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x172 $x218)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (and $x279 $x285)))
 (let (($x250 (not $x200)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x282 (and $x185 $x288)))
 (let (($x265 (and (not $x282) $x250)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x242 $x95)))
 (let (($x153 (not $x247)))
 (let (($x241 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x125 $x241)))
 (let (($x142 (and (not $x138) $x153)))
 (let (($x235 (and (and (and (and (and (and $x142 $x265) $x289) $x263) $x8) $x254) $x112)))
 (let (($x84 (and $x235 $x158)))
 (let (($x52 (= symbol.1 dst_symbol_addr.1)))
 (let (($x203 (and $x52 $x84)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x29 (or (bvugt input.memlabel-mem--symbol.1_begin ?x81) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x29) (or $x249 $x221)))))))
 (let (($x224 (and $x130 $x203)))
 (let (($x214 (= $x224 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x5 (= $x94 true)))
 (let (($x92 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x92 true)))
 (let (($x233 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x295 (= $x233 true)))
 (let (($x101 (forall ((input.ind-%var1409X (_ BitVec 32)) )(let ((?x163 (bvadd symbol.1 (bvmul input.ind-%var1409X (_ bv4 32)))))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x163))))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv2 32))) ?x66)))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv3 32))) ?x192)))
 (let ((?x257 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1409X)))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1409X)))
 (=> $x80 (= ?x257 ?x208)))))))))
 ))
 (let (($x126 (forall ((input.ind-%var1408X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var1408X) (bvult input.ind-%var1408X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1408X)))
 (= $x80 $x75))))
 ))
 (let (($x305 (and $x126 $x101)))
 (let (($x13 (= $x305 true)))
 (let ((?x197 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x197)))
 (let (($x183 (= ?x149 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x304 (= $x183 true)))
 (let (($x115 (= ?x149 input.dst.llvm-%n)))
 (let (($x179 (= $x115 true)))
 (let (($x24 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x161 (= $x24 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x164 (bvsub ?x36 ?x152)))
 (let (($x124 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x164) (bvult ?x36 ?x164))))
 (let ((?x104 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x107 (bvmul (_ bv4 64) ?x104)))
 (let ((?x151 ((_ extract 63 32) ?x107)))
 (let (($x189 (= (_ bv0 32) ?x151)))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x300 (and (and (and true $x21) $x189) $x124)))
 (let (($x11 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x127 (and $x11 $x300)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (=> $x243 $x127)))
 (let (($x245 (= $x174 true)))
 (let (($x178 (= $x243 true)))
 (let (($x171 (and $x178 $x245)))
 (let (($x105 (and $x171 $x161)))
 (let (($x196 (and $x105 $x179)))
 (let (($x48 (and $x196 $x304)))
 (let (($x141 (and $x48 $x13)))
 (let (($x299 (and $x141 $x295)))
 (let (($x121 (and $x299 $x157)))
 (let (($x253 (and $x121 $x5)))
 (let (($x270 (and $x253 $x214)))
 (let (($x292 (and $x270 $x155)))
 (let (($x291 (and $x292 $x56)))
 (let (($x297 (and $x291 $x76)))
 (let (($x177 (and $x297 $x187)))
 (let (($x209 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x206 (and (not $x209) $x177)))
 (let (($x227 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x301 (and $x227 $x206)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x67 (and $x213 $x301)))
 (let (($x91 (forall ((input.ind-%var1419X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1419X)))
 (=> $x246 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1419X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var1418X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1418X)))
 (= $x246 false)))
 ))
 (let (($x173 (and $x147 $x91)))
 (let (($x225 (and $x173 $x67)))
 (let (($x274 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x111 (and $x274 $x225)))
 (let (($x69 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x7 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x69)))))
 (let (($x57 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x69)))))
 (let (($x60 (and $x57 $x111)))
 (let (($x167 (=> $x60 $x166)))
 (not $x167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x17 (bvule ?x240 (_ bv399 32))))
 (let (($x166 (= $x17 true)))
 (let ((?x46 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x85 (bvneg ?x46)))
 (let (($x160 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x160 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x76 (= $x231 true)))
 (let (($x148 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x56 (= $x148 true)))
 (let (($x216 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x216 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x136)))
 (let ((?x128 (bvand symbol.1 (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x128)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x120 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x303 (= input.memlabel-mem--symbol.1_end ?x120)))
 (let (($x211 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x218 (and $x211 $x303)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x172 $x218)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (and $x279 $x285)))
 (let (($x250 (not $x200)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x282 (and $x185 $x288)))
 (let (($x265 (and (not $x282) $x250)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x242 $x95)))
 (let (($x153 (not $x247)))
 (let (($x241 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x125 $x241)))
 (let (($x142 (and (not $x138) $x153)))
 (let (($x235 (and (and (and (and (and (and $x142 $x265) $x289) $x263) $x8) $x254) $x112)))
 (let (($x84 (and $x235 $x158)))
 (let (($x52 (= symbol.1 dst_symbol_addr.1)))
 (let (($x203 (and $x52 $x84)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x29 (or (bvugt input.memlabel-mem--symbol.1_begin ?x81) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x29) (or $x249 $x221)))))))
 (let (($x224 (and $x130 $x203)))
 (let (($x214 (= $x224 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x5 (= $x94 true)))
 (let (($x92 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (= $x92 true)))
 (let (($x233 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x295 (= $x233 true)))
 (let (($x101 (forall ((input.ind-%var1409X (_ BitVec 32)) )(let ((?x163 (bvadd symbol.1 (bvmul input.ind-%var1409X (_ bv4 32)))))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x163))))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv2 32))) ?x66)))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x163 (_ bv3 32))) ?x192)))
 (let ((?x257 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1409X)))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1409X)))
 (=> $x80 (= ?x257 ?x208)))))))))
 ))
 (let (($x126 (forall ((input.ind-%var1408X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var1408X) (bvult input.ind-%var1408X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x80 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1408X)))
 (= $x80 $x75))))
 ))
 (let (($x305 (and $x126 $x101)))
 (let (($x13 (= $x305 true)))
 (let ((?x197 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x197)))
 (let (($x183 (= ?x149 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x304 (= $x183 true)))
 (let (($x115 (= ?x149 input.dst.llvm-%n)))
 (let (($x179 (= $x115 true)))
 (let (($x24 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x161 (= $x24 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x164 (bvsub ?x36 ?x152)))
 (let (($x124 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x164) (bvult ?x36 ?x164))))
 (let ((?x104 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x107 (bvmul (_ bv4 64) ?x104)))
 (let ((?x151 ((_ extract 63 32) ?x107)))
 (let (($x189 (= (_ bv0 32) ?x151)))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x300 (and (and (and true $x21) $x189) $x124)))
 (let (($x11 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x127 (and $x11 $x300)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (=> $x243 $x127)))
 (let (($x245 (= $x174 true)))
 (let (($x178 (= $x243 true)))
 (let (($x171 (and $x178 $x245)))
 (let (($x105 (and $x171 $x161)))
 (let (($x196 (and $x105 $x179)))
 (let (($x48 (and $x196 $x304)))
 (let (($x141 (and $x48 $x13)))
 (let (($x299 (and $x141 $x295)))
 (let (($x121 (and $x299 $x157)))
 (let (($x253 (and $x121 $x5)))
 (let (($x270 (and $x253 $x214)))
 (let (($x292 (and $x270 $x155)))
 (let (($x291 (and $x292 $x56)))
 (let (($x297 (and $x291 $x76)))
 (let (($x177 (and $x297 $x187)))
 (let (($x209 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x206 (and (not $x209) $x177)))
 (let (($x227 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x301 (and $x227 $x206)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x67 (and $x213 $x301)))
 (let (($x91 (forall ((input.ind-%var1419X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1419X)))
 (=> $x246 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1419X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var1418X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1418X)))
 (= $x246 false)))
 ))
 (let (($x173 (and $x147 $x91)))
 (let (($x225 (and $x173 $x67)))
 (let (($x274 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x111 (and $x274 $x225)))
 (let (($x69 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x7 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x69)))))
 (let (($x57 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x69)))))
 (let (($x60 (and $x57 $x111)))
 (let (($x167 (=> $x60 $x166)))
 (not $x167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x212 (bvsle ?x83 (_ bv399 32))))
 (let (($x45 (= $x212 true)))
 (let ((?x199 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x199)))
 (let (($x226 (= ?x222 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x226 true)))
 (let (($x113 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x113 true)))
 (let (($x143 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x205 (= $x143 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x137 (= $x55 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x119)))
 (let ((?x166 (bvand symbol.1 (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x166)))
 (let ((?x240 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x240)))
 (let ((?x67 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x225 (= input.memlabel-mem--symbol.1_end ?x67)))
 (let (($x301 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x111 (and $x301 $x225)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x206 $x111)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x291 $x231)))
 (let (($x297 (not $x76)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x292 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x56 (and $x292 $x148)))
 (let (($x85 (and (not $x56) $x297)))
 (let (($x224 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x203 $x224)))
 (let (($x270 (not $x214)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x136 $x158)))
 (let (($x155 (and (not $x84) $x270)))
 (let (($x100 (and (and (and (and (and (and $x155 $x85) $x160) $x177) $x60) $x17) $x167)))
 (let (($x188 (and $x100 $x237)))
 (let (($x289 (= symbol.1 dst_symbol_addr.1)))
 (let (($x217 (and $x289 $x188)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x263 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x263)))
 (let (($x211 (or (bvugt input.memlabel-mem--symbol.1_begin ?x263) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x211) (or $x8 $x114)))))))
 (let (($x98 (and $x235 $x217)))
 (let (($x154 (= $x98 true)))
 (let (($x285 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x200 (= $x285 true)))
 (let (($x282 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x264 (= $x282 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x142 true)))
 (let (($x242 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let ((?x87 (bvadd symbol.1 (bvmul input.ind-%var1429X (_ bv4 32)))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x87))))
 (let ((?x140 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv2 32))) ?x258)))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv3 32))) ?x140)))
 (let ((?x141 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1429X)))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1429X)))
 (=> $x37 (= ?x141 ?x241)))))))))
 ))
 (let (($x276 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var1428X) (bvult input.ind-%var1428X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1428X)))
 (= $x37 $x208))))
 ))
 (let (($x95 (and $x276 $x242)))
 (let (($x247 (= $x95 true)))
 (let ((?x194 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x194)))
 (let (($x15 (= ?x75 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (= $x15 true)))
 (let (($x110 (= ?x75 input.dst.llvm-%n)))
 (let (($x126 (= $x110 true)))
 (let (($x304 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x48 (= $x304 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x245 (bvsub ?x36 ?x152)))
 (let (($x161 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x245) (bvult ?x36 ?x245))))
 (let ((?x124 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x300 (bvmul (_ bv4 64) ?x124)))
 (let ((?x127 ((_ extract 63 32) ?x300)))
 (let (($x174 (= (_ bv0 32) ?x127)))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x197 (and (and (and true $x65) $x174) $x161)))
 (let (($x151 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x149 (and $x151 $x197)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (=> $x251 $x149)))
 (let (($x179 (= $x115 true)))
 (let (($x33 (= $x251 true)))
 (let (($x196 (and $x33 $x179)))
 (let (($x80 (and $x196 $x48)))
 (let (($x257 (and $x80 $x126)))
 (let (($x163 (and $x257 $x272)))
 (let (($x153 (and $x163 $x247)))
 (let (($x288 (and $x153 $x185)))
 (let (($x279 (and $x288 $x264)))
 (let (($x250 (and $x279 $x200)))
 (let (($x109 (and $x250 $x154)))
 (let (($x201 (and $x109 $x137)))
 (let (($x219 (and $x201 $x205)))
 (let (($x266 (and $x219 $x132)))
 (let (($x180 (and $x266 $x90)))
 (let (($x43 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x229 (and (not $x43) $x180)))
 (let (($x42 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and $x42 $x229)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x102 (and $x204 $x58)))
 (let (($x123 (forall ((input.ind-%var1439X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1439X)))
 (=> $x22 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1439X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var1438X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1438X)))
 (= $x22 false)))
 ))
 (let (($x61 (and $x91 $x123)))
 (let (($x271 (and $x61 $x102)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x71 $x271)))
 (let (($x139 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x274 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x139)))))
 (let (($x195 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x139)))))
 (let (($x25 (and $x195 $x175)))
 (let (($x220 (=> $x25 $x45)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x212 (bvsle ?x83 (_ bv399 32))))
 (let (($x45 (= $x212 true)))
 (let ((?x199 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x199)))
 (let (($x226 (= ?x222 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x226 true)))
 (let (($x113 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x132 (= $x113 true)))
 (let (($x143 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x205 (= $x143 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x137 (= $x55 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x119)))
 (let ((?x166 (bvand symbol.1 (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x166)))
 (let ((?x240 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x240)))
 (let ((?x67 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x225 (= input.memlabel-mem--symbol.1_end ?x67)))
 (let (($x301 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x111 (and $x301 $x225)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x206 $x111)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x291 $x231)))
 (let (($x297 (not $x76)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x292 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x56 (and $x292 $x148)))
 (let (($x85 (and (not $x56) $x297)))
 (let (($x224 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x203 $x224)))
 (let (($x270 (not $x214)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x136 $x158)))
 (let (($x155 (and (not $x84) $x270)))
 (let (($x100 (and (and (and (and (and (and $x155 $x85) $x160) $x177) $x60) $x17) $x167)))
 (let (($x188 (and $x100 $x237)))
 (let (($x289 (= symbol.1 dst_symbol_addr.1)))
 (let (($x217 (and $x289 $x188)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x263 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x263)))
 (let (($x211 (or (bvugt input.memlabel-mem--symbol.1_begin ?x263) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x211) (or $x8 $x114)))))))
 (let (($x98 (and $x235 $x217)))
 (let (($x154 (= $x98 true)))
 (let (($x285 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x200 (= $x285 true)))
 (let (($x282 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x264 (= $x282 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x142 true)))
 (let (($x242 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let ((?x87 (bvadd symbol.1 (bvmul input.ind-%var1429X (_ bv4 32)))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x87))))
 (let ((?x140 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv2 32))) ?x258)))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x87 (_ bv3 32))) ?x140)))
 (let ((?x141 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1429X)))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1429X)))
 (=> $x37 (= ?x141 ?x241)))))))))
 ))
 (let (($x276 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var1428X) (bvult input.ind-%var1428X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1428X)))
 (= $x37 $x208))))
 ))
 (let (($x95 (and $x276 $x242)))
 (let (($x247 (= $x95 true)))
 (let ((?x194 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x194)))
 (let (($x15 (= ?x75 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (= $x15 true)))
 (let (($x110 (= ?x75 input.dst.llvm-%n)))
 (let (($x126 (= $x110 true)))
 (let (($x304 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x48 (= $x304 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x245 (bvsub ?x36 ?x152)))
 (let (($x161 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x245) (bvult ?x36 ?x245))))
 (let ((?x124 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x300 (bvmul (_ bv4 64) ?x124)))
 (let ((?x127 ((_ extract 63 32) ?x300)))
 (let (($x174 (= (_ bv0 32) ?x127)))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x197 (and (and (and true $x65) $x174) $x161)))
 (let (($x151 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x149 (and $x151 $x197)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (=> $x251 $x149)))
 (let (($x179 (= $x115 true)))
 (let (($x33 (= $x251 true)))
 (let (($x196 (and $x33 $x179)))
 (let (($x80 (and $x196 $x48)))
 (let (($x257 (and $x80 $x126)))
 (let (($x163 (and $x257 $x272)))
 (let (($x153 (and $x163 $x247)))
 (let (($x288 (and $x153 $x185)))
 (let (($x279 (and $x288 $x264)))
 (let (($x250 (and $x279 $x200)))
 (let (($x109 (and $x250 $x154)))
 (let (($x201 (and $x109 $x137)))
 (let (($x219 (and $x201 $x205)))
 (let (($x266 (and $x219 $x132)))
 (let (($x180 (and $x266 $x90)))
 (let (($x43 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x229 (and (not $x43) $x180)))
 (let (($x42 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and $x42 $x229)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x102 (and $x204 $x58)))
 (let (($x123 (forall ((input.ind-%var1439X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1439X)))
 (=> $x22 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1439X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var1438X (_ BitVec 32)) )(let (($x22 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1438X)))
 (= $x22 false)))
 ))
 (let (($x61 (and $x91 $x123)))
 (let (($x271 (and $x61 $x102)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x71 $x271)))
 (let (($x139 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x274 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x139)))))
 (let (($x195 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x139)))))
 (let (($x25 (and $x195 $x175)))
 (let (($x220 (=> $x25 $x45)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x223 (bvsge ?x305 (_ bv0 32))))
 (let (($x27 (= $x223 true)))
 (let ((?x191 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x191)))
 (let (($x94 (= ?x181 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x94 true)))
 (let (($x157 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x259 (= $x157 true)))
 (let (($x73 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x68 (= $x73 true)))
 (let (($x215 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x13 (= $x215 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x159)))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x45)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x102 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x271 (= input.memlabel-mem--symbol.1_end ?x102)))
 (let (($x58 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x175 (and $x58 $x271)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x229 $x175)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x132 (and $x219 $x113)))
 (let (($x266 (not $x132)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x205 (and $x201 $x143)))
 (let (($x222 (and (not $x205) $x266)))
 (let (($x98 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x217 $x98)))
 (let (($x109 (not $x154)))
 (let (($x237 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x119 $x237)))
 (let (($x137 (and (not $x188) $x109)))
 (let (($x118 (and (and (and (and (and (and $x137 $x222) $x226) $x180) $x25) $x212) $x220)))
 (let (($x173 (and $x118 $x238)))
 (let (($x160 (= symbol.1 dst_symbol_addr.1)))
 (let (($x213 (and $x160 $x173)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x301 (or (bvugt input.memlabel-mem--symbol.1_begin ?x177) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x301) (or $x60 $x44)))))))
 (let (($x246 (and $x100 $x213)))
 (let (($x19 (= $x246 true)))
 (let (($x231 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x76 (= $x231 true)))
 (let (($x56 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x46 (= $x56 true)))
 (let (($x155 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x292 (= $x155 true)))
 (let (($x203 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let ((?x218 (bvadd symbol.1 (bvmul input.ind-%var1449X (_ bv4 32)))))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x218))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x218 (_ bv2 32))) ?x170)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x218 (_ bv3 32))) ?x302)))
 (let ((?x153 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1449X)))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1449X)))
 (=> $x32 (= ?x153 ?x158)))))))))
 ))
 (let (($x89 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1448X) (bvult input.ind-%var1448X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1448X)))
 (= $x32 $x241))))
 ))
 (let (($x224 (and $x89 $x203)))
 (let (($x214 (= $x224 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x66)))
 (let (($x295 (= ?x208 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (= $x295 true)))
 (let (($x294 (= ?x208 input.dst.llvm-%n)))
 (let (($x276 (= $x294 true)))
 (let (($x272 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x272 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x179 (bvsub ?x36 ?x152)))
 (let (($x48 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x179) (bvult ?x36 ?x179))))
 (let ((?x161 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x197 (bvmul (_ bv4 64) ?x161)))
 (let ((?x149 ((_ extract 63 32) ?x197)))
 (let (($x115 (= (_ bv0 32) ?x149)))
 (let (($x47 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x194 (and (and (and true $x47) $x115) $x48)))
 (let (($x127 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x75 (and $x127 $x194)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x110 (=> $x70 $x75)))
 (let (($x126 (= $x110 true)))
 (let (($x176 (= $x70 true)))
 (let (($x257 (and $x176 $x126)))
 (let (($x37 (and $x257 $x163)))
 (let (($x141 (and $x37 $x276)))
 (let (($x87 (and $x141 $x249)))
 (let (($x270 (and $x87 $x214)))
 (let (($x148 (and $x270 $x292)))
 (let (($x291 (and $x148 $x46)))
 (let (($x297 (and $x291 $x76)))
 (let (($x290 (and $x297 $x19)))
 (let (($x186 (and $x290 $x13)))
 (let (($x92 (and $x186 $x68)))
 (let (($x134 (and $x92 $x259)))
 (let (($x121 (and $x134 $x5)))
 (let (($x105 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and (not $x105) $x121)))
 (let (($x164 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x164 $x81)))
 (let (($x298 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x293 (and $x298 $x29)))
 (let (($x104 (forall ((input.ind-%var1459X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1459X)))
 (=> $x234 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1459X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1458X)))
 (= $x234 false)))
 ))
 (let (($x107 (and $x123 $x104)))
 (let (($x49 (and $x107 $x293)))
 (let (($x147 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x6 (and $x147 $x49)))
 (let (($x57 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x71 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x57)))))
 (let (($x39 (=> (and $x70 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x57)))))
 (let (($x296 (and $x39 $x6)))
 (let (($x209 (=> $x296 $x27)))
 (not $x209))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x223 (bvsge ?x305 (_ bv0 32))))
 (let (($x27 (= $x223 true)))
 (let ((?x191 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x191)))
 (let (($x94 (= ?x181 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x94 true)))
 (let (($x157 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x259 (= $x157 true)))
 (let (($x73 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x68 (= $x73 true)))
 (let (($x215 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x13 (= $x215 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x159)))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x45)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x102 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x271 (= input.memlabel-mem--symbol.1_end ?x102)))
 (let (($x58 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x175 (and $x58 $x271)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x229 $x175)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x132 (and $x219 $x113)))
 (let (($x266 (not $x132)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x205 (and $x201 $x143)))
 (let (($x222 (and (not $x205) $x266)))
 (let (($x98 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x217 $x98)))
 (let (($x109 (not $x154)))
 (let (($x237 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x119 $x237)))
 (let (($x137 (and (not $x188) $x109)))
 (let (($x118 (and (and (and (and (and (and $x137 $x222) $x226) $x180) $x25) $x212) $x220)))
 (let (($x173 (and $x118 $x238)))
 (let (($x160 (= symbol.1 dst_symbol_addr.1)))
 (let (($x213 (and $x160 $x173)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x301 (or (bvugt input.memlabel-mem--symbol.1_begin ?x177) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x301) (or $x60 $x44)))))))
 (let (($x246 (and $x100 $x213)))
 (let (($x19 (= $x246 true)))
 (let (($x231 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x76 (= $x231 true)))
 (let (($x56 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x46 (= $x56 true)))
 (let (($x155 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x292 (= $x155 true)))
 (let (($x203 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let ((?x218 (bvadd symbol.1 (bvmul input.ind-%var1449X (_ bv4 32)))))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x218))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x218 (_ bv2 32))) ?x170)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x218 (_ bv3 32))) ?x302)))
 (let ((?x153 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1449X)))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1449X)))
 (=> $x32 (= ?x153 ?x158)))))))))
 ))
 (let (($x89 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1448X) (bvult input.ind-%var1448X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1448X)))
 (= $x32 $x241))))
 ))
 (let (($x224 (and $x89 $x203)))
 (let (($x214 (= $x224 true)))
 (let ((?x66 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x208 (bvneg ?x66)))
 (let (($x295 (= ?x208 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (= $x295 true)))
 (let (($x294 (= ?x208 input.dst.llvm-%n)))
 (let (($x276 (= $x294 true)))
 (let (($x272 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x272 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x179 (bvsub ?x36 ?x152)))
 (let (($x48 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x179) (bvult ?x36 ?x179))))
 (let ((?x161 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x197 (bvmul (_ bv4 64) ?x161)))
 (let ((?x149 ((_ extract 63 32) ?x197)))
 (let (($x115 (= (_ bv0 32) ?x149)))
 (let (($x47 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x194 (and (and (and true $x47) $x115) $x48)))
 (let (($x127 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x75 (and $x127 $x194)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x110 (=> $x70 $x75)))
 (let (($x126 (= $x110 true)))
 (let (($x176 (= $x70 true)))
 (let (($x257 (and $x176 $x126)))
 (let (($x37 (and $x257 $x163)))
 (let (($x141 (and $x37 $x276)))
 (let (($x87 (and $x141 $x249)))
 (let (($x270 (and $x87 $x214)))
 (let (($x148 (and $x270 $x292)))
 (let (($x291 (and $x148 $x46)))
 (let (($x297 (and $x291 $x76)))
 (let (($x290 (and $x297 $x19)))
 (let (($x186 (and $x290 $x13)))
 (let (($x92 (and $x186 $x68)))
 (let (($x134 (and $x92 $x259)))
 (let (($x121 (and $x134 $x5)))
 (let (($x105 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and (not $x105) $x121)))
 (let (($x164 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (and $x164 $x81)))
 (let (($x298 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x293 (and $x298 $x29)))
 (let (($x104 (forall ((input.ind-%var1459X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1459X)))
 (=> $x234 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1459X) (_ bv0 32)))))
 ))
 (let (($x123 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1458X)))
 (= $x234 false)))
 ))
 (let (($x107 (and $x123 $x104)))
 (let (($x49 (and $x107 $x293)))
 (let (($x147 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x6 (and $x147 $x49)))
 (let (($x57 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x71 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x57)))))
 (let (($x39 (=> (and $x70 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x57)))))
 (let (($x296 (and $x39 $x6)))
 (let (($x209 (=> $x296 $x27)))
 (not $x209))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x303 (bvule ?x95 (_ bv399 32))))
 (let (($x11 (= $x303 true)))
 (let ((?x261 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x261)))
 (let (($x285 (= ?x112 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x285 true)))
 (let (($x264 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x252 (= $x264 true)))
 (let (($x130 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x14 (= $x130 true)))
 (let (($x21 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (= $x21 true)))
 (let (($x204 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let ((?x305 (bvadd symbol.1 (bvmul input.ind-%var1469X (_ bv4 32)))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x305))))
 (let ((?x85 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv2 32))) ?x267)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv3 32))) ?x85)))
 (let ((?x215 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1469X)))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1469X)))
 (=> $x233 (= ?x215 ?x227)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1468X) (bvult input.ind-%var1468X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1468X)))
 (= $x233 $x238))))
 ))
 (let (($x22 (and $x213 $x204)))
 (let (($x35 (= $x22 true)))
 (let (($x58 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x102 (= $x58 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x219 (bvsub ?x36 ?x152)))
 (let (($x222 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x219) (bvult ?x36 ?x219))))
 (let ((?x201 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x201)))
 (let ((?x205 ((_ extract 63 32) ?x143)))
 (let (($x199 (= (_ bv0 32) ?x205)))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x265 (and (and (and true $x109) $x199) $x222)))
 (let (($x188 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x90 (and $x188 $x265)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (=> $x106 $x90)))
 (let (($x244 (= $x180 true)))
 (let (($x97 (= $x106 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x133)))
 (let ((?x167 (bvand symbol.1 (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x167)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let ((?x291 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x231 (= input.memlabel-mem--symbol.1_end ?x291)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x76 (and $x46 $x231)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (and $x56 $x76)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x203 (and $x84 $x216)))
 (let (($x224 (not $x203)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x158 (and $x170 $x302)))
 (let (($x270 (and (not $x158) $x224)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x269 $x128)))
 (let (($x182 (not $x235)))
 (let (($x289 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x218 $x289)))
 (let (($x114 (and (not $x136) $x182)))
 (let (($x44 (and (and (and (and (and (and $x114 $x270) $x155) $x148) $x297) $x187) $x177)))
 (let (($x240 (and $x44 $x206)))
 (let (($x192 (= symbol.1 dst_symbol_addr.1)))
 (let (($x17 (and $x192 $x240)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x294 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x294)))
 (let (($x295 (or (bvugt input.memlabel-mem--symbol.1_begin ?x294) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x295) (or $x140 $x258)))))))
 (let (($x103 (and $x8 $x17)))
 (let (($x166 (= $x103 true)))
 (let (($x257 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x15 (= $x257 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x179)))
 (let (($x75 (= ?x183 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (= $x75 true)))
 (let (($x304 (= ?x183 input.dst.llvm-%n)))
 (let (($x48 (= $x304 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x115 (= $x149 true)))
 (let (($x161 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x197 (= $x161 true)))
 (let (($x239 (and $x197 $x115)))
 (let (($x194 (and $x239 $x48)))
 (let (($x126 (and $x194 $x110)))
 (let (($x272 (and $x126 $x15)))
 (let (($x100 (and $x272 $x166)))
 (let (($x160 (and $x100 $x97)))
 (let (($x229 (and $x160 $x244)))
 (let (($x271 (and $x229 $x102)))
 (let (($x232 (and $x271 $x35)))
 (let (($x52 (and $x232 $x247)))
 (let (($x282 (and $x52 $x14)))
 (let (($x172 (and $x282 $x252)))
 (let (($x279 (and $x172 $x200)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (and (not $x80) $x279)))
 (let (($x245 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x211 (and $x245 $x263)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x125 (and $x9 $x211)))
 (let (($x124 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1479X)))
 (=> $x248 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1479X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1478X)))
 (= $x248 false)))
 ))
 (let (($x300 (and $x104 $x124)))
 (let (($x116 (and $x300 $x125)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x221 (and $x91 $x116)))
 (let (($x195 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x147 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x195)))))
 (let (($x59 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x195)))))
 (let (($x120 (and $x59 $x221)))
 (let (($x43 (=> $x120 $x11)))
 (not $x43))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x303 (bvule ?x95 (_ bv399 32))))
 (let (($x11 (= $x303 true)))
 (let ((?x261 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x261)))
 (let (($x285 (= ?x112 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x285 true)))
 (let (($x264 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x252 (= $x264 true)))
 (let (($x130 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x14 (= $x130 true)))
 (let (($x21 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (= $x21 true)))
 (let (($x204 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let ((?x305 (bvadd symbol.1 (bvmul input.ind-%var1469X (_ bv4 32)))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x305))))
 (let ((?x85 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv2 32))) ?x267)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv3 32))) ?x85)))
 (let ((?x215 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1469X)))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1469X)))
 (=> $x233 (= ?x215 ?x227)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1468X) (bvult input.ind-%var1468X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x233 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1468X)))
 (= $x233 $x238))))
 ))
 (let (($x22 (and $x213 $x204)))
 (let (($x35 (= $x22 true)))
 (let (($x58 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x102 (= $x58 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x219 (bvsub ?x36 ?x152)))
 (let (($x222 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x219) (bvult ?x36 ?x219))))
 (let ((?x201 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x201)))
 (let ((?x205 ((_ extract 63 32) ?x143)))
 (let (($x199 (= (_ bv0 32) ?x205)))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x265 (and (and (and true $x109) $x199) $x222)))
 (let (($x188 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x90 (and $x188 $x265)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x180 (=> $x106 $x90)))
 (let (($x244 (= $x180 true)))
 (let (($x97 (= $x106 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x133)))
 (let ((?x167 (bvand symbol.1 (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x167)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let ((?x291 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x231 (= input.memlabel-mem--symbol.1_end ?x291)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x76 (and $x46 $x231)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (and $x56 $x76)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x203 (and $x84 $x216)))
 (let (($x224 (not $x203)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x158 (and $x170 $x302)))
 (let (($x270 (and (not $x158) $x224)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x269 $x128)))
 (let (($x182 (not $x235)))
 (let (($x289 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x218 $x289)))
 (let (($x114 (and (not $x136) $x182)))
 (let (($x44 (and (and (and (and (and (and $x114 $x270) $x155) $x148) $x297) $x187) $x177)))
 (let (($x240 (and $x44 $x206)))
 (let (($x192 (= symbol.1 dst_symbol_addr.1)))
 (let (($x17 (and $x192 $x240)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x294 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x294)))
 (let (($x295 (or (bvugt input.memlabel-mem--symbol.1_begin ?x294) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x295) (or $x140 $x258)))))))
 (let (($x103 (and $x8 $x17)))
 (let (($x166 (= $x103 true)))
 (let (($x257 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x15 (= $x257 true)))
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x179)))
 (let (($x75 (= ?x183 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (= $x75 true)))
 (let (($x304 (= ?x183 input.dst.llvm-%n)))
 (let (($x48 (= $x304 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x115 (= $x149 true)))
 (let (($x161 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x197 (= $x161 true)))
 (let (($x239 (and $x197 $x115)))
 (let (($x194 (and $x239 $x48)))
 (let (($x126 (and $x194 $x110)))
 (let (($x272 (and $x126 $x15)))
 (let (($x100 (and $x272 $x166)))
 (let (($x160 (and $x100 $x97)))
 (let (($x229 (and $x160 $x244)))
 (let (($x271 (and $x229 $x102)))
 (let (($x232 (and $x271 $x35)))
 (let (($x52 (and $x232 $x247)))
 (let (($x282 (and $x52 $x14)))
 (let (($x172 (and $x282 $x252)))
 (let (($x279 (and $x172 $x200)))
 (let (($x80 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (and (not $x80) $x279)))
 (let (($x245 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x211 (and $x245 $x263)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x125 (and $x9 $x211)))
 (let (($x124 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1479X)))
 (=> $x248 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1479X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1478X)))
 (= $x248 false)))
 ))
 (let (($x300 (and $x104 $x124)))
 (let (($x116 (and $x300 $x125)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x221 (and $x91 $x116)))
 (let (($x195 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x147 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x195)))))
 (let (($x59 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x195)))))
 (let (($x120 (and $x59 $x221)))
 (let (($x43 (=> $x120 $x11)))
 (not $x43))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x6 (bvsle ?x19 (_ bv399 32))))
 (let (($x151 (= $x6 true)))
 (let ((?x94 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x94)))
 (let (($x259 (= ?x5 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x134 (= $x259 true)))
 (let (($x92 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x81 (= $x92 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x12 (= $x212 true)))
 (let (($x65 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x290 (= $x65 true)))
 (let (($x298 (forall ((input.ind-%var1489X (_ BitVec 32)) )(let ((?x95 (bvadd symbol.1 (bvmul input.ind-%var1489X (_ bv4 32)))))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x95))))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x95 (_ bv2 32))) ?x101)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x95 (_ bv3 32))) ?x163)))
 (let ((?x21 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1489X)))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1489X)))
 (=> $x145 (= ?x21 ?x42)))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1488X (_ BitVec 32)) )(let (($x122 (and (bvule (_ bv0 32) input.ind-%var1488X) (bvult input.ind-%var1488X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1488X)))
 (= $x145 $x122))))
 ))
 (let (($x234 (and $x204 $x298)))
 (let (($x178 (= $x234 true)))
 (let (($x296 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x305 (= $x296 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x229 (bvsub ?x36 ?x152)))
 (let (($x233 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x229) (bvult ?x36 ?x229))))
 (let ((?x265 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x90 (bvmul (_ bv4 64) ?x265)))
 (let ((?x180 ((_ extract 63 32) ?x90)))
 (let (($x244 (= (_ bv0 32) ?x180)))
 (let (($x266 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x238 (and (and (and true $x266) $x244) $x233)))
 (let (($x199 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x173 (and $x199 $x238)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (=> $x243 $x173)))
 (let (($x215 (= $x213 true)))
 (let (($x137 (= $x243 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x166)))
 (let ((?x17 (bvand symbol.1 (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x17)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x240 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x206)))
 (let ((?x167 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x177 (= input.memlabel-mem--symbol.1_end ?x167)))
 (let (($x111 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x111 $x177)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x187 $x44)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x297 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x46 (and $x225 $x56)))
 (let (($x291 (not $x46)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x148 (and $x67 $x292)))
 (let (($x76 (and (not $x148) $x291)))
 (let (($x203 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x216 $x203)))
 (let (($x270 (not $x224)))
 (let (($x214 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x158 $x214)))
 (let (($x155 (and (not $x84) $x270)))
 (let (($x217 (and (and (and (and (and (and $x155 $x76) $x297) $x10) $x133) $x240) $x103)))
 (let (($x55 (and $x217 $x100)))
 (let (($x241 (= symbol.1 dst_symbol_addr.1)))
 (let (($x98 (and $x241 $x55)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x153 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x192 (or (bvugt input.memlabel-mem--symbol.1_begin ?x153) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x302 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x192) (or $x254 $x269)))))))
 (let (($x154 (and $x302 $x98)))
 (let (($x109 (= $x154 true)))
 (let (($x249 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x87 (= $x249 true)))
 (let ((?x272 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x272)))
 (let (($x276 (= ?x66 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (= $x276 true)))
 (let (($x208 (= ?x66 input.dst.llvm-%n)))
 (let (($x185 (= $x208 true)))
 (let (($x110 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x126 (= $x110 true)))
 (let (($x194 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x75 (= $x194 true)))
 (let (($x257 (and $x75 $x126)))
 (let (($x294 (and $x257 $x185)))
 (let (($x295 (and $x294 $x141)))
 (let (($x140 (and $x295 $x87)))
 (let (($x117 (and $x140 $x109)))
 (let (($x201 (and $x117 $x137)))
 (let (($x186 (and $x201 $x215)))
 (let (($x256 (and $x186 $x305)))
 (let (($x150 (and $x256 $x178)))
 (let (($x175 (and $x150 $x290)))
 (let (($x68 (and $x175 $x12)))
 (let (($x29 (and $x68 $x81)))
 (let (($x157 (and $x29 $x134)))
 (let (($x304 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and (not $x304) $x157)))
 (let (($x179 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x293 (and $x179 $x121)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x115 $x293)))
 (let (($x161 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1499X)))
 (=> $x189 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1499X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1498X)))
 (= $x189 false)))
 ))
 (let (($x197 (and $x124 $x161)))
 (let (($x45 (and $x197 $x25)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x220 (and $x123 $x45)))
 (let (($x39 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x91 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x228 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x39)))))
 (let (($x49 (and $x228 $x220)))
 (let (($x105 (=> $x49 $x151)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x6 (bvsle ?x19 (_ bv399 32))))
 (let (($x151 (= $x6 true)))
 (let ((?x94 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x5 (bvneg ?x94)))
 (let (($x259 (= ?x5 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x134 (= $x259 true)))
 (let (($x92 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x81 (= $x92 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x12 (= $x212 true)))
 (let (($x65 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x290 (= $x65 true)))
 (let (($x298 (forall ((input.ind-%var1489X (_ BitVec 32)) )(let ((?x95 (bvadd symbol.1 (bvmul input.ind-%var1489X (_ bv4 32)))))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x95))))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x95 (_ bv2 32))) ?x101)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x95 (_ bv3 32))) ?x163)))
 (let ((?x21 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1489X)))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1489X)))
 (=> $x145 (= ?x21 ?x42)))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1488X (_ BitVec 32)) )(let (($x122 (and (bvule (_ bv0 32) input.ind-%var1488X) (bvult input.ind-%var1488X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1488X)))
 (= $x145 $x122))))
 ))
 (let (($x234 (and $x204 $x298)))
 (let (($x178 (= $x234 true)))
 (let (($x296 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x305 (= $x296 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x229 (bvsub ?x36 ?x152)))
 (let (($x233 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x229) (bvult ?x36 ?x229))))
 (let ((?x265 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x90 (bvmul (_ bv4 64) ?x265)))
 (let ((?x180 ((_ extract 63 32) ?x90)))
 (let (($x244 (= (_ bv0 32) ?x180)))
 (let (($x266 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x238 (and (and (and true $x266) $x244) $x233)))
 (let (($x199 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x173 (and $x199 $x238)))
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (=> $x243 $x173)))
 (let (($x215 (= $x213 true)))
 (let (($x137 (= $x243 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x166)))
 (let ((?x17 (bvand symbol.1 (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x17)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x240 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x206)))
 (let ((?x167 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x177 (= input.memlabel-mem--symbol.1_end ?x167)))
 (let (($x111 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x111 $x177)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x187 $x44)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x297 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x46 (and $x225 $x56)))
 (let (($x291 (not $x46)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x148 (and $x67 $x292)))
 (let (($x76 (and (not $x148) $x291)))
 (let (($x203 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x216 $x203)))
 (let (($x270 (not $x224)))
 (let (($x214 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x158 $x214)))
 (let (($x155 (and (not $x84) $x270)))
 (let (($x217 (and (and (and (and (and (and $x155 $x76) $x297) $x10) $x133) $x240) $x103)))
 (let (($x55 (and $x217 $x100)))
 (let (($x241 (= symbol.1 dst_symbol_addr.1)))
 (let (($x98 (and $x241 $x55)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x153 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x192 (or (bvugt input.memlabel-mem--symbol.1_begin ?x153) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x302 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x192) (or $x254 $x269)))))))
 (let (($x154 (and $x302 $x98)))
 (let (($x109 (= $x154 true)))
 (let (($x249 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x87 (= $x249 true)))
 (let ((?x272 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x272)))
 (let (($x276 (= ?x66 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (= $x276 true)))
 (let (($x208 (= ?x66 input.dst.llvm-%n)))
 (let (($x185 (= $x208 true)))
 (let (($x110 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x126 (= $x110 true)))
 (let (($x194 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x75 (= $x194 true)))
 (let (($x257 (and $x75 $x126)))
 (let (($x294 (and $x257 $x185)))
 (let (($x295 (and $x294 $x141)))
 (let (($x140 (and $x295 $x87)))
 (let (($x117 (and $x140 $x109)))
 (let (($x201 (and $x117 $x137)))
 (let (($x186 (and $x201 $x215)))
 (let (($x256 (and $x186 $x305)))
 (let (($x150 (and $x256 $x178)))
 (let (($x175 (and $x150 $x290)))
 (let (($x68 (and $x175 $x12)))
 (let (($x29 (and $x68 $x81)))
 (let (($x157 (and $x29 $x134)))
 (let (($x304 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x121 (and (not $x304) $x157)))
 (let (($x179 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x293 (and $x179 $x121)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x115 $x293)))
 (let (($x161 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1499X)))
 (=> $x189 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1499X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x189 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1498X)))
 (= $x189 false)))
 ))
 (let (($x197 (and $x124 $x161)))
 (let (($x45 (and $x197 $x25)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x220 (and $x123 $x45)))
 (let (($x39 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x91 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x39)))))
 (let (($x228 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x39)))))
 (let (($x49 (and $x228 $x220)))
 (let (($x105 (=> $x49 $x151)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x35 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x221 (bvsge ?x35 (_ bv0 32))))
 (let (($x127 (= $x221 true)))
 (let ((?x285 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x285)))
 (let (($x252 (= ?x200 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x252 true)))
 (let (($x282 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x263 (= $x282 true)))
 (let (($x27 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x209 (= $x27 true)))
 (let (($x47 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (= $x47 true)))
 (let (($x9 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let ((?x19 (bvadd symbol.1 (bvmul input.ind-%var1509X (_ bv4 32)))))
 (let ((?x242 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x19))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv2 32))) ?x242)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv3 32))) ?x32)))
 (let ((?x65 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1509X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1509X)))
 (=> $x299 (= ?x65 ?x164)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x198 (and (bvule (_ bv0 32) input.ind-%var1508X) (bvult input.ind-%var1508X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1508X)))
 (= $x299 $x198))))
 ))
 (let (($x248 (and $x298 $x9)))
 (let (($x33 (= $x248 true)))
 (let (($x120 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x95 (= $x120 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x186 (bvsub ?x36 ?x152)))
 (let (($x145 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x186) (bvult ?x36 ?x186))))
 (let ((?x238 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x238)))
 (let ((?x213 ((_ extract 63 32) ?x173)))
 (let (($x215 (= (_ bv0 32) ?x213)))
 (let (($x271 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x122 (and (and (and true $x271) $x215) $x145)))
 (let (($x244 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x61 (and $x244 $x122)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x204 (=> $x251 $x61)))
 (let (($x21 (= $x204 true)))
 (let (($x222 (= $x251 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x109)))
 (let ((?x98 (bvand symbol.1 (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x98)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x188 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x217 (and $x188 $x103)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x240 $x217)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x111 (and $x119 $x187)))
 (let (($x167 (not $x111)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (and $x160 $x60)))
 (let (($x44 (and (not $x10) $x167)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (and $x56 $x46)))
 (let (($x76 (not $x291)))
 (let (($x231 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x148 $x231)))
 (let (($x297 (and (not $x225) $x76)))
 (let (($x113 (and (and (and (and (and (and $x297 $x44) $x133) $x206) $x166) $x55) $x154)))
 (let (($x226 (and $x113 $x117)))
 (let (($x128 (= symbol.1 dst_symbol_addr.1)))
 (let (($x219 (and $x128 $x226)))
 (let (($x216 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x241 (or (bvugt input.memlabel-mem--symbol.1_begin ?x114) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x292 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x241) (or $x301 $x216)))))))
 (let (($x132 (and $x292 $x219)))
 (let (($x266 (= $x132 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x289 (= $x218 true)))
 (let ((?x140 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x140)))
 (let (($x8 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x8 true)))
 (let (($x89 (= ?x138 input.dst.llvm-%n)))
 (let (($x170 (= $x89 true)))
 (let (($x141 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x295 (= $x141 true)))
 (let (($x294 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x276 (= $x294 true)))
 (let (($x249 (and $x276 $x295)))
 (let (($x153 (and $x249 $x170)))
 (let (($x192 (and $x153 $x37)))
 (let (($x254 (and $x192 $x289)))
 (let (($x159 (and $x254 $x266)))
 (let (($x265 (and $x159 $x222)))
 (let (($x52 (and $x265 $x21)))
 (let (($x83 (and $x52 $x95)))
 (let (($x253 (and $x83 $x33)))
 (let (($x142 (and $x253 $x232)))
 (let (($x14 (and $x142 $x209)))
 (let (($x211 (and $x14 $x263)))
 (let (($x264 (and $x211 $x172)))
 (let (($x208 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x279 (and (not $x208) $x264)))
 (let (($x272 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x272 $x279)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x181 (and $x126 $x125)))
 (let (($x194 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1519X)))
 (=> $x174 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1519X) (_ bv0 32)))))
 ))
 (let (($x161 (forall ((input.ind-%var1518X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1518X)))
 (= $x174 false)))
 ))
 (let (($x75 (and $x161 $x194)))
 (let (($x223 (and $x75 $x181)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x267 (and $x104 $x223)))
 (let (($x59 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x123 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x59)))))
 (let (($x28 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x59)))))
 (let (($x116 (and $x28 $x267)))
 (let (($x80 (=> $x116 $x127)))
 (not $x80))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x35 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x221 (bvsge ?x35 (_ bv0 32))))
 (let (($x127 (= $x221 true)))
 (let ((?x285 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x285)))
 (let (($x252 (= ?x200 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x252 true)))
 (let (($x282 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x263 (= $x282 true)))
 (let (($x27 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x209 (= $x27 true)))
 (let (($x47 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (= $x47 true)))
 (let (($x9 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let ((?x19 (bvadd symbol.1 (bvmul input.ind-%var1509X (_ bv4 32)))))
 (let ((?x242 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x19))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv2 32))) ?x242)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x19 (_ bv3 32))) ?x32)))
 (let ((?x65 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1509X)))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1509X)))
 (=> $x299 (= ?x65 ?x164)))))))))
 ))
 (let (($x298 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x198 (and (bvule (_ bv0 32) input.ind-%var1508X) (bvult input.ind-%var1508X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x299 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1508X)))
 (= $x299 $x198))))
 ))
 (let (($x248 (and $x298 $x9)))
 (let (($x33 (= $x248 true)))
 (let (($x120 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x95 (= $x120 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x186 (bvsub ?x36 ?x152)))
 (let (($x145 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x186) (bvult ?x36 ?x186))))
 (let ((?x238 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x238)))
 (let ((?x213 ((_ extract 63 32) ?x173)))
 (let (($x215 (= (_ bv0 32) ?x213)))
 (let (($x271 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x122 (and (and (and true $x271) $x215) $x145)))
 (let (($x244 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x61 (and $x244 $x122)))
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x204 (=> $x251 $x61)))
 (let (($x21 (= $x204 true)))
 (let (($x222 (= $x251 true)))
 (let ((?x109 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x109)))
 (let ((?x98 (bvand symbol.1 (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x98)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x188 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x217 (and $x188 $x103)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x240 $x217)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x111 (and $x119 $x187)))
 (let (($x167 (not $x111)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (and $x160 $x60)))
 (let (($x44 (and (not $x10) $x167)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (and $x56 $x46)))
 (let (($x76 (not $x291)))
 (let (($x231 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x148 $x231)))
 (let (($x297 (and (not $x225) $x76)))
 (let (($x113 (and (and (and (and (and (and $x297 $x44) $x133) $x206) $x166) $x55) $x154)))
 (let (($x226 (and $x113 $x117)))
 (let (($x128 (= symbol.1 dst_symbol_addr.1)))
 (let (($x219 (and $x128 $x226)))
 (let (($x216 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x241 (or (bvugt input.memlabel-mem--symbol.1_begin ?x114) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x292 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x241) (or $x301 $x216)))))))
 (let (($x132 (and $x292 $x219)))
 (let (($x266 (= $x132 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x289 (= $x218 true)))
 (let ((?x140 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x140)))
 (let (($x8 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x8 true)))
 (let (($x89 (= ?x138 input.dst.llvm-%n)))
 (let (($x170 (= $x89 true)))
 (let (($x141 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x295 (= $x141 true)))
 (let (($x294 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x276 (= $x294 true)))
 (let (($x249 (and $x276 $x295)))
 (let (($x153 (and $x249 $x170)))
 (let (($x192 (and $x153 $x37)))
 (let (($x254 (and $x192 $x289)))
 (let (($x159 (and $x254 $x266)))
 (let (($x265 (and $x159 $x222)))
 (let (($x52 (and $x265 $x21)))
 (let (($x83 (and $x52 $x95)))
 (let (($x253 (and $x83 $x33)))
 (let (($x142 (and $x253 $x232)))
 (let (($x14 (and $x142 $x209)))
 (let (($x211 (and $x14 $x263)))
 (let (($x264 (and $x211 $x172)))
 (let (($x208 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x279 (and (not $x208) $x264)))
 (let (($x272 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x272 $x279)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x181 (and $x126 $x125)))
 (let (($x194 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1519X)))
 (=> $x174 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1519X) (_ bv0 32)))))
 ))
 (let (($x161 (forall ((input.ind-%var1518X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1518X)))
 (= $x174 false)))
 ))
 (let (($x75 (and $x161 $x194)))
 (let (($x223 (and $x75 $x181)))
 (let (($x104 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x267 (and $x104 $x223)))
 (let (($x59 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x123 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x59)))))
 (let (($x28 (=> (and $x251 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x59)))))
 (let (($x116 (and $x28 $x267)))
 (let (($x80 (=> $x116 $x127)))
 (not $x80))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x178 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x220 (bvule ?x178 input.dst.llvm-%n)))
 (let (($x149 (= $x220 true)))
 (let ((?x259 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x259)))
 (let (($x81 (= ?x134 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x81 true)))
 (let ((?x254 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x254)))
 (let (($x68 (= ?x235 input.dst.llvm-%n)))
 (let (($x121 (= $x68 true)))
 (let (($x11 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x43 (= $x11 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x183 true)))
 (let (($x189 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x176 (= $x189 true)))
 (let (($x245 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let ((?x223 (bvadd symbol.1 (bvmul input.ind-%var1529X (_ bv4 32)))))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x223))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x223 (_ bv2 32))) ?x221)))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x223 (_ bv3 32))) ?x246)))
 (let ((?x248 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1529X)))
 (let (($x93 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1529X)))
 (=> $x93 (= ?x248 ?x136)))))))))
 ))
 (let (($x164 (forall ((input.ind-%var1528X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var1528X) (bvult input.ind-%var1528X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x93 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1528X)))
 (= $x93 $x242))))
 ))
 (let (($x196 (and $x164 $x245)))
 (let (($x197 (= $x196 true)))
 (let (($x298 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x65 (= $x298 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x61 (bvsub ?x36 ?x152)))
 (let (($x120 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x61) (bvult ?x36 ?x61))))
 (let ((?x305 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x256 (bvmul (_ bv4 64) ?x305)))
 (let ((?x145 ((_ extract 63 32) ?x256)))
 (let (($x122 (= (_ bv0 32) ?x145)))
 (let (($x296 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x299 (and (and (and true $x296) $x122) $x120)))
 (let (($x238 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x42 (and $x238 $x299)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (=> $x70 $x42)))
 (let (($x198 (= $x163 true)))
 (let (($x102 (= $x70 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x226)))
 (let ((?x109 (bvand symbol.1 (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x109)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x100 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x55 (= input.memlabel-mem--symbol.1_end ?x100)))
 (let (($x205 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x199 (and $x205 $x55)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x166 $x199)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x206 (and $x201 $x237)))
 (let (($x143 (not $x206)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x44 $x137)))
 (let (($x188 (and (not $x133) $x143)))
 (let (($x177 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x10 $x177)))
 (let (($x187 (not $x119)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x297 $x160)))
 (let (($x167 (and (not $x60) $x187)))
 (let (($x90 (and (and (and (and (and (and $x167 $x188) $x17) $x217) $x98) $x113) $x117)))
 (let (($x180 (and $x90 $x219)))
 (let (($x301 (= symbol.1 dst_symbol_addr.1)))
 (let (($x244 (and $x301 $x180)))
 (let (($x231 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x203 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x203)))
 (let (($x155 (or (bvugt input.memlabel-mem--symbol.1_begin ?x203) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x155) (or $x148 $x231)))))))
 (let (($x58 (and $x76 $x244)))
 (let (($x118 (= $x58 true)))
 (let (($x302 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x258 (= $x302 true)))
 (let (($x182 (= ?x235 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (= $x182 true)))
 (let (($x37 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x192 (= $x37 true)))
 (let (($x153 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x8 (= $x153 true)))
 (let (($x218 (and $x8 $x192)))
 (let (($x114 (and $x218 $x67)))
 (let (($x241 (and $x114 $x258)))
 (let (($x229 (and $x241 $x118)))
 (let (($x271 (and $x229 $x102)))
 (let (($x107 (and $x271 $x198)))
 (let (($x175 (and $x107 $x65)))
 (let (($x115 (and $x175 $x197)))
 (let (($x250 (and $x115 $x176)))
 (let (($x13 (and $x250 $x150)))
 (let (($x12 (and $x13 $x43)))
 (let (($x293 (and $x12 $x121)))
 (let (($x92 (and $x293 $x29)))
 (let (($x89 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x157 (and (not $x89) $x92)))
 (let (($x140 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (and $x140 $x157)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x112 (and $x295 $x25)))
 (let (($x294 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let (($x239 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1539X)))
 (=> $x239 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1539X) (_ bv0 32)))))
 ))
 (let (($x194 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x239 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1538X)))
 (= $x239 false)))
 ))
 (let (($x276 (and $x194 $x294)))
 (let (($x303 (and $x276 $x112)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x124 $x303)))
 (let (($x228 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x228)))))
 (let (($x7 (=> (and $x70 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x228)))))
 (let (($x45 (and $x7 $x101)))
 (let (($x304 (=> $x45 $x149)))
 (not $x304))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x178 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x220 (bvule ?x178 input.dst.llvm-%n)))
 (let (($x149 (= $x220 true)))
 (let ((?x259 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x134 (bvneg ?x259)))
 (let (($x81 (= ?x134 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x81 true)))
 (let ((?x254 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x254)))
 (let (($x68 (= ?x235 input.dst.llvm-%n)))
 (let (($x121 (= $x68 true)))
 (let (($x11 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x43 (= $x11 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x183 true)))
 (let (($x189 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x176 (= $x189 true)))
 (let (($x245 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let ((?x223 (bvadd symbol.1 (bvmul input.ind-%var1529X (_ bv4 32)))))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x223))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x223 (_ bv2 32))) ?x221)))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x223 (_ bv3 32))) ?x246)))
 (let ((?x248 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1529X)))
 (let (($x93 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1529X)))
 (=> $x93 (= ?x248 ?x136)))))))))
 ))
 (let (($x164 (forall ((input.ind-%var1528X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var1528X) (bvult input.ind-%var1528X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x93 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1528X)))
 (= $x93 $x242))))
 ))
 (let (($x196 (and $x164 $x245)))
 (let (($x197 (= $x196 true)))
 (let (($x298 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x65 (= $x298 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x61 (bvsub ?x36 ?x152)))
 (let (($x120 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x61) (bvult ?x36 ?x61))))
 (let ((?x305 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x256 (bvmul (_ bv4 64) ?x305)))
 (let ((?x145 ((_ extract 63 32) ?x256)))
 (let (($x122 (= (_ bv0 32) ?x145)))
 (let (($x296 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x299 (and (and (and true $x296) $x122) $x120)))
 (let (($x238 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x42 (and $x238 $x299)))
 (let (($x70 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (=> $x70 $x42)))
 (let (($x198 (= $x163 true)))
 (let (($x102 (= $x70 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x226)))
 (let ((?x109 (bvand symbol.1 (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x109)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x100 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x55 (= input.memlabel-mem--symbol.1_end ?x100)))
 (let (($x205 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x199 (and $x205 $x55)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x166 $x199)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x206 (and $x201 $x237)))
 (let (($x143 (not $x206)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x44 $x137)))
 (let (($x188 (and (not $x133) $x143)))
 (let (($x177 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x10 $x177)))
 (let (($x187 (not $x119)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x297 $x160)))
 (let (($x167 (and (not $x60) $x187)))
 (let (($x90 (and (and (and (and (and (and $x167 $x188) $x17) $x217) $x98) $x113) $x117)))
 (let (($x180 (and $x90 $x219)))
 (let (($x301 (= symbol.1 dst_symbol_addr.1)))
 (let (($x244 (and $x301 $x180)))
 (let (($x231 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x203 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x203)))
 (let (($x155 (or (bvugt input.memlabel-mem--symbol.1_begin ?x203) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x155) (or $x148 $x231)))))))
 (let (($x58 (and $x76 $x244)))
 (let (($x118 (= $x58 true)))
 (let (($x302 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x258 (= $x302 true)))
 (let (($x182 (= ?x235 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x67 (= $x182 true)))
 (let (($x37 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x192 (= $x37 true)))
 (let (($x153 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x8 (= $x153 true)))
 (let (($x218 (and $x8 $x192)))
 (let (($x114 (and $x218 $x67)))
 (let (($x241 (and $x114 $x258)))
 (let (($x229 (and $x241 $x118)))
 (let (($x271 (and $x229 $x102)))
 (let (($x107 (and $x271 $x198)))
 (let (($x175 (and $x107 $x65)))
 (let (($x115 (and $x175 $x197)))
 (let (($x250 (and $x115 $x176)))
 (let (($x13 (and $x250 $x150)))
 (let (($x12 (and $x13 $x43)))
 (let (($x293 (and $x12 $x121)))
 (let (($x92 (and $x293 $x29)))
 (let (($x89 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x157 (and (not $x89) $x92)))
 (let (($x140 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (and $x140 $x157)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x112 (and $x295 $x25)))
 (let (($x294 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let (($x239 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1539X)))
 (=> $x239 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1539X) (_ bv0 32)))))
 ))
 (let (($x194 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x239 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1538X)))
 (= $x239 false)))
 ))
 (let (($x276 (and $x194 $x294)))
 (let (($x303 (and $x276 $x112)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x124 $x303)))
 (let (($x228 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x228)))))
 (let (($x7 (=> (and $x70 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x228)))))
 (let (($x45 (and $x7 $x101)))
 (let (($x304 (=> $x45 $x149)))
 (not $x304))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x280 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let ((?x256 (bvadd symbol.1 (bvmul input.ind-%var1573X (_ bv4 32)))))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x228 (bvadd ?x36 (_ bv3 32))))
 (let ((?x18 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x36 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x23 (store ?x18 (bvadd ?x36 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x34 (store ?x23 (bvadd ?x36 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x146 (store ?x34 ?x228 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x268 (concat (select ?x146 (bvadd ?x256 (_ bv2 32))) (concat (select ?x146 (bvadd ?x256 (_ bv1 32))) (select ?x146 ?x256)))))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1573X)))
 (let (($x63 (= input.ind-%var1573X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x38 (= (ite $x63 input.spec-%var-i-0.L3%6%bbentry ?x226) (concat (select ?x146 (bvadd ?x256 (_ bv3 32))) ?x268))))
 (let (($x159 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1573X)))
 (let (($x50 (or $x159 $x63)))
 (=> $x50 $x38))))))))))))))))
 ))
 (let (($x131 (forall ((input.ind-%var1572X (_ BitVec 32)) )(let (($x222 (bvule (_ bv0 32) input.ind-%var1572X)))
 (let (($x193 (and $x222 (bvult input.ind-%var1572X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x63 (= input.ind-%var1572X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x159 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1572X)))
 (let (($x50 (or $x159 $x63)))
 (= $x50 $x193)))))))
 ))
 (let (($x162 (and $x131 $x280)))
 (let (($x72 (= $x162 true)))
 (let ((?x211 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x285 (bvneg ?x211)))
 (let (($x209 (= ?x285 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x209 true)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x126)))
 (let ((?x15 (bvand symbol.1 (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x15)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x130 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x202 (= input.memlabel-mem--symbol.1_end ?x130)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x158 (and $x22 $x202)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x304 $x158)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (and $x157 $x25)))
 (let (($x303 (not $x112)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x92 (and $x81 $x29)))
 (let (($x45 (and (not $x92) $x303)))
 (let (($x68 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x12 $x68)))
 (let (($x293 (not $x121)))
 (let (($x11 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x13 $x11)))
 (let (($x134 (and (not $x43) $x293)))
 (let (($x5 (and (and (and (and (and (and $x134 $x45) $x178) $x149) $x247) $x179) $x75)))
 (let (($x288 (and $x5 $x174)))
 (let (($x80 (= symbol.1 dst_symbol_addr.1)))
 (let (($x232 (and $x80 $x288)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x136 (or (bvugt input.memlabel-mem--symbol.1_begin ?x267) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x136) (or $x196 $x197)))))))
 (let (($x142 (and $x150 $x232)))
 (let (($x252 (= $x142 true)))
 (let (($x223 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x73 (= $x223 true)))
 (let (($x248 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x253 (= $x248 true)))
 (let (($x242 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x32 (= $x242 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (= $x93 true)))
 (let (($x107 (forall ((input.ind-%var1549X (_ BitVec 32)) )(let ((?x256 (bvadd symbol.1 (bvmul input.ind-%var1549X (_ bv4 32)))))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x256))))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv2 32))) ?x204)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv3 32))) ?x52)))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1549X)))
 (let (($x159 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1549X)))
 (=> $x159 (= ?x226 ?x42)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1548X (_ BitVec 32)) )(let (($x222 (bvule (_ bv0 32) input.ind-%var1548X)))
 (let (($x159 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1548X)))
 (= $x159 (and $x222 (bvult input.ind-%var1548X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x298 (and $x265 $x107)))
 (let (($x65 (= $x298 true)))
 (let (($x132 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x17 (= $x132 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x119 (bvsub ?x36 ?x152)))
 (let (($x137 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x119) (bvult ?x36 ?x119))))
 (let ((?x60 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x111 (bvmul (_ bv4 64) ?x60)))
 (let ((?x10 ((_ extract 63 32) ?x111)))
 (let (($x177 (= (_ bv0 32) ?x10)))
 (let (($x297 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x201 (and (and (and true $x297) $x177) $x137)))
 (let (($x56 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x237 (and $x56 $x201)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (=> $x106 $x237)))
 (let (($x143 (= $x206 true)))
 (let (($x148 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x148 true)))
 (let (($x155 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x292 (= $x155 true)))
 (let (($x203 (= $x106 true)))
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x114)))
 (let (($x84 (= ?x302 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (= $x84 true)))
 (let (($x258 (= ?x302 input.dst.llvm-%n)))
 (let (($x241 (= $x258 true)))
 (let (($x291 (and $x241 $x216)))
 (let (($x224 (and $x291 $x203)))
 (let (($x269 (and $x224 $x292)))
 (let (($x231 (and $x269 $x128)))
 (let (($x188 (and $x231 $x143)))
 (let (($x266 (and $x188 $x17)))
 (let (($x175 (and $x266 $x65)))
 (let (($x105 (and $x175 $x6)))
 (let (($x164 (and $x105 $x32)))
 (let (($x181 (and $x164 $x253)))
 (let (($x207 (and $x181 $x73)))
 (let (($x172 (and $x207 $x252)))
 (let (($x27 (and $x172 $x14)))
 (let (($x182 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x182) $x27)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x264 (and $x254 $x200)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x192 $x264)))
 (let (($x153 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1559X)))
 (=> $x257 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1559X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1558X)))
 (= $x257 false)))
 ))
 (let (($x8 (and $x294 $x153)))
 (let (($x16 (and $x8 $x19)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x151 (and $x161 $x16)))
 (let (($x28 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x274 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x28)))))
 (let (($x279 (and $x274 $x151)))
 (let (($x281 (=> $x279 $x72)))
 (not $x281)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x280 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let ((?x256 (bvadd symbol.1 (bvmul input.ind-%var1573X (_ bv4 32)))))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x228 (bvadd ?x36 (_ bv3 32))))
 (let ((?x18 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x36 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x23 (store ?x18 (bvadd ?x36 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x34 (store ?x23 (bvadd ?x36 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x146 (store ?x34 ?x228 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x268 (concat (select ?x146 (bvadd ?x256 (_ bv2 32))) (concat (select ?x146 (bvadd ?x256 (_ bv1 32))) (select ?x146 ?x256)))))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1573X)))
 (let (($x63 (= input.ind-%var1573X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x38 (= (ite $x63 input.spec-%var-i-0.L3%6%bbentry ?x226) (concat (select ?x146 (bvadd ?x256 (_ bv3 32))) ?x268))))
 (let (($x159 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1573X)))
 (let (($x50 (or $x159 $x63)))
 (=> $x50 $x38))))))))))))))))
 ))
 (let (($x131 (forall ((input.ind-%var1572X (_ BitVec 32)) )(let (($x222 (bvule (_ bv0 32) input.ind-%var1572X)))
 (let (($x193 (and $x222 (bvult input.ind-%var1572X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x63 (= input.ind-%var1572X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x159 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1572X)))
 (let (($x50 (or $x159 $x63)))
 (= $x50 $x193)))))))
 ))
 (let (($x162 (and $x131 $x280)))
 (let (($x72 (= $x162 true)))
 (let ((?x211 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x285 (bvneg ?x211)))
 (let (($x209 (= ?x285 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x14 (= $x209 true)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x126)))
 (let ((?x15 (bvand symbol.1 (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x15)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x130 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x202 (= input.memlabel-mem--symbol.1_end ?x130)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x158 (and $x22 $x202)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x304 $x158)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x112 (and $x157 $x25)))
 (let (($x303 (not $x112)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x92 (and $x81 $x29)))
 (let (($x45 (and (not $x92) $x303)))
 (let (($x68 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x12 $x68)))
 (let (($x293 (not $x121)))
 (let (($x11 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x13 $x11)))
 (let (($x134 (and (not $x43) $x293)))
 (let (($x5 (and (and (and (and (and (and $x134 $x45) $x178) $x149) $x247) $x179) $x75)))
 (let (($x288 (and $x5 $x174)))
 (let (($x80 (= symbol.1 dst_symbol_addr.1)))
 (let (($x232 (and $x80 $x288)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x136 (or (bvugt input.memlabel-mem--symbol.1_begin ?x267) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x136) (or $x196 $x197)))))))
 (let (($x142 (and $x150 $x232)))
 (let (($x252 (= $x142 true)))
 (let (($x223 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x73 (= $x223 true)))
 (let (($x248 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x253 (= $x248 true)))
 (let (($x242 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x32 (= $x242 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (= $x93 true)))
 (let (($x107 (forall ((input.ind-%var1549X (_ BitVec 32)) )(let ((?x256 (bvadd symbol.1 (bvmul input.ind-%var1549X (_ bv4 32)))))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x256))))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv2 32))) ?x204)))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x256 (_ bv3 32))) ?x52)))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1549X)))
 (let (($x159 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1549X)))
 (=> $x159 (= ?x226 ?x42)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1548X (_ BitVec 32)) )(let (($x222 (bvule (_ bv0 32) input.ind-%var1548X)))
 (let (($x159 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1548X)))
 (= $x159 (and $x222 (bvult input.ind-%var1548X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x298 (and $x265 $x107)))
 (let (($x65 (= $x298 true)))
 (let (($x132 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x17 (= $x132 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let ((?x119 (bvsub ?x36 ?x152)))
 (let (($x137 (ite (bvsge ?x152 (_ bv0 32)) (bvuge ?x36 ?x119) (bvult ?x36 ?x119))))
 (let ((?x60 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x111 (bvmul (_ bv4 64) ?x60)))
 (let ((?x10 ((_ extract 63 32) ?x111)))
 (let (($x177 (= (_ bv0 32) ?x10)))
 (let (($x297 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x201 (and (and (and true $x297) $x177) $x137)))
 (let (($x56 (= (bvand ?x36 (_ bv4294967292 32)) ?x36)))
 (let (($x237 (and $x56 $x201)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (=> $x106 $x237)))
 (let (($x143 (= $x206 true)))
 (let (($x148 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x148 true)))
 (let (($x155 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x292 (= $x155 true)))
 (let (($x203 (= $x106 true)))
 (let ((?x114 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x114)))
 (let (($x84 (= ?x302 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x216 (= $x84 true)))
 (let (($x258 (= ?x302 input.dst.llvm-%n)))
 (let (($x241 (= $x258 true)))
 (let (($x291 (and $x241 $x216)))
 (let (($x224 (and $x291 $x203)))
 (let (($x269 (and $x224 $x292)))
 (let (($x231 (and $x269 $x128)))
 (let (($x188 (and $x231 $x143)))
 (let (($x266 (and $x188 $x17)))
 (let (($x175 (and $x266 $x65)))
 (let (($x105 (and $x175 $x6)))
 (let (($x164 (and $x105 $x32)))
 (let (($x181 (and $x164 $x253)))
 (let (($x207 (and $x181 $x73)))
 (let (($x172 (and $x207 $x252)))
 (let (($x27 (and $x172 $x14)))
 (let (($x182 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and (not $x182) $x27)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x264 (and $x254 $x200)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x192 $x264)))
 (let (($x153 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1559X)))
 (=> $x257 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1559X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x257 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1558X)))
 (= $x257 false)))
 ))
 (let (($x8 (and $x294 $x153)))
 (let (($x16 (and $x8 $x19)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x151 (and $x161 $x16)))
 (let (($x28 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x274 (=> (and $x106 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x28)))))
 (let (($x279 (and $x274 $x151)))
 (let (($x281 (=> $x279 $x72)))
 (not $x281)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (not $x243)))
 (let (($x20 (= $x64 false)))
 (let (($x18 (= $x20 true)))
 (let ((?x151 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x279 (bvneg ?x151)))
 (let (($x63 (= ?x279 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x63 true)))
 (let ((?x231 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x231)))
 (let (($x264 (= ?x225 input.dst.llvm-%n)))
 (let (($x19 (= $x264 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x27 (= $x14 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x285 (= $x211 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (= $x142 true)))
 (let (($x126 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let ((?x304 (bvadd symbol.1 (bvmul input.ind-%var1583X (_ bv4 32)))))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x304))))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv2 32))) ?x158)))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv3 32))) ?x33)))
 (let ((?x12 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1583X)))
 (let (($x196 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1583X)))
 (=> $x196 (= ?x12 ?x15)))))))))
 ))
 (let (($x13 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) input.ind-%var1582X) (bvult input.ind-%var1582X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x196 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1582X)))
 (= $x196 $x127))))
 ))
 (let (($x174 (and $x13 $x126)))
 (let (($x288 (= $x174 true)))
 (let (($x221 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x246 (= $x221 true)))
 (let ((?x242 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x242)))
 (let ((?x6 (bvand symbol.1 (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x6)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let ((?x198 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x107 (= input.memlabel-mem--symbol.1_end ?x198)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x298 (and $x163 $x107)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x42 $x298)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x61 (and $x299 $x233)))
 (let (($x21 (not $x61)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x305 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x305 $x256)))
 (let (($x83 (and (not $x120) $x21)))
 (let (($x154 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x98 $x154)))
 (let (($x265 (not $x113)))
 (let (($x159 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x266 $x159)))
 (let (($x180 (and (not $x222) $x265)))
 (let (($x73 (and (and (and (and (and (and $x180 $x83) $x145) $x52) $x65) $x93) $x105)))
 (let (($x207 (and $x73 $x32)))
 (let (($x160 (= symbol.1 dst_symbol_addr.1)))
 (let (($x116 (and $x160 $x207)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x187 (or (bvugt input.memlabel-mem--symbol.1_begin ?x10) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x187) (or $x137 $x201)))))))
 (let (($x35 (and $x17 $x116)))
 (let (($x183 (= $x35 true)))
 (let (($x46 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x214 (= $x46 true)))
 (let (($x97 (= ?x225 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (= $x97 true)))
 (let (($x292 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x269 (= $x292 true)))
 (let (($x270 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x270 true)))
 (let (($x148 (and $x155 $x269)))
 (let (($x76 (and $x148 $x56)))
 (let (($x301 (and $x76 $x214)))
 (let (($x267 (and $x301 $x183)))
 (let (($x136 (and $x267 $x246)))
 (let (($x232 (and $x136 $x288)))
 (let (($x172 (and $x232 $x252)))
 (let (($x209 (and $x172 $x285)))
 (let (($x200 (and $x209 $x27)))
 (let (($x16 (and $x200 $x19)))
 (let (($x255 (and $x16 $x50)))
 (let (($x291 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (and $x291 $x255)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x193 (and $x241 $x62)))
 (let (($x114 (forall ((input.ind-%var1593X (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1593X)))
 (=> $x249 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1593X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var1592X (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1592X)))
 (= $x249 false)))
 ))
 (let (($x302 (and $x153 $x114)))
 (let (($x210 (and $x302 $x193)))
 (let (($x194 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x194 $x210)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let (($x7 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x161 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x7)))))
 (let (($x71 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x7)))))
 (let (($x79 (and $x71 $x131)))
 (let (($x40 (=> $x79 $x18)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x243 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (not $x243)))
 (let (($x20 (= $x64 false)))
 (let (($x18 (= $x20 true)))
 (let ((?x151 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x279 (bvneg ?x151)))
 (let (($x63 (= ?x279 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x63 true)))
 (let ((?x231 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x231)))
 (let (($x264 (= ?x225 input.dst.llvm-%n)))
 (let (($x19 (= $x264 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x27 (= $x14 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x285 (= $x211 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (= $x142 true)))
 (let (($x126 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let ((?x304 (bvadd symbol.1 (bvmul input.ind-%var1583X (_ bv4 32)))))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x304))))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv2 32))) ?x158)))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv3 32))) ?x33)))
 (let ((?x12 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1583X)))
 (let (($x196 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1583X)))
 (=> $x196 (= ?x12 ?x15)))))))))
 ))
 (let (($x13 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) input.ind-%var1582X) (bvult input.ind-%var1582X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x196 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1582X)))
 (= $x196 $x127))))
 ))
 (let (($x174 (and $x13 $x126)))
 (let (($x288 (= $x174 true)))
 (let (($x221 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x246 (= $x221 true)))
 (let ((?x242 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x242)))
 (let ((?x6 (bvand symbol.1 (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x6)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let ((?x198 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x107 (= input.memlabel-mem--symbol.1_end ?x198)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x298 (and $x163 $x107)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x42 $x298)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x61 (and $x299 $x233)))
 (let (($x21 (not $x61)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x305 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x305 $x256)))
 (let (($x83 (and (not $x120) $x21)))
 (let (($x154 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x98 $x154)))
 (let (($x265 (not $x113)))
 (let (($x159 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x266 $x159)))
 (let (($x180 (and (not $x222) $x265)))
 (let (($x73 (and (and (and (and (and (and $x180 $x83) $x145) $x52) $x65) $x93) $x105)))
 (let (($x207 (and $x73 $x32)))
 (let (($x160 (= symbol.1 dst_symbol_addr.1)))
 (let (($x116 (and $x160 $x207)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x187 (or (bvugt input.memlabel-mem--symbol.1_begin ?x10) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x187) (or $x137 $x201)))))))
 (let (($x35 (and $x17 $x116)))
 (let (($x183 (= $x35 true)))
 (let (($x46 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x214 (= $x46 true)))
 (let (($x97 (= ?x225 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (= $x97 true)))
 (let (($x292 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x269 (= $x292 true)))
 (let (($x270 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x270 true)))
 (let (($x148 (and $x155 $x269)))
 (let (($x76 (and $x148 $x56)))
 (let (($x301 (and $x76 $x214)))
 (let (($x267 (and $x301 $x183)))
 (let (($x136 (and $x267 $x246)))
 (let (($x232 (and $x136 $x288)))
 (let (($x172 (and $x232 $x252)))
 (let (($x209 (and $x172 $x285)))
 (let (($x200 (and $x209 $x27)))
 (let (($x16 (and $x200 $x19)))
 (let (($x255 (and $x16 $x50)))
 (let (($x291 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (and $x291 $x255)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x193 (and $x241 $x62)))
 (let (($x114 (forall ((input.ind-%var1593X (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1593X)))
 (=> $x249 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1593X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var1592X (_ BitVec 32)) )(let (($x249 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1592X)))
 (= $x249 false)))
 ))
 (let (($x302 (and $x153 $x114)))
 (let (($x210 (and $x302 $x193)))
 (let (($x194 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x131 (and $x194 $x210)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let (($x7 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x161 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x7)))))
 (let (($x71 (=> (and $x243 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x7)))))
 (let (($x79 (and $x71 $x131)))
 (let (($x40 (=> $x79 $x18)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x0000000e)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000000e)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x3ffffe74)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0000000e)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0000000e)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x3ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x3ffffe74)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x0000000e)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x3ffffe77 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x3ffffe76 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x3ffffe75 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x3ffffe74 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x0000000e x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000148)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000148)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x6227f004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6aaf1400)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000148)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000148)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6aaf1403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x6227f193)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6aaf1400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x6227f004)
  (define-fun symbol.1 () (_ BitVec 32)
    #x6227f004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000148)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x6227f007 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x6227f006 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x6227f005 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x6227f004 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000148 x!0)
         (ite (bvule #x00000149 x!0) #x00000149 #x00000148)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x293 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (or $x43 $x293)))
 (let (($x37 (= $x149 true)))
 (let ((?x92 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x92)))
 (let (($x29 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (= $x29 true)))
 (let ((?x197 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x197)))
 (let (($x178 (= ?x115 input.dst.llvm-%n)))
 (let (($x112 (= $x178 true)))
 (let (($x134 (= ?x115 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x134 true)))
 (let (($x94 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x235 (= $x94 true)))
 (let (($x192 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x257 (= $x192 true)))
 (let (($x140 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x140 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x245 (= $x297 true)))
 (let (($x40 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let ((?x151 (bvadd symbol.1 (bvmul input.ind-%var1643X (_ bv4 32)))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x210 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x255)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x210)))
 (let ((?x33 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1643X)))
 (let (($x13 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1643X)))
 (=> $x13 (= ?x33 ?x64)))))))))
 ))
 (let (($x130 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let (($x247 (and (bvule (_ bv0 32) input.ind-%var1642X) (bvult input.ind-%var1642X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x13 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1642X)))
 (= $x13 $x247))))
 ))
 (let (($x96 (and $x130 $x40)))
 (let (($x47 (= $x96 true)))
 (let (($x196 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x150 (= $x196 true)))
 (let (($x221 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x246 (= $x221 true)))
 (let (($x35 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x35 true)))
 (let ((?x298 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x298)))
 (let ((?x198 (bvand symbol.1 (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x198)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x248 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x204 (= input.memlabel-mem--symbol.1_end ?x248)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (and $x164 $x204)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x83 $x52)))
 (let (($x21 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x256 (and $x180 $x305)))
 (let (($x120 (not $x256)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x265 (and $x154 $x113)))
 (let (($x299 (and (not $x265) $x120)))
 (let (($x266 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x160 $x266)))
 (let (($x222 (not $x159)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x188 $x17)))
 (let (($x98 (and (not $x133) $x222)))
 (let (($x105 (and (and (and (and (and (and $x98 $x299) $x233) $x21) $x253) $x163) $x107)))
 (let (($x73 (and $x105 $x65)))
 (let (($x46 (= symbol.1 dst_symbol_addr.1)))
 (let (($x242 (and $x46 $x73)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x10 (or (bvugt input.memlabel-mem--symbol.1_begin ?x60) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x10) (or $x119 $x167)))))))
 (let (($x32 (and $x143 $x242)))
 (let (($x207 (= $x32 true)))
 (let (($x267 (and $x207 $x183)))
 (let (($x136 (and $x267 $x246)))
 (let (($x250 (and $x136 $x150)))
 (let (($x69 (and $x250 $x47)))
 (let (($x68 (and $x69 $x245)))
 (let (($x8 (and $x68 $x289)))
 (let (($x185 (and $x8 $x257)))
 (let (($x259 (and $x185 $x235)))
 (let (($x24 (and $x259 $x81)))
 (let (($x303 (and $x24 $x112)))
 (let (($x45 (and $x303 $x157)))
 (let (($x97 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (and $x97 $x45)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x290 (and $x128 $x191)))
 (let (($x292 (forall ((input.ind-%var1653X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1653X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1653X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1652X)))
 (= $x218 false)))
 ))
 (let (($x269 (and $x114 $x292)))
 (let (($x189 (and $x269 $x290)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x294 $x189)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let (($x274 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x194 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x274)))))
 (let (($x147 (=> (and $x293 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x274)))))
 (let (($x220 (and $x147 $x176)))
 (let (($x182 (=> $x220 $x37)))
 (not $x182)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x293 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x43 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (or $x43 $x293)))
 (let (($x37 (= $x149 true)))
 (let ((?x92 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x101 (bvneg ?x92)))
 (let (($x29 (= ?x101 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (= $x29 true)))
 (let ((?x197 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x197)))
 (let (($x178 (= ?x115 input.dst.llvm-%n)))
 (let (($x112 (= $x178 true)))
 (let (($x134 (= ?x115 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (= $x134 true)))
 (let (($x94 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x235 (= $x94 true)))
 (let (($x192 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x257 (= $x192 true)))
 (let (($x140 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x140 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x245 (= $x297 true)))
 (let (($x40 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let ((?x151 (bvadd symbol.1 (bvmul input.ind-%var1643X (_ bv4 32)))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x151))))
 (let ((?x210 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv2 32))) ?x255)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x151 (_ bv3 32))) ?x210)))
 (let ((?x33 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1643X)))
 (let (($x13 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1643X)))
 (=> $x13 (= ?x33 ?x64)))))))))
 ))
 (let (($x130 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let (($x247 (and (bvule (_ bv0 32) input.ind-%var1642X) (bvult input.ind-%var1642X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x13 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1642X)))
 (= $x13 $x247))))
 ))
 (let (($x96 (and $x130 $x40)))
 (let (($x47 (= $x96 true)))
 (let (($x196 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x150 (= $x196 true)))
 (let (($x221 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x246 (= $x221 true)))
 (let (($x35 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x35 true)))
 (let ((?x298 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x298)))
 (let ((?x198 (bvand symbol.1 (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x198)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x248 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x204 (= input.memlabel-mem--symbol.1_end ?x248)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (and $x164 $x204)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x83 $x52)))
 (let (($x21 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x256 (and $x180 $x305)))
 (let (($x120 (not $x256)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x265 (and $x154 $x113)))
 (let (($x299 (and (not $x265) $x120)))
 (let (($x266 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x160 $x266)))
 (let (($x222 (not $x159)))
 (let (($x17 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x188 $x17)))
 (let (($x98 (and (not $x133) $x222)))
 (let (($x105 (and (and (and (and (and (and $x98 $x299) $x233) $x21) $x253) $x163) $x107)))
 (let (($x73 (and $x105 $x65)))
 (let (($x46 (= symbol.1 dst_symbol_addr.1)))
 (let (($x242 (and $x46 $x73)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x10 (or (bvugt input.memlabel-mem--symbol.1_begin ?x60) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x10) (or $x119 $x167)))))))
 (let (($x32 (and $x143 $x242)))
 (let (($x207 (= $x32 true)))
 (let (($x267 (and $x207 $x183)))
 (let (($x136 (and $x267 $x246)))
 (let (($x250 (and $x136 $x150)))
 (let (($x69 (and $x250 $x47)))
 (let (($x68 (and $x69 $x245)))
 (let (($x8 (and $x68 $x289)))
 (let (($x185 (and $x8 $x257)))
 (let (($x259 (and $x185 $x235)))
 (let (($x24 (and $x259 $x81)))
 (let (($x303 (and $x24 $x112)))
 (let (($x45 (and $x303 $x157)))
 (let (($x97 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (and $x97 $x45)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x290 (and $x128 $x191)))
 (let (($x292 (forall ((input.ind-%var1653X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1653X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1653X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1652X)))
 (= $x218 false)))
 ))
 (let (($x269 (and $x114 $x292)))
 (let (($x189 (and $x269 $x290)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x294 $x189)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvadd symbol.1 ?x152)))
 (let (($x274 (and (bvule input.memlabel-mem--symbol.1_begin ?x36) (bvule (bvadd ?x36 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x194 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false $x274)))))
 (let (($x147 (=> (and $x293 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x274)))))
 (let (($x220 (and $x147 $x176)))
 (let (($x182 (=> $x220 $x37)))
 (not $x182)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x156 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let ((?x25 (bvadd symbol.1 (bvmul input.ind-%var1683X (_ bv4 32)))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x25))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv2 32))) ?x130)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv3 32))) ?x16)))
 (let ((?x42 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1683X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1683X)))
 (=> $x181 (= ?x42 ?x79)))))))))
 ))
 (let (($x34 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1682X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var1682X) (bvult input.ind-%var1682X input.dst.llvm-%n)))))
 ))
 (let (($x263 (and $x34 $x156)))
 (let (($x166 (= $x263 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x10)))
 (let (($x142 (= ?x177 input.dst.llvm-%n)))
 (let (($x288 (= $x142 true)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x282)))
 (let ((?x249 (bvand symbol.1 (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x249)))
 (let ((?x302 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x241 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x302)))
 (let ((?x12 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x15 (= input.memlabel-mem--symbol.1_end ?x12)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x254 (and $x56 $x15)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x139 $x254)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x220 (and $x189 $x176)))
 (let (($x43 (not $x220)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x290 (and $x45 $x191)))
 (let (($x37 (and (not $x290) $x43)))
 (let (($x303 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x112 $x303)))
 (let (($x101 (not $x92)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x81 $x24)))
 (let (($x157 (and (not $x178) $x101)))
 (let (($x174 (and (and (and (and (and (and $x157 $x37) $x182) $x244) $x216) $x241) $x170)))
 (let (($x14 (and $x174 $x203)))
 (let (($x40 (= symbol.1 dst_symbol_addr.1)))
 (let (($x27 (and $x40 $x14)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x245 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x289 (or (bvugt input.memlabel-mem--symbol.1_begin ?x245) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x289) (or $x185 $x94)))))))
 (let (($x211 (and $x134 $x27)))
 (let (($x285 (= $x211 true)))
 (let (($x255 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x255 true)))
 (let (($x193 (forall ((input.ind-%var1663X (_ BitVec 32)) )(let ((?x25 (bvadd symbol.1 (bvmul input.ind-%var1663X (_ bv4 32)))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x25))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv2 32))) ?x130)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv3 32))) ?x16)))
 (let ((?x42 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1663X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1663X)))
 (=> $x181 (= ?x42 ?x79)))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x164 (bvule (_ bv0 32) input.ind-%var1662X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1662X)))
 (= $x181 (and $x164 (bvult input.ind-%var1662X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x63 (and $x204 $x193)))
 (let (($x50 (= $x63 true)))
 (let (($x133 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (not $x133)))
 (let (($x305 (= $x226 true)))
 (let (($x154 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x113 (and true $x154)))
 (let (($x265 (=> $x226 $x113)))
 (let (($x122 (= $x265 true)))
 (let (($x76 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x46 (= $x76 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x237 (= $x201 true)))
 (let (($x167 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x137 (= $x167 true)))
 (let (($x240 (= ?x177 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (= $x240 true)))
 (let (($x60 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x111 (= $x60 true)))
 (let ((?x231 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x231)))
 (let (($x214 (= ?x225 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x214 true)))
 (let (($x292 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x269 (= $x292 true)))
 (let (($x270 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x270 true)))
 (let (($x148 (and $x155 $x269)))
 (let (($x206 (and $x148 $x301)))
 (let (($x132 (and $x206 $x111)))
 (let (($x187 (and $x132 $x119)))
 (let (($x44 (and $x187 $x137)))
 (let (($x143 (and $x44 $x237)))
 (let (($x188 (and $x143 $x46)))
 (let (($x180 (and $x188 $x122)))
 (let (($x256 (and $x180 $x305)))
 (let (($x279 (and $x256 $x50)))
 (let (($x64 (and $x279 $x210)))
 (let (($x232 (and $x64 $x285)))
 (let (($x252 (and $x232 $x288)))
 (let (($x84 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x209 (and $x84 $x252)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and $x67 $x209)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x80 (and $x294 $x200)))
 (let (($x194 (forall ((input.ind-%var1673X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1673X)))
 (=> $x152 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1673X) (_ bv0 32)))))
 ))
 (let (($x59 (forall ((input.ind-%var1672X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1672X)))
 (= $x152 false)))
 ))
 (let (($x147 (and $x59 $x194)))
 (let (($x304 (and $x147 $x80)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x5 $x304)))
 (let (($x219 (=> $x179 $x166)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x156 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let ((?x25 (bvadd symbol.1 (bvmul input.ind-%var1683X (_ bv4 32)))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x25))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv2 32))) ?x130)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv3 32))) ?x16)))
 (let ((?x42 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1683X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1683X)))
 (=> $x181 (= ?x42 ?x79)))))))))
 ))
 (let (($x34 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1682X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var1682X) (bvult input.ind-%var1682X input.dst.llvm-%n)))))
 ))
 (let (($x263 (and $x34 $x156)))
 (let (($x166 (= $x263 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x10)))
 (let (($x142 (= ?x177 input.dst.llvm-%n)))
 (let (($x288 (= $x142 true)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x282)))
 (let ((?x249 (bvand symbol.1 (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x249)))
 (let ((?x302 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x241 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x302)))
 (let ((?x12 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x15 (= input.memlabel-mem--symbol.1_end ?x12)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x254 (and $x56 $x15)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x139 $x254)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x220 (and $x189 $x176)))
 (let (($x43 (not $x220)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x290 (and $x45 $x191)))
 (let (($x37 (and (not $x290) $x43)))
 (let (($x303 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x112 $x303)))
 (let (($x101 (not $x92)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x81 $x24)))
 (let (($x157 (and (not $x178) $x101)))
 (let (($x174 (and (and (and (and (and (and $x157 $x37) $x182) $x244) $x216) $x241) $x170)))
 (let (($x14 (and $x174 $x203)))
 (let (($x40 (= symbol.1 dst_symbol_addr.1)))
 (let (($x27 (and $x40 $x14)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x245 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x289 (or (bvugt input.memlabel-mem--symbol.1_begin ?x245) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x289) (or $x185 $x94)))))))
 (let (($x211 (and $x134 $x27)))
 (let (($x285 (= $x211 true)))
 (let (($x255 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x255 true)))
 (let (($x193 (forall ((input.ind-%var1663X (_ BitVec 32)) )(let ((?x25 (bvadd symbol.1 (bvmul input.ind-%var1663X (_ bv4 32)))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x25))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv2 32))) ?x130)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x25 (_ bv3 32))) ?x16)))
 (let ((?x42 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1663X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1663X)))
 (=> $x181 (= ?x42 ?x79)))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x164 (bvule (_ bv0 32) input.ind-%var1662X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1662X)))
 (= $x181 (and $x164 (bvult input.ind-%var1662X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x63 (and $x204 $x193)))
 (let (($x50 (= $x63 true)))
 (let (($x133 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (not $x133)))
 (let (($x305 (= $x226 true)))
 (let (($x154 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x113 (and true $x154)))
 (let (($x265 (=> $x226 $x113)))
 (let (($x122 (= $x265 true)))
 (let (($x76 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x46 (= $x76 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x237 (= $x201 true)))
 (let (($x167 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x137 (= $x167 true)))
 (let (($x240 (= ?x177 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (= $x240 true)))
 (let (($x60 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x111 (= $x60 true)))
 (let ((?x231 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x225 (bvneg ?x231)))
 (let (($x214 (= ?x225 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x214 true)))
 (let (($x292 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x269 (= $x292 true)))
 (let (($x270 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x270 true)))
 (let (($x148 (and $x155 $x269)))
 (let (($x206 (and $x148 $x301)))
 (let (($x132 (and $x206 $x111)))
 (let (($x187 (and $x132 $x119)))
 (let (($x44 (and $x187 $x137)))
 (let (($x143 (and $x44 $x237)))
 (let (($x188 (and $x143 $x46)))
 (let (($x180 (and $x188 $x122)))
 (let (($x256 (and $x180 $x305)))
 (let (($x279 (and $x256 $x50)))
 (let (($x64 (and $x279 $x210)))
 (let (($x232 (and $x64 $x285)))
 (let (($x252 (and $x232 $x288)))
 (let (($x84 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x209 (and $x84 $x252)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x200 (and $x67 $x209)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x80 (and $x294 $x200)))
 (let (($x194 (forall ((input.ind-%var1673X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1673X)))
 (=> $x152 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1673X) (_ bv0 32)))))
 ))
 (let (($x59 (forall ((input.ind-%var1672X (_ BitVec 32)) )(let (($x152 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1672X)))
 (= $x152 false)))
 ))
 (let (($x147 (and $x59 $x194)))
 (let (($x304 (and $x147 $x80)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x5 $x304)))
 (let (($x219 (=> $x179 $x166)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x299 (not $x251)))
 (let (($x21 (or $x251 $x299)))
 (let (($x93 (= $x21 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x246)))
 (let (($x35 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x183 (= $x35 true)))
 (let ((?x154 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x154)))
 (let (($x61 (= ?x113 input.dst.llvm-%n)))
 (let (($x298 (= $x61 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x120 (= $x223 true)))
 (let (($x57 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x124 (= $x57 true)))
 (let (($x228 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x243 (= $x228 true)))
 (let (($x163 (forall ((input.ind-%var1693X (_ BitVec 32)) )(let ((?x179 (bvadd symbol.1 (bvmul input.ind-%var1693X (_ bv4 32)))))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x179))))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x179 (_ bv2 32))) ?x34)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x179 (_ bv3 32))) ?x166)))
 (let ((?x302 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1693X)))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1693X)))
 (=> $x37 (= ?x302 ?x198)))))))))
 ))
 (let (($x15 (forall ((input.ind-%var1692X (_ BitVec 32)) )(let (($x56 (and (bvule (_ bv0 32) input.ind-%var1692X) (bvult input.ind-%var1692X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1692X)))
 (= $x37 $x56))))
 ))
 (let (($x36 (and $x15 $x163)))
 (let (($x7 (= $x36 true)))
 (let (($x149 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x149 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x40)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x134)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x197 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x257 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x94 (= input.memlabel-mem--symbol.1_end ?x257)))
 (let (($x185 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x235 (and $x185 $x94)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (and $x192 $x235)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x69 (and $x47 $x115)))
 (let (($x245 (not $x69)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x96 (and $x210 $x64)))
 (let (($x297 (and (not $x96) $x245)))
 (let (($x193 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x62 $x193)))
 (let (($x50 (not $x63)))
 (let (($x79 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x16 $x79)))
 (let (($x255 (and (not $x172) $x50)))
 (let (($x92 (and (and (and (and (and (and $x255 $x297) $x140) $x8) $x259) $x197) $x18)))
 (let (($x101 (and $x92 $x81)))
 (let (($x145 (= symbol.1 dst_symbol_addr.1)))
 (let (($x157 (and $x145 $x101)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x13 (or (bvugt input.memlabel-mem--symbol.1_begin ?x42) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x13) (or $x131 $x116)))))))
 (let (($x45 (and $x130 $x157)))
 (let (($x191 (= $x45 true)))
 (let (($x305 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x256 (= $x305 true)))
 (let (($x265 (= ?x113 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (= $x265 true)))
 (let (($x160 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x266 (= $x160 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x159 (= $x226 true)))
 (let (($x222 (and $x159 $x266)))
 (let (($x180 (and $x222 $x122)))
 (let (($x181 (and $x180 $x256)))
 (let (($x290 (and $x181 $x191)))
 (let (($x176 (and $x290 $x189)))
 (let (($x195 (and $x176 $x7)))
 (let (($x70 (and $x195 $x243)))
 (let (($x52 (and $x70 $x124)))
 (let (($x175 (and $x52 $x120)))
 (let (($x65 (and $x175 $x298)))
 (let (($x242 (and $x65 $x183)))
 (let (($x188 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x188 $x242)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x73 (and $x143 $x32)))
 (let (($x44 (forall ((input.ind-%var1703X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1703X)))
 (=> $x225 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1703X) (_ bv0 32)))))
 ))
 (let (($x206 (forall ((input.ind-%var1702X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1702X)))
 (= $x225 false)))
 ))
 (let (($x201 (and $x206 $x44)))
 (let (($x207 (and $x201 $x73)))
 (let (($x269 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x267 (and $x269 $x207)))
 (let ((?x91 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x59 (bvadd symbol.1 ?x91)))
 (let (($x84 (and (bvule input.memlabel-mem--symbol.1_begin ?x59) (bvule (bvadd ?x59 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x292 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false $x84)))))
 (let (($x28 (=> (and $x251 (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x84)))))
 (let (($x196 (and $x28 $x267)))
 (let (($x150 (=> $x196 $x93)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x251 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x299 (not $x251)))
 (let (($x21 (or $x251 $x299)))
 (let (($x93 (= $x21 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x246)))
 (let (($x35 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x183 (= $x35 true)))
 (let ((?x154 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x154)))
 (let (($x61 (= ?x113 input.dst.llvm-%n)))
 (let (($x298 (= $x61 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x120 (= $x223 true)))
 (let (($x57 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x124 (= $x57 true)))
 (let (($x228 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x243 (= $x228 true)))
 (let (($x163 (forall ((input.ind-%var1693X (_ BitVec 32)) )(let ((?x179 (bvadd symbol.1 (bvmul input.ind-%var1693X (_ bv4 32)))))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x179))))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x179 (_ bv2 32))) ?x34)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x179 (_ bv3 32))) ?x166)))
 (let ((?x302 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1693X)))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1693X)))
 (=> $x37 (= ?x302 ?x198)))))))))
 ))
 (let (($x15 (forall ((input.ind-%var1692X (_ BitVec 32)) )(let (($x56 (and (bvule (_ bv0 32) input.ind-%var1692X) (bvult input.ind-%var1692X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x37 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1692X)))
 (= $x37 $x56))))
 ))
 (let (($x36 (and $x15 $x163)))
 (let (($x7 (= $x36 true)))
 (let (($x149 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x149 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x40)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x134)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x197 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x257 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x94 (= input.memlabel-mem--symbol.1_end ?x257)))
 (let (($x185 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x235 (and $x185 $x94)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (and $x192 $x235)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x69 (and $x47 $x115)))
 (let (($x245 (not $x69)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x96 (and $x210 $x64)))
 (let (($x297 (and (not $x96) $x245)))
 (let (($x193 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x62 $x193)))
 (let (($x50 (not $x63)))
 (let (($x79 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x16 $x79)))
 (let (($x255 (and (not $x172) $x50)))
 (let (($x92 (and (and (and (and (and (and $x255 $x297) $x140) $x8) $x259) $x197) $x18)))
 (let (($x101 (and $x92 $x81)))
 (let (($x145 (= symbol.1 dst_symbol_addr.1)))
 (let (($x157 (and $x145 $x101)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x13 (or (bvugt input.memlabel-mem--symbol.1_begin ?x42) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x13) (or $x131 $x116)))))))
 (let (($x45 (and $x130 $x157)))
 (let (($x191 (= $x45 true)))
 (let (($x305 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x256 (= $x305 true)))
 (let (($x265 (= ?x113 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (= $x265 true)))
 (let (($x160 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x266 (= $x160 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x159 (= $x226 true)))
 (let (($x222 (and $x159 $x266)))
 (let (($x180 (and $x222 $x122)))
 (let (($x181 (and $x180 $x256)))
 (let (($x290 (and $x181 $x191)))
 (let (($x176 (and $x290 $x189)))
 (let (($x195 (and $x176 $x7)))
 (let (($x70 (and $x195 $x243)))
 (let (($x52 (and $x70 $x124)))
 (let (($x175 (and $x52 $x120)))
 (let (($x65 (and $x175 $x298)))
 (let (($x242 (and $x65 $x183)))
 (let (($x188 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x188 $x242)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x73 (and $x143 $x32)))
 (let (($x44 (forall ((input.ind-%var1703X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1703X)))
 (=> $x225 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1703X) (_ bv0 32)))))
 ))
 (let (($x206 (forall ((input.ind-%var1702X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1702X)))
 (= $x225 false)))
 ))
 (let (($x201 (and $x206 $x44)))
 (let (($x207 (and $x201 $x73)))
 (let (($x269 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x267 (and $x269 $x207)))
 (let ((?x91 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x59 (bvadd symbol.1 ?x91)))
 (let (($x84 (and (bvule input.memlabel-mem--symbol.1_begin ?x59) (bvule (bvadd ?x59 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x292 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false $x84)))))
 (let (($x28 (=> (and $x251 (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x84)))))
 (let (($x196 (and $x28 $x267)))
 (let (($x150 (=> $x196 $x93)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x47)))
 (let ((?x96 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x96)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let ((?x62 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x193 (= input.memlabel-mem--symbol.1_end ?x62)))
 (let (($x172 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x63 (and $x172 $x193)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x79 $x63)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (and $x116 $x33)))
 (let (($x247 (not $x75)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x151 (and $x221 $x131)))
 (let (($x130 (and (not $x151) $x247)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x49 $x42)))
 (let (($x105 (not $x6)))
 (let (($x248 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x181 $x248)))
 (let (($x25 (and (not $x204) $x105)))
 (let (($x178 (and (and (and (and (and (and $x25 $x130) $x83) $x16) $x50) $x64) $x68)))
 (let (($x289 (and $x178 $x115)))
 (let (($x256 (= symbol.1 dst_symbol_addr.1)))
 (let (($x8 (and $x256 $x289)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x226 (or (bvugt input.memlabel-mem--symbol.1_begin ?x188) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x305 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x226) (or $x222 $x98)))))))
 (let (($x29 (and $x305 $x8)))
 (let (($x139 (= $x29 true)))
 (let ((?x257 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x18 (concat ?x197 (concat ?x235 ?x257)))))
 (let (($x45 (= ?x92 input.dst.llvm-%n)))
 (let (($x191 (= $x45 true)))
 (let (($x40 (= input.dst.llvm-%n ?x92)))
 (let (($x81 (and $x29 $x40)))
 (let (($x240 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x101 (and $x240 $x81)))
 (let (($x157 (= $x101 true)))
 (let (($x290 (and $x157 $x191)))
 (let (($x206 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x206 $x290)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x231 $x149)))
 (let (($x28 (forall ((input.ind-%var1713X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1713X)))
 (=> $x91 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1713X) (_ bv0 32)))))
 ))
 (let (($x155 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1712X)))
 (= $x91 false)))
 ))
 (let (($x161 (and $x155 $x28)))
 (let (($x176 (and $x161 $x189)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x5 $x176)))
 (let (($x121 (=> $x37 $x139)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x47)))
 (let ((?x96 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x96)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let ((?x62 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x193 (= input.memlabel-mem--symbol.1_end ?x62)))
 (let (($x172 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x63 (and $x172 $x193)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x79 $x63)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (and $x116 $x33)))
 (let (($x247 (not $x75)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x151 (and $x221 $x131)))
 (let (($x130 (and (not $x151) $x247)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x49 $x42)))
 (let (($x105 (not $x6)))
 (let (($x248 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x181 $x248)))
 (let (($x25 (and (not $x204) $x105)))
 (let (($x178 (and (and (and (and (and (and $x25 $x130) $x83) $x16) $x50) $x64) $x68)))
 (let (($x289 (and $x178 $x115)))
 (let (($x256 (= symbol.1 dst_symbol_addr.1)))
 (let (($x8 (and $x256 $x289)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x226 (or (bvugt input.memlabel-mem--symbol.1_begin ?x188) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x305 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x226) (or $x222 $x98)))))))
 (let (($x29 (and $x305 $x8)))
 (let (($x139 (= $x29 true)))
 (let ((?x257 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x18 (concat ?x197 (concat ?x235 ?x257)))))
 (let (($x45 (= ?x92 input.dst.llvm-%n)))
 (let (($x191 (= $x45 true)))
 (let (($x40 (= input.dst.llvm-%n ?x92)))
 (let (($x81 (and $x29 $x40)))
 (let (($x240 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x101 (and $x240 $x81)))
 (let (($x157 (= $x101 true)))
 (let (($x290 (and $x157 $x191)))
 (let (($x206 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x206 $x290)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x231 $x149)))
 (let (($x28 (forall ((input.ind-%var1713X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1713X)))
 (=> $x91 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1713X) (_ bv0 32)))))
 ))
 (let (($x155 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1712X)))
 (= $x91 false)))
 ))
 (let (($x161 (and $x155 $x28)))
 (let (($x176 (and $x161 $x189)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x5 $x176)))
 (let (($x121 (=> $x37 $x139)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x254 (bvneg ?x291)))
 (let (($x12 (= ?x254 input.dst.llvm-%n)))
 (let (($x15 (= $x12 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x139 (concat ?x189 (concat ?x45 ?x101)))))
 (let (($x59 (= ?x121 input.dst.llvm-%n)))
 (let (($x294 (= $x59 true)))
 (let (($x56 (= input.dst.llvm-%n ?x121)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x134)))
 (let ((?x29 (bvand symbol.1 (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x29)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let ((?x96 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x68 (= input.memlabel-mem--symbol.1_end ?x96)))
 (let (($x64 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x178 (and $x64 $x68)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x210 $x178)))
 (let (($x255 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x279 (and $x79 $x172)))
 (let (($x62 (not $x279)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x297 (and $x145 $x16)))
 (let (($x63 (and (not $x297) $x62)))
 (let (($x247 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x75 $x247)))
 (let (($x69 (not $x130)))
 (let (($x116 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x9 $x116)))
 (let (($x245 (and (not $x33) $x69)))
 (let (($x257 (and (and (and (and (and (and $x245 $x63) $x50) $x255) $x47) $x8) $x192)))
 (let (($x259 (and $x257 $x18)))
 (let (($x151 (= symbol.1 dst_symbol_addr.1)))
 (let (($x303 (and $x151 $x259)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x305 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x305)))
 (let (($x256 (or (bvugt input.memlabel-mem--symbol.1_begin ?x305) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x256) (or $x13 $x49)))))))
 (let (($x92 (and $x131 $x303)))
 (let (($x167 (and $x92 $x56)))
 (let (($x159 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x137 (and $x159 $x167)))
 (let (($x185 (= $x137 true)))
 (let (($x218 (and $x185 $x294)))
 (let (($x133 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (and $x133 $x218)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x188 $x251)))
 (let (($x143 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1723X)))
 (=> $x155 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1723X) (_ bv0 32)))))
 ))
 (let (($x292 (forall ((input.ind-%var1722X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1722X)))
 (= $x155 false)))
 ))
 (let (($x180 (and $x292 $x143)))
 (let (($x71 (and $x180 $x107)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x84 (and $x5 $x71)))
 (let (($x302 (=> $x84 $x15)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x254 (bvneg ?x291)))
 (let (($x12 (= ?x254 input.dst.llvm-%n)))
 (let (($x15 (= $x12 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x139 (concat ?x189 (concat ?x45 ?x101)))))
 (let (($x59 (= ?x121 input.dst.llvm-%n)))
 (let (($x294 (= $x59 true)))
 (let (($x56 (= input.dst.llvm-%n ?x121)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x134)))
 (let ((?x29 (bvand symbol.1 (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x29)))
 (let ((?x289 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let ((?x96 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x68 (= input.memlabel-mem--symbol.1_end ?x96)))
 (let (($x64 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x178 (and $x64 $x68)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x210 $x178)))
 (let (($x255 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x279 (and $x79 $x172)))
 (let (($x62 (not $x279)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x297 (and $x145 $x16)))
 (let (($x63 (and (not $x297) $x62)))
 (let (($x247 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x75 $x247)))
 (let (($x69 (not $x130)))
 (let (($x116 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x9 $x116)))
 (let (($x245 (and (not $x33) $x69)))
 (let (($x257 (and (and (and (and (and (and $x245 $x63) $x50) $x255) $x47) $x8) $x192)))
 (let (($x259 (and $x257 $x18)))
 (let (($x151 (= symbol.1 dst_symbol_addr.1)))
 (let (($x303 (and $x151 $x259)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x305 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x305)))
 (let (($x256 (or (bvugt input.memlabel-mem--symbol.1_begin ?x305) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x256) (or $x13 $x49)))))))
 (let (($x92 (and $x131 $x303)))
 (let (($x167 (and $x92 $x56)))
 (let (($x159 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x137 (and $x159 $x167)))
 (let (($x185 (= $x137 true)))
 (let (($x218 (and $x185 $x294)))
 (let (($x133 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (and $x133 $x218)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x107 (and $x188 $x251)))
 (let (($x143 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1723X)))
 (=> $x155 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1723X) (_ bv0 32)))))
 ))
 (let (($x292 (forall ((input.ind-%var1722X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1722X)))
 (= $x155 false)))
 ))
 (let (($x180 (and $x292 $x143)))
 (let (($x71 (and $x180 $x107)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x84 (and $x5 $x71)))
 (let (($x302 (=> $x84 $x15)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x293 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x293)))
 (let (($x114 (= ?x91 input.spec-%var-n-1)))
 (let (($x206 (= $x114 true)))
 (let ((?x204 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x9 (concat ?x131 (concat ?x42 ?x204)))))
 (let (($x15 (= input.dst.llvm-%n ?x116)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x59)))
 (let ((?x137 (bvand symbol.1 (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x137)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x191 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x157 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x176 (and $x157 $x191)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x189 $x176)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x303 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x92 (and $x259 $x303)))
 (let (($x40 (not $x92)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x257 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (and $x257 $x134)))
 (let (($x139 (and (not $x18) $x40)))
 (let (($x289 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x115 $x289)))
 (let (($x235 (not $x8)))
 (let (($x47 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x178 $x47)))
 (let (($x192 (and (not $x94) $x235)))
 (let (($x153 (and (and (and (and (and (and $x192 $x139) $x290) $x149) $x121) $x167) $x185)))
 (let (($x291 (and $x153 $x294)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x254 (and $x68 $x291)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x62 (or (bvugt input.memlabel-mem--symbol.1_begin ?x79) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x62) (or $x108 $x24)))))))
 (let (($x12 (and $x96 $x254)))
 (let (($x302 (and $x12 $x15)))
 (let (($x247 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x126 (and $x247 $x302)))
 (let (($x160 (= $x126 true)))
 (let (($x83 (= ?x116 input.dst.llvm-%n)))
 (let (($x75 (= $x83 true)))
 (let (($x222 (and $x75 $x160)))
 (let (($x201 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x201 $x222)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x67 (and $x305 $x81)))
 (let (($x113 (forall ((input.ind-%var1733X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1733X)))
 (=> $x292 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1733X) (_ bv0 32)))))
 ))
 (let (($x237 (forall ((input.ind-%var1732X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1732X)))
 (= $x292 false)))
 ))
 (let (($x221 (and $x237 $x113)))
 (let (($x225 (and $x221 $x67)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x5 $x225)))
 (let (($x161 (=> $x39 $x206)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x293 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x293)))
 (let (($x114 (= ?x91 input.spec-%var-n-1)))
 (let (($x206 (= $x114 true)))
 (let ((?x204 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x9 (concat ?x131 (concat ?x42 ?x204)))))
 (let (($x15 (= input.dst.llvm-%n ?x116)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x294 (= (_ bv0 32) ?x59)))
 (let ((?x137 (bvand symbol.1 (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x137)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x191 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x157 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x176 (and $x157 $x191)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x189 $x176)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x303 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x92 (and $x259 $x303)))
 (let (($x40 (not $x92)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x257 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (and $x257 $x134)))
 (let (($x139 (and (not $x18) $x40)))
 (let (($x289 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x115 $x289)))
 (let (($x235 (not $x8)))
 (let (($x47 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x178 $x47)))
 (let (($x192 (and (not $x94) $x235)))
 (let (($x153 (and (and (and (and (and (and $x192 $x139) $x290) $x149) $x121) $x167) $x185)))
 (let (($x291 (and $x153 $x294)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x254 (and $x68 $x291)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x62 (or (bvugt input.memlabel-mem--symbol.1_begin ?x79) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x62) (or $x108 $x24)))))))
 (let (($x12 (and $x96 $x254)))
 (let (($x302 (and $x12 $x15)))
 (let (($x247 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x126 (and $x247 $x302)))
 (let (($x160 (= $x126 true)))
 (let (($x83 (= ?x116 input.dst.llvm-%n)))
 (let (($x75 (= $x83 true)))
 (let (($x222 (and $x75 $x160)))
 (let (($x201 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x201 $x222)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x67 (and $x305 $x81)))
 (let (($x113 (forall ((input.ind-%var1733X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1733X)))
 (=> $x292 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1733X) (_ bv0 32)))))
 ))
 (let (($x237 (forall ((input.ind-%var1732X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1732X)))
 (= $x292 false)))
 ))
 (let (($x221 (and $x237 $x113)))
 (let (($x225 (and $x221 $x67)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x5 $x225)))
 (let (($x161 (=> $x39 $x206)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x147 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x155 (= $x147 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x293 (concat ?x269 (concat ?x67 (concat ?x126 ?x15)))))
 (let (($x10 (= ?x293 input.dst.llvm-%n)))
 (let (($x181 (= $x10 true)))
 (let (($x91 (= input.dst.llvm-%n ?x293)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x121)))
 (let ((?x191 (bvand symbol.1 (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x191)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x251 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x149 (= input.memlabel-mem--symbol.1_end ?x251)))
 (let (($x218 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x107 (and $x218 $x149)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x139 $x107)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x192 $x257)))
 (let (($x18 (not $x134)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x289 $x8)))
 (let (($x259 (and (not $x235) $x18)))
 (let (($x178 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x68 $x178)))
 (let (($x94 (not $x47)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x96 $x69)))
 (let (($x115 (and (not $x245) $x94)))
 (let (($x153 (and (and (and (and (and (and $x115 $x259) $x303) $x40) $x189) $x101) $x176)))
 (let (($x59 (and $x153 $x71)))
 (let (($x64 (= symbol.1 dst_symbol_addr.1)))
 (let (($x294 (and $x64 $x59)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x172 (or (bvugt input.memlabel-mem--symbol.1_begin ?x140) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x172) (or $x63 $x112)))))))
 (let (($x291 (and $x210 $x294)))
 (let (($x114 (and $x291 $x91)))
 (let (($x6 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x206 (and $x6 $x114)))
 (let (($x161 (= $x206 true)))
 (let (($x130 (and $x161 $x181)))
 (let (($x42 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x248 (and $x42 $x130)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x231 (and $x25 $x248)))
 (let (($x151 (forall ((input.ind-%var1743X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1743X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1743X) (_ bv0 32)))))
 ))
 (let (($x154 (forall ((input.ind-%var1742X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1742X)))
 (= $x237 false)))
 ))
 (let (($x9 (and $x154 $x151)))
 (let (($x17 (and $x9 $x231)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x76 (and $x5 $x17)))
 (let (($x301 (=> $x76 $x155)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x147 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x155 (= $x147 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x293 (concat ?x269 (concat ?x67 (concat ?x126 ?x15)))))
 (let (($x10 (= ?x293 input.dst.llvm-%n)))
 (let (($x181 (= $x10 true)))
 (let (($x91 (= input.dst.llvm-%n ?x293)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x121)))
 (let ((?x191 (bvand symbol.1 (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x191)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x251 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x149 (= input.memlabel-mem--symbol.1_end ?x251)))
 (let (($x218 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x107 (and $x218 $x149)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x139 $x107)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x192 $x257)))
 (let (($x18 (not $x134)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x235 (and $x289 $x8)))
 (let (($x259 (and (not $x235) $x18)))
 (let (($x178 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x68 $x178)))
 (let (($x94 (not $x47)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x96 $x69)))
 (let (($x115 (and (not $x245) $x94)))
 (let (($x153 (and (and (and (and (and (and $x115 $x259) $x303) $x40) $x189) $x101) $x176)))
 (let (($x59 (and $x153 $x71)))
 (let (($x64 (= symbol.1 dst_symbol_addr.1)))
 (let (($x294 (and $x64 $x59)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x172 (or (bvugt input.memlabel-mem--symbol.1_begin ?x140) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x172) (or $x63 $x112)))))))
 (let (($x291 (and $x210 $x294)))
 (let (($x114 (and $x291 $x91)))
 (let (($x6 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x206 (and $x6 $x114)))
 (let (($x161 (= $x206 true)))
 (let (($x130 (and $x161 $x181)))
 (let (($x42 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x248 (and $x42 $x130)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x231 (and $x25 $x248)))
 (let (($x151 (forall ((input.ind-%var1743X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1743X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1743X) (_ bv0 32)))))
 ))
 (let (($x154 (forall ((input.ind-%var1742X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1742X)))
 (= $x237 false)))
 ))
 (let (($x9 (and $x154 $x151)))
 (let (($x17 (and $x9 $x231)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x76 (and $x5 $x17)))
 (let (($x301 (=> $x76 $x155)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x183 (forall ((input.ind-%var1763X (_ BitVec 32)) )(let ((?x52 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x223 (concat ?x52 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32)))))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x65 (concat ?x175 ?x223)))))))))
 ))
 (let (($x219 (forall ((input.ind-%var1762X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1762X) (bvult input.ind-%var1762X (_ bv0 32)))))
 ))
 (let (($x242 (and $x219 $x183)))
 (let (($x32 (= $x242 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x96 (concat ?x210 (concat ?x108 ?x62)))))
 (let (($x266 (= input.dst.llvm-%n ?x69)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x10)))
 (let ((?x206 (bvand symbol.1 (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x206)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x15 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x160 (= input.memlabel-mem--symbol.1_end ?x15)))
 (let (($x302 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x225 (and $x302 $x160)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x67 $x225)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x291 (and $x59 $x294)))
 (let (($x254 (not $x291)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x153 $x121)))
 (let (($x269 (and (not $x71) $x254)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x157 $x45)))
 (let (($x185 (not $x101)))
 (let (($x189 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x107 $x189)))
 (let (($x176 (and (not $x137) $x185)))
 (let (($x147 (and (and (and (and (and (and $x176 $x269) $x222) $x81) $x293) $x114) $x161)))
 (let (($x155 (and $x147 $x181)))
 (let (($x149 (= symbol.1 dst_symbol_addr.1)))
 (let (($x301 (and $x149 $x155)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x192 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x192)))
 (let (($x18 (or (bvugt input.memlabel-mem--symbol.1_begin ?x192) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x251 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x18) (or $x167 $x92)))))))
 (let (($x133 (and $x251 $x301)))
 (let (($x116 (and $x133 $x266)))
 (let (($x178 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (and $x178 $x116)))
 (let (($x188 (= $x12 true)))
 (let (($x29 (= ?x69 input.dst.llvm-%n)))
 (let (($x68 (= $x29 true)))
 (let (($x44 (and $x68 $x188)))
 (let (($x79 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x79 $x44)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x140 $x143)))
 (let (($x247 (forall ((input.ind-%var1753X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1753X)))
 (=> $x154 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1753X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1752X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1752X)))
 (= $x154 false)))
 ))
 (let (($x197 (and $x98 $x247)))
 (let (($x270 (and $x197 $x265)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x5 $x270)))
 (let (($x73 (=> $x292 $x32)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x183 (forall ((input.ind-%var1763X (_ BitVec 32)) )(let ((?x52 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x223 (concat ?x52 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32)))))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x65 (concat ?x175 ?x223)))))))))
 ))
 (let (($x219 (forall ((input.ind-%var1762X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1762X) (bvult input.ind-%var1762X (_ bv0 32)))))
 ))
 (let (($x242 (and $x219 $x183)))
 (let (($x32 (= $x242 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x96 (concat ?x210 (concat ?x108 ?x62)))))
 (let (($x266 (= input.dst.llvm-%n ?x69)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x10)))
 (let ((?x206 (bvand symbol.1 (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x206)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x15 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x160 (= input.memlabel-mem--symbol.1_end ?x15)))
 (let (($x302 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x225 (and $x302 $x160)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x67 $x225)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x291 (and $x59 $x294)))
 (let (($x254 (not $x291)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x153 $x121)))
 (let (($x269 (and (not $x71) $x254)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x157 $x45)))
 (let (($x185 (not $x101)))
 (let (($x189 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x107 $x189)))
 (let (($x176 (and (not $x137) $x185)))
 (let (($x147 (and (and (and (and (and (and $x176 $x269) $x222) $x81) $x293) $x114) $x161)))
 (let (($x155 (and $x147 $x181)))
 (let (($x149 (= symbol.1 dst_symbol_addr.1)))
 (let (($x301 (and $x149 $x155)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x192 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x192)))
 (let (($x18 (or (bvugt input.memlabel-mem--symbol.1_begin ?x192) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x251 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x18) (or $x167 $x92)))))))
 (let (($x133 (and $x251 $x301)))
 (let (($x116 (and $x133 $x266)))
 (let (($x178 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x12 (and $x178 $x116)))
 (let (($x188 (= $x12 true)))
 (let (($x29 (= ?x69 input.dst.llvm-%n)))
 (let (($x68 (= $x29 true)))
 (let (($x44 (and $x68 $x188)))
 (let (($x79 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x79 $x44)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x265 (and $x140 $x143)))
 (let (($x247 (forall ((input.ind-%var1753X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1753X)))
 (=> $x154 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1753X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1752X (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1752X)))
 (= $x154 false)))
 ))
 (let (($x197 (and $x98 $x247)))
 (let (($x270 (and $x197 $x265)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x5 $x270)))
 (let (($x73 (=> $x292 $x32)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x295 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x202 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x87 (bvmul (_ bv4294967295 32) ?x202)))
 (let ((?x276 (bvneg ?x87)))
 (let (($x239 (= ?x276 ?x295)))
 (let (($x48 (= $x239 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x286)))
 (let (($x168 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x168 true)))
 (let (($x72 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x38 (= $x72 true)))
 (let (($x284 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x277 (= $x284 true)))
 (let (($x264 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (= $x264 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x274 (= $x123 true)))
 (let (($x111 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let ((?x232 (bvadd symbol.1 (bvmul input.ind-%var1773X (_ bv4 32)))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x232))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x232 (_ bv2 32))) ?x27)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x232 (_ bv3 32))) ?x43)))
 (let ((?x164 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1773X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1773X)))
 (=> $x256 (= ?x164 ?x200)))))))))
 ))
 (let (($x253 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let (($x93 (and (bvule (_ bv0 32) input.ind-%var1772X) (bvult input.ind-%var1772X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1772X)))
 (= $x256 $x93))))
 ))
 (let (($x187 (and $x253 $x111)))
 (let (($x88 (= $x187 true)))
 (let (($x78 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x166 (= $x78 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x9 (bvsub ?x98 ?x13)))
 (let (($x263 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x9) (bvult ?x98 ?x9))))
 (let ((?x240 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x240)))
 (let ((?x122 ((_ extract 63 32) ?x237)))
 (let (($x42 (= (_ bv0 32) ?x122)))
 (let (($x151 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x36 (and (and (and true $x151) $x42) $x263)))
 (let (($x47 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x198 (and $x47 $x36)))
 (let (($x194 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (=> $x194 $x198)))
 (let (($x23 (= $x20 true)))
 (let (($x242 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x32 (= $x242 true)))
 (let (($x136 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x136 true)))
 (let (($x61 (= $x194 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x179)))
 (let ((?x226 (bvand symbol.1 (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x226)))
 (let ((?x292 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x292)))
 (let ((?x44 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x143 (= input.memlabel-mem--symbol.1_end ?x44)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x265 (and $x12 $x143)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (and $x116 $x265)))
 (let (($x266 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (and $x206 $x161)))
 (let (($x10 (not $x147)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x91 $x114)))
 (let (($x155 (and (not $x76) $x10)))
 (let (($x15 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x126 $x15)))
 (let (($x225 (not $x160)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x231 $x67)))
 (let (($x17 (and (not $x302) $x225)))
 (let (($x120 (and (and (and (and (and (and $x17 $x155) $x301) $x266) $x270) $x28) $x304)))
 (let (($x175 (and $x120 $x219)))
 (let (($x157 (= symbol.1 dst_symbol_addr.1)))
 (let (($x124 (and $x157 $x175)))
 (let (($x291 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x294 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x121 (or (bvugt input.memlabel-mem--symbol.1_begin ?x185) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x121) (or $x294 $x291)))))))
 (let (($x52 (and $x81 $x124)))
 (let (($x57 (= $x52 true)))
 (let ((?x218 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x218)))
 (let (($x149 (= ?x251 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x149 true)))
 (let (($x94 (= ?x251 input.dst.llvm-%n)))
 (let (($x115 (= $x94 true)))
 (let (($x189 (and $x115 $x107)))
 (let (($x223 (and $x189 $x57)))
 (let (($x246 (and $x223 $x61)))
 (let (($x183 (and $x246 $x35)))
 (let (($x73 (and $x183 $x32)))
 (let (($x34 (and $x73 $x23)))
 (let (($x233 (and $x34 $x166)))
 (let (($x250 (and $x233 $x88)))
 (let (($x99 (and $x250 $x274)))
 (let (($x258 (and $x99 $x19)))
 (let (($x162 (and $x258 $x277)))
 (let (($x82 (and $x162 $x38)))
 (let (($x280 (and $x82 $x41)))
 (let (($x84 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (and (not $x84) $x280)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (and $x92 $x22)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x56 $x224)))
 (let (($x134 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1783X)))
 (=> $x62 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1783X) (_ bv0 32)))))
 ))
 (let (($x245 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1782X)))
 (= $x62 false)))
 ))
 (let (($x18 (and $x245 $x134)))
 (let (($x236 (and $x18 $x11)))
 (let (($x255 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x255 $x236)))
 (let (($x63 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x24 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x63)))))
 (let (($x49 (=> (and $x194 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x63)))))
 (let (($x212 (and $x49 $x146)))
 (let (($x261 (=> $x212 $x48)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x295 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x202 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x87 (bvmul (_ bv4294967295 32) ?x202)))
 (let ((?x276 (bvneg ?x87)))
 (let (($x239 (= ?x276 ?x295)))
 (let (($x48 (= $x239 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x286)))
 (let (($x168 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x41 (= $x168 true)))
 (let (($x72 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x38 (= $x72 true)))
 (let (($x284 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x277 (= $x284 true)))
 (let (($x264 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (= $x264 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x274 (= $x123 true)))
 (let (($x111 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let ((?x232 (bvadd symbol.1 (bvmul input.ind-%var1773X (_ bv4 32)))))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x232))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x232 (_ bv2 32))) ?x27)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x232 (_ bv3 32))) ?x43)))
 (let ((?x164 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1773X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1773X)))
 (=> $x256 (= ?x164 ?x200)))))))))
 ))
 (let (($x253 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let (($x93 (and (bvule (_ bv0 32) input.ind-%var1772X) (bvult input.ind-%var1772X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1772X)))
 (= $x256 $x93))))
 ))
 (let (($x187 (and $x253 $x111)))
 (let (($x88 (= $x187 true)))
 (let (($x78 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x166 (= $x78 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x9 (bvsub ?x98 ?x13)))
 (let (($x263 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x9) (bvult ?x98 ?x9))))
 (let ((?x240 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x240)))
 (let ((?x122 ((_ extract 63 32) ?x237)))
 (let (($x42 (= (_ bv0 32) ?x122)))
 (let (($x151 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x36 (and (and (and true $x151) $x42) $x263)))
 (let (($x47 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x198 (and $x47 $x36)))
 (let (($x194 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (=> $x194 $x198)))
 (let (($x23 (= $x20 true)))
 (let (($x242 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x32 (= $x242 true)))
 (let (($x136 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x136 true)))
 (let (($x61 (= $x194 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x179)))
 (let ((?x226 (bvand symbol.1 (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x226)))
 (let ((?x292 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x292)))
 (let ((?x44 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x143 (= input.memlabel-mem--symbol.1_end ?x44)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x265 (and $x12 $x143)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (and $x116 $x265)))
 (let (($x266 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (and $x206 $x161)))
 (let (($x10 (not $x147)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x91 $x114)))
 (let (($x155 (and (not $x76) $x10)))
 (let (($x15 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x126 $x15)))
 (let (($x225 (not $x160)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x231 $x67)))
 (let (($x17 (and (not $x302) $x225)))
 (let (($x120 (and (and (and (and (and (and $x17 $x155) $x301) $x266) $x270) $x28) $x304)))
 (let (($x175 (and $x120 $x219)))
 (let (($x157 (= symbol.1 dst_symbol_addr.1)))
 (let (($x124 (and $x157 $x175)))
 (let (($x291 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x294 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x121 (or (bvugt input.memlabel-mem--symbol.1_begin ?x185) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x121) (or $x294 $x291)))))))
 (let (($x52 (and $x81 $x124)))
 (let (($x57 (= $x52 true)))
 (let ((?x218 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x218)))
 (let (($x149 (= ?x251 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x149 true)))
 (let (($x94 (= ?x251 input.dst.llvm-%n)))
 (let (($x115 (= $x94 true)))
 (let (($x189 (and $x115 $x107)))
 (let (($x223 (and $x189 $x57)))
 (let (($x246 (and $x223 $x61)))
 (let (($x183 (and $x246 $x35)))
 (let (($x73 (and $x183 $x32)))
 (let (($x34 (and $x73 $x23)))
 (let (($x233 (and $x34 $x166)))
 (let (($x250 (and $x233 $x88)))
 (let (($x99 (and $x250 $x274)))
 (let (($x258 (and $x99 $x19)))
 (let (($x162 (and $x258 $x277)))
 (let (($x82 (and $x162 $x38)))
 (let (($x280 (and $x82 $x41)))
 (let (($x84 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (and (not $x84) $x280)))
 (let (($x92 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (and $x92 $x22)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x56 $x224)))
 (let (($x134 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1783X)))
 (=> $x62 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1783X) (_ bv0 32)))))
 ))
 (let (($x245 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x62 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1782X)))
 (= $x62 false)))
 ))
 (let (($x18 (and $x245 $x134)))
 (let (($x236 (and $x18 $x11)))
 (let (($x255 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x146 (and $x255 $x236)))
 (let (($x63 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x24 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x63)))))
 (let (($x49 (=> (and $x194 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x63)))))
 (let (($x212 (and $x49 $x146)))
 (let (($x261 (=> $x212 $x48)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x267 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x196 (bvule ?x267 (_ bv399 32))))
 (let (($x288 (= $x196 true)))
 (let ((?x60 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x60)))
 (let (($x170 (= ?x127 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x170 true)))
 (let (($x195 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x228 (= $x195 true)))
 (let (($x235 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x104 (= $x235 true)))
 (let (($x210 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x210 true)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x239)))
 (let ((?x276 (bvand symbol.1 (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x276)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let ((?x11 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x236 (= input.memlabel-mem--symbol.1_end ?x11)))
 (let (($x224 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x146 (and $x224 $x236)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x22 $x146)))
 (let (($x280 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x38 (and $x162 $x72)))
 (let (($x82 (not $x38)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x277 (and $x258 $x284)))
 (let (($x268 (and (not $x277) $x82)))
 (let (($x123 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (and $x250 $x123)))
 (let (($x99 (not $x274)))
 (let (($x187 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x111 $x187)))
 (let (($x19 (and (not $x88) $x99)))
 (let (($x180 (and (and (and (and (and (and $x19 $x268) $x168) $x280) $x212) $x87) $x295)))
 (let (($x158 (and $x180 $x48)))
 (let (($x253 (= symbol.1 dst_symbol_addr.1)))
 (let (($x50 (and $x253 $x158)))
 (let (($x282 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x285 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x285)))
 (let (($x244 (or (bvugt input.memlabel-mem--symbol.1_begin ?x285) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x244) (or $x14 $x282)))))))
 (let (($x8 (and $x80 $x50)))
 (let (($x29 (= $x8 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x21 (= $x256 true)))
 (let (($x78 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (= $x78 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x23 (= $x20 true)))
 (let (($x201 (forall ((input.ind-%var1793X (_ BitVec 32)) )(let ((?x131 (bvadd symbol.1 (bvmul input.ind-%var1793X (_ bv4 32)))))
 (let ((?x105 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x131))))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv2 32))) ?x105)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv3 32))) ?x122)))
 (let ((?x179 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1793X)))
 (let (($x116 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1793X)))
 (=> $x116 (= ?x179 ?x204)))))))))
 ))
 (let (($x65 (forall ((input.ind-%var1792X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var1792X) (bvult input.ind-%var1792X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x116 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1792X)))
 (= $x116 $x292))))
 ))
 (let (($x263 (and $x65 $x201)))
 (let (($x36 (= $x263 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x161)))
 (let (($x301 (= ?x147 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (= $x301 true)))
 (let (($x10 (= ?x147 input.dst.llvm-%n)))
 (let (($x155 (= $x10 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x76 (= $x114 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x81 (bvsub ?x98 ?x13)))
 (let (($x67 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x81) (bvult ?x98 ?x81))))
 (let ((?x254 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x269 (bvmul (_ bv4 64) ?x254)))
 (let ((?x130 ((_ extract 63 32) ?x269)))
 (let (($x222 (= (_ bv0 32) ?x130)))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x126 (and (and (and true $x59) $x222) $x67)))
 (let (($x153 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x15 (and $x153 $x126)))
 (let (($x154 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (=> $x154 $x15)))
 (let (($x225 (= $x160 true)))
 (let (($x248 (= $x154 true)))
 (let (($x17 (and $x248 $x225)))
 (let (($x181 (and $x17 $x76)))
 (let (($x156 (and $x181 $x155)))
 (let (($x133 (and $x156 $x243)))
 (let (($x198 (and $x133 $x36)))
 (let (($x34 (and $x198 $x23)))
 (let (($x233 (and $x34 $x166)))
 (let (($x299 (and $x233 $x21)))
 (let (($x178 (and $x299 $x29)))
 (let (($x33 (and $x178 $x112)))
 (let (($x7 (and $x33 $x104)))
 (let (($x177 (and $x7 $x228)))
 (let (($x220 (and $x177 $x66)))
 (let (($x101 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (and (not $x101) $x220)))
 (let (($x189 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x189 $x128)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x214 (and $x115 $x132)))
 (let (($x218 (forall ((input.ind-%var1803X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1803X)))
 (=> $x289 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1803X) (_ bv0 32)))))
 ))
 (let (($x134 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1802X)))
 (= $x289 false)))
 ))
 (let (($x251 (and $x134 $x218)))
 (let (($x182 (and $x251 $x214)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x174 (and $x108 $x182)))
 (let (($x64 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x255 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x64)))))
 (let (($x247 (=> (and $x154 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x64)))))
 (let (($x221 (and $x247 $x174)))
 (let (($x106 (=> $x221 $x288)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x267 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x196 (bvule ?x267 (_ bv399 32))))
 (let (($x288 (= $x196 true)))
 (let ((?x60 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x60)))
 (let (($x170 (= ?x127 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x170 true)))
 (let (($x195 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x228 (= $x195 true)))
 (let (($x235 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x104 (= $x235 true)))
 (let (($x210 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x210 true)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x239)))
 (let ((?x276 (bvand symbol.1 (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x276)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let ((?x11 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x236 (= input.memlabel-mem--symbol.1_end ?x11)))
 (let (($x224 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x146 (and $x224 $x236)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x22 $x146)))
 (let (($x280 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x38 (and $x162 $x72)))
 (let (($x82 (not $x38)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x277 (and $x258 $x284)))
 (let (($x268 (and (not $x277) $x82)))
 (let (($x123 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (and $x250 $x123)))
 (let (($x99 (not $x274)))
 (let (($x187 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x111 $x187)))
 (let (($x19 (and (not $x88) $x99)))
 (let (($x180 (and (and (and (and (and (and $x19 $x268) $x168) $x280) $x212) $x87) $x295)))
 (let (($x158 (and $x180 $x48)))
 (let (($x253 (= symbol.1 dst_symbol_addr.1)))
 (let (($x50 (and $x253 $x158)))
 (let (($x282 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x285 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x285)))
 (let (($x244 (or (bvugt input.memlabel-mem--symbol.1_begin ?x285) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x244) (or $x14 $x282)))))))
 (let (($x8 (and $x80 $x50)))
 (let (($x29 (= $x8 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x21 (= $x256 true)))
 (let (($x78 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (= $x78 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x23 (= $x20 true)))
 (let (($x201 (forall ((input.ind-%var1793X (_ BitVec 32)) )(let ((?x131 (bvadd symbol.1 (bvmul input.ind-%var1793X (_ bv4 32)))))
 (let ((?x105 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x131))))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv2 32))) ?x105)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x131 (_ bv3 32))) ?x122)))
 (let ((?x179 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1793X)))
 (let (($x116 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1793X)))
 (=> $x116 (= ?x179 ?x204)))))))))
 ))
 (let (($x65 (forall ((input.ind-%var1792X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var1792X) (bvult input.ind-%var1792X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x116 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1792X)))
 (= $x116 $x292))))
 ))
 (let (($x263 (and $x65 $x201)))
 (let (($x36 (= $x263 true)))
 (let ((?x161 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x161)))
 (let (($x301 (= ?x147 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x243 (= $x301 true)))
 (let (($x10 (= ?x147 input.dst.llvm-%n)))
 (let (($x155 (= $x10 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x76 (= $x114 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x81 (bvsub ?x98 ?x13)))
 (let (($x67 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x81) (bvult ?x98 ?x81))))
 (let ((?x254 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x269 (bvmul (_ bv4 64) ?x254)))
 (let ((?x130 ((_ extract 63 32) ?x269)))
 (let (($x222 (= (_ bv0 32) ?x130)))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x126 (and (and (and true $x59) $x222) $x67)))
 (let (($x153 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x15 (and $x153 $x126)))
 (let (($x154 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (=> $x154 $x15)))
 (let (($x225 (= $x160 true)))
 (let (($x248 (= $x154 true)))
 (let (($x17 (and $x248 $x225)))
 (let (($x181 (and $x17 $x76)))
 (let (($x156 (and $x181 $x155)))
 (let (($x133 (and $x156 $x243)))
 (let (($x198 (and $x133 $x36)))
 (let (($x34 (and $x198 $x23)))
 (let (($x233 (and $x34 $x166)))
 (let (($x299 (and $x233 $x21)))
 (let (($x178 (and $x299 $x29)))
 (let (($x33 (and $x178 $x112)))
 (let (($x7 (and $x33 $x104)))
 (let (($x177 (and $x7 $x228)))
 (let (($x220 (and $x177 $x66)))
 (let (($x101 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (and (not $x101) $x220)))
 (let (($x189 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x189 $x128)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x214 (and $x115 $x132)))
 (let (($x218 (forall ((input.ind-%var1803X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1803X)))
 (=> $x289 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1803X) (_ bv0 32)))))
 ))
 (let (($x134 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1802X)))
 (= $x289 false)))
 ))
 (let (($x251 (and $x134 $x218)))
 (let (($x182 (and $x251 $x214)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x174 (and $x108 $x182)))
 (let (($x64 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x255 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x64)))))
 (let (($x247 (=> (and $x154 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x64)))))
 (let (($x221 (and $x247 $x174)))
 (let (($x106 (=> $x221 $x288)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x304 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x305 (bvsle ?x304 (_ bv399 32))))
 (let (($x259 (= $x305 true)))
 (let ((?x183 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x242 (bvneg ?x183)))
 (let (($x61 (= ?x242 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x61 true)))
 (let (($x57 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x73 (= $x57 true)))
 (let (($x188 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x44 (= $x188 true)))
 (let (($x40 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x120 (= $x40 true)))
 (let ((?x252 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x252)))
 (let ((?x288 (bvand symbol.1 (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x288)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x267)))
 (let ((?x214 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x182 (= input.memlabel-mem--symbol.1_end ?x214)))
 (let (($x132 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x174 (and $x132 $x182)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x128 $x174)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x228 (and $x7 $x195)))
 (let (($x177 (not $x228)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (and $x33 $x235)))
 (let (($x127 (and (not $x104) $x177)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x50 $x8)))
 (let (($x178 (not $x29)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x239 $x48)))
 (let (($x112 (and (not $x158) $x178)))
 (let (($x303 (and (and (and (and (and (and $x112 $x127) $x170) $x220) $x221) $x196) $x106)))
 (let (($x18 (and $x303 $x211)))
 (let (($x168 (= symbol.1 dst_symbol_addr.1)))
 (let (($x56 (and $x168 $x18)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x280 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x280)))
 (let (($x224 (or (bvugt input.memlabel-mem--symbol.1_begin ?x280) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x224) (or $x212 $x25)))))))
 (let (($x62 (and $x180 $x56)))
 (let (($x69 (= $x62 true)))
 (let (($x72 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x38 (= $x72 true)))
 (let (($x277 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x277 true)))
 (let (($x19 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x258 (= $x19 true)))
 (let (($x250 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let ((?x209 (bvadd symbol.1 (bvmul input.ind-%var1813X (_ bv4 32)))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x209))))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv2 32))) ?x43)))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv3 32))) ?x150)))
 (let ((?x198 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1813X)))
 (let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1813X)))
 (=> $x35 (= ?x198 ?x187)))))))))
 ))
 (let (($x46 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x204 (and (bvule (_ bv0 32) input.ind-%var1812X) (bvult input.ind-%var1812X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1812X)))
 (= $x35 $x204))))
 ))
 (let (($x123 (and $x46 $x250)))
 (let (($x274 (= $x123 true)))
 (let ((?x270 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x292 (bvneg ?x270)))
 (let (($x175 (= ?x292 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x279 (= $x175 true)))
 (let (($x28 (= ?x292 input.dst.llvm-%n)))
 (let (($x65 (= $x28 true)))
 (let (($x243 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x133 (= $x243 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x225 (bvsub ?x98 ?x13)))
 (let (($x76 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x225) (bvult ?x98 ?x225))))
 (let ((?x67 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x126 (bvmul (_ bv4 64) ?x67)))
 (let ((?x15 ((_ extract 63 32) ?x126)))
 (let (($x160 (= (_ bv0 32) ?x15)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x161 (and (and (and true $x157) $x160) $x76)))
 (let (($x130 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x147 (and $x130 $x161)))
 (let (($x152 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x10 (=> $x152 $x147)))
 (let (($x155 (= $x10 true)))
 (let (($x291 (= $x152 true)))
 (let (($x156 (and $x291 $x155)))
 (let (($x116 (and $x156 $x133)))
 (let (($x179 (and $x116 $x65)))
 (let (($x131 (and $x179 $x279)))
 (let (($x99 (and $x131 $x274)))
 (let (($x284 (and $x99 $x258)))
 (let (($x162 (and $x284 $x286)))
 (let (($x82 (and $x162 $x38)))
 (let (($x257 (and $x82 $x69)))
 (let (($x266 (and $x257 $x120)))
 (let (($x52 (and $x266 $x44)))
 (let (($x207 (and $x52 $x73)))
 (let (($x223 (and $x207 $x246)))
 (let (($x302 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and (not $x302) $x223)))
 (let (($x294 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x193 (and $x294 $x32)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x71 $x193)))
 (let (($x185 (forall ((input.ind-%var1823X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1823X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1823X) (_ bv0 32)))))
 ))
 (let (($x218 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1822X)))
 (= $x167 false)))
 ))
 (let (($x176 (and $x218 $x185)))
 (let (($x143 (and $x176 $x70)))
 (let (($x245 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x265 (and $x245 $x143)))
 (let (($x49 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x108 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x49)))))
 (let (($x145 (=> (and $x152 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x49)))))
 (let (($x47 (and $x145 $x265)))
 (let (($x84 (=> $x47 $x259)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x304 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x305 (bvsle ?x304 (_ bv399 32))))
 (let (($x259 (= $x305 true)))
 (let ((?x183 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x242 (bvneg ?x183)))
 (let (($x61 (= ?x242 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x61 true)))
 (let (($x57 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x73 (= $x57 true)))
 (let (($x188 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x44 (= $x188 true)))
 (let (($x40 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x120 (= $x40 true)))
 (let ((?x252 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x252)))
 (let ((?x288 (bvand symbol.1 (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x288)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x267)))
 (let ((?x214 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x182 (= input.memlabel-mem--symbol.1_end ?x214)))
 (let (($x132 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x174 (and $x132 $x182)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (and $x128 $x174)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x228 (and $x7 $x195)))
 (let (($x177 (not $x228)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (and $x33 $x235)))
 (let (($x127 (and (not $x104) $x177)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x50 $x8)))
 (let (($x178 (not $x29)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x239 $x48)))
 (let (($x112 (and (not $x158) $x178)))
 (let (($x303 (and (and (and (and (and (and $x112 $x127) $x170) $x220) $x221) $x196) $x106)))
 (let (($x18 (and $x303 $x211)))
 (let (($x168 (= symbol.1 dst_symbol_addr.1)))
 (let (($x56 (and $x168 $x18)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x280 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x280)))
 (let (($x224 (or (bvugt input.memlabel-mem--symbol.1_begin ?x280) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x224) (or $x212 $x25)))))))
 (let (($x62 (and $x180 $x56)))
 (let (($x69 (= $x62 true)))
 (let (($x72 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x38 (= $x72 true)))
 (let (($x277 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (= $x277 true)))
 (let (($x19 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x258 (= $x19 true)))
 (let (($x250 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let ((?x209 (bvadd symbol.1 (bvmul input.ind-%var1813X (_ bv4 32)))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x209))))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv2 32))) ?x43)))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x209 (_ bv3 32))) ?x150)))
 (let ((?x198 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1813X)))
 (let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1813X)))
 (=> $x35 (= ?x198 ?x187)))))))))
 ))
 (let (($x46 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x204 (and (bvule (_ bv0 32) input.ind-%var1812X) (bvult input.ind-%var1812X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x35 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1812X)))
 (= $x35 $x204))))
 ))
 (let (($x123 (and $x46 $x250)))
 (let (($x274 (= $x123 true)))
 (let ((?x270 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x292 (bvneg ?x270)))
 (let (($x175 (= ?x292 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x279 (= $x175 true)))
 (let (($x28 (= ?x292 input.dst.llvm-%n)))
 (let (($x65 (= $x28 true)))
 (let (($x243 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x133 (= $x243 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x225 (bvsub ?x98 ?x13)))
 (let (($x76 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x225) (bvult ?x98 ?x225))))
 (let ((?x67 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x126 (bvmul (_ bv4 64) ?x67)))
 (let ((?x15 ((_ extract 63 32) ?x126)))
 (let (($x160 (= (_ bv0 32) ?x15)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x161 (and (and (and true $x157) $x160) $x76)))
 (let (($x130 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x147 (and $x130 $x161)))
 (let (($x152 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x10 (=> $x152 $x147)))
 (let (($x155 (= $x10 true)))
 (let (($x291 (= $x152 true)))
 (let (($x156 (and $x291 $x155)))
 (let (($x116 (and $x156 $x133)))
 (let (($x179 (and $x116 $x65)))
 (let (($x131 (and $x179 $x279)))
 (let (($x99 (and $x131 $x274)))
 (let (($x284 (and $x99 $x258)))
 (let (($x162 (and $x284 $x286)))
 (let (($x82 (and $x162 $x38)))
 (let (($x257 (and $x82 $x69)))
 (let (($x266 (and $x257 $x120)))
 (let (($x52 (and $x266 $x44)))
 (let (($x207 (and $x52 $x73)))
 (let (($x223 (and $x207 $x246)))
 (let (($x302 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and (not $x302) $x223)))
 (let (($x294 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x193 (and $x294 $x32)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x70 (and $x71 $x193)))
 (let (($x185 (forall ((input.ind-%var1823X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1823X)))
 (=> $x167 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1823X) (_ bv0 32)))))
 ))
 (let (($x218 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let (($x167 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1822X)))
 (= $x167 false)))
 ))
 (let (($x176 (and $x218 $x185)))
 (let (($x143 (and $x176 $x70)))
 (let (($x245 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x265 (and $x245 $x143)))
 (let (($x49 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x108 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x49)))))
 (let (($x145 (=> (and $x152 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x49)))))
 (let (($x47 (and $x145 $x265)))
 (let (($x84 (=> $x47 $x259)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (bvsle ?x263 (_ bv399 32))))
 (let (($x94 (= $x142 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x216 (bvneg ?x241)))
 (let (($x256 (= ?x216 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x256 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x232 (= $x166 true)))
 (let (($x237 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x151 (= $x237 true)))
 (let (($x45 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (= $x45 true)))
 (let (($x115 (forall ((input.ind-%var1833X (_ BitVec 32)) )(let ((?x304 (bvadd symbol.1 (bvmul input.ind-%var1833X (_ bv4 32)))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x304))))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv2 32))) ?x249)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv3 32))) ?x268)))
 (let ((?x40 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1833X)))
 (let (($x219 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1833X)))
 (=> $x219 (= ?x40 ?x92)))))))))
 ))
 (let (($x56 (forall ((input.ind-%var1832X (_ BitVec 32)) )(let (($x211 (and (bvule (_ bv0 32) input.ind-%var1832X) (bvult input.ind-%var1832X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x219 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1832X)))
 (= $x219 $x211))))
 ))
 (let (($x289 (and $x56 $x115)))
 (let (($x37 (= $x289 true)))
 (let (($x132 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x214 (= $x132 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x7 (bvsub ?x98 ?x13)))
 (let (($x127 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x7) (bvult ?x98 ?x7))))
 (let ((?x33 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x235 (bvmul (_ bv4 64) ?x33)))
 (let ((?x104 ((_ extract 63 32) ?x235)))
 (let (($x60 (= (_ bv0 32) ?x104)))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x93 (and (and (and true $x178) $x60) $x127)))
 (let (($x158 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x66 (and $x158 $x93)))
 (let (($x5 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (=> $x5 $x66)))
 (let (($x12 (= $x220 true)))
 (let (($x261 (= $x5 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x159)))
 (let ((?x295 (bvand symbol.1 (_ bv3 32))))
 (let (($x280 (= (_ bv0 32) ?x295)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x162 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x72 (= input.memlabel-mem--symbol.1_end ?x162)))
 (let (($x286 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x38 (and $x286 $x72)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x277 $x38)))
 (let (($x284 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x250 (and $x88 $x264)))
 (let (($x123 (not $x250)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x187 (and $x43 $x150)))
 (let (($x99 (and (not $x187) $x123)))
 (let (($x200 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x164 $x200)))
 (let (($x203 (not $x80)))
 (let (($x253 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x209 $x253)))
 (let (($x282 (and (not $x111) $x203)))
 (let (($x25 (and (and (and (and (and (and $x282 $x99) $x19) $x284) $x82) $x41) $x280)))
 (let (($x202 (and $x25 $x22)))
 (let (($x298 (= symbol.1 dst_symbol_addr.1)))
 (let (($x87 (and $x298 $x202)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x28) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x122 $x105)))))))
 (let (($x137 (and $x14 $x87)))
 (let (($x276 (= $x137 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x301 (= $x156 true)))
 (let ((?x225 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x225)))
 (let (($x147 (= ?x91 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x147 true)))
 (let (($x114 (= ?x91 input.dst.llvm-%n)))
 (let (($x76 (= $x114 true)))
 (let (($x15 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x160 (= $x15 true)))
 (let (($x67 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x126 (= $x67 true)))
 (let (($x206 (and $x126 $x160)))
 (let (($x161 (and $x206 $x76)))
 (let (($x155 (and $x161 $x10)))
 (let (($x243 (and $x155 $x301)))
 (let (($x180 (and $x243 $x276)))
 (let (($x168 (and $x180 $x261)))
 (let (($x128 (and $x168 $x12)))
 (let (($x182 (and $x128 $x214)))
 (let (($x281 (and $x182 $x37)))
 (let (($x42 (and $x281 $x36)))
 (let (($x78 (and $x42 $x151)))
 (let (($x190 (and $x78 $x232)))
 (let (($x233 (and $x190 $x21)))
 (let (($x181 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x285 (and (not $x181) $x233)))
 (let (($x81 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and $x81 $x285)))
 (let (($x293 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x163 (and $x293 $x244)))
 (let (($x254 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1843X)))
 (=> $x149 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1843X) (_ bv0 32)))))
 ))
 (let (($x185 (forall ((input.ind-%var1842X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1842X)))
 (= $x149 false)))
 ))
 (let (($x269 (and $x185 $x254)))
 (let (($x273 (and $x269 $x163)))
 (let (($x134 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x134 $x273)))
 (let (($x247 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x245 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x247)))))
 (let (($x16 (=> (and $x5 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x247)))))
 (let (($x119 (and $x16 $x113)))
 (let (($x101 (=> $x119 $x94)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x263 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (bvsle ?x263 (_ bv399 32))))
 (let (($x94 (= $x142 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x216 (bvneg ?x241)))
 (let (($x256 (= ?x216 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x256 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x232 (= $x166 true)))
 (let (($x237 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x151 (= $x237 true)))
 (let (($x45 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (= $x45 true)))
 (let (($x115 (forall ((input.ind-%var1833X (_ BitVec 32)) )(let ((?x304 (bvadd symbol.1 (bvmul input.ind-%var1833X (_ bv4 32)))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x304))))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv2 32))) ?x249)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x304 (_ bv3 32))) ?x268)))
 (let ((?x40 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1833X)))
 (let (($x219 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1833X)))
 (=> $x219 (= ?x40 ?x92)))))))))
 ))
 (let (($x56 (forall ((input.ind-%var1832X (_ BitVec 32)) )(let (($x211 (and (bvule (_ bv0 32) input.ind-%var1832X) (bvult input.ind-%var1832X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x219 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1832X)))
 (= $x219 $x211))))
 ))
 (let (($x289 (and $x56 $x115)))
 (let (($x37 (= $x289 true)))
 (let (($x132 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x214 (= $x132 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x7 (bvsub ?x98 ?x13)))
 (let (($x127 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x7) (bvult ?x98 ?x7))))
 (let ((?x33 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x235 (bvmul (_ bv4 64) ?x33)))
 (let ((?x104 ((_ extract 63 32) ?x235)))
 (let (($x60 (= (_ bv0 32) ?x104)))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x93 (and (and (and true $x178) $x60) $x127)))
 (let (($x158 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x66 (and $x158 $x93)))
 (let (($x5 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (=> $x5 $x66)))
 (let (($x12 (= $x220 true)))
 (let (($x261 (= $x5 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x159)))
 (let ((?x295 (bvand symbol.1 (_ bv3 32))))
 (let (($x280 (= (_ bv0 32) ?x295)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x162 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x72 (= input.memlabel-mem--symbol.1_end ?x162)))
 (let (($x286 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x38 (and $x286 $x72)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x277 $x38)))
 (let (($x284 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x250 (and $x88 $x264)))
 (let (($x123 (not $x250)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x187 (and $x43 $x150)))
 (let (($x99 (and (not $x187) $x123)))
 (let (($x200 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x164 $x200)))
 (let (($x203 (not $x80)))
 (let (($x253 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x209 $x253)))
 (let (($x282 (and (not $x111) $x203)))
 (let (($x25 (and (and (and (and (and (and $x282 $x99) $x19) $x284) $x82) $x41) $x280)))
 (let (($x202 (and $x25 $x22)))
 (let (($x298 (= symbol.1 dst_symbol_addr.1)))
 (let (($x87 (and $x298 $x202)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x28) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x122 $x105)))))))
 (let (($x137 (and $x14 $x87)))
 (let (($x276 (= $x137 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x301 (= $x156 true)))
 (let ((?x225 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x225)))
 (let (($x147 (= ?x91 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (= $x147 true)))
 (let (($x114 (= ?x91 input.dst.llvm-%n)))
 (let (($x76 (= $x114 true)))
 (let (($x15 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x160 (= $x15 true)))
 (let (($x67 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x126 (= $x67 true)))
 (let (($x206 (and $x126 $x160)))
 (let (($x161 (and $x206 $x76)))
 (let (($x155 (and $x161 $x10)))
 (let (($x243 (and $x155 $x301)))
 (let (($x180 (and $x243 $x276)))
 (let (($x168 (and $x180 $x261)))
 (let (($x128 (and $x168 $x12)))
 (let (($x182 (and $x128 $x214)))
 (let (($x281 (and $x182 $x37)))
 (let (($x42 (and $x281 $x36)))
 (let (($x78 (and $x42 $x151)))
 (let (($x190 (and $x78 $x232)))
 (let (($x233 (and $x190 $x21)))
 (let (($x181 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x285 (and (not $x181) $x233)))
 (let (($x81 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and $x81 $x285)))
 (let (($x293 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x163 (and $x293 $x244)))
 (let (($x254 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1843X)))
 (=> $x149 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1843X) (_ bv0 32)))))
 ))
 (let (($x185 (forall ((input.ind-%var1842X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1842X)))
 (= $x149 false)))
 ))
 (let (($x269 (and $x185 $x254)))
 (let (($x273 (and $x269 $x163)))
 (let (($x134 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x134 $x273)))
 (let (($x247 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x245 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x247)))))
 (let (($x16 (=> (and $x5 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x247)))))
 (let (($x119 (and $x16 $x113)))
 (let (($x101 (=> $x119 $x94)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x265 (bvsge ?x69 (_ bv0 32))))
 (let (($x153 (= $x265 true)))
 (let ((?x61 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x61)))
 (let (($x73 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x73 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x52 true)))
 (let (($x196 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x290 (= $x196 true)))
 (let (($x59 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x257 (= $x59 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x226)))
 (let ((?x94 (bvand symbol.1 (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x94)))
 (let ((?x263 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x263)))
 (let ((?x163 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x273 (= input.memlabel-mem--symbol.1_end ?x163)))
 (let (($x244 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x244 $x273)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x285 $x113)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x232 (and $x78 $x166)))
 (let (($x190 (not $x232)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x151 (and $x42 $x237)))
 (let (($x216 (and (not $x151) $x190)))
 (let (($x289 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x115 $x289)))
 (let (($x281 (not $x37)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x92 $x107)))
 (let (($x36 (and (not $x251) $x281)))
 (let (($x39 (and (and (and (and (and (and $x36 $x216) $x256) $x233) $x119) $x142) $x101)))
 (let (($x176 (and $x39 $x124)))
 (let (($x303 (= symbol.1 dst_symbol_addr.1)))
 (let (($x71 (and $x303 $x176)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x47 (or (bvugt input.memlabel-mem--symbol.1_begin ?x56) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x268 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x47) (or $x242 $x97)))))))
 (let (($x167 (and $x268 $x71)))
 (let (($x139 (= $x167 true)))
 (let (($x132 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x214 (= $x132 true)))
 (let (($x220 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x12 (= $x220 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x127 true)))
 (let (($x195 (forall ((input.ind-%var1853X (_ BitVec 32)) )(let ((?x158 (bvadd symbol.1 (bvmul input.ind-%var1853X (_ bv4 32)))))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x158))))
 (let ((?x112 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv2 32))) ?x29)))
 (let ((?x104 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv3 32))) ?x112)))
 (let ((?x38 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1853X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1853X)))
 (=> $x264 (= ?x38 ?x104)))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1852X (_ BitVec 32)) )(let (($x284 (and (bvule (_ bv0 32) input.ind-%var1852X) (bvult input.ind-%var1852X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1852X)))
 (= $x264 $x284))))
 ))
 (let (($x7 (and $x277 $x195)))
 (let (($x228 (= $x7 true)))
 (let ((?x164 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x164)))
 (let (($x43 (= ?x200 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (= $x43 true)))
 (let (($x80 (= ?x200 input.dst.llvm-%n)))
 (let (($x203 (= $x80 true)))
 (let (($x209 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x253 (= $x209 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x175 (bvsub ?x98 ?x13)))
 (let (($x35 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x175) (bvult ?x98 ?x175))))
 (let ((?x23 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x28 (bvmul (_ bv4 64) ?x23)))
 (let ((?x65 ((_ extract 63 32) ?x28)))
 (let (($x179 (= (_ bv0 32) ?x65)))
 (let (($x270 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x9 (and (and (and true $x270) $x179) $x35)))
 (let (($x10 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x46 (and $x10 $x9)))
 (let (($x194 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (=> $x194 $x46)))
 (let (($x14 (= $x198 true)))
 (let (($x76 (= $x194 true)))
 (let (($x116 (and $x76 $x14)))
 (let (($x111 (and $x116 $x253)))
 (let (($x282 (and $x111 $x203)))
 (let (($x187 (and $x282 $x150)))
 (let (($x177 (and $x187 $x228)))
 (let (($x66 (and $x177 $x93)))
 (let (($x128 (and $x66 $x12)))
 (let (($x182 (and $x128 $x214)))
 (let (($x148 (and $x182 $x139)))
 (let (($x174 (and $x148 $x257)))
 (let (($x44 (and $x174 $x290)))
 (let (($x193 (and $x44 $x32)))
 (let (($x57 (and $x193 $x207)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x223 (and (not $x114) $x57)))
 (let (($x225 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and $x225 $x223)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x221 (and $x160 $x70)))
 (let (($x67 (forall ((input.ind-%var1863X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1863X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1863X) (_ bv0 32)))))
 ))
 (let (($x254 (forall ((input.ind-%var1862X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1862X)))
 (= $x121 false)))
 ))
 (let (($x126 (and $x254 $x67)))
 (let (($x288 (and $x126 $x221)))
 (let (($x218 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x106 (and $x218 $x288)))
 (let (($x145 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x134 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x145)))))
 (let (($x172 (=> (and $x194 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x145)))))
 (let (($x143 (and $x172 $x106)))
 (let (($x302 (=> $x143 $x153)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x265 (bvsge ?x69 (_ bv0 32))))
 (let (($x153 (= $x265 true)))
 (let ((?x61 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x61)))
 (let (($x73 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x207 (= $x73 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x52 true)))
 (let (($x196 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x290 (= $x196 true)))
 (let (($x59 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x257 (= $x59 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x226)))
 (let ((?x94 (bvand symbol.1 (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x94)))
 (let ((?x263 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x263)))
 (let ((?x163 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x273 (= input.memlabel-mem--symbol.1_end ?x163)))
 (let (($x244 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x244 $x273)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x285 $x113)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x232 (and $x78 $x166)))
 (let (($x190 (not $x232)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x151 (and $x42 $x237)))
 (let (($x216 (and (not $x151) $x190)))
 (let (($x289 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x115 $x289)))
 (let (($x281 (not $x37)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x92 $x107)))
 (let (($x36 (and (not $x251) $x281)))
 (let (($x39 (and (and (and (and (and (and $x36 $x216) $x256) $x233) $x119) $x142) $x101)))
 (let (($x176 (and $x39 $x124)))
 (let (($x303 (= symbol.1 dst_symbol_addr.1)))
 (let (($x71 (and $x303 $x176)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x47 (or (bvugt input.memlabel-mem--symbol.1_begin ?x56) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x268 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x47) (or $x242 $x97)))))))
 (let (($x167 (and $x268 $x71)))
 (let (($x139 (= $x167 true)))
 (let (($x132 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x214 (= $x132 true)))
 (let (($x220 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x12 (= $x220 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x127 true)))
 (let (($x195 (forall ((input.ind-%var1853X (_ BitVec 32)) )(let ((?x158 (bvadd symbol.1 (bvmul input.ind-%var1853X (_ bv4 32)))))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x158))))
 (let ((?x112 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv2 32))) ?x29)))
 (let ((?x104 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x158 (_ bv3 32))) ?x112)))
 (let ((?x38 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1853X)))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1853X)))
 (=> $x264 (= ?x38 ?x104)))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1852X (_ BitVec 32)) )(let (($x284 (and (bvule (_ bv0 32) input.ind-%var1852X) (bvult input.ind-%var1852X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x264 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1852X)))
 (= $x264 $x284))))
 ))
 (let (($x7 (and $x277 $x195)))
 (let (($x228 (= $x7 true)))
 (let ((?x164 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x164)))
 (let (($x43 (= ?x200 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (= $x43 true)))
 (let (($x80 (= ?x200 input.dst.llvm-%n)))
 (let (($x203 (= $x80 true)))
 (let (($x209 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x253 (= $x209 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x175 (bvsub ?x98 ?x13)))
 (let (($x35 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x175) (bvult ?x98 ?x175))))
 (let ((?x23 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x28 (bvmul (_ bv4 64) ?x23)))
 (let ((?x65 ((_ extract 63 32) ?x28)))
 (let (($x179 (= (_ bv0 32) ?x65)))
 (let (($x270 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x9 (and (and (and true $x270) $x179) $x35)))
 (let (($x10 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x46 (and $x10 $x9)))
 (let (($x194 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (=> $x194 $x46)))
 (let (($x14 (= $x198 true)))
 (let (($x76 (= $x194 true)))
 (let (($x116 (and $x76 $x14)))
 (let (($x111 (and $x116 $x253)))
 (let (($x282 (and $x111 $x203)))
 (let (($x187 (and $x282 $x150)))
 (let (($x177 (and $x187 $x228)))
 (let (($x66 (and $x177 $x93)))
 (let (($x128 (and $x66 $x12)))
 (let (($x182 (and $x128 $x214)))
 (let (($x148 (and $x182 $x139)))
 (let (($x174 (and $x148 $x257)))
 (let (($x44 (and $x174 $x290)))
 (let (($x193 (and $x44 $x32)))
 (let (($x57 (and $x193 $x207)))
 (let (($x114 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x223 (and (not $x114) $x57)))
 (let (($x225 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (and $x225 $x223)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x221 (and $x160 $x70)))
 (let (($x67 (forall ((input.ind-%var1863X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1863X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1863X) (_ bv0 32)))))
 ))
 (let (($x254 (forall ((input.ind-%var1862X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1862X)))
 (= $x121 false)))
 ))
 (let (($x126 (and $x254 $x67)))
 (let (($x288 (and $x126 $x221)))
 (let (($x218 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x106 (and $x218 $x288)))
 (let (($x145 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x134 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x145)))))
 (let (($x172 (=> (and $x194 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x145)))))
 (let (($x143 (and $x172 $x106)))
 (let (($x302 (=> $x143 $x153)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x239 (bvule ?x162 (_ bv399 32))))
 (let (($x130 (= $x239 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x202)))
 (let (($x280 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x25 (= $x280 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x276 (= $x146 true)))
 (let (($x123 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x99 (= $x123 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x157 true)))
 (let (($x293 (forall ((input.ind-%var1873X (_ BitVec 32)) )(let ((?x69 (bvadd symbol.1 (bvmul input.ind-%var1873X (_ bv4 32)))))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x69))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv2 32))) ?x201)))
 (let ((?x294 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv3 32))) ?x219)))
 (let ((?x59 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1873X)))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1873X)))
 (=> $x120 (= ?x59 ?x294)))))))))
 ))
 (let (($x71 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x124 (and (bvule (_ bv0 32) input.ind-%var1872X) (bvult input.ind-%var1872X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1872X)))
 (= $x120 $x124))))
 ))
 (let (($x149 (and $x71 $x293)))
 (let (($x248 (= $x149 true)))
 (let (($x244 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x244 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x78 (bvsub ?x98 ?x13)))
 (let (($x216 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x78) (bvult ?x98 ?x78))))
 (let ((?x42 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x42)))
 (let ((?x151 ((_ extract 63 32) ?x237)))
 (let (($x241 (= (_ bv0 32) ?x151)))
 (let (($x281 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x133 (and (and (and true $x281) $x241) $x216)))
 (let (($x251 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x21 (and $x251 $x133)))
 (let (($x154 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (=> $x154 $x21)))
 (let (($x267 (= $x233 true)))
 (let (($x252 (= $x154 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x266 (= (_ bv0 32) ?x40)))
 (let ((?x249 (bvand symbol.1 (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x249)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x132 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x214 (and $x12 $x132)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x220 $x214)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x195 (and $x60 $x170)))
 (let (($x7 (not $x195)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (and $x29 $x112)))
 (let (($x177 (and (not $x104) $x7)))
 (let (($x178 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x22 $x178)))
 (let (($x210 (not $x75)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x158 $x33)))
 (let (($x50 (and (not $x235) $x210)))
 (let (($x97 (and (and (and (and (and (and $x50 $x177) $x127) $x66) $x182) $x18) $x56)))
 (let (($x96 (and $x97 $x266)))
 (let (($x27 (= symbol.1 dst_symbol_addr.1)))
 (let (($x259 (and $x27 $x96)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x80 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x258 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x43 (or (bvugt input.memlabel-mem--symbol.1_begin ?x80) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x43) (or $x258 $x11)))))))
 (let (($x84 (and $x48 $x259)))
 (let (($x305 (= $x84 true)))
 (let (($x116 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x298 (= $x116 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x175)))
 (let (($x46 (= ?x131 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x198 (= $x46 true)))
 (let (($x122 (= ?x131 input.dst.llvm-%n)))
 (let (($x35 (= $x122 true)))
 (let (($x65 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x179 (= $x65 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x28 (= $x23 true)))
 (let (($x204 (and $x28 $x179)))
 (let (($x9 (and $x204 $x35)))
 (let (($x14 (and $x9 $x198)))
 (let (($x209 (and $x14 $x298)))
 (let (($x268 (and $x209 $x305)))
 (let (($x303 (and $x268 $x252)))
 (let (($x285 (and $x303 $x267)))
 (let (($x273 (and $x285 $x163)))
 (let (($x136 (and $x273 $x248)))
 (let (($x274 (and $x136 $x72)))
 (let (($x41 (and $x274 $x99)))
 (let (($x180 (and $x41 $x276)))
 (let (($x295 (and $x180 $x25)))
 (let (($x105 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x137 (and (not $x105) $x295)))
 (let (($x243 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x261 (and $x243 $x137)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x88 (and $x156 $x261)))
 (let (($x161 (forall ((input.ind-%var1883X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1883X)))
 (=> $x222 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1883X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var1882X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1882X)))
 (= $x222 false)))
 ))
 (let (($x147 (and $x67 $x161)))
 (let (($x224 (and $x147 $x88)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x19 (and $x185 $x224)))
 (let (($x16 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x218 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x16)))))
 (let (($x83 (=> (and $x154 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x16)))))
 (let (($x168 (and $x83 $x19)))
 (let (($x181 (=> $x168 $x130)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x239 (bvule ?x162 (_ bv399 32))))
 (let (($x130 (= $x239 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x202)))
 (let (($x280 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x25 (= $x280 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x276 (= $x146 true)))
 (let (($x123 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x99 (= $x123 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x157 true)))
 (let (($x293 (forall ((input.ind-%var1873X (_ BitVec 32)) )(let ((?x69 (bvadd symbol.1 (bvmul input.ind-%var1873X (_ bv4 32)))))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x69))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv2 32))) ?x201)))
 (let ((?x294 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv3 32))) ?x219)))
 (let ((?x59 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1873X)))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1873X)))
 (=> $x120 (= ?x59 ?x294)))))))))
 ))
 (let (($x71 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x124 (and (bvule (_ bv0 32) input.ind-%var1872X) (bvult input.ind-%var1872X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x120 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1872X)))
 (= $x120 $x124))))
 ))
 (let (($x149 (and $x71 $x293)))
 (let (($x248 (= $x149 true)))
 (let (($x244 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x244 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x78 (bvsub ?x98 ?x13)))
 (let (($x216 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x78) (bvult ?x98 ?x78))))
 (let ((?x42 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x42)))
 (let ((?x151 ((_ extract 63 32) ?x237)))
 (let (($x241 (= (_ bv0 32) ?x151)))
 (let (($x281 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x133 (and (and (and true $x281) $x241) $x216)))
 (let (($x251 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x21 (and $x251 $x133)))
 (let (($x154 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (=> $x154 $x21)))
 (let (($x267 (= $x233 true)))
 (let (($x252 (= $x154 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x266 (= (_ bv0 32) ?x40)))
 (let ((?x249 (bvand symbol.1 (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x249)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x132 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x214 (and $x12 $x132)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x220 $x214)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x195 (and $x60 $x170)))
 (let (($x7 (not $x195)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (and $x29 $x112)))
 (let (($x177 (and (not $x104) $x7)))
 (let (($x178 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x22 $x178)))
 (let (($x210 (not $x75)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x158 $x33)))
 (let (($x50 (and (not $x235) $x210)))
 (let (($x97 (and (and (and (and (and (and $x50 $x177) $x127) $x66) $x182) $x18) $x56)))
 (let (($x96 (and $x97 $x266)))
 (let (($x27 (= symbol.1 dst_symbol_addr.1)))
 (let (($x259 (and $x27 $x96)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x80 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x258 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x43 (or (bvugt input.memlabel-mem--symbol.1_begin ?x80) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x43) (or $x258 $x11)))))))
 (let (($x84 (and $x48 $x259)))
 (let (($x305 (= $x84 true)))
 (let (($x116 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x298 (= $x116 true)))
 (let ((?x175 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x175)))
 (let (($x46 (= ?x131 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x198 (= $x46 true)))
 (let (($x122 (= ?x131 input.dst.llvm-%n)))
 (let (($x35 (= $x122 true)))
 (let (($x65 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x179 (= $x65 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x28 (= $x23 true)))
 (let (($x204 (and $x28 $x179)))
 (let (($x9 (and $x204 $x35)))
 (let (($x14 (and $x9 $x198)))
 (let (($x209 (and $x14 $x298)))
 (let (($x268 (and $x209 $x305)))
 (let (($x303 (and $x268 $x252)))
 (let (($x285 (and $x303 $x267)))
 (let (($x273 (and $x285 $x163)))
 (let (($x136 (and $x273 $x248)))
 (let (($x274 (and $x136 $x72)))
 (let (($x41 (and $x274 $x99)))
 (let (($x180 (and $x41 $x276)))
 (let (($x295 (and $x180 $x25)))
 (let (($x105 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x137 (and (not $x105) $x295)))
 (let (($x243 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x261 (and $x243 $x137)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x88 (and $x156 $x261)))
 (let (($x161 (forall ((input.ind-%var1883X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1883X)))
 (=> $x222 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1883X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var1882X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1882X)))
 (= $x222 false)))
 ))
 (let (($x147 (and $x67 $x161)))
 (let (($x224 (and $x147 $x88)))
 (let (($x185 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x19 (and $x185 $x224)))
 (let (($x16 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x218 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x16)))))
 (let (($x83 (=> (and $x154 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x16)))))
 (let (($x168 (and $x83 $x19)))
 (let (($x181 (=> $x168 $x130)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (bvsge ?x139 (_ bv0 32))))
 (let (($x15 (= $x106 true)))
 (let ((?x73 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x207 (bvneg ?x73)))
 (let (($x32 (= ?x207 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x32 true)))
 (let (($x44 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x223 (= $x44 true)))
 (let (($x142 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (= $x142 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x91 true)))
 (let (($x160 (forall ((input.ind-%var1893X (_ BitVec 32)) )(let ((?x162 (bvadd symbol.1 (bvmul input.ind-%var1893X (_ bv4 32)))))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x162))))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv2 32))) ?x62)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv3 32))) ?x253)))
 (let ((?x157 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1893X)))
 (let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1893X)))
 (=> $x34 (= ?x157 ?x81)))))))))
 ))
 (let (($x293 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let (($x191 (and (bvule (_ bv0 32) input.ind-%var1892X) (bvult input.ind-%var1892X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1892X)))
 (= $x34 $x191))))
 ))
 (let (($x121 (and $x293 $x160)))
 (let (($x291 (= $x121 true)))
 (let (($x143 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x69 (= $x143 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x285 (bvsub ?x98 ?x13)))
 (let (($x120 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x285) (bvult ?x98 ?x285))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x21 (bvmul (_ bv4 64) ?x133)))
 (let ((?x233 ((_ extract 63 32) ?x21)))
 (let (($x267 (= (_ bv0 32) ?x233)))
 (let (($x190 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x124 (and (and (and true $x190) $x267) $x120)))
 (let (($x241 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x176 (and $x241 $x124)))
 (let (($x152 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (=> $x152 $x176)))
 (let (($x59 (= $x71 true)))
 (let (($x36 (= $x152 true)))
 (let ((?x305 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x305)))
 (let ((?x259 (bvand symbol.1 (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x259)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x266)))
 (let ((?x249 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x56 (= input.memlabel-mem--symbol.1_end ?x249)))
 (let (($x20 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x97 (and $x20 $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x18 $x97)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x240 $x220)))
 (let (($x128 (not $x12)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x66 (and $x304 $x93)))
 (let (($x214 (and (not $x66) $x128)))
 (let (($x195 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x170 $x195)))
 (let (($x177 (not $x7)))
 (let (($x228 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x104 $x228)))
 (let (($x127 (and (not $x60) $x177)))
 (let (($x115 (and (and (and (and (and (and $x127 $x214) $x182) $x211) $x40) $x96) $x84)))
 (let (($x45 (and $x115 $x268)))
 (let (($x284 (= symbol.1 dst_symbol_addr.1)))
 (let (($x289 (and $x284 $x45)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x27 (or (bvugt input.memlabel-mem--symbol.1_begin ?x38) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x27) (or $x8 $x22)))))))
 (let (($x37 (and $x112 $x289)))
 (let (($x281 (= $x37 true)))
 (let (($x150 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x187 (= $x150 true)))
 (let ((?x209 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x209)))
 (let (($x203 (= ?x164 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x282 (= $x203 true)))
 (let (($x200 (= ?x164 input.dst.llvm-%n)))
 (let (($x212 (= $x200 true)))
 (let (($x198 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x198 true)))
 (let (($x9 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x46 (= $x9 true)))
 (let (($x116 (and $x46 $x14)))
 (let (($x80 (and $x116 $x212)))
 (let (($x43 (and $x80 $x282)))
 (let (($x258 (and $x43 $x187)))
 (let (($x6 (and $x258 $x281)))
 (let (($x42 (and $x6 $x36)))
 (let (($x174 (and $x42 $x59)))
 (let (($x250 (and $x174 $x69)))
 (let (($x299 (and $x250 $x291)))
 (let (($x113 (and $x299 $x148)))
 (let (($x290 (and $x113 $x189)))
 (let (($x70 (and $x290 $x223)))
 (let (($x52 (and $x70 $x193)))
 (let (($x122 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (and (not $x122) $x52)))
 (let (($x175 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and $x175 $x57)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x179 $x221)))
 (let (($x23 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1903X)))
 (=> $x206 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1903X) (_ bv0 32)))))
 ))
 (let (($x161 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1902X)))
 (= $x206 false)))
 ))
 (let (($x28 (and $x161 $x23)))
 (let (($x94 (and $x28 $x119)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x254 $x94)))
 (let (($x172 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x185 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x172)))))
 (let (($x24 (=> (and $x152 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x172)))))
 (let (($x288 (and $x24 $x101)))
 (let (($x114 (=> $x288 $x15)))
 (not $x114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (bvsge ?x139 (_ bv0 32))))
 (let (($x15 (= $x106 true)))
 (let ((?x73 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x207 (bvneg ?x73)))
 (let (($x32 (= ?x207 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x32 true)))
 (let (($x44 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x223 (= $x44 true)))
 (let (($x142 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x189 (= $x142 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x91 true)))
 (let (($x160 (forall ((input.ind-%var1893X (_ BitVec 32)) )(let ((?x162 (bvadd symbol.1 (bvmul input.ind-%var1893X (_ bv4 32)))))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x162))))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv2 32))) ?x62)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x162 (_ bv3 32))) ?x253)))
 (let ((?x157 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1893X)))
 (let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1893X)))
 (=> $x34 (= ?x157 ?x81)))))))))
 ))
 (let (($x293 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let (($x191 (and (bvule (_ bv0 32) input.ind-%var1892X) (bvult input.ind-%var1892X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x34 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1892X)))
 (= $x34 $x191))))
 ))
 (let (($x121 (and $x293 $x160)))
 (let (($x291 (= $x121 true)))
 (let (($x143 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x69 (= $x143 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x285 (bvsub ?x98 ?x13)))
 (let (($x120 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x285) (bvult ?x98 ?x285))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x21 (bvmul (_ bv4 64) ?x133)))
 (let ((?x233 ((_ extract 63 32) ?x21)))
 (let (($x267 (= (_ bv0 32) ?x233)))
 (let (($x190 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x124 (and (and (and true $x190) $x267) $x120)))
 (let (($x241 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x176 (and $x241 $x124)))
 (let (($x152 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (=> $x152 $x176)))
 (let (($x59 (= $x71 true)))
 (let (($x36 (= $x152 true)))
 (let ((?x305 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x305)))
 (let ((?x259 (bvand symbol.1 (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x259)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x266)))
 (let ((?x249 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x56 (= input.memlabel-mem--symbol.1_end ?x249)))
 (let (($x20 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x97 (and $x20 $x56)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x18 $x97)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x240 $x220)))
 (let (($x128 (not $x12)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x66 (and $x304 $x93)))
 (let (($x214 (and (not $x66) $x128)))
 (let (($x195 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x170 $x195)))
 (let (($x177 (not $x7)))
 (let (($x228 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x104 $x228)))
 (let (($x127 (and (not $x60) $x177)))
 (let (($x115 (and (and (and (and (and (and $x127 $x214) $x182) $x211) $x40) $x96) $x84)))
 (let (($x45 (and $x115 $x268)))
 (let (($x284 (= symbol.1 dst_symbol_addr.1)))
 (let (($x289 (and $x284 $x45)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x27 (or (bvugt input.memlabel-mem--symbol.1_begin ?x38) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x27) (or $x8 $x22)))))))
 (let (($x37 (and $x112 $x289)))
 (let (($x281 (= $x37 true)))
 (let (($x150 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x187 (= $x150 true)))
 (let ((?x209 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x209)))
 (let (($x203 (= ?x164 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x282 (= $x203 true)))
 (let (($x200 (= ?x164 input.dst.llvm-%n)))
 (let (($x212 (= $x200 true)))
 (let (($x198 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x14 (= $x198 true)))
 (let (($x9 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x46 (= $x9 true)))
 (let (($x116 (and $x46 $x14)))
 (let (($x80 (and $x116 $x212)))
 (let (($x43 (and $x80 $x282)))
 (let (($x258 (and $x43 $x187)))
 (let (($x6 (and $x258 $x281)))
 (let (($x42 (and $x6 $x36)))
 (let (($x174 (and $x42 $x59)))
 (let (($x250 (and $x174 $x69)))
 (let (($x299 (and $x250 $x291)))
 (let (($x113 (and $x299 $x148)))
 (let (($x290 (and $x113 $x189)))
 (let (($x70 (and $x290 $x223)))
 (let (($x52 (and $x70 $x193)))
 (let (($x122 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x57 (and (not $x122) $x52)))
 (let (($x175 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and $x175 $x57)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x179 $x221)))
 (let (($x23 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1903X)))
 (=> $x206 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1903X) (_ bv0 32)))))
 ))
 (let (($x161 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1902X)))
 (= $x206 false)))
 ))
 (let (($x28 (and $x161 $x23)))
 (let (($x94 (and $x28 $x119)))
 (let (($x254 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x254 $x94)))
 (let (($x172 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x185 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x172)))))
 (let (($x24 (=> (and $x152 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x172)))))
 (let (($x288 (and $x24 $x101)))
 (let (($x114 (=> $x288 $x15)))
 (not $x114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (bvule ?x248 input.dst.llvm-%n)))
 (let (($x10 (= $x19 true)))
 (let ((?x280 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x280)))
 (let (($x276 (= ?x25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x180 (= $x276 true)))
 (let ((?x258 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x258)))
 (let (($x41 (= ?x236 input.dst.llvm-%n)))
 (let (($x137 (= $x41 true)))
 (let (($x153 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x302 (= $x153 true)))
 (let (($x270 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (= $x270 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (= $x222 true)))
 (let (($x225 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let ((?x94 (bvadd symbol.1 (bvmul input.ind-%var1913X (_ bv4 32)))))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x94))))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x94 (_ bv2 32))) ?x106)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x94 (_ bv3 32))) ?x286)))
 (let ((?x121 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1913X)))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1913X)))
 (=> $x263 (= ?x121 ?x264)))))))))
 ))
 (let (($x81 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x62 (and (bvule (_ bv0 32) input.ind-%var1912X) (bvult input.ind-%var1912X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1912X)))
 (= $x263 $x62))))
 ))
 (let (($x301 (and $x81 $x225)))
 (let (($x147 (= $x301 true)))
 (let (($x293 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x157 (= $x293 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x176 (bvsub ?x98 ?x13)))
 (let (($x143 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x176) (bvult ?x98 ?x176))))
 (let ((?x163 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x273 (bvmul (_ bv4 64) ?x163)))
 (let ((?x120 ((_ extract 63 32) ?x273)))
 (let (($x124 (= (_ bv0 32) ?x120)))
 (let (($x244 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x34 (and (and (and true $x244) $x124) $x143)))
 (let (($x133 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x294 (and $x133 $x34)))
 (let (($x5 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (=> $x5 $x294)))
 (let (($x191 (= $x219 true)))
 (let (($x232 (= $x5 true)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x45)))
 (let ((?x305 (bvand symbol.1 (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x305)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x266 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x96 (= input.memlabel-mem--symbol.1_end ?x266)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x251 (and $x107 $x96)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (and $x40 $x251)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x211 (and $x303 $x242)))
 (let (($x92 (not $x211)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x182 (and $x214 $x252)))
 (let (($x20 (and (not $x182) $x92)))
 (let (($x132 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x66 $x132)))
 (let (($x220 (not $x240)))
 (let (($x304 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x127 $x304)))
 (let (($x128 (and (not $x93) $x220)))
 (let (($x237 (and (and (and (and (and (and $x128 $x20) $x249) $x97) $x259) $x115) $x268)))
 (let (($x151 (and $x237 $x289)))
 (let (($x8 (= symbol.1 dst_symbol_addr.1)))
 (let (($x241 (and $x8 $x151)))
 (let (($x228 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x50 (or (bvugt input.memlabel-mem--symbol.1_begin ?x178) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x50) (or $x104 $x228)))))))
 (let (($x166 (and $x177 $x241)))
 (let (($x256 (= $x166 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x111 (= $x48 true)))
 (let (($x277 (= ?x236 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (= $x277 true)))
 (let (($x282 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x43 (= $x282 true)))
 (let (($x80 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x203 (= $x80 true)))
 (let (($x150 (and $x203 $x43)))
 (let (($x38 (and $x150 $x29)))
 (let (($x27 (and $x38 $x111)))
 (let (($x78 (and $x27 $x256)))
 (let (($x190 (and $x78 $x232)))
 (let (($x269 (and $x190 $x191)))
 (let (($x274 (and $x269 $x157)))
 (let (($x156 (and $x274 $x147)))
 (let (($x183 (and $x156 $x231)))
 (let (($x82 (and $x183 $x136)))
 (let (($x99 (and $x82 $x302)))
 (let (($x261 (and $x99 $x137)))
 (let (($x146 (and $x261 $x180)))
 (let (($x200 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (and (not $x200) $x146)))
 (let (($x209 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (and $x209 $x295)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x246 (and $x14 $x88)))
 (let (($x9 (forall ((input.ind-%var1923X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1923X)))
 (=> $x155 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1923X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var1922X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1922X)))
 (= $x155 false)))
 ))
 (let (($x46 (and $x23 $x9)))
 (let (($x265 (and $x46 $x246)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x201 (and $x67 $x265)))
 (let (($x83 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x254 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x83)))))
 (let (($x255 (=> (and $x5 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x83)))))
 (let (($x224 (and $x255 $x201)))
 (let (($x105 (=> $x224 $x10)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (bvule ?x248 input.dst.llvm-%n)))
 (let (($x10 (= $x19 true)))
 (let ((?x280 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x280)))
 (let (($x276 (= ?x25 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x180 (= $x276 true)))
 (let ((?x258 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x258)))
 (let (($x41 (= ?x236 input.dst.llvm-%n)))
 (let (($x137 (= $x41 true)))
 (let (($x153 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x302 (= $x153 true)))
 (let (($x270 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (= $x270 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (= $x222 true)))
 (let (($x225 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let ((?x94 (bvadd symbol.1 (bvmul input.ind-%var1913X (_ bv4 32)))))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x94))))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x94 (_ bv2 32))) ?x106)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x94 (_ bv3 32))) ?x286)))
 (let ((?x121 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1913X)))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1913X)))
 (=> $x263 (= ?x121 ?x264)))))))))
 ))
 (let (($x81 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x62 (and (bvule (_ bv0 32) input.ind-%var1912X) (bvult input.ind-%var1912X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1912X)))
 (= $x263 $x62))))
 ))
 (let (($x301 (and $x81 $x225)))
 (let (($x147 (= $x301 true)))
 (let (($x293 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x157 (= $x293 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x176 (bvsub ?x98 ?x13)))
 (let (($x143 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x176) (bvult ?x98 ?x176))))
 (let ((?x163 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x273 (bvmul (_ bv4 64) ?x163)))
 (let ((?x120 ((_ extract 63 32) ?x273)))
 (let (($x124 (= (_ bv0 32) ?x120)))
 (let (($x244 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x34 (and (and (and true $x244) $x124) $x143)))
 (let (($x133 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x294 (and $x133 $x34)))
 (let (($x5 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x219 (=> $x5 $x294)))
 (let (($x191 (= $x219 true)))
 (let (($x232 (= $x5 true)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x45)))
 (let ((?x305 (bvand symbol.1 (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x305)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x266 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x96 (= input.memlabel-mem--symbol.1_end ?x266)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x251 (and $x107 $x96)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (and $x40 $x251)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x211 (and $x303 $x242)))
 (let (($x92 (not $x211)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x182 (and $x214 $x252)))
 (let (($x20 (and (not $x182) $x92)))
 (let (($x132 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x66 $x132)))
 (let (($x220 (not $x240)))
 (let (($x304 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x127 $x304)))
 (let (($x128 (and (not $x93) $x220)))
 (let (($x237 (and (and (and (and (and (and $x128 $x20) $x249) $x97) $x259) $x115) $x268)))
 (let (($x151 (and $x237 $x289)))
 (let (($x8 (= symbol.1 dst_symbol_addr.1)))
 (let (($x241 (and $x8 $x151)))
 (let (($x228 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x50 (or (bvugt input.memlabel-mem--symbol.1_begin ?x178) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x50) (or $x104 $x228)))))))
 (let (($x166 (and $x177 $x241)))
 (let (($x256 (= $x166 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x111 (= $x48 true)))
 (let (($x277 (= ?x236 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x29 (= $x277 true)))
 (let (($x282 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x43 (= $x282 true)))
 (let (($x80 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x203 (= $x80 true)))
 (let (($x150 (and $x203 $x43)))
 (let (($x38 (and $x150 $x29)))
 (let (($x27 (and $x38 $x111)))
 (let (($x78 (and $x27 $x256)))
 (let (($x190 (and $x78 $x232)))
 (let (($x269 (and $x190 $x191)))
 (let (($x274 (and $x269 $x157)))
 (let (($x156 (and $x274 $x147)))
 (let (($x183 (and $x156 $x231)))
 (let (($x82 (and $x183 $x136)))
 (let (($x99 (and $x82 $x302)))
 (let (($x261 (and $x99 $x137)))
 (let (($x146 (and $x261 $x180)))
 (let (($x200 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (and (not $x200) $x146)))
 (let (($x209 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (and $x209 $x295)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x246 (and $x14 $x88)))
 (let (($x9 (forall ((input.ind-%var1923X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1923X)))
 (=> $x155 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1923X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var1922X (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1922X)))
 (= $x155 false)))
 ))
 (let (($x46 (and $x23 $x9)))
 (let (($x265 (and $x46 $x246)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x201 (and $x67 $x265)))
 (let (($x83 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x254 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x83)))))
 (let (($x255 (=> (and $x5 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x83)))))
 (let (($x224 (and $x255 $x201)))
 (let (($x105 (=> $x224 $x10)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (forall ((input.ind-%var1957X (_ BitVec 32)) )(let ((?x273 (bvadd symbol.1 (bvmul input.ind-%var1957X (_ bv4 32)))))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x83 (bvadd ?x98 (_ bv3 32))))
 (let ((?x173 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x55 (store ?x173 (bvadd ?x98 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x117 (store ?x55 (bvadd ?x98 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x141 (store ?x117 ?x83 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x125 (concat (select ?x141 (bvadd ?x273 (_ bv2 32))) (concat (select ?x141 (bvadd ?x273 (_ bv1 32))) (select ?x141 ?x273)))))
 (let ((?x45 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1957X)))
 (let (($x205 (= input.ind-%var1957X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x30 (= (ite $x205 input.spec-%var-i-0.L3%6%bbentry ?x45) (concat (select ?x141 (bvadd ?x273 (_ bv3 32))) ?x125))))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1957X)))
 (let (($x100 (or $x6 $x205)))
 (=> $x100 $x30))))))))))))))))
 ))
 (let (($x118 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let (($x36 (bvule (_ bv0 32) input.ind-%var1956X)))
 (let (($x103 (and $x36 (bvult input.ind-%var1956X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x205 (= input.ind-%var1956X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1956X)))
 (let (($x100 (or $x6 $x205)))
 (= $x100 $x103)))))))
 ))
 (let (($x169 (and $x118 $x51)))
 (let (($x26 (= $x169 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x70)))
 (let (($x189 (= ?x73 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x290 (= $x189 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x179)))
 (let ((?x279 (bvand symbol.1 (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x279)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let ((?x196 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x79 (= input.memlabel-mem--symbol.1_end ?x196)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x158 (and $x167 $x79)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (and $x105 $x158)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (and $x295 $x88)))
 (let (($x265 (not $x246)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x146 (and $x276 $x180)))
 (let (($x224 (and (not $x146) $x265)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x99 $x41)))
 (let (($x261 (not $x137)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x82 $x153)))
 (let (($x25 (and (not $x302) $x261)))
 (let (($x87 (and (and (and (and (and (and $x25 $x224) $x248) $x10) $x257) $x243) $x28)))
 (let (($x188 (and $x87 $x206)))
 (let (($x114 (= symbol.1 dst_symbol_addr.1)))
 (let (($x148 (and $x114 $x188)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x264 (or (bvugt input.memlabel-mem--symbol.1_begin ?x101) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x264) (or $x301 $x147)))))))
 (let (($x113 (and $x136 $x148)))
 (let (($x32 (= $x113 true)))
 (let (($x94 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x138 (= $x94 true)))
 (let (($x121 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x299 (= $x121 true)))
 (let (($x62 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x253 (= $x62 true)))
 (let (($x263 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x239 (= $x263 true)))
 (let (($x269 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let ((?x273 (bvadd symbol.1 (bvmul input.ind-%var1933X (_ bv4 32)))))
 (let ((?x71 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x273))))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv2 32))) ?x71)))
 (let ((?x294 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv3 32))) ?x174)))
 (let ((?x45 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1933X)))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1933X)))
 (=> $x6 (= ?x45 ?x294)))))))))
 ))
 (let (($x42 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x36 (bvule (_ bv0 32) input.ind-%var1932X)))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1932X)))
 (= $x6 (and $x36 (bvult input.ind-%var1932X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x293 (and $x42 $x269)))
 (let (($x157 (= $x293 true)))
 (let (($x37 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x249 (= $x37 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x240 (bvsub ?x98 ?x13)))
 (let (($x252 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x240) (bvult ?x98 ?x240))))
 (let ((?x93 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvmul (_ bv4 64) ?x93)))
 (let ((?x66 ((_ extract 63 32) ?x12)))
 (let (($x132 (= (_ bv0 32) ?x66)))
 (let (($x127 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x303 (and (and (and true $x127) $x132) $x252)))
 (let (($x170 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x242 (and $x170 $x303)))
 (let (($x194 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (=> $x194 $x242)))
 (let (($x92 (= $x211 true)))
 (let (($x104 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x284 (= $x104 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x50 true)))
 (let (($x178 (= $x194 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x38)))
 (let (($x235 (= ?x48 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x235 true)))
 (let (($x111 (= ?x48 input.dst.llvm-%n)))
 (let (($x27 (= $x111 true)))
 (let (($x7 (and $x27 $x22)))
 (let (($x75 (and $x7 $x178)))
 (let (($x11 (and $x75 $x112)))
 (let (($x228 (and $x11 $x284)))
 (let (($x20 (and $x228 $x92)))
 (let (($x281 (and $x20 $x249)))
 (let (($x274 (and $x281 $x157)))
 (let (($x181 (and $x274 $x239)))
 (let (($x81 (and $x181 $x253)))
 (let (($x119 (and $x81 $x299)))
 (let (($x140 (and $x119 $x138)))
 (let (($x193 (and $x140 $x32)))
 (let (($x142 (and $x193 $x290)))
 (let (($x277 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and (not $x277) $x142)))
 (let (($x258 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (and $x258 $x207)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x162 (and $x43 $x52)))
 (let (($x80 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1943X)))
 (=> $x204 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1943X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1942X)))
 (= $x204 false)))
 ))
 (let (($x203 (and $x9 $x80)))
 (let (($x297 (and $x203 $x162)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x161 $x297)))
 (let (($x24 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x67 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x24)))))
 (let (($x108 (=> (and $x194 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x24)))))
 (let (($x57 (and $x108 $x130)))
 (let (($x135 (=> $x57 $x26)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (forall ((input.ind-%var1957X (_ BitVec 32)) )(let ((?x273 (bvadd symbol.1 (bvmul input.ind-%var1957X (_ bv4 32)))))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x83 (bvadd ?x98 (_ bv3 32))))
 (let ((?x173 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x98 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x55 (store ?x173 (bvadd ?x98 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x117 (store ?x55 (bvadd ?x98 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x141 (store ?x117 ?x83 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x125 (concat (select ?x141 (bvadd ?x273 (_ bv2 32))) (concat (select ?x141 (bvadd ?x273 (_ bv1 32))) (select ?x141 ?x273)))))
 (let ((?x45 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1957X)))
 (let (($x205 (= input.ind-%var1957X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x30 (= (ite $x205 input.spec-%var-i-0.L3%6%bbentry ?x45) (concat (select ?x141 (bvadd ?x273 (_ bv3 32))) ?x125))))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1957X)))
 (let (($x100 (or $x6 $x205)))
 (=> $x100 $x30))))))))))))))))
 ))
 (let (($x118 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let (($x36 (bvule (_ bv0 32) input.ind-%var1956X)))
 (let (($x103 (and $x36 (bvult input.ind-%var1956X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x205 (= input.ind-%var1956X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1956X)))
 (let (($x100 (or $x6 $x205)))
 (= $x100 $x103)))))))
 ))
 (let (($x169 (and $x118 $x51)))
 (let (($x26 (= $x169 true)))
 (let ((?x70 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x73 (bvneg ?x70)))
 (let (($x189 (= ?x73 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x290 (= $x189 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x179)))
 (let ((?x279 (bvand symbol.1 (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x279)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let ((?x196 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x79 (= input.memlabel-mem--symbol.1_end ?x196)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x158 (and $x167 $x79)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (and $x105 $x158)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x248 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (and $x295 $x88)))
 (let (($x265 (not $x246)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x146 (and $x276 $x180)))
 (let (($x224 (and (not $x146) $x265)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x99 $x41)))
 (let (($x261 (not $x137)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x82 $x153)))
 (let (($x25 (and (not $x302) $x261)))
 (let (($x87 (and (and (and (and (and (and $x25 $x224) $x248) $x10) $x257) $x243) $x28)))
 (let (($x188 (and $x87 $x206)))
 (let (($x114 (= symbol.1 dst_symbol_addr.1)))
 (let (($x148 (and $x114 $x188)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x264 (or (bvugt input.memlabel-mem--symbol.1_begin ?x101) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x264) (or $x301 $x147)))))))
 (let (($x113 (and $x136 $x148)))
 (let (($x32 (= $x113 true)))
 (let (($x94 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x138 (= $x94 true)))
 (let (($x121 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x299 (= $x121 true)))
 (let (($x62 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x253 (= $x62 true)))
 (let (($x263 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x239 (= $x263 true)))
 (let (($x269 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let ((?x273 (bvadd symbol.1 (bvmul input.ind-%var1933X (_ bv4 32)))))
 (let ((?x71 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x273))))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv2 32))) ?x71)))
 (let ((?x294 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x273 (_ bv3 32))) ?x174)))
 (let ((?x45 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1933X)))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1933X)))
 (=> $x6 (= ?x45 ?x294)))))))))
 ))
 (let (($x42 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x36 (bvule (_ bv0 32) input.ind-%var1932X)))
 (let (($x6 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1932X)))
 (= $x6 (and $x36 (bvult input.ind-%var1932X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x293 (and $x42 $x269)))
 (let (($x157 (= $x293 true)))
 (let (($x37 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x249 (= $x37 true)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let ((?x240 (bvsub ?x98 ?x13)))
 (let (($x252 (ite (bvsge ?x13 (_ bv0 32)) (bvuge ?x98 ?x240) (bvult ?x98 ?x240))))
 (let ((?x93 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x12 (bvmul (_ bv4 64) ?x93)))
 (let ((?x66 ((_ extract 63 32) ?x12)))
 (let (($x132 (= (_ bv0 32) ?x66)))
 (let (($x127 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x303 (and (and (and true $x127) $x132) $x252)))
 (let (($x170 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x242 (and $x170 $x303)))
 (let (($x194 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (=> $x194 $x242)))
 (let (($x92 (= $x211 true)))
 (let (($x104 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x284 (= $x104 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x112 (= $x50 true)))
 (let (($x178 (= $x194 true)))
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x38)))
 (let (($x235 (= ?x48 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x235 true)))
 (let (($x111 (= ?x48 input.dst.llvm-%n)))
 (let (($x27 (= $x111 true)))
 (let (($x7 (and $x27 $x22)))
 (let (($x75 (and $x7 $x178)))
 (let (($x11 (and $x75 $x112)))
 (let (($x228 (and $x11 $x284)))
 (let (($x20 (and $x228 $x92)))
 (let (($x281 (and $x20 $x249)))
 (let (($x274 (and $x281 $x157)))
 (let (($x181 (and $x274 $x239)))
 (let (($x81 (and $x181 $x253)))
 (let (($x119 (and $x81 $x299)))
 (let (($x140 (and $x119 $x138)))
 (let (($x193 (and $x140 $x32)))
 (let (($x142 (and $x193 $x290)))
 (let (($x277 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and (not $x277) $x142)))
 (let (($x258 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x52 (and $x258 $x207)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x162 (and $x43 $x52)))
 (let (($x80 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1943X)))
 (=> $x204 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1943X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x204 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1942X)))
 (= $x204 false)))
 ))
 (let (($x203 (and $x9 $x80)))
 (let (($x297 (and $x203 $x162)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x161 $x297)))
 (let (($x24 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x67 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x24)))))
 (let (($x108 (=> (and $x194 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x24)))))
 (let (($x57 (and $x108 $x130)))
 (let (($x135 (=> $x57 $x26)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (not $x154)))
 (let (($x227 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x229 (not $x227)))
 (let (($x217 (or $x229 $x173)))
 (let (($x296 (= $x217 true)))
 (let ((?x130 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x130)))
 (let (($x205 (= ?x57 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x205 true)))
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x73)))
 (let (($x52 (= ?x189 input.dst.llvm-%n)))
 (let (($x162 (= $x52 true)))
 (let (($x290 (= ?x189 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x290 true)))
 (let (($x113 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x113 true)))
 (let (($x206 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x188 (= $x206 true)))
 (let (($x28 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x87 (= $x28 true)))
 (let (($x243 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (= $x243 true)))
 (let (($x158 (forall ((input.ind-%var1967X (_ BitVec 32)) )(let ((?x246 (bvadd symbol.1 (bvmul input.ind-%var1967X (_ bv4 32)))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x246))))
 (let ((?x10 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv2 32))) ?x248)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv3 32))) ?x10)))
 (let ((?x231 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1967X)))
 (let (($x288 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1967X)))
 (=> $x288 (= ?x231 ?x167)))))))))
 ))
 (let (($x225 (forall ((input.ind-%var1966X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var1966X) (bvult input.ind-%var1966X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x288 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1966X)))
 (= $x288 $x72))))
 ))
 (let (($x257 (and $x225 $x158)))
 (let (($x160 (= $x257 true)))
 (let (($x299 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x119 (= $x299 true)))
 (let (($x253 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x81 (= $x253 true)))
 (let (($x239 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x181 (= $x239 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x250 (= (_ bv0 32) ?x124)))
 (let ((?x176 (bvand symbol.1 (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x176)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x151 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x163 (= input.memlabel-mem--symbol.1_end ?x151)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x273 (and $x42 $x163)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x115 $x273)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x92 $x20)))
 (let (($x249 (not $x37)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x211 (and $x303 $x242)))
 (let (($x6 (and (not $x211) $x249)))
 (let (($x220 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x18 $x220)))
 (let (($x128 (not $x240)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x12 $x66)))
 (let (($x252 (and (not $x132) $x128)))
 (let (($x191 (and (and (and (and (and (and $x252 $x6) $x36) $x84) $x143) $x216) $x59)))
 (let (($x269 (and $x191 $x250)))
 (let (($x210 (= symbol.1 dst_symbol_addr.1)))
 (let (($x293 (and $x210 $x269)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x228 (or (bvugt input.memlabel-mem--symbol.1_begin ?x11) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x228) (or $x177 $x195)))))))
 (let (($x157 (and $x93 $x293)))
 (let (($x274 (= $x157 true)))
 (let (($x62 (and $x274 $x181)))
 (let (($x121 (and $x62 $x81)))
 (let (($x94 (and $x121 $x119)))
 (let (($x291 (and $x94 $x160)))
 (let (($x279 (and $x291 $x168)))
 (let (($x179 (and $x279 $x87)))
 (let (($x148 (and $x179 $x188)))
 (let (($x193 (and $x148 $x32)))
 (let (($x207 (and $x193 $x142)))
 (let (($x297 (and $x207 $x162)))
 (let (($x68 (and $x297 $x100)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (and $x7 $x68)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x103 (and $x27 $x90)))
 (let (($x38 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1977X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x116 false)))
 ))
 (let (($x48 (and $x80 $x38)))
 (let (($x58 (and $x48 $x103)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x23 $x58)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let (($x255 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x161 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x255)))))
 (let (($x245 (=> (and $x154 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x255)))))
 (let (($x165 (and $x245 $x118)))
 (let (($x55 (=> $x165 $x296)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x154 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (not $x154)))
 (let (($x227 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x229 (not $x227)))
 (let (($x217 (or $x229 $x173)))
 (let (($x296 (= $x217 true)))
 (let ((?x130 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x130)))
 (let (($x205 (= ?x57 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x205 true)))
 (let ((?x73 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x73)))
 (let (($x52 (= ?x189 input.dst.llvm-%n)))
 (let (($x162 (= $x52 true)))
 (let (($x290 (= ?x189 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x142 (= $x290 true)))
 (let (($x113 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x113 true)))
 (let (($x206 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x188 (= $x206 true)))
 (let (($x28 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x87 (= $x28 true)))
 (let (($x243 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (= $x243 true)))
 (let (($x158 (forall ((input.ind-%var1967X (_ BitVec 32)) )(let ((?x246 (bvadd symbol.1 (bvmul input.ind-%var1967X (_ bv4 32)))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x246))))
 (let ((?x10 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv2 32))) ?x248)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x246 (_ bv3 32))) ?x10)))
 (let ((?x231 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1967X)))
 (let (($x288 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1967X)))
 (=> $x288 (= ?x231 ?x167)))))))))
 ))
 (let (($x225 (forall ((input.ind-%var1966X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var1966X) (bvult input.ind-%var1966X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x288 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1966X)))
 (= $x288 $x72))))
 ))
 (let (($x257 (and $x225 $x158)))
 (let (($x160 (= $x257 true)))
 (let (($x299 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x119 (= $x299 true)))
 (let (($x253 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x81 (= $x253 true)))
 (let (($x239 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x181 (= $x239 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x250 (= (_ bv0 32) ?x124)))
 (let ((?x176 (bvand symbol.1 (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x176)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x151 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x163 (= input.memlabel-mem--symbol.1_end ?x151)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x273 (and $x42 $x163)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x115 $x273)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x92 $x20)))
 (let (($x249 (not $x37)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x211 (and $x303 $x242)))
 (let (($x6 (and (not $x211) $x249)))
 (let (($x220 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x18 $x220)))
 (let (($x128 (not $x240)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x12 $x66)))
 (let (($x252 (and (not $x132) $x128)))
 (let (($x191 (and (and (and (and (and (and $x252 $x6) $x36) $x84) $x143) $x216) $x59)))
 (let (($x269 (and $x191 $x250)))
 (let (($x210 (= symbol.1 dst_symbol_addr.1)))
 (let (($x293 (and $x210 $x269)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x228 (or (bvugt input.memlabel-mem--symbol.1_begin ?x11) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x228) (or $x177 $x195)))))))
 (let (($x157 (and $x93 $x293)))
 (let (($x274 (= $x157 true)))
 (let (($x62 (and $x274 $x181)))
 (let (($x121 (and $x62 $x81)))
 (let (($x94 (and $x121 $x119)))
 (let (($x291 (and $x94 $x160)))
 (let (($x279 (and $x291 $x168)))
 (let (($x179 (and $x279 $x87)))
 (let (($x148 (and $x179 $x188)))
 (let (($x193 (and $x148 $x32)))
 (let (($x207 (and $x193 $x142)))
 (let (($x297 (and $x207 $x162)))
 (let (($x68 (and $x297 $x100)))
 (let (($x7 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x90 (and $x7 $x68)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x103 (and $x27 $x90)))
 (let (($x38 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1977X) (_ bv0 32)))))
 ))
 (let (($x80 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x116 false)))
 ))
 (let (($x48 (and $x80 $x38)))
 (let (($x58 (and $x48 $x103)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x23 $x58)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let (($x255 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x161 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x255)))))
 (let (($x245 (=> (and $x154 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x255)))))
 (let (($x165 (and $x245 $x118)))
 (let (($x55 (=> $x165 $x296)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x152 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (or $x286 $x152)))
 (let (($x156 (= $x201 true)))
 (let ((?x137 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x261 (bvneg ?x137)))
 (let (($x302 (= ?x261 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x280 (= $x302 true)))
 (let ((?x222 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x222)))
 (let (($x82 (= ?x138 input.dst.llvm-%n)))
 (let (($x276 (= $x82 true)))
 (let (($x270 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (= $x270 true)))
 (let (($x204 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x204 true)))
 (let (($x187 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x203 (= $x187 true)))
 (let (($x139 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x183 (= $x139 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x91 true)))
 (let (($x217 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x130 (bvadd symbol.1 (bvmul input.ind-%var1987X (_ bv4 32)))))
 (let ((?x68 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x130))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv2 32))) ?x68)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv3 32))) ?x58)))
 (let ((?x168 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1987X)))
 (let (($x19 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1987X)))
 (=> $x19 (= ?x168 ?x227)))))))))
 ))
 (let (($x257 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x79 (and (bvule (_ bv0 32) input.ind-%var1986X) (bvult input.ind-%var1986X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x19 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1986X)))
 (= $x19 $x79))))
 ))
 (let (($x296 (and $x257 $x217)))
 (let (($x55 (= $x296 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x246 true)))
 (let (($x231 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x231 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x72 true)))
 (let ((?x263 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x263)))
 (let ((?x157 (bvand symbol.1 (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x157)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x269)))
 (let ((?x59 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x191 (= input.memlabel-mem--symbol.1_end ?x59)))
 (let (($x219 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (and $x219 $x191)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x216 $x124)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x45 (and $x115 $x42)))
 (let (($x151 (not $x45)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x174 (and $x259 $x84)))
 (let (($x273 (and (not $x174) $x151)))
 (let (($x249 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x37 $x249)))
 (let (($x120 (not $x6)))
 (let (($x92 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x281 $x92)))
 (let (($x71 (and (not $x20) $x120)))
 (let (($x299 (and (and (and (and (and (and $x71 $x273) $x143) $x34) $x250) $x293) $x274)))
 (let (($x119 (and $x299 $x239)))
 (let (($x8 (= symbol.1 dst_symbol_addr.1)))
 (let (($x94 (and $x8 $x119)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x12 (or (bvugt input.memlabel-mem--symbol.1_begin ?x93) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x12) (or $x18 $x220)))))))
 (let (($x288 (and $x211 $x94)))
 (let (($x197 (= $x288 true)))
 (let (($x225 (and $x197 $x301)))
 (let (($x88 (and $x225 $x136)))
 (let (($x105 (and $x88 $x131)))
 (let (($x95 (and $x105 $x55)))
 (let (($x178 (and $x95 $x64)))
 (let (($x209 (and $x178 $x183)))
 (let (($x43 (and $x209 $x203)))
 (let (($x202 (and $x43 $x35)))
 (let (($x114 (and $x202 $x101)))
 (let (($x180 (and $x114 $x276)))
 (let (($x153 (and $x180 $x280)))
 (let (($x170 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x170 $x153)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x60 $x99)))
 (let (($x104 (forall ((input.ind-%var1997X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1997X)))
 (=> $x150 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1997X) (_ bv0 32)))))
 ))
 (let (($x38 (forall ((input.ind-%var1996X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1996X)))
 (= $x150 false)))
 ))
 (let (($x284 (and $x38 $x104)))
 (let (($x146 (and $x284 $x25)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x140 (and $x9 $x146)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let (($x108 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x108)))))
 (let (($x134 (=> (and $x152 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x108)))))
 (let (($x106 (and $x134 $x140)))
 (let (($x295 (=> $x106 $x156)))
 (not $x295)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x152 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (or $x286 $x152)))
 (let (($x156 (= $x201 true)))
 (let ((?x137 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x261 (bvneg ?x137)))
 (let (($x302 (= ?x261 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x280 (= $x302 true)))
 (let ((?x222 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x222)))
 (let (($x82 (= ?x138 input.dst.llvm-%n)))
 (let (($x276 (= $x82 true)))
 (let (($x270 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (= $x270 true)))
 (let (($x204 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x35 (= $x204 true)))
 (let (($x187 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x203 (= $x187 true)))
 (let (($x139 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x183 (= $x139 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x91 true)))
 (let (($x217 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x130 (bvadd symbol.1 (bvmul input.ind-%var1987X (_ bv4 32)))))
 (let ((?x68 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x130))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv2 32))) ?x68)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv3 32))) ?x58)))
 (let ((?x168 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1987X)))
 (let (($x19 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1987X)))
 (=> $x19 (= ?x168 ?x227)))))))))
 ))
 (let (($x257 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x79 (and (bvule (_ bv0 32) input.ind-%var1986X) (bvult input.ind-%var1986X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x19 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1986X)))
 (= $x19 $x79))))
 ))
 (let (($x296 (and $x257 $x217)))
 (let (($x55 (= $x296 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x246 true)))
 (let (($x231 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x231 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x72 true)))
 (let ((?x263 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x263)))
 (let ((?x157 (bvand symbol.1 (_ bv3 32))))
 (let (($x274 (= (_ bv0 32) ?x157)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x269)))
 (let ((?x59 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x191 (= input.memlabel-mem--symbol.1_end ?x59)))
 (let (($x219 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (and $x219 $x191)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x216 $x124)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x45 (and $x115 $x42)))
 (let (($x151 (not $x45)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x174 (and $x259 $x84)))
 (let (($x273 (and (not $x174) $x151)))
 (let (($x249 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x37 $x249)))
 (let (($x120 (not $x6)))
 (let (($x92 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x281 $x92)))
 (let (($x71 (and (not $x20) $x120)))
 (let (($x299 (and (and (and (and (and (and $x71 $x273) $x143) $x34) $x250) $x293) $x274)))
 (let (($x119 (and $x299 $x239)))
 (let (($x8 (= symbol.1 dst_symbol_addr.1)))
 (let (($x94 (and $x8 $x119)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x12 (or (bvugt input.memlabel-mem--symbol.1_begin ?x93) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x12) (or $x18 $x220)))))))
 (let (($x288 (and $x211 $x94)))
 (let (($x197 (= $x288 true)))
 (let (($x225 (and $x197 $x301)))
 (let (($x88 (and $x225 $x136)))
 (let (($x105 (and $x88 $x131)))
 (let (($x95 (and $x105 $x55)))
 (let (($x178 (and $x95 $x64)))
 (let (($x209 (and $x178 $x183)))
 (let (($x43 (and $x209 $x203)))
 (let (($x202 (and $x43 $x35)))
 (let (($x114 (and $x202 $x101)))
 (let (($x180 (and $x114 $x276)))
 (let (($x153 (and $x180 $x280)))
 (let (($x170 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (and $x170 $x153)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x25 (and $x60 $x99)))
 (let (($x104 (forall ((input.ind-%var1997X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1997X)))
 (=> $x150 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1997X) (_ bv0 32)))))
 ))
 (let (($x38 (forall ((input.ind-%var1996X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1996X)))
 (= $x150 false)))
 ))
 (let (($x284 (and $x38 $x104)))
 (let (($x146 (and $x284 $x25)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x140 (and $x9 $x146)))
 (let ((?x13 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvadd symbol.1 ?x13)))
 (let (($x108 (and (bvule input.memlabel-mem--symbol.1_begin ?x98) (bvule (bvadd ?x98 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false $x108)))))
 (let (($x134 (=> (and $x152 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x108)))))
 (let (($x106 (and $x134 $x140)))
 (let (($x295 (=> $x106 $x156)))
 (not $x295)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x63 (forall ((input.ind-%var2027X (_ BitVec 32)) )(let ((?x196 (bvadd symbol.1 (bvmul input.ind-%var2027X (_ bv4 32)))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x196))))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv2 32))) ?x257)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv3 32))) ?x297)))
 (let ((?x269 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2027X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2027X)))
 (=> $x181 (= ?x269 ?x165)))))))))
 ))
 (let (($x117 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2026X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var2026X) (bvult input.ind-%var2026X input.dst.llvm-%n)))))
 ))
 (let (($x223 (and $x117 $x63)))
 (let (($x40 (= $x223 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x12)))
 (let (($x113 (= ?x66 input.dst.llvm-%n)))
 (let (($x188 (= $x113 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x44)))
 (let ((?x116 (bvand symbol.1 (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x116)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x224 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x279 (= input.memlabel-mem--symbol.1_end ?x224)))
 (let (($x195 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x258 (and $x195 $x279)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x49 $x258)))
 (let (($x241 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x146 $x140)))
 (let (($x286 (not $x106)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x153 $x99)))
 (let (($x156 (and (not $x25) $x286)))
 (let (($x180 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x276 $x180)))
 (let (($x261 (not $x137)))
 (let (($x114 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x101 $x114)))
 (let (($x280 (and (not $x82) $x261)))
 (let (($x206 (and (and (and (and (and (and $x280 $x156) $x295) $x241) $x22) $x27) $x212)))
 (let (($x290 (and $x206 $x50)))
 (let (($x217 (= symbol.1 dst_symbol_addr.1)))
 (let (($x142 (and $x217 $x290)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x183 (or (bvugt input.memlabel-mem--symbol.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x270 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x183) (or $x43 $x204)))))))
 (let (($x70 (and $x270 $x142)))
 (let (($x73 (= $x70 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (= $x68 true)))
 (let (($x103 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let ((?x196 (bvadd symbol.1 (bvmul input.ind-%var2007X (_ bv4 32)))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x196))))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv2 32))) ?x257)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv3 32))) ?x297)))
 (let ((?x269 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2007X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2007X)))
 (=> $x181 (= ?x269 ?x165)))))))))
 ))
 (let (($x191 (forall ((input.ind-%var2006X (_ BitVec 32)) )(let (($x219 (bvule (_ bv0 32) input.ind-%var2006X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2006X)))
 (= $x181 (and $x219 (bvult input.ind-%var2006X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x205 (and $x191 $x103)))
 (let (($x100 (= $x205 true)))
 (let (($x20 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (not $x20)))
 (let (($x42 (= $x36 true)))
 (let (($x259 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x84 (and true $x259)))
 (let (($x174 (=> $x36 $x84)))
 (let (($x163 (= $x174 true)))
 (let (($x33 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x8 (= $x33 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x303 (= $x252 true)))
 (let (($x220 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x240 (= $x220 true)))
 (let (($x132 (= ?x66 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (= $x132 true)))
 (let (($x93 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x75 (= $x93 true)))
 (let ((?x47 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x47)))
 (let (($x127 (= ?x177 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x182 (= $x127 true)))
 (let (($x104 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x284 (= $x104 true)))
 (let (($x304 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x11 (= $x304 true)))
 (let (($x228 (and $x11 $x284)))
 (let (($x242 (and $x228 $x182)))
 (let (($x210 (and $x242 $x75)))
 (let (($x214 (and $x210 $x18)))
 (let (($x128 (and $x214 $x240)))
 (let (($x211 (and $x128 $x303)))
 (let (($x281 (and $x211 $x8)))
 (let (($x115 (and $x281 $x163)))
 (let (($x45 (and $x115 $x42)))
 (let (($x57 (and $x45 $x100)))
 (let (($x227 (and $x57 $x58)))
 (let (($x148 (and $x227 $x73)))
 (let (($x32 (and $x148 $x188)))
 (let (($x235 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (and $x235 $x32)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and $x29 $x189)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x9 $x207)))
 (let (($x23 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2017X)))
 (=> $x13 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2017X) (_ bv0 32)))))
 ))
 (let (($x172 (forall ((input.ind-%var2016X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2016X)))
 (= $x13 false)))
 ))
 (let (($x134 (and $x172 $x23)))
 (let (($x248 (and $x134 $x159)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x5 $x248)))
 (let (($x289 (=> $x10 $x40)))
 (not $x289))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x63 (forall ((input.ind-%var2027X (_ BitVec 32)) )(let ((?x196 (bvadd symbol.1 (bvmul input.ind-%var2027X (_ bv4 32)))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x196))))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv2 32))) ?x257)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv3 32))) ?x297)))
 (let ((?x269 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2027X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2027X)))
 (=> $x181 (= ?x269 ?x165)))))))))
 ))
 (let (($x117 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2026X)))
 (= $x181 (and (bvule (_ bv0 32) input.ind-%var2026X) (bvult input.ind-%var2026X input.dst.llvm-%n)))))
 ))
 (let (($x223 (and $x117 $x63)))
 (let (($x40 (= $x223 true)))
 (let ((?x12 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x12)))
 (let (($x113 (= ?x66 input.dst.llvm-%n)))
 (let (($x188 (= $x113 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x44)))
 (let ((?x116 (bvand symbol.1 (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x116)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let ((?x224 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x279 (= input.memlabel-mem--symbol.1_end ?x224)))
 (let (($x195 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x258 (and $x195 $x279)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x49 $x258)))
 (let (($x241 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x146 $x140)))
 (let (($x286 (not $x106)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x153 $x99)))
 (let (($x156 (and (not $x25) $x286)))
 (let (($x180 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x276 $x180)))
 (let (($x261 (not $x137)))
 (let (($x114 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x101 $x114)))
 (let (($x280 (and (not $x82) $x261)))
 (let (($x206 (and (and (and (and (and (and $x280 $x156) $x295) $x241) $x22) $x27) $x212)))
 (let (($x290 (and $x206 $x50)))
 (let (($x217 (= symbol.1 dst_symbol_addr.1)))
 (let (($x142 (and $x217 $x290)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x183 (or (bvugt input.memlabel-mem--symbol.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x270 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x183) (or $x43 $x204)))))))
 (let (($x70 (and $x270 $x142)))
 (let (($x73 (= $x70 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (= $x68 true)))
 (let (($x103 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let ((?x196 (bvadd symbol.1 (bvmul input.ind-%var2007X (_ bv4 32)))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x196))))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv2 32))) ?x257)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x196 (_ bv3 32))) ?x297)))
 (let ((?x269 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2007X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2007X)))
 (=> $x181 (= ?x269 ?x165)))))))))
 ))
 (let (($x191 (forall ((input.ind-%var2006X (_ BitVec 32)) )(let (($x219 (bvule (_ bv0 32) input.ind-%var2006X)))
 (let (($x181 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2006X)))
 (= $x181 (and $x219 (bvult input.ind-%var2006X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x205 (and $x191 $x103)))
 (let (($x100 (= $x205 true)))
 (let (($x20 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x36 (not $x20)))
 (let (($x42 (= $x36 true)))
 (let (($x259 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x84 (and true $x259)))
 (let (($x174 (=> $x36 $x84)))
 (let (($x163 (= $x174 true)))
 (let (($x33 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x8 (= $x33 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x303 (= $x252 true)))
 (let (($x220 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x240 (= $x220 true)))
 (let (($x132 (= ?x66 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (= $x132 true)))
 (let (($x93 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x75 (= $x93 true)))
 (let ((?x47 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x177 (bvneg ?x47)))
 (let (($x127 (= ?x177 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x182 (= $x127 true)))
 (let (($x104 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x284 (= $x104 true)))
 (let (($x304 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x11 (= $x304 true)))
 (let (($x228 (and $x11 $x284)))
 (let (($x242 (and $x228 $x182)))
 (let (($x210 (and $x242 $x75)))
 (let (($x214 (and $x210 $x18)))
 (let (($x128 (and $x214 $x240)))
 (let (($x211 (and $x128 $x303)))
 (let (($x281 (and $x211 $x8)))
 (let (($x115 (and $x281 $x163)))
 (let (($x45 (and $x115 $x42)))
 (let (($x57 (and $x45 $x100)))
 (let (($x227 (and $x57 $x58)))
 (let (($x148 (and $x227 $x73)))
 (let (($x32 (and $x148 $x188)))
 (let (($x235 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (and $x235 $x32)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and $x29 $x189)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x9 $x207)))
 (let (($x23 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2017X)))
 (=> $x13 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2017X) (_ bv0 32)))))
 ))
 (let (($x172 (forall ((input.ind-%var2016X (_ BitVec 32)) )(let (($x13 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2016X)))
 (= $x13 false)))
 ))
 (let (($x134 (and $x172 $x23)))
 (let (($x248 (and $x134 $x159)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x5 $x248)))
 (let (($x289 (=> $x10 $x40)))
 (not $x289))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 155 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087294/query
