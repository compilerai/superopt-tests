==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--symbol.1_end #b11001000000000000000000110010011)
(= input.memlabel-mem--symbol.1_begin #b11001000000000000000000000000100)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= dst_symbol_addr.1 #b11001000000000000000000000000100)
(= symbol.1 #b11001000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000001100000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000001100000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000001100000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x00800248)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x008003d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffffe4f)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun symbol.1 () (_ BitVec 32)
    #x00800248)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x00800248)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32) (_ bv2147484047 32))
(define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun dst_symbol_addr.1 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun symbol.1 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147484048 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147484048 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147484051 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (= false true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x118 (concat ?x115 (concat ?x111 ?x109)))))
 (let (($x120 (= ?x119 input.dst.llvm-%n)))
 (let (($x121 (= $x120 true)))
 (let (($x104 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x105 (= $x104 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x91)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x89)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x73 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x79 (= input.memlabel-mem--symbol.1_end ?x73)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x84 $x79)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x49 $x86)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (and $x65 $x34)))
 (let (($x56 (not $x50)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x6 $x54)))
 (let (($x75 (and (not $x55) $x56)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x27 $x19)))
 (let (($x26 (not $x48)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x33 $x31)))
 (let (($x83 (and (not $x12) $x26)))
 (let (($x98 (and (and (and (and (and (and $x83 $x75) $x10) $x24) $x38) $x88) $x90)))
 (let (($x99 (and $x98 $x92)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x68 $x99)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x85 (or (bvugt input.memlabel-mem--symbol.1_begin ?x78) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x85) (or $x14 $x76)))))))
 (let (($x101 (and $x32 $x100)))
 (let (($x102 (= $x101 true)))
 (let (($x106 (and $x102 $x105)))
 (let (($x122 (and $x106 $x121)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x60 $x122)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x67 $x123)))
 (let (($x81 (forall ((input.ind-%var65X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var65X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var65X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var64X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var64X)))
 (= $x39 false)))
 ))
 (let (($x61 (and $x36 $x81)))
 (let (($x125 (and $x61 $x124)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x11 $x125)))
 (let (($x128 (=> $x126 $x127)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x127 (= false true)))
 (let ((?x109 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x118 (concat ?x115 (concat ?x111 ?x109)))))
 (let (($x120 (= ?x119 input.dst.llvm-%n)))
 (let (($x121 (= $x120 true)))
 (let (($x104 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x105 (= $x104 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x92 (= (_ bv0 32) ?x91)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x89)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x73 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x79 (= input.memlabel-mem--symbol.1_end ?x73)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x84 $x79)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x49 $x86)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (and $x65 $x34)))
 (let (($x56 (not $x50)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x6 $x54)))
 (let (($x75 (and (not $x55) $x56)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x27 $x19)))
 (let (($x26 (not $x48)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x33 $x31)))
 (let (($x83 (and (not $x12) $x26)))
 (let (($x98 (and (and (and (and (and (and $x83 $x75) $x10) $x24) $x38) $x88) $x90)))
 (let (($x99 (and $x98 $x92)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x68 $x99)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x85 (or (bvugt input.memlabel-mem--symbol.1_begin ?x78) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x85) (or $x14 $x76)))))))
 (let (($x101 (and $x32 $x100)))
 (let (($x102 (= $x101 true)))
 (let (($x106 (and $x102 $x105)))
 (let (($x122 (and $x106 $x121)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x60 $x122)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x67 $x123)))
 (let (($x81 (forall ((input.ind-%var65X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var65X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var65X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var64X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var64X)))
 (= $x39 false)))
 ))
 (let (($x61 (and $x36 $x81)))
 (let (($x125 (and $x61 $x124)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x11 $x125)))
 (let (($x128 (=> $x126 $x127)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xab50fee7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000006f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffee0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x69)))
 (let ((?x34 (bvand symbol.1 (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x34)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x92 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x99 (= input.memlabel-mem--symbol.1_end ?x92)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (and $x100 $x99)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x12 $x71)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (and $x96 $x89)))
 (let (($x52 (not $x50)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x97 $x103)))
 (let (($x26 (and (not $x73) $x52)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x98 $x10)))
 (let (($x49 (not $x95)))
 (let (($x79 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x101 $x79)))
 (let (($x102 (and (not $x94) $x49)))
 (let (($x114 (and (and (and (and (and (and $x102 $x26) $x65) $x85) $x77) $x88) $x9)))
 (let (($x115 (and $x114 $x33)))
 (let (($x78 (= symbol.1 dst_symbol_addr.1)))
 (let (($x110 (and $x78 $x115)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x67 $x57)))))))
 (let (($x8 (and $x62 $x110)))
 (let (($x82 (= $x8 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x126 (concat ?x123 (concat ?x119 ?x112)))))
 (let (($x128 (= input.dst.llvm-%n ?x127)))
 (let (($x108 (and (and (and $x62 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x110) $x128)))
 (let (($x35 (= $x108 true)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x45 (and $x64 $x35)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x46 (and $x66 $x45)))
 (let (($x86 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x74 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x39 false)))
 ))
 (let (($x38 (and $x74 $x86)))
 (let (($x58 (and $x38 $x46)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x43 $x58)))
 (let (($x5 (=> $x29 $x82)))
 (not $x5))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x69)))
 (let ((?x34 (bvand symbol.1 (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x34)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x92 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x99 (= input.memlabel-mem--symbol.1_end ?x92)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (and $x100 $x99)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x12 $x71)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x50 (and $x96 $x89)))
 (let (($x52 (not $x50)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x97 $x103)))
 (let (($x26 (and (not $x73) $x52)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x98 $x10)))
 (let (($x49 (not $x95)))
 (let (($x79 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x101 $x79)))
 (let (($x102 (and (not $x94) $x49)))
 (let (($x114 (and (and (and (and (and (and $x102 $x26) $x65) $x85) $x77) $x88) $x9)))
 (let (($x115 (and $x114 $x33)))
 (let (($x78 (= symbol.1 dst_symbol_addr.1)))
 (let (($x110 (and $x78 $x115)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x67 $x57)))))))
 (let (($x8 (and $x62 $x110)))
 (let (($x82 (= $x8 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x126 (concat ?x123 (concat ?x119 ?x112)))))
 (let (($x128 (= input.dst.llvm-%n ?x127)))
 (let (($x108 (and (and (and $x62 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x110) $x128)))
 (let (($x35 (= $x108 true)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x45 (and $x64 $x35)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x46 (and $x66 $x45)))
 (let (($x86 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x74 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x39 false)))
 ))
 (let (($x38 (and $x74 $x86)))
 (let (($x58 (and $x38 $x46)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x43 $x58)))
 (let (($x5 (=> $x29 $x82)))
 (not $x5))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x30 (= $x27 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x5 (concat ?x29 (concat ?x35 ?x128)))))
 (let (($x93 (= input.dst.llvm-%n ?x13)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x111)))
 (let ((?x110 (bvand symbol.1 (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x110)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x113 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x34 (= input.memlabel-mem--symbol.1_end ?x113)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (and $x83 $x34)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x84 $x9)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x117 $x12)))
 (let (($x24 (not $x100)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (and $x107 $x75)))
 (let (($x99 (and (not $x85) $x24)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x89 $x50)))
 (let (($x26 (not $x52)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x73 $x56)))
 (let (($x65 (and (not $x96) $x26)))
 (let (($x119 (and (and (and (and (and (and $x65 $x99) $x71) $x118) $x114) $x115) $x28)))
 (let (($x112 (and $x119 $x125)))
 (let (($x103 (= symbol.1 dst_symbol_addr.1)))
 (let (($x120 (and $x103 $x112)))
 (let (($x57 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x129 (or (bvugt input.memlabel-mem--symbol.1_begin ?x62) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x129) (or $x101 $x79)))))))
 (let (($x51 (and (and (and $x49 $x57) $x120) $x93)))
 (let (($x21 (= $x51 true)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x14 $x21)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x15 (and $x87 $x81)))
 (let (($x59 (forall ((input.ind-%var97X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var97X)))
 (=> $x74 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var97X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var96X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var96X)))
 (= $x74 false)))
 ))
 (let (($x22 (and $x42 $x59)))
 (let (($x11 (and $x22 $x15)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x36 (and $x43 $x11)))
 (let (($x41 (=> $x36 $x30)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x30 (= $x27 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x5 (concat ?x29 (concat ?x35 ?x128)))))
 (let (($x93 (= input.dst.llvm-%n ?x13)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x111)))
 (let ((?x110 (bvand symbol.1 (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x110)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x113 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x34 (= input.memlabel-mem--symbol.1_end ?x113)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (and $x83 $x34)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x84 $x9)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x117 $x12)))
 (let (($x24 (not $x100)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (and $x107 $x75)))
 (let (($x99 (and (not $x85) $x24)))
 (let (($x50 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x89 $x50)))
 (let (($x26 (not $x52)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x73 $x56)))
 (let (($x65 (and (not $x96) $x26)))
 (let (($x119 (and (and (and (and (and (and $x65 $x99) $x71) $x118) $x114) $x115) $x28)))
 (let (($x112 (and $x119 $x125)))
 (let (($x103 (= symbol.1 dst_symbol_addr.1)))
 (let (($x120 (and $x103 $x112)))
 (let (($x57 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x129 (or (bvugt input.memlabel-mem--symbol.1_begin ?x62) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x129) (or $x101 $x79)))))))
 (let (($x51 (and (and (and $x49 $x57) $x120) $x93)))
 (let (($x21 (= $x51 true)))
 (let (($x14 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x81 (and $x14 $x21)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x15 (and $x87 $x81)))
 (let (($x59 (forall ((input.ind-%var97X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var97X)))
 (=> $x74 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var97X) (_ bv0 32)))))
 ))
 (let (($x42 (forall ((input.ind-%var96X (_ BitVec 32)) )(let (($x74 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var96X)))
 (= $x74 false)))
 ))
 (let (($x22 (and $x42 $x59)))
 (let (($x11 (and $x22 $x15)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x36 (and $x43 $x11)))
 (let (($x41 (=> $x36 $x30)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa61d4183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun symbol.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x38)))
 (let (($x25 (= ?x54 input.dst.llvm-%n)))
 (let (($x16 (= $x25 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x41 (concat ?x36 (concat ?x21 ?x93)))))
 (let (($x90 (= input.dst.llvm-%n ?x23)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x124)))
 (let ((?x120 (bvand symbol.1 (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x120)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x116 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x110 (= input.memlabel-mem--symbol.1_end ?x116)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x28 (and $x33 $x110)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x69 $x28)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x83 (and $x122 $x84)))
 (let (($x88 (not $x83)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (and $x121 $x77)))
 (let (($x34 (and (not $x118) $x88)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x12 $x100)))
 (let (($x99 (not $x24)))
 (let (($x92 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x85 $x92)))
 (let (($x71 (and (not $x117) $x99)))
 (let (($x35 (and (and (and (and (and (and $x71 $x34) $x9) $x123) $x119) $x112) $x109)))
 (let (($x128 (and $x35 $x82)))
 (let (($x75 (= symbol.1 dst_symbol_addr.1)))
 (let (($x45 (and $x75 $x128)))
 (let (($x79 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x49) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x73 $x56)))))))
 (let (($x61 (and (and (and $x26 $x79) $x45) $x90)))
 (let (($x31 (= $x61 true)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (and $x60 $x31)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x47 (and $x53 $x18)))
 (let (($x63 (forall ((input.ind-%var115X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var115X)))
 (=> $x80 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var115X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var114X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var114X)))
 (= $x80 false)))
 ))
 (let (($x62 (and $x105 $x63)))
 (let (($x39 (and $x62 $x47)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x17 (and $x48 $x39)))
 (let (($x130 (=> $x17 $x16)))
 (not $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x38 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x38)))
 (let (($x25 (= ?x54 input.dst.llvm-%n)))
 (let (($x16 (= $x25 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x41 (concat ?x36 (concat ?x21 ?x93)))))
 (let (($x90 (= input.dst.llvm-%n ?x23)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x124)))
 (let ((?x120 (bvand symbol.1 (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x120)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x116 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x110 (= input.memlabel-mem--symbol.1_end ?x116)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x28 (and $x33 $x110)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x69 $x28)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x83 (and $x122 $x84)))
 (let (($x88 (not $x83)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (and $x121 $x77)))
 (let (($x34 (and (not $x118) $x88)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x12 $x100)))
 (let (($x99 (not $x24)))
 (let (($x92 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x85 $x92)))
 (let (($x71 (and (not $x117) $x99)))
 (let (($x35 (and (and (and (and (and (and $x71 $x34) $x9) $x123) $x119) $x112) $x109)))
 (let (($x128 (and $x35 $x82)))
 (let (($x75 (= symbol.1 dst_symbol_addr.1)))
 (let (($x45 (and $x75 $x128)))
 (let (($x79 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x49) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x73 $x56)))))))
 (let (($x61 (and (and (and $x26 $x79) $x45) $x90)))
 (let (($x31 (= $x61 true)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (and $x60 $x31)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x47 (and $x53 $x18)))
 (let (($x63 (forall ((input.ind-%var115X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var115X)))
 (=> $x80 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var115X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var114X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var114X)))
 (= $x80 false)))
 ))
 (let (($x62 (and $x105 $x63)))
 (let (($x39 (and $x62 $x47)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x17 (and $x48 $x39)))
 (let (($x130 (=> $x17 $x16)))
 (not $x130)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x43)))
 (let (($x14 (= ?x66 input.spec-%var-n-1)))
 (let (($x59 (= $x14 true)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x54 (concat ?x17 (concat ?x31 ?x90)))))
 (let (($x16 (= input.dst.llvm-%n ?x25)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x8)))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x45)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x108 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x120 (= input.memlabel-mem--symbol.1_end ?x108)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x109 (and $x125 $x120)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x111 $x109)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x58 $x69)))
 (let (($x115 (not $x33)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x123 (and $x46 $x114)))
 (let (($x110 (and (not $x123) $x115)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x84 $x83)))
 (let (($x34 (not $x88)))
 (let (($x113 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x118 $x113)))
 (let (($x9 (and (not $x122) $x34)))
 (let (($x21 (and (and (and (and (and (and $x9 $x110) $x28) $x29) $x35) $x128) $x127)))
 (let (($x93 (and $x21 $x30)))
 (let (($x77 (= symbol.1 dst_symbol_addr.1)))
 (let (($x81 (and $x77 $x93)))
 (let (($x56 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x67 (or (bvugt input.memlabel-mem--symbol.1_begin ?x26) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x67) (or $x85 $x92)))))))
 (let (($x76 (and (and (and $x99 $x56) $x81) $x16)))
 (let (($x101 (= $x76 true)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and $x102 $x101)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x42 (and $x10 $x13)))
 (let (($x98 (forall ((input.ind-%var125X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var125X)))
 (=> $x105 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var125X) (_ bv0 32)))))
 ))
 (let (($x95 (forall ((input.ind-%var124X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var124X)))
 (= $x105 false)))
 ))
 (let (($x49 (and $x95 $x98)))
 (let (($x87 (and $x49 $x42)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x22 (and $x48 $x87)))
 (let (($x32 (=> $x22 $x59)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x43)))
 (let (($x14 (= ?x66 input.spec-%var-n-1)))
 (let (($x59 (= $x14 true)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x54 (concat ?x17 (concat ?x31 ?x90)))))
 (let (($x16 (= input.dst.llvm-%n ?x25)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x8)))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x45)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x108 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x120 (= input.memlabel-mem--symbol.1_end ?x108)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x109 (and $x125 $x120)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x111 $x109)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x33 (and $x58 $x69)))
 (let (($x115 (not $x33)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x123 (and $x46 $x114)))
 (let (($x110 (and (not $x123) $x115)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x84 $x83)))
 (let (($x34 (not $x88)))
 (let (($x113 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x118 $x113)))
 (let (($x9 (and (not $x122) $x34)))
 (let (($x21 (and (and (and (and (and (and $x9 $x110) $x28) $x29) $x35) $x128) $x127)))
 (let (($x93 (and $x21 $x30)))
 (let (($x77 (= symbol.1 dst_symbol_addr.1)))
 (let (($x81 (and $x77 $x93)))
 (let (($x56 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x67 (or (bvugt input.memlabel-mem--symbol.1_begin ?x26) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x67) (or $x85 $x92)))))))
 (let (($x76 (and (and (and $x99 $x56) $x81) $x16)))
 (let (($x101 (= $x76 true)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and $x102 $x101)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x42 (and $x10 $x13)))
 (let (($x98 (forall ((input.ind-%var125X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var125X)))
 (=> $x105 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var125X) (_ bv0 32)))))
 ))
 (let (($x95 (forall ((input.ind-%var124X (_ BitVec 32)) )(let (($x105 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var124X)))
 (= $x105 false)))
 ))
 (let (($x49 (and $x95 $x98)))
 (let (($x87 (and $x49 $x42)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x22 (and $x48 $x87)))
 (let (($x32 (=> $x22 $x59)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x80 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x55 (= $x80 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x43 (concat ?x87 (concat ?x76 ?x25)))))
 (let (($x14 (= input.dst.llvm-%n ?x66)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x131)))
 (let ((?x93 (bvand symbol.1 (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x93)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (and $x124 $x51)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x36 $x45)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x111 (and $x29 $x11)))
 (let (($x125 (not $x111)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (and $x28 $x15)))
 (let (($x108 (and (not $x119) $x125)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x58 $x69)))
 (let (($x115 (not $x33)))
 (let (($x123 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x114 $x123)))
 (let (($x41 (and (not $x116) $x115)))
 (let (($x61 (and (and (and (and (and (and $x41 $x108) $x120) $x35) $x127) $x30) $x81)))
 (let (($x31 (and $x61 $x27)))
 (let (($x46 (= symbol.1 dst_symbol_addr.1)))
 (let (($x90 (and $x46 $x31)))
 (let (($x75 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x56 (or (bvugt input.memlabel-mem--symbol.1_begin ?x100) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x56) (or $x77 $x118)))))))
 (let (($x86 (and (and (and $x88 $x75) $x90) $x14)))
 (let (($x73 (= $x86 true)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x23 (and $x67 $x73)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x78 $x23)))
 (let (($x24 (forall ((input.ind-%var135X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var135X)))
 (=> $x7 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var135X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var134X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var134X)))
 (= $x7 false)))
 ))
 (let (($x89 (and $x91 $x24)))
 (let (($x72 (and $x89 $x19)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x44 (and $x20 $x72)))
 (let (($x60 (=> $x44 $x55)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x80 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x55 (= $x80 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x43 (concat ?x87 (concat ?x76 ?x25)))))
 (let (($x14 (= input.dst.llvm-%n ?x66)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x131)))
 (let ((?x93 (bvand symbol.1 (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x93)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x45 (and $x124 $x51)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x36 $x45)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x111 (and $x29 $x11)))
 (let (($x125 (not $x111)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (and $x28 $x15)))
 (let (($x108 (and (not $x119) $x125)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x58 $x69)))
 (let (($x115 (not $x33)))
 (let (($x123 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x114 $x123)))
 (let (($x41 (and (not $x116) $x115)))
 (let (($x61 (and (and (and (and (and (and $x41 $x108) $x120) $x35) $x127) $x30) $x81)))
 (let (($x31 (and $x61 $x27)))
 (let (($x46 (= symbol.1 dst_symbol_addr.1)))
 (let (($x90 (and $x46 $x31)))
 (let (($x75 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x56 (or (bvugt input.memlabel-mem--symbol.1_begin ?x100) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x56) (or $x77 $x118)))))))
 (let (($x86 (and (and (and $x88 $x75) $x90) $x14)))
 (let (($x73 (= $x86 true)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x23 (and $x67 $x73)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x78 $x23)))
 (let (($x24 (forall ((input.ind-%var135X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var135X)))
 (=> $x7 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var135X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var134X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var134X)))
 (= $x7 false)))
 ))
 (let (($x89 (and $x91 $x24)))
 (let (($x72 (and $x89 $x19)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x44 (and $x20 $x72)))
 (let (($x60 (=> $x44 $x55)))
 (not $x60)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffff7fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffff7ff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffff7fc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x6 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x63 (= $x6 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x80 (concat ?x72 (concat ?x86 ?x66)))))
 (let (($x60 (= input.dst.llvm-%n ?x55)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x32)))
 (let ((?x31 (bvand symbol.1 (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x31)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let ((?x30 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x17 (= input.memlabel-mem--symbol.1_end ?x30)))
 (let (($x21 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x93 (and $x21 $x17)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x39 $x93)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x35 $x47)))
 (let (($x124 (not $x36)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x109 (and $x120 $x54)))
 (let (($x128 (and (not $x109) $x124)))
 (let (($x11 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x29 $x11)))
 (let (($x125 (not $x111)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x15 $x119)))
 (let (($x38 (and (not $x112) $x125)))
 (let (($x16 (and (and (and (and (and (and $x38 $x128) $x51) $x127) $x81) $x27) $x90)))
 (let (($x76 (and $x16 $x18)))
 (let (($x28 (= symbol.1 dst_symbol_addr.1)))
 (let (($x25 (and $x28 $x76)))
 (let (($x121 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x75 (or (bvugt input.memlabel-mem--symbol.1_begin ?x84) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x75) (or $x46 $x114)))))))
 (let (($x64 (and (and (and $x33 $x121) $x25) $x60)))
 (let (($x95 (= $x64 true)))
 (let (($x56 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (and $x56 $x95)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x99 $x10)))
 (let (($x83 (forall ((input.ind-%var153X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var153X)))
 (=> $x129 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var153X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var152X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var152X)))
 (= $x129 false)))
 ))
 (let (($x126 (and $x96 $x83)))
 (let (($x48 (and $x126 $x49)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x97 $x48)))
 (let (($x98 (=> $x37 $x63)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x6 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x63 (= $x6 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x80 (concat ?x72 (concat ?x86 ?x66)))))
 (let (($x60 (= input.dst.llvm-%n ?x55)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x32)))
 (let ((?x31 (bvand symbol.1 (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x31)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let ((?x30 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x17 (= input.memlabel-mem--symbol.1_end ?x30)))
 (let (($x21 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x93 (and $x21 $x17)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x39 $x93)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x35 $x47)))
 (let (($x124 (not $x36)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x109 (and $x120 $x54)))
 (let (($x128 (and (not $x109) $x124)))
 (let (($x11 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x29 $x11)))
 (let (($x125 (not $x111)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x15 $x119)))
 (let (($x38 (and (not $x112) $x125)))
 (let (($x16 (and (and (and (and (and (and $x38 $x128) $x51) $x127) $x81) $x27) $x90)))
 (let (($x76 (and $x16 $x18)))
 (let (($x28 (= symbol.1 dst_symbol_addr.1)))
 (let (($x25 (and $x28 $x76)))
 (let (($x121 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x75 (or (bvugt input.memlabel-mem--symbol.1_begin ?x84) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x75) (or $x46 $x114)))))))
 (let (($x64 (and (and (and $x33 $x121) $x25) $x60)))
 (let (($x95 (= $x64 true)))
 (let (($x56 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (and $x56 $x95)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x99 $x10)))
 (let (($x83 (forall ((input.ind-%var153X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var153X)))
 (=> $x129 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var153X) (_ bv0 32)))))
 ))
 (let (($x96 (forall ((input.ind-%var152X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var152X)))
 (= $x129 false)))
 ))
 (let (($x126 (and $x96 $x83)))
 (let (($x48 (and $x126 $x49)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x97 $x48)))
 (let (($x98 (=> $x37 $x63)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x9ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x9ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x9ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x104 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x79 (= $x104 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x6 (concat ?x48 (concat ?x64 ?x55)))))
 (let (($x98 (= input.dst.llvm-%n ?x63)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x107)))
 (let ((?x76 (bvand symbol.1 (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x76)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x27 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x87 (= input.memlabel-mem--symbol.1_end ?x27)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x31 (and $x61 $x87)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x42 $x31)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x39 (and $x127 $x13)))
 (let (($x21 (not $x39)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x45 (and $x51 $x43)))
 (let (($x30 (and (not $x45) $x21)))
 (let (($x47 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x35 $x47)))
 (let (($x124 (not $x36)))
 (let (($x109 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x54 $x109)))
 (let (($x40 (and (not $x82) $x124)))
 (let (($x14 (and (and (and (and (and (and $x40 $x30) $x17) $x81) $x90) $x18) $x25)))
 (let (($x86 (and $x14 $x101)))
 (let (($x120 (= symbol.1 dst_symbol_addr.1)))
 (let (($x66 (and $x120 $x86)))
 (let (($x9 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x121 (or (bvugt input.memlabel-mem--symbol.1_begin ?x58) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x121) (or $x28 $x15)))))))
 (let (($x22 (and (and (and $x111 $x9) $x66) $x98)))
 (let (($x91 (= $x22 true)))
 (let (($x75 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x75 $x91)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x89 (and $x88 $x78)))
 (let (($x69 (forall ((input.ind-%var171X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var171X)))
 (=> $x57 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var171X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var170X)))
 (= $x57 false)))
 ))
 (let (($x122 (and $x92 $x69)))
 (let (($x20 (and $x122 $x89)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x65 $x20)))
 (let (($x52 (=> $x105 $x79)))
 (not $x52)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x104 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x79 (= $x104 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x6 (concat ?x48 (concat ?x64 ?x55)))))
 (let (($x98 (= input.dst.llvm-%n ?x63)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x107)))
 (let ((?x76 (bvand symbol.1 (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x76)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x27 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x87 (= input.memlabel-mem--symbol.1_end ?x27)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x31 (and $x61 $x87)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x42 $x31)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x39 (and $x127 $x13)))
 (let (($x21 (not $x39)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x45 (and $x51 $x43)))
 (let (($x30 (and (not $x45) $x21)))
 (let (($x47 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x35 $x47)))
 (let (($x124 (not $x36)))
 (let (($x109 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x54 $x109)))
 (let (($x40 (and (not $x82) $x124)))
 (let (($x14 (and (and (and (and (and (and $x40 $x30) $x17) $x81) $x90) $x18) $x25)))
 (let (($x86 (and $x14 $x101)))
 (let (($x120 (= symbol.1 dst_symbol_addr.1)))
 (let (($x66 (and $x120 $x86)))
 (let (($x9 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x121 (or (bvugt input.memlabel-mem--symbol.1_begin ?x58) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x121) (or $x28 $x15)))))))
 (let (($x22 (and (and (and $x111 $x9) $x66) $x98)))
 (let (($x91 (= $x22 true)))
 (let (($x75 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x78 (and $x75 $x91)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x89 (and $x88 $x78)))
 (let (($x69 (forall ((input.ind-%var171X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var171X)))
 (=> $x57 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var171X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var170X)))
 (= $x57 false)))
 ))
 (let (($x122 (and $x92 $x69)))
 (let (($x20 (and $x122 $x89)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x65 $x20)))
 (let (($x52 (=> $x105 $x79)))
 (not $x52)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (forall ((input.ind-%var193X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var193X))))
 ))
 (let (($x68 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x83 (spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var192X)))
 (= false $x83)))
 ))
 (let (($x141 (and $x68 $x140)))
 (let (($x142 (= $x141 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x52 (concat ?x105 (concat ?x91 ?x98)))))
 (let (($x59 (= input.dst.llvm-%n ?x24)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x73)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x66)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x72 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x76 (= input.memlabel-mem--symbol.1_end ?x72)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (and $x32 $x76)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x16 $x25)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x61 (and $x23 $x42)))
 (let (($x131 (not $x61)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (and $x80 $x93)))
 (let (($x87 (and (not $x81) $x131)))
 (let (($x39 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x13 $x39)))
 (let (($x30 (not $x21)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x45 $x8)))
 (let (($x17 (and (not $x127) $x30)))
 (let (($x64 (and (and (and (and (and (and $x17 $x87) $x31) $x19) $x14) $x86) $x71)))
 (let (($x55 (and $x64 $x53)))
 (let (($x43 (= symbol.1 dst_symbol_addr.1)))
 (let (($x95 (and $x43 $x55)))
 (let (($x15 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x102 (or (bvugt input.memlabel-mem--symbol.1_begin ?x111) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x102) (or $x54 $x109)))))))
 (let (($x96 (and (and (and $x124 $x15) $x95) $x59)))
 (let (($x99 (= $x96 true)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and $x62 $x99)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x97 (and $x110 $x126)))
 (let (($x116 (forall ((input.ind-%var181X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var181X)))
 (=> $x92 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var181X) (_ bv0 32)))))
 ))
 (let (($x113 (forall ((input.ind-%var180X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var180X)))
 (= $x92 false)))
 ))
 (let (($x58 (and $x113 $x116)))
 (let (($x7 (and $x58 $x97)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x26 (and $x65 $x7)))
 (let (($x143 (=> $x26 $x142)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (forall ((input.ind-%var193X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var193X))))
 ))
 (let (($x68 (forall ((input.ind-%var192X (_ BitVec 32)) )(let (($x83 (spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var192X)))
 (= false $x83)))
 ))
 (let (($x141 (and $x68 $x140)))
 (let (($x142 (= $x141 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x52 (concat ?x105 (concat ?x91 ?x98)))))
 (let (($x59 (= input.dst.llvm-%n ?x24)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x73)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x66)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x72 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x76 (= input.memlabel-mem--symbol.1_end ?x72)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (and $x32 $x76)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x16 $x25)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x61 (and $x23 $x42)))
 (let (($x131 (not $x61)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (and $x80 $x93)))
 (let (($x87 (and (not $x81) $x131)))
 (let (($x39 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x13 $x39)))
 (let (($x30 (not $x21)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x45 $x8)))
 (let (($x17 (and (not $x127) $x30)))
 (let (($x64 (and (and (and (and (and (and $x17 $x87) $x31) $x19) $x14) $x86) $x71)))
 (let (($x55 (and $x64 $x53)))
 (let (($x43 (= symbol.1 dst_symbol_addr.1)))
 (let (($x95 (and $x43 $x55)))
 (let (($x15 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x102 (or (bvugt input.memlabel-mem--symbol.1_begin ?x111) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x102) (or $x54 $x109)))))))
 (let (($x96 (and (and (and $x124 $x15) $x95) $x59)))
 (let (($x99 (= $x96 true)))
 (let (($x62 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and $x62 $x99)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x97 (and $x110 $x126)))
 (let (($x116 (forall ((input.ind-%var181X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var181X)))
 (=> $x92 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var181X) (_ bv0 32)))))
 ))
 (let (($x113 (forall ((input.ind-%var180X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var180X)))
 (= $x92 false)))
 ))
 (let (($x58 (and $x113 $x116)))
 (let (($x7 (and $x58 $x97)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x26 (and $x65 $x7)))
 (let (($x143 (=> $x26 $x142)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04000400)
  (define-fun input.ind-%var192X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x60001000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04000403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x6000118f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04000400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x60001000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x60001000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var192X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x10000200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf1179be4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf1179be7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1000038f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf1179be4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x10000200)
  (define-fun symbol.1 () (_ BitVec 32)
    #x10000200)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (forall ((input.ind-%var231X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var231X))))
 ))
 (let (($x84 (forall ((input.ind-%var230X (_ BitVec 32)) )(let (($x5 (spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var230X)))
 (= false $x5)))
 ))
 (let (($x67 (and $x84 $x133)))
 (let (($x136 (= $x67 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x68 (concat ?x26 (concat ?x99 ?x59)))))
 (let (($x138 (= input.dst.llvm-%n ?x134)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x37)))
 (let ((?x95 (bvand symbol.1 (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x95)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x60 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x66 (= input.memlabel-mem--symbol.1_end ?x60)))
 (let (($x101 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (and $x101 $x66)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x107 $x71)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (and $x49 $x16)))
 (let (($x18 (not $x32)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x10 $x90)))
 (let (($x76 (and (not $x19) $x18)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x42 $x61)))
 (let (($x87 (not $x131)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x81 $x27)))
 (let (($x31 (and (not $x23) $x87)))
 (let (($x91 (and (and (and (and (and (and $x31 $x76) $x25) $x48) $x64) $x55) $x44)))
 (let (($x98 (and $x91 $x79)))
 (let (($x93 (= symbol.1 dst_symbol_addr.1)))
 (let (($x78 (and $x93 $x98)))
 (let (($x109 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x34 (or (bvugt input.memlabel-mem--symbol.1_begin ?x124) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x45 $x8)))))))
 (let (($x141 (and (and (and $x30 $x109) $x78) $x138)))
 (let (($x142 (= $x141 true)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x125 $x142)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x29 $x143)))
 (let (($x108 (forall ((input.ind-%var219X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var219X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var219X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var218X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var218X)))
 (= $x113 false)))
 ))
 (let (($x111 (and $x11 $x108)))
 (let (($x115 (and $x111 $x144)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x28 (and $x65 $x115)))
 (let (($x137 (=> $x28 $x136)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (forall ((input.ind-%var231X (_ BitVec 32)) )(=> false (= (_ bv0 32) (spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var231X))))
 ))
 (let (($x84 (forall ((input.ind-%var230X (_ BitVec 32)) )(let (($x5 (spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var230X)))
 (= false $x5)))
 ))
 (let (($x67 (and $x84 $x133)))
 (let (($x136 (= $x67 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x68 (concat ?x26 (concat ?x99 ?x59)))))
 (let (($x138 (= input.dst.llvm-%n ?x134)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x37)))
 (let ((?x95 (bvand symbol.1 (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x95)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x60 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x66 (= input.memlabel-mem--symbol.1_end ?x60)))
 (let (($x101 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (and $x101 $x66)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x107 $x71)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (and $x49 $x16)))
 (let (($x18 (not $x32)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x10 $x90)))
 (let (($x76 (and (not $x19) $x18)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x42 $x61)))
 (let (($x87 (not $x131)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x81 $x27)))
 (let (($x31 (and (not $x23) $x87)))
 (let (($x91 (and (and (and (and (and (and $x31 $x76) $x25) $x48) $x64) $x55) $x44)))
 (let (($x98 (and $x91 $x79)))
 (let (($x93 (= symbol.1 dst_symbol_addr.1)))
 (let (($x78 (and $x93 $x98)))
 (let (($x109 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x34 (or (bvugt input.memlabel-mem--symbol.1_begin ?x124) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x45 $x8)))))))
 (let (($x141 (and (and (and $x30 $x109) $x78) $x138)))
 (let (($x142 (= $x141 true)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and $x125 $x142)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x29 $x143)))
 (let (($x108 (forall ((input.ind-%var219X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var219X)))
 (=> $x113 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var219X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var218X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var218X)))
 (= $x113 false)))
 ))
 (let (($x111 (and $x11 $x108)))
 (let (($x115 (and $x111 $x144)))
 (let (($x65 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x28 (and $x65 $x115)))
 (let (($x137 (=> $x28 $x136)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04000400)
  (define-fun input.ind-%var230X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x60001000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04000403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x6000118f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04000400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x60001000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x60001000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var230X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x10000200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf1179be4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf1179be7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1000038f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf1179be4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x10000200)
  (define-fun symbol.1 () (_ BitVec 32)
    #x10000200)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x173 (forall ((input.ind-%var273X (_ BitVec 32)) )(let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x164 (concat ?x163 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32)))))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x135 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var273X)))
 (let (($x77 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var273X)))
 (=> $x77 (= ?x135 (concat ?x169 (concat ?x166 ?x164)))))))))))
 ))
 (let (($x119 (forall ((input.ind-%var272X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var272X)))
 (= $x77 (and (bvule (_ bv0 32) input.ind-%var272X) (bvult input.ind-%var272X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x119 $x173)))
 (let (($x175 (= $x174 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x69 (concat ?x115 (concat ?x141 ?x134)))))
 (let (($x12 (= input.dst.llvm-%n ?x84)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x140)))
 (let ((?x98 (bvand symbol.1 (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x98)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x55 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x22 (= input.memlabel-mem--symbol.1_end ?x55)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (and $x73 $x22)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x105 $x95)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (and $x48 $x20)))
 (let (($x101 (not $x107)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x25 $x89)))
 (let (($x60 (and (not $x14) $x101)))
 (let (($x16 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x49 $x16)))
 (let (($x18 (not $x32)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x90 $x19)))
 (let (($x52 (and (not $x72) $x18)))
 (let (($x96 (and (and (and (and (and (and $x52 $x60) $x66) $x64) $x44) $x79) $x78)))
 (let (($x99 (and $x96 $x104)))
 (let (($x10 (= symbol.1 dst_symbol_addr.1)))
 (let (($x59 (and $x10 $x99)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x109 (or (bvugt input.memlabel-mem--symbol.1_begin ?x39) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x109) (or $x93 $x81)))))))
 (let (($x133 (and (and (and $x131 $x43) $x59) $x12)))
 (let (($x67 (= $x133 true)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x34 $x67)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x41 $x136)))
 (let (($x21 (forall ((input.ind-%var261X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var261X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var261X) (_ bv0 32)))))
 ))
 (let (($x112 (forall ((input.ind-%var260X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var260X)))
 (= $x123 false)))
 ))
 (let (($x35 (and $x112 $x21)))
 (let (($x117 (and $x35 $x137)))
 (let (($x130 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x54 (and $x130 $x117)))
 (let (($x176 (=> $x54 $x175)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x173 (forall ((input.ind-%var273X (_ BitVec 32)) )(let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x164 (concat ?x163 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32)))))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var273X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x135 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var273X)))
 (let (($x77 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var273X)))
 (=> $x77 (= ?x135 (concat ?x169 (concat ?x166 ?x164)))))))))))
 ))
 (let (($x119 (forall ((input.ind-%var272X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var272X)))
 (= $x77 (and (bvule (_ bv0 32) input.ind-%var272X) (bvult input.ind-%var272X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x119 $x173)))
 (let (($x175 (= $x174 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x69 (concat ?x115 (concat ?x141 ?x134)))))
 (let (($x12 (= input.dst.llvm-%n ?x84)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x140)))
 (let ((?x98 (bvand symbol.1 (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x98)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x55 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x22 (= input.memlabel-mem--symbol.1_end ?x55)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (and $x73 $x22)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x105 $x95)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (and $x48 $x20)))
 (let (($x101 (not $x107)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x25 $x89)))
 (let (($x60 (and (not $x14) $x101)))
 (let (($x16 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x49 $x16)))
 (let (($x18 (not $x32)))
 (let (($x19 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x90 $x19)))
 (let (($x52 (and (not $x72) $x18)))
 (let (($x96 (and (and (and (and (and (and $x52 $x60) $x66) $x64) $x44) $x79) $x78)))
 (let (($x99 (and $x96 $x104)))
 (let (($x10 (= symbol.1 dst_symbol_addr.1)))
 (let (($x59 (and $x10 $x99)))
 (let (($x43 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x109 (or (bvugt input.memlabel-mem--symbol.1_begin ?x39) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x109) (or $x93 $x81)))))))
 (let (($x133 (and (and (and $x131 $x43) $x59) $x12)))
 (let (($x67 (= $x133 true)))
 (let (($x34 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x34 $x67)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x41 $x136)))
 (let (($x21 (forall ((input.ind-%var261X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var261X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var261X) (_ bv0 32)))))
 ))
 (let (($x112 (forall ((input.ind-%var260X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var260X)))
 (= $x123 false)))
 ))
 (let (($x35 (and $x112 $x21)))
 (let (($x117 (and $x35 $x137)))
 (let (($x130 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x54 (and $x130 $x117)))
 (let (($x176 (=> $x54 $x175)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var273X!1 () (_ BitVec 32)
    #x20000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var273X!1 () (_ BitVec 32)
    #x00000062)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.ind-%var272X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfff7ff0c)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfff7ff0f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfff7ff0c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfff7ff0c) #x01
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x148 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x24 (concat ?x57 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32)))))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x154 (concat ?x116 ?x24)))))))))
 ))
 (let (($x172 (forall ((input.ind-%var312X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var312X) (bvult input.ind-%var312X (_ bv0 32)))))
 ))
 (let (($x149 (and $x172 $x148)))
 (let (($x147 (= $x149 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x85 (concat ?x117 (concat ?x133 ?x84)))))
 (let (($x62 (= input.dst.llvm-%n ?x92)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x106)))
 (let ((?x99 (bvand symbol.1 (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x99)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x79 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x26 (= input.memlabel-mem--symbol.1_end ?x79)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x98 (and $x91 $x26)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x7 $x98)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (and $x64 $x97)))
 (let (($x73 (not $x105)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x66 $x68)))
 (let (($x55 (and (not $x71) $x73)))
 (let (($x20 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x48 $x20)))
 (let (($x101 (not $x107)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x89 $x14)))
 (let (($x94 (and (not $x86) $x101)))
 (let (($x138 (and (and (and (and (and (and $x94 $x55) $x22) $x44) $x78) $x104) $x59)))
 (let (($x141 (and $x138 $x126)))
 (let (($x25 (= symbol.1 dst_symbol_addr.1)))
 (let (($x134 (and $x25 $x141)))
 (let (($x80 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x43 (or (bvugt input.memlabel-mem--symbol.1_begin ?x42) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x43) (or $x10 $x90)))))))
 (let (($x135 (and (and (and $x32 $x80) $x134) $x62)))
 (let (($x132 (= $x135 true)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x109 $x132)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x30 $x159)))
 (let (($x61 (forall ((input.ind-%var303X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var303X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var303X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var302X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var302X)))
 (= $x121 false)))
 ))
 (let (($x70 (and $x82 $x61)))
 (let (($x168 (and $x70 $x160)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x114 $x168)))
 (let (($x150 (=> $x169 $x147)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x148 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x24 (concat ?x57 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32)))))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var313X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x154 (concat ?x116 ?x24)))))))))
 ))
 (let (($x172 (forall ((input.ind-%var312X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var312X) (bvult input.ind-%var312X (_ bv0 32)))))
 ))
 (let (($x149 (and $x172 $x148)))
 (let (($x147 (= $x149 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x85 (concat ?x117 (concat ?x133 ?x84)))))
 (let (($x62 (= input.dst.llvm-%n ?x92)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x106)))
 (let ((?x99 (bvand symbol.1 (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x99)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x79 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x26 (= input.memlabel-mem--symbol.1_end ?x79)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x98 (and $x91 $x26)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x7 $x98)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x105 (and $x64 $x97)))
 (let (($x73 (not $x105)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x71 (and $x66 $x68)))
 (let (($x55 (and (not $x71) $x73)))
 (let (($x20 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x48 $x20)))
 (let (($x101 (not $x107)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x89 $x14)))
 (let (($x94 (and (not $x86) $x101)))
 (let (($x138 (and (and (and (and (and (and $x94 $x55) $x22) $x44) $x78) $x104) $x59)))
 (let (($x141 (and $x138 $x126)))
 (let (($x25 (= symbol.1 dst_symbol_addr.1)))
 (let (($x134 (and $x25 $x141)))
 (let (($x80 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x43 (or (bvugt input.memlabel-mem--symbol.1_begin ?x42) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x43) (or $x10 $x90)))))))
 (let (($x135 (and (and (and $x32 $x80) $x134) $x62)))
 (let (($x132 (= $x135 true)))
 (let (($x109 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x109 $x132)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x30 $x159)))
 (let (($x61 (forall ((input.ind-%var303X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var303X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var303X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var302X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var302X)))
 (= $x121 false)))
 ))
 (let (($x70 (and $x82 $x61)))
 (let (($x168 (and $x70 $x160)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x114 $x168)))
 (let (($x150 (=> $x169 $x147)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x162 (forall ((input.ind-%var333X (_ BitVec 32)) )(let ((?x36 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x111 (concat ?x36 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32)))))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x40 (concat ?x56 ?x111)))))))))
 ))
 (let (($x147 (forall ((input.ind-%var332X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var332X) (bvult input.ind-%var332X input.dst.llvm-%n))))
 ))
 (let (($x163 (and $x147 $x162)))
 (let (($x161 (= $x163 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x170 (concat ?x169 (concat ?x132 ?x62)))))
 (let (($x172 (= input.dst.llvm-%n ?x171)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x142)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x134)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let ((?x115 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x99 (= input.memlabel-mem--symbol.1_end ?x115)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (and $x140 $x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x96 $x59)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (and $x143 $x7)))
 (let (($x37 (not $x91)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x69 $x95)))
 (let (($x26 (and (not $x44) $x37)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x97 $x105)))
 (let (($x55 (not $x73)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x71 $x53)))
 (let (($x22 (and (not $x64) $x55)))
 (let (($x133 (and (and (and (and (and (and $x22 $x26) $x98) $x144) $x138) $x141) $x119)))
 (let (($x84 (and $x133 $x77)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x67 (and $x68 $x84)))
 (let (($x90 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x58 (or (bvugt input.memlabel-mem--symbol.1_begin ?x32) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x58) (or $x89 $x14)))))))
 (let (($x108 (and (and (and $x101 $x90) $x67) $x172)))
 (let (($x146 (= $x108 true)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x103 $x146)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x6 $x154)))
 (let (($x23 (forall ((input.ind-%var323X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var323X)))
 (=> $x82 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var323X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var322X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var322X)))
 (= $x82 false)))
 ))
 (let (($x42 (and $x127 $x23)))
 (let (($x116 (and $x42 $x75)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x129 (and $x114 $x116)))
 (let (($x118 (=> $x129 $x161)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x162 (forall ((input.ind-%var333X (_ BitVec 32)) )(let ((?x36 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x111 (concat ?x36 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32)))))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var333X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x40 (concat ?x56 ?x111)))))))))
 ))
 (let (($x147 (forall ((input.ind-%var332X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var332X) (bvult input.ind-%var332X input.dst.llvm-%n))))
 ))
 (let (($x163 (and $x147 $x162)))
 (let (($x161 (= $x163 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x170 (concat ?x169 (concat ?x132 ?x62)))))
 (let (($x172 (= input.dst.llvm-%n ?x171)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x142)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x134)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x126)))
 (let ((?x115 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x99 (= input.memlabel-mem--symbol.1_end ?x115)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (and $x140 $x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x96 $x59)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (and $x143 $x7)))
 (let (($x37 (not $x91)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x69 $x95)))
 (let (($x26 (and (not $x44) $x37)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x97 $x105)))
 (let (($x55 (not $x73)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x71 $x53)))
 (let (($x22 (and (not $x64) $x55)))
 (let (($x133 (and (and (and (and (and (and $x22 $x26) $x98) $x144) $x138) $x141) $x119)))
 (let (($x84 (and $x133 $x77)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x67 (and $x68 $x84)))
 (let (($x90 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x58 (or (bvugt input.memlabel-mem--symbol.1_begin ?x32) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x58) (or $x89 $x14)))))))
 (let (($x108 (and (and (and $x101 $x90) $x67) $x172)))
 (let (($x146 (= $x108 true)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x103 $x146)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x6 $x154)))
 (let (($x23 (forall ((input.ind-%var323X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var323X)))
 (=> $x82 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var323X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var322X (_ BitVec 32)) )(let (($x82 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var322X)))
 (= $x82 false)))
 ))
 (let (($x42 (and $x127 $x23)))
 (let (($x116 (and $x42 $x75)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x129 (and $x114 $x116)))
 (let (($x118 (=> $x129 $x161)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var332X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var332X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff8) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (= false true)))
 (let ((?x172 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x148 (concat ?x129 (concat ?x146 ?x172)))))
 (let (($x147 (= input.dst.llvm-%n ?x149)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x54)))
 (let ((?x67 (bvand symbol.1 (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x67)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x12 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x12)))
 (let (($x126 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (and $x126 $x134)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x106 $x119)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x137 $x96)))
 (let (($x104 (not $x140)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x136 $x78)))
 (let (($x99 (and (not $x144) $x104)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x7 $x91)))
 (let (($x26 (not $x37)))
 (let (($x79 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x44 $x79)))
 (let (($x98 (and (not $x143) $x26)))
 (let (($x132 (and (and (and (and (and (and $x98 $x99) $x59) $x117) $x133) $x84) $x102)))
 (let (($x62 (and $x132 $x164)))
 (let (($x95 (= symbol.1 dst_symbol_addr.1)))
 (let (($x159 (and $x95 $x62)))
 (let (($x14 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x101) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x71 $x53)))))))
 (let (($x166 (and (and (and $x55 $x14) $x159) $x147)))
 (let (($x83 (= $x166 true)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (and $x18 $x83)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x29 (and $x49 $x40)))
 (let (($x76 (forall ((input.ind-%var351X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var351X)))
 (=> $x127 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var351X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var350X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var350X)))
 (= $x127 false)))
 ))
 (let (($x32 (and $x16 $x76)))
 (let (($x56 (and $x32 $x29)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x114 $x56)))
 (let (($x176 (=> $x177 $x36)))
 (not $x176))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (= false true)))
 (let ((?x172 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x148 (concat ?x129 (concat ?x146 ?x172)))))
 (let (($x147 (= input.dst.llvm-%n ?x149)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x54)))
 (let ((?x67 (bvand symbol.1 (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x67)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x12 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x12)))
 (let (($x126 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (and $x126 $x134)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x106 $x119)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x137 $x96)))
 (let (($x104 (not $x140)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x136 $x78)))
 (let (($x99 (and (not $x144) $x104)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x7 $x91)))
 (let (($x26 (not $x37)))
 (let (($x79 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x44 $x79)))
 (let (($x98 (and (not $x143) $x26)))
 (let (($x132 (and (and (and (and (and (and $x98 $x99) $x59) $x117) $x133) $x84) $x102)))
 (let (($x62 (and $x132 $x164)))
 (let (($x95 (= symbol.1 dst_symbol_addr.1)))
 (let (($x159 (and $x95 $x62)))
 (let (($x14 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x101) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x71 $x53)))))))
 (let (($x166 (and (and (and $x55 $x14) $x159) $x147)))
 (let (($x83 (= $x166 true)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (and $x18 $x83)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x29 (and $x49 $x40)))
 (let (($x76 (forall ((input.ind-%var351X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var351X)))
 (=> $x127 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var351X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var350X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var350X)))
 (= $x127 false)))
 ))
 (let (($x32 (and $x16 $x76)))
 (let (($x56 (and $x32 $x29)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x114 $x56)))
 (let (($x176 (=> $x177 $x36)))
 (not $x176))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xab50fee7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000006f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffee0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x165)))
 (let ((?x62 (bvand symbol.1 (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x62)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x135 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x67 (and $x142 $x135)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x169 $x67)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x117 $x168)))
 (let (($x126 (not $x106)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x59 $x160)))
 (let (($x12 (and (not $x138) $x126)))
 (let (($x96 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x137 $x96)))
 (let (($x104 (not $x140)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x78 $x144)))
 (let (($x170 (and (not $x115) $x104)))
 (let (($x108 (and (and (and (and (and (and $x170 $x12) $x134) $x133) $x102) $x164) $x159)))
 (let (($x146 (and $x108 $x167)))
 (let (($x136 (= symbol.1 dst_symbol_addr.1)))
 (let (($x172 (and $x136 $x146)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x14 (or (bvugt input.memlabel-mem--symbol.1_begin ?x105) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x14) (or $x95 $x44)))))))
 (let (($x150 (and $x37 $x172)))
 (let (($x42 (= $x150 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x176 (concat ?x56 (concat ?x166 ?x149)))))
 (let (($x89 (= input.dst.llvm-%n ?x111)))
 (let (($x45 (and (and (and $x37 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x172) $x89)))
 (let (($x131 (= $x45 true)))
 (let (($x175 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x175 $x131)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x31 $x9)))
 (let (($x73 (forall ((input.ind-%var369X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var369X)))
 (=> $x27 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var369X) (_ bv0 32)))))
 ))
 (let (($x72 (forall ((input.ind-%var368X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var368X)))
 (= $x27 false)))
 ))
 (let (($x48 (and $x72 $x73)))
 (let (($x120 (and $x48 $x82)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x74 $x120)))
 (let (($x19 (=> $x103 $x42)))
 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x165)))
 (let ((?x62 (bvand symbol.1 (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x62)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x135 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x67 (and $x142 $x135)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x169 $x67)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x106 (and $x117 $x168)))
 (let (($x126 (not $x106)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x59 $x160)))
 (let (($x12 (and (not $x138) $x126)))
 (let (($x96 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x137 $x96)))
 (let (($x104 (not $x140)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x78 $x144)))
 (let (($x170 (and (not $x115) $x104)))
 (let (($x108 (and (and (and (and (and (and $x170 $x12) $x134) $x133) $x102) $x164) $x159)))
 (let (($x146 (and $x108 $x167)))
 (let (($x136 (= symbol.1 dst_symbol_addr.1)))
 (let (($x172 (and $x136 $x146)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x14 (or (bvugt input.memlabel-mem--symbol.1_begin ?x105) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x14) (or $x95 $x44)))))))
 (let (($x150 (and $x37 $x172)))
 (let (($x42 (= $x150 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x176 (concat ?x56 (concat ?x166 ?x149)))))
 (let (($x89 (= input.dst.llvm-%n ?x111)))
 (let (($x45 (and (and (and $x37 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x172) $x89)))
 (let (($x131 (= $x45 true)))
 (let (($x175 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (and $x175 $x131)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x31 $x9)))
 (let (($x73 (forall ((input.ind-%var369X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var369X)))
 (=> $x27 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var369X) (_ bv0 32)))))
 ))
 (let (($x72 (forall ((input.ind-%var368X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var368X)))
 (= $x27 false)))
 ))
 (let (($x48 (and $x72 $x73)))
 (let (($x120 (and $x48 $x82)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x74 $x120)))
 (let (($x19 (=> $x103 $x42)))
 (not $x19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x23 (= $x58 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x19 (concat ?x103 (concat ?x131 ?x89)))))
 (let (($x94 (= input.dst.llvm-%n ?x51)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x154)))
 (let ((?x172 (bvand symbol.1 (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x172)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x129 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x62 (= input.memlabel-mem--symbol.1_end ?x129)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x159 (and $x54 $x62)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x132 $x159)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (and $x75 $x169)))
 (let (($x77 (not $x142)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x148 $x119)))
 (let (($x135 (and (not $x133) $x77)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x168 $x106)))
 (let (($x12 (not $x126)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x138 $x141)))
 (let (($x134 (and (not $x117) $x12)))
 (let (($x166 (and (and (and (and (and (and $x134 $x135) $x67) $x116) $x108) $x146) $x30)))
 (let (($x149 (and $x166 $x36)))
 (let (($x160 (= symbol.1 dst_symbol_addr.1)))
 (let (($x83 (and $x160 $x149)))
 (let (($x44 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x171 (or (bvugt input.memlabel-mem--symbol.1_begin ?x37) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x171) (or $x78 $x144)))))))
 (let (($x16 (and (and (and $x104 $x44) $x83) $x94)))
 (let (($x49 (= $x16 true)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x174 $x49)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x97 $x32)))
 (let (($x5 (forall ((input.ind-%var379X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var379X)))
 (=> $x72 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var379X) (_ bv0 32)))))
 ))
 (let (($x60 (forall ((input.ind-%var378X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var378X)))
 (= $x72 false)))
 ))
 (let (($x105 (and $x60 $x5)))
 (let (($x8 (and $x105 $x114)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x6 (and $x74 $x8)))
 (let (($x76 (=> $x6 $x23)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x23 (= $x58 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x19 (concat ?x103 (concat ?x131 ?x89)))))
 (let (($x94 (= input.dst.llvm-%n ?x51)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x154)))
 (let ((?x172 (bvand symbol.1 (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x172)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x129 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x62 (= input.memlabel-mem--symbol.1_end ?x129)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x159 (and $x54 $x62)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x132 $x159)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (and $x75 $x169)))
 (let (($x77 (not $x142)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x148 $x119)))
 (let (($x135 (and (not $x133) $x77)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (and $x168 $x106)))
 (let (($x12 (not $x126)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x138 $x141)))
 (let (($x134 (and (not $x117) $x12)))
 (let (($x166 (and (and (and (and (and (and $x134 $x135) $x67) $x116) $x108) $x146) $x30)))
 (let (($x149 (and $x166 $x36)))
 (let (($x160 (= symbol.1 dst_symbol_addr.1)))
 (let (($x83 (and $x160 $x149)))
 (let (($x44 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x171 (or (bvugt input.memlabel-mem--symbol.1_begin ?x37) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x171) (or $x78 $x144)))))))
 (let (($x16 (and (and (and $x104 $x44) $x83) $x94)))
 (let (($x49 (= $x16 true)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x174 $x49)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x97 $x32)))
 (let (($x5 (forall ((input.ind-%var379X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var379X)))
 (=> $x72 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var379X) (_ bv0 32)))))
 ))
 (let (($x60 (forall ((input.ind-%var378X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var378X)))
 (= $x72 false)))
 ))
 (let (($x105 (and $x60 $x5)))
 (let (($x8 (and $x105 $x114)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x6 (and $x74 $x8)))
 (let (($x76 (=> $x6 $x23)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa61d4183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun symbol.1 () (_ BitVec 32)
    #xa61d3ff4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x107)))
 (let (($x53 (= ?x48 input.dst.llvm-%n)))
 (let (($x11 (= $x53 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x76 (concat ?x6 (concat ?x49 ?x94)))))
 (let (($x22 (= input.dst.llvm-%n ?x18)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x177)))
 (let ((?x83 (bvand symbol.1 (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x83)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let ((?x147 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x172 (= input.memlabel-mem--symbol.1_end ?x147)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x30 (and $x167 $x172)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x165 $x30)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x29 $x132)))
 (let (($x164 (not $x54)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x116 (and $x40 $x102)))
 (let (($x62 (and (not $x116) $x164)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x169 $x142)))
 (let (($x135 (not $x77)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x133 $x84)))
 (let (($x67 (and (not $x75) $x135)))
 (let (($x131 (and (and (and (and (and (and $x67 $x62) $x159) $x56) $x166) $x149) $x152)))
 (let (($x89 (and $x131 $x42)))
 (let (($x119 (= symbol.1 dst_symbol_addr.1)))
 (let (($x9 (and $x119 $x89)))
 (let (($x144 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x138 $x141)))))))
 (let (($x93 (and (and (and $x12 $x144) $x9) $x22)))
 (let (($x20 (= $x93 true)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (and $x26 $x20)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x127 (and $x7 $x101)))
 (let (($x85 (forall ((input.ind-%var397X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var397X)))
 (=> $x60 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var397X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var396X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var396X)))
 (= $x60 false)))
 ))
 (let (($x37 (and $x91 $x85)))
 (let (($x27 (and $x37 $x127)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x80 (and $x74 $x27)))
 (let (($x122 (=> $x80 $x11)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x107 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x48 (bvneg ?x107)))
 (let (($x53 (= ?x48 input.dst.llvm-%n)))
 (let (($x11 (= $x53 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x76 (concat ?x6 (concat ?x49 ?x94)))))
 (let (($x22 (= input.dst.llvm-%n ?x18)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x177)))
 (let ((?x83 (bvand symbol.1 (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x83)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let ((?x147 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x172 (= input.memlabel-mem--symbol.1_end ?x147)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x30 (and $x167 $x172)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x165 $x30)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x29 $x132)))
 (let (($x164 (not $x54)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x116 (and $x40 $x102)))
 (let (($x62 (and (not $x116) $x164)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x169 $x142)))
 (let (($x135 (not $x77)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x133 $x84)))
 (let (($x67 (and (not $x75) $x135)))
 (let (($x131 (and (and (and (and (and (and $x67 $x62) $x159) $x56) $x166) $x149) $x152)))
 (let (($x89 (and $x131 $x42)))
 (let (($x119 (= symbol.1 dst_symbol_addr.1)))
 (let (($x9 (and $x119 $x89)))
 (let (($x144 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x138 $x141)))))))
 (let (($x93 (and (and (and $x12 $x144) $x9) $x22)))
 (let (($x20 (= $x93 true)))
 (let (($x26 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x101 (and $x26 $x20)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x127 (and $x7 $x101)))
 (let (($x85 (forall ((input.ind-%var397X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var397X)))
 (=> $x60 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var397X) (_ bv0 32)))))
 ))
 (let (($x91 (forall ((input.ind-%var396X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var396X)))
 (= $x60 false)))
 ))
 (let (($x37 (and $x91 $x85)))
 (let (($x27 (and $x37 $x127)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x80 (and $x74 $x27)))
 (let (($x122 (=> $x80 $x11)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x90 (= $x72 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x48 (concat ?x80 (concat ?x20 ?x22)))))
 (let (($x11 (= input.dst.llvm-%n ?x53)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x150)))
 (let ((?x9 (bvand symbol.1 (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x9)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x45 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x83 (= input.memlabel-mem--symbol.1_end ?x45)))
 (let (($x36 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (and $x36 $x83)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x154 $x152)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x167 (and $x120 $x165)))
 (let (($x146 (not $x167)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x56 (and $x82 $x108)))
 (let (($x172 (and (not $x56) $x146)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x132 $x54)))
 (let (($x62 (not $x164)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x116 $x129)))
 (let (($x159 (and (not $x29) $x62)))
 (let (($x49 (and (and (and (and (and (and $x159 $x172) $x30) $x103) $x131) $x89) $x111)))
 (let (($x94 (and $x49 $x23)))
 (let (($x102 (= symbol.1 dst_symbol_addr.1)))
 (let (($x32 (and $x102 $x94)))
 (let (($x141 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x95 (or (bvugt input.memlabel-mem--symbol.1_begin ?x12) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x95) (or $x133 $x84)))))))
 (let (($x98 (and (and (and $x135 $x141) $x32) $x11)))
 (let (($x78 (= $x98 true)))
 (let (($x170 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x170 $x78)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x31 (and $x96 $x51)))
 (let (($x137 (forall ((input.ind-%var407X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var407X)))
 (=> $x91 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var407X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var406X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var406X)))
 (= $x91 false)))
 ))
 (let (($x104 (and $x140 $x137)))
 (let (($x25 (and $x104 $x31)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x55 (and $x74 $x25)))
 (let (($x174 (=> $x55 $x90)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x90 (= $x72 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x48 (concat ?x80 (concat ?x20 ?x22)))))
 (let (($x11 (= input.dst.llvm-%n ?x53)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x150)))
 (let ((?x9 (bvand symbol.1 (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x9)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x45 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x83 (= input.memlabel-mem--symbol.1_end ?x45)))
 (let (($x36 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (and $x36 $x83)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x154 $x152)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x167 (and $x120 $x165)))
 (let (($x146 (not $x167)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x56 (and $x82 $x108)))
 (let (($x172 (and (not $x56) $x146)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x132 $x54)))
 (let (($x62 (not $x164)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x116 $x129)))
 (let (($x159 (and (not $x29) $x62)))
 (let (($x49 (and (and (and (and (and (and $x159 $x172) $x30) $x103) $x131) $x89) $x111)))
 (let (($x94 (and $x49 $x23)))
 (let (($x102 (= symbol.1 dst_symbol_addr.1)))
 (let (($x32 (and $x102 $x94)))
 (let (($x141 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x95 (or (bvugt input.memlabel-mem--symbol.1_begin ?x12) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x95) (or $x133 $x84)))))))
 (let (($x98 (and (and (and $x135 $x141) $x32) $x11)))
 (let (($x78 (= $x98 true)))
 (let (($x170 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (and $x170 $x78)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x31 (and $x96 $x51)))
 (let (($x137 (forall ((input.ind-%var407X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var407X)))
 (=> $x91 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var407X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var406X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var406X)))
 (= $x91 false)))
 ))
 (let (($x104 (and $x140 $x137)))
 (let (($x25 (and $x104 $x31)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x55 (and $x74 $x25)))
 (let (($x174 (=> $x55 $x90)))
 (not $x174)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffff7fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffff7ff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffff7fc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x5 (= $x26 true)))
 (let ((?x11 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x90 (concat ?x55 (concat ?x78 ?x11)))))
 (let (($x73 (= input.dst.llvm-%n ?x174)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x58)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x32)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x16 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x9 (= input.memlabel-mem--symbol.1_end ?x16)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x111 (and $x42 $x9)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x177 $x111)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x8 $x154)))
 (let (($x149 (not $x36)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x103 (and $x114 $x166)))
 (let (($x83 (and (not $x103) $x149)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x165 $x167)))
 (let (($x172 (not $x146)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x56 $x147)))
 (let (($x30 (and (not $x120) $x172)))
 (let (($x20 (and (and (and (and (and (and $x30 $x83) $x152) $x6) $x49) $x94) $x65)))
 (let (($x22 (and $x20 $x107)))
 (let (($x108 (= symbol.1 dst_symbol_addr.1)))
 (let (($x101 (and $x108 $x22)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x122 (or (bvugt input.memlabel-mem--symbol.1_begin ?x135) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x122) (or $x116 $x129)))))))
 (let (($x18 (and (and (and $x62 $x84) $x101) $x73)))
 (let (($x97 (= $x18 true)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (and $x134 $x97)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x106 $x68)))
 (let (($x168 (forall ((input.ind-%var425X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var425X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var425X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var424X)))
 (= $x140 false)))
 ))
 (let (($x12 (and $x126 $x168)))
 (let (($x86 (and $x12 $x71)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x74 $x86)))
 (let (($x37 (=> $x60 $x5)))
 (not $x37)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x26 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x5 (= $x26 true)))
 (let ((?x11 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x90 (concat ?x55 (concat ?x78 ?x11)))))
 (let (($x73 (= input.dst.llvm-%n ?x174)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x58)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x32)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x16 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x9 (= input.memlabel-mem--symbol.1_end ?x16)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x111 (and $x42 $x9)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x177 $x111)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x8 $x154)))
 (let (($x149 (not $x36)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x103 (and $x114 $x166)))
 (let (($x83 (and (not $x103) $x149)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x165 $x167)))
 (let (($x172 (not $x146)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x56 $x147)))
 (let (($x30 (and (not $x120) $x172)))
 (let (($x20 (and (and (and (and (and (and $x30 $x83) $x152) $x6) $x49) $x94) $x65)))
 (let (($x22 (and $x20 $x107)))
 (let (($x108 (= symbol.1 dst_symbol_addr.1)))
 (let (($x101 (and $x108 $x22)))
 (let (($x84 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x122 (or (bvugt input.memlabel-mem--symbol.1_begin ?x135) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x122) (or $x116 $x129)))))))
 (let (($x18 (and (and (and $x62 $x84) $x101) $x73)))
 (let (($x97 (= $x18 true)))
 (let (($x134 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (and $x134 $x97)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x106 $x68)))
 (let (($x168 (forall ((input.ind-%var425X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var425X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var425X) (_ bv0 32)))))
 ))
 (let (($x126 (forall ((input.ind-%var424X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var424X)))
 (= $x140 false)))
 ))
 (let (($x12 (and $x126 $x168)))
 (let (($x86 (and $x12 $x71)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x74 $x86)))
 (let (($x37 (=> $x60 $x5)))
 (not $x37)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x9ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x9ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x9ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x171 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x170 (= $x171 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x5 (concat ?x60 (concat ?x97 ?x73)))))
 (let (($x115 (= input.dst.llvm-%n ?x37)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x175)))
 (let ((?x101 (bvand symbol.1 (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x101)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x93 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x32 (= input.memlabel-mem--symbol.1_end ?x93)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x65 (and $x23 $x32)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x150 $x65)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x27 $x177)))
 (let (($x89 (not $x42)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x6 (and $x127 $x131)))
 (let (($x9 (and (not $x6) $x89)))
 (let (($x36 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x154 $x36)))
 (let (($x83 (not $x149)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x103 $x45)))
 (let (($x152 (and (not $x8) $x83)))
 (let (($x78 (and (and (and (and (and (and $x152 $x9) $x111) $x80) $x20) $x22) $x138)))
 (let (($x11 (and $x78 $x72)))
 (let (($x166 (= symbol.1 dst_symbol_addr.1)))
 (let (($x51 (and $x166 $x11)))
 (let (($x129 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x59 (or (bvugt input.memlabel-mem--symbol.1_begin ?x62) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x59) (or $x56 $x147)))))))
 (let (($x53 (and (and (and $x172 $x129) $x51) $x115)))
 (let (($x7 (= $x53 true)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (and $x67 $x7)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x69 (and $x142 $x44)))
 (let (($x169 (forall ((input.ind-%var443X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var443X)))
 (=> $x126 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var443X) (_ bv0 32)))))
 ))
 (let (($x77 (forall ((input.ind-%var442X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var442X)))
 (= $x126 false)))
 ))
 (let (($x135 (and $x77 $x169)))
 (let (($x64 (and $x135 $x69)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x91 (and $x74 $x64)))
 (let (($x85 (=> $x91 $x170)))
 (not $x85)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x171 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x170 (= $x171 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x5 (concat ?x60 (concat ?x97 ?x73)))))
 (let (($x115 (= input.dst.llvm-%n ?x37)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x175)))
 (let ((?x101 (bvand symbol.1 (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x101)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x93 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x32 (= input.memlabel-mem--symbol.1_end ?x93)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x65 (and $x23 $x32)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x150 $x65)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x27 $x177)))
 (let (($x89 (not $x42)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x6 (and $x127 $x131)))
 (let (($x9 (and (not $x6) $x89)))
 (let (($x36 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x154 $x36)))
 (let (($x83 (not $x149)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x103 $x45)))
 (let (($x152 (and (not $x8) $x83)))
 (let (($x78 (and (and (and (and (and (and $x152 $x9) $x111) $x80) $x20) $x22) $x138)))
 (let (($x11 (and $x78 $x72)))
 (let (($x166 (= symbol.1 dst_symbol_addr.1)))
 (let (($x51 (and $x166 $x11)))
 (let (($x129 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x59 (or (bvugt input.memlabel-mem--symbol.1_begin ?x62) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x59) (or $x56 $x147)))))))
 (let (($x53 (and (and (and $x172 $x129) $x51) $x115)))
 (let (($x7 (= $x53 true)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (and $x67 $x7)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x69 (and $x142 $x44)))
 (let (($x169 (forall ((input.ind-%var443X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var443X)))
 (=> $x126 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var443X) (_ bv0 32)))))
 ))
 (let (($x77 (forall ((input.ind-%var442X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var442X)))
 (= $x126 false)))
 ))
 (let (($x135 (and $x77 $x169)))
 (let (($x64 (and $x135 $x69)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x91 (and $x74 $x64)))
 (let (($x85 (=> $x91 $x170)))
 (not $x85)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (forall ((input.ind-%var463X (_ BitVec 32)) )(let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x113 (concat ?x128 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32)))))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x124 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var463X)))
 (let (($x12 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var463X)))
 (=> $x12 (= ?x124 (concat ?x34 (concat ?x24 ?x113)))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var462X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var462X)))
 (= $x12 (and (bvule (_ bv0 32) input.ind-%var462X) (bvult input.ind-%var462X input.dst.llvm-%n)))))
 ))
 (let (($x50 (and $x153 $x33)))
 (let (($x157 (= $x50 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x85 (concat ?x91 (concat ?x7 ?x115)))))
 (let (($x40 (= input.dst.llvm-%n ?x104)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x43)))
 (let ((?x51 (bvand symbol.1 (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x51)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x98 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x98)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (and $x107 $x101)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x58 $x138)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (and $x25 $x150)))
 (let (($x94 (not $x23)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (and $x31 $x49)))
 (let (($x32 (and (not $x80) $x94)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x177 $x42)))
 (let (($x9 (not $x89)))
 (let (($x16 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x6 $x16)))
 (let (($x111 (and (not $x27) $x9)))
 (let (($x97 (and (and (and (and (and (and $x111 $x32) $x65) $x55) $x78) $x11) $x133)))
 (let (($x73 (and $x97 $x26)))
 (let (($x131 (= symbol.1 dst_symbol_addr.1)))
 (let (($x68 (and $x131 $x73)))
 (let (($x147 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x148 (or (bvugt input.memlabel-mem--symbol.1_begin ?x172) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x148) (or $x103 $x45)))))))
 (let (($x96 (and (and (and $x83 $x147) $x68) $x40)))
 (let (($x144 (= $x96 true)))
 (let (($x159 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x159 $x144)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x54 $x136)))
 (let (($x132 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var453X)))
 (=> $x77 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var453X) (_ bv0 32)))))
 ))
 (let (($x164 (forall ((input.ind-%var452X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var452X)))
 (= $x77 false)))
 ))
 (let (($x62 (and $x164 $x132)))
 (let (($x140 (and $x62 $x143)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x66 (and $x74 $x140)))
 (let (($x100 (=> $x66 $x157)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x33 (forall ((input.ind-%var463X (_ BitVec 32)) )(let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x113 (concat ?x128 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32)))))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var463X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x124 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var463X)))
 (let (($x12 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var463X)))
 (=> $x12 (= ?x124 (concat ?x34 (concat ?x24 ?x113)))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var462X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var462X)))
 (= $x12 (and (bvule (_ bv0 32) input.ind-%var462X) (bvult input.ind-%var462X input.dst.llvm-%n)))))
 ))
 (let (($x50 (and $x153 $x33)))
 (let (($x157 (= $x50 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x85 (concat ?x91 (concat ?x7 ?x115)))))
 (let (($x40 (= input.dst.llvm-%n ?x104)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x43)))
 (let ((?x51 (bvand symbol.1 (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x51)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x98 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x98)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (and $x107 $x101)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x58 $x138)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (and $x25 $x150)))
 (let (($x94 (not $x23)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (and $x31 $x49)))
 (let (($x32 (and (not $x80) $x94)))
 (let (($x42 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x177 $x42)))
 (let (($x9 (not $x89)))
 (let (($x16 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x6 $x16)))
 (let (($x111 (and (not $x27) $x9)))
 (let (($x97 (and (and (and (and (and (and $x111 $x32) $x65) $x55) $x78) $x11) $x133)))
 (let (($x73 (and $x97 $x26)))
 (let (($x131 (= symbol.1 dst_symbol_addr.1)))
 (let (($x68 (and $x131 $x73)))
 (let (($x147 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x148 (or (bvugt input.memlabel-mem--symbol.1_begin ?x172) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x148) (or $x103 $x45)))))))
 (let (($x96 (and (and (and $x83 $x147) $x68) $x40)))
 (let (($x144 (= $x96 true)))
 (let (($x159 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x159 $x144)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x54 $x136)))
 (let (($x132 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var453X)))
 (=> $x77 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var453X) (_ bv0 32)))))
 ))
 (let (($x164 (forall ((input.ind-%var452X (_ BitVec 32)) )(let (($x77 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var452X)))
 (= $x77 false)))
 ))
 (let (($x62 (and $x164 $x132)))
 (let (($x140 (and $x62 $x143)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x66 (and $x74 $x140)))
 (let (($x100 (=> $x66 $x157)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var463X!1 () (_ BitVec 32)
    #x20000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var462X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfff7ff0c)
  (define-fun input.ind-%var463X!1 () (_ BitVec 32)
    #x00000062)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfff7ff0f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfff7ff0c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfff7ff0c) #x01
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x24 (= false true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x163 (concat ?x66 (concat ?x144 ?x40)))))
 (let (($x110 (= input.dst.llvm-%n ?x118)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x14)))
 (let ((?x68 (bvand symbol.1 (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x68)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x18 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x18)))
 (let (($x72 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x133 (and $x72 $x51)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x175 $x133)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (and $x86 $x58)))
 (let (($x22 (not $x107)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x71 $x20)))
 (let (($x101 (and (not $x55) $x22)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x150 $x23)))
 (let (($x32 (not $x94)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x80 $x93)))
 (let (($x65 (and (not $x25) $x32)))
 (let (($x7 (and (and (and (and (and (and $x65 $x101) $x138) $x60) $x97) $x73) $x174)))
 (let (($x115 (and $x7 $x170)))
 (let (($x49 (= symbol.1 dst_symbol_addr.1)))
 (let (($x44 (and $x49 $x115)))
 (let (($x45 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x116 (or (bvugt input.memlabel-mem--symbol.1_begin ?x83) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x116) (or $x6 $x16)))))))
 (let (($x39 (and (and (and $x9 $x45) $x44) $x110)))
 (let (($x38 (= $x39 true)))
 (let (($x30 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (and $x30 $x38)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x155 (and $x167 $x112)))
 (let (($x165 (forall ((input.ind-%var489X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var489X)))
 (=> $x164 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var489X) (_ bv0 32)))))
 ))
 (let (($x146 (forall ((input.ind-%var488X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var488X)))
 (= $x164 false)))
 ))
 (let (($x172 (and $x146 $x165)))
 (let (($x34 (and $x172 $x155)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x74 $x34)))
 (let (($x28 (=> $x21 $x24)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x24 (= false true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x163 (concat ?x66 (concat ?x144 ?x40)))))
 (let (($x110 (= input.dst.llvm-%n ?x118)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x14)))
 (let ((?x68 (bvand symbol.1 (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x68)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x18 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x18)))
 (let (($x72 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x133 (and $x72 $x51)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x175 $x133)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (and $x86 $x58)))
 (let (($x22 (not $x107)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x71 $x20)))
 (let (($x101 (and (not $x55) $x22)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x150 $x23)))
 (let (($x32 (not $x94)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x80 $x93)))
 (let (($x65 (and (not $x25) $x32)))
 (let (($x7 (and (and (and (and (and (and $x65 $x101) $x138) $x60) $x97) $x73) $x174)))
 (let (($x115 (and $x7 $x170)))
 (let (($x49 (= symbol.1 dst_symbol_addr.1)))
 (let (($x44 (and $x49 $x115)))
 (let (($x45 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x116 (or (bvugt input.memlabel-mem--symbol.1_begin ?x83) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x116) (or $x6 $x16)))))))
 (let (($x39 (and (and (and $x9 $x45) $x44) $x110)))
 (let (($x38 (= $x39 true)))
 (let (($x30 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (and $x30 $x38)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x155 (and $x167 $x112)))
 (let (($x165 (forall ((input.ind-%var489X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var489X)))
 (=> $x164 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var489X) (_ bv0 32)))))
 ))
 (let (($x146 (forall ((input.ind-%var488X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var488X)))
 (= $x164 false)))
 ))
 (let (($x172 (and $x146 $x165)))
 (let (($x34 (and $x172 $x155)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x74 $x34)))
 (let (($x28 (=> $x21 $x24)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xab50fee7)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000006f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xab50fee4)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffee0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffee0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x118 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x118 false)))
 (let (($x99 (= $x160 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x61)))
 (let (($x56 (= ?x82 input.dst.llvm-%n)))
 (let (($x37 (= $x56 true)))
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (= $x50 true)))
 (let (($x156 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x88 (= $x156 true)))
 (let (($x113 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x113 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x120 (= $x62 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x122 true)))
 (let ((?x39 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x38 (bvadd symbol.1 ?x39)))
 (let (($x104 (and (bvule input.memlabel-mem--symbol.1_begin ?x38) (bvule (bvadd ?x38 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x151 (=> (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x155 (=> (and $x118 (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x104)))))
 (let (($x34 (= $x155 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x115)))
 (let ((?x14 (bvand symbol.1 (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x14)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let ((?x43 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x26 (= input.memlabel-mem--symbol.1_end ?x43)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x73 (and $x97 $x26)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x133 $x73)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x69 $x78)))
 (let (($x64 (not $x60)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x101 $x85)))
 (let (($x72 (and (not $x138) $x64)))
 (let (($x98 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x55 $x98)))
 (let (($x58 (not $x86)))
 (let (($x71 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x65 $x71)))
 (let (($x22 (and (not $x20) $x58)))
 (let (($x140 (and (and (and (and (and (and $x22 $x72) $x11) $x51) $x53) $x7) $x170)))
 (let (($x66 (and $x140 $x44)))
 (let (($x32 (= symbol.1 dst_symbol_addr.1)))
 (let (($x96 (and $x32 $x66)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x45 (or (bvugt input.memlabel-mem--symbol.1_begin ?x42) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x45) (or $x49 $x80)))))))
 (let (($x144 (and $x94 $x96)))
 (let (($x40 (= $x144 true)))
 (let (($x77 (and $x40 $x34)))
 (let (($x87 (and $x77 $x159)))
 (let (($x41 (and $x87 $x120)))
 (let (($x63 (and $x41 $x145)))
 (let (($x33 (and $x63 $x88)))
 (let (($x100 (and $x33 $x157)))
 (let (($x106 (and $x100 $x37)))
 (let (($x116 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (and $x116 $x106)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x108 $x141)))
 (let (($x89 (forall ((input.ind-%var507X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var507X)))
 (=> $x164 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var507X) (_ bv0 32)))))
 ))
 (let (($x76 (forall ((input.ind-%var506X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var506X)))
 (= $x164 false)))
 ))
 (let (($x154 (and $x76 $x89)))
 (let (($x13 (and $x154 $x75)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x52 $x13)))
 (let (($x126 (=> $x169 $x99)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x118 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x160 (= $x118 false)))
 (let (($x99 (= $x160 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x82 (bvneg ?x61)))
 (let (($x56 (= ?x82 input.dst.llvm-%n)))
 (let (($x37 (= $x56 true)))
 (let (($x50 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x157 (= $x50 true)))
 (let (($x156 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x88 (= $x156 true)))
 (let (($x113 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x113 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x120 (= $x62 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (= $x122 true)))
 (let ((?x39 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x38 (bvadd symbol.1 ?x39)))
 (let (($x104 (and (bvule input.memlabel-mem--symbol.1_begin ?x38) (bvule (bvadd ?x38 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x151 (=> (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32))) (or false (or false $x104)))))
 (let (($x155 (=> (and $x118 (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x104)))))
 (let (($x34 (= $x155 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x115)))
 (let ((?x14 (bvand symbol.1 (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x14)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let ((?x43 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x26 (= input.memlabel-mem--symbol.1_end ?x43)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x73 (and $x97 $x26)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x133 $x73)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x60 (and $x69 $x78)))
 (let (($x64 (not $x60)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x101 $x85)))
 (let (($x72 (and (not $x138) $x64)))
 (let (($x98 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x55 $x98)))
 (let (($x58 (not $x86)))
 (let (($x71 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (and $x65 $x71)))
 (let (($x22 (and (not $x20) $x58)))
 (let (($x140 (and (and (and (and (and (and $x22 $x72) $x11) $x51) $x53) $x7) $x170)))
 (let (($x66 (and $x140 $x44)))
 (let (($x32 (= symbol.1 dst_symbol_addr.1)))
 (let (($x96 (and $x32 $x66)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x45 (or (bvugt input.memlabel-mem--symbol.1_begin ?x42) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x94 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x45) (or $x49 $x80)))))))
 (let (($x144 (and $x94 $x96)))
 (let (($x40 (= $x144 true)))
 (let (($x77 (and $x40 $x34)))
 (let (($x87 (and $x77 $x159)))
 (let (($x41 (and $x87 $x120)))
 (let (($x63 (and $x41 $x145)))
 (let (($x33 (and $x63 $x88)))
 (let (($x100 (and $x33 $x157)))
 (let (($x106 (and $x100 $x37)))
 (let (($x116 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x141 (and $x116 $x106)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x108 $x141)))
 (let (($x89 (forall ((input.ind-%var507X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var507X)))
 (=> $x164 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var507X) (_ bv0 32)))))
 ))
 (let (($x76 (forall ((input.ind-%var506X (_ BitVec 32)) )(let (($x164 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var506X)))
 (= $x164 false)))
 ))
 (let (($x154 (and $x76 $x89)))
 (let (($x13 (and $x154 $x75)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x52 $x13)))
 (let (($x126 (=> $x169 $x99)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x08f3be78)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00008003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x08f3c007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00008000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x08f3be78)
  (define-fun symbol.1 () (_ BitVec 32)
    #x08f3be78)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x118)))
 (let ((?x136 (bvand symbol.1 (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x136)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x140 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x115 (= input.memlabel-mem--symbol.1_end ?x140)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x14 $x115)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x143 $x44)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x26 (and $x91 $x43)))
 (let (($x73 (not $x26)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (and $x161 $x133)))
 (let (($x163 (and (not $x97) $x73)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x72 $x124)))
 (let (($x171 (not $x11)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x78 $x60)))
 (let (($x51 (and (not $x64) $x171)))
 (let (($x28 (and (and (and (and (and (and $x51 $x163) $x68) $x7) $x66) $x40) $x12)))
 (let (($x128 (and $x28 $x110)))
 (let (($x69 (= symbol.1 dst_symbol_addr.1)))
 (let (($x103 (and $x69 $x128)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x32 (or (bvugt input.memlabel-mem--symbol.1_begin ?x94) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x32) (or $x107 $x55)))))))
 (let (($x158 (and $x85 $x103)))
 (let (($x61 (= $x158 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x120 (concat ?x159 (concat ?x155 ?x84)))))
 (let (($x113 (= input.dst.llvm-%n ?x41)))
 (let (($x156 (and (and (and $x85 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x103) $x113)))
 (let (($x88 (= $x156 true)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and $x153 $x88)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x50 (and $x177 $x33)))
 (let (($x90 (forall ((input.ind-%var525X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var525X)))
 (=> $x76 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var525X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var524X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var524X)))
 (= $x76 false)))
 ))
 (let (($x42 (and $x48 $x90)))
 (let (($x157 (and $x42 $x50)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x52 $x157)))
 (let (($x82 (=> $x100 $x61)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x118)))
 (let ((?x136 (bvand symbol.1 (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x136)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x140 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x115 (= input.memlabel-mem--symbol.1_end ?x140)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x44 (and $x14 $x115)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x143 $x44)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x26 (and $x91 $x43)))
 (let (($x73 (not $x26)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x97 (and $x161 $x133)))
 (let (($x163 (and (not $x97) $x73)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x72 $x124)))
 (let (($x171 (not $x11)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x78 $x60)))
 (let (($x51 (and (not $x64) $x171)))
 (let (($x28 (and (and (and (and (and (and $x51 $x163) $x68) $x7) $x66) $x40) $x12)))
 (let (($x128 (and $x28 $x110)))
 (let (($x69 (= symbol.1 dst_symbol_addr.1)))
 (let (($x103 (and $x69 $x128)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x32 (or (bvugt input.memlabel-mem--symbol.1_begin ?x94) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x32) (or $x107 $x55)))))))
 (let (($x158 (and $x85 $x103)))
 (let (($x61 (= $x158 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x120 (concat ?x159 (concat ?x155 ?x84)))))
 (let (($x113 (= input.dst.llvm-%n ?x41)))
 (let (($x156 (and (and (and $x85 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x103) $x113)))
 (let (($x88 (= $x156 true)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and $x153 $x88)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x50 (and $x177 $x33)))
 (let (($x90 (forall ((input.ind-%var525X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var525X)))
 (=> $x76 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var525X) (_ bv0 32)))))
 ))
 (let (($x48 (forall ((input.ind-%var524X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var524X)))
 (= $x76 false)))
 ))
 (let (($x42 (and $x48 $x90)))
 (let (($x157 (and $x42 $x50)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x52 $x157)))
 (let (($x82 (=> $x100 $x61)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x116)))
 (let (($x16 (= ?x154 input.dst.llvm-%n)))
 (let (($x37 (= $x16 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x82 (concat ?x100 (concat ?x88 ?x113)))))
 (let (($x111 (= input.dst.llvm-%n ?x56)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x104)))
 (let ((?x103 (bvand symbol.1 (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x103)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let ((?x119 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x136 (= input.memlabel-mem--symbol.1_end ?x119)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x12 (and $x144 $x136)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x96 $x12)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x21 $x143)))
 (let (($x170 (not $x14)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x38 $x174)))
 (let (($x115 (and (not $x7) $x170)))
 (let (($x26 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x43 $x26)))
 (let (($x163 (not $x73)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x97 $x53)))
 (let (($x68 (and (not $x91) $x163)))
 (let (($x155 (and (and (and (and (and (and $x68 $x115) $x44) $x24) $x28) $x128) $x63)))
 (let (($x84 (and $x155 $x62)))
 (let (($x133 (= symbol.1 dst_symbol_addr.1)))
 (let (($x34 (and $x133 $x84)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x78 $x60)))))))
 (let (($x102 (and (and (and $x171 $x55) $x34) $x111)))
 (let (($x36 (= $x102 true)))
 (let (($x65 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x65 $x36)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x83 (and $x150 $x149)))
 (let (($x5 (forall ((input.ind-%var535X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var535X)))
 (=> $x48 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var535X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var534X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var534X)))
 (= $x48 false)))
 ))
 (let (($x94 (and $x23 $x5)))
 (let (($x176 (and $x94 $x83)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x164 (and $x52 $x176)))
 (let (($x106 (=> $x164 $x37)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x154 (bvneg ?x116)))
 (let (($x16 (= ?x154 input.dst.llvm-%n)))
 (let (($x37 (= $x16 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x82 (concat ?x100 (concat ?x88 ?x113)))))
 (let (($x111 (= input.dst.llvm-%n ?x56)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x104)))
 (let ((?x103 (bvand symbol.1 (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x103)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let ((?x119 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x136 (= input.memlabel-mem--symbol.1_end ?x119)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x12 (and $x144 $x136)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x96 $x12)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x21 $x143)))
 (let (($x170 (not $x14)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x38 $x174)))
 (let (($x115 (and (not $x7) $x170)))
 (let (($x26 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x43 $x26)))
 (let (($x163 (not $x73)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x97 $x53)))
 (let (($x68 (and (not $x91) $x163)))
 (let (($x155 (and (and (and (and (and (and $x68 $x115) $x44) $x24) $x28) $x128) $x63)))
 (let (($x84 (and $x155 $x62)))
 (let (($x133 (= symbol.1 dst_symbol_addr.1)))
 (let (($x34 (and $x133 $x84)))
 (let (($x55 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x78 $x60)))))))
 (let (($x102 (and (and (and $x171 $x55) $x34) $x111)))
 (let (($x36 (= $x102 true)))
 (let (($x65 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and $x65 $x36)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x83 (and $x150 $x149)))
 (let (($x5 (forall ((input.ind-%var535X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var535X)))
 (=> $x48 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var535X) (_ bv0 32)))))
 ))
 (let (($x23 (forall ((input.ind-%var534X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var534X)))
 (= $x48 false)))
 ))
 (let (($x94 (and $x23 $x5)))
 (let (($x176 (and $x94 $x83)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x164 (and $x52 $x176)))
 (let (($x106 (=> $x164 $x37)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x59)))
 (let (($x147 (= ?x76 input.spec-%var-n-1)))
 (let (($x153 (= $x147 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x154 (concat ?x164 (concat ?x36 ?x111)))))
 (let (($x37 (= input.dst.llvm-%n ?x16)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x87)))
 (let ((?x34 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x34)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let ((?x151 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x151)))
 (let (($x110 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x63 (and $x110 $x103)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x118 $x63)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x122 $x96)))
 (let (($x40 (not $x144)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x24 (and $x77 $x66)))
 (let (($x136 (and (not $x24) $x40)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x143 $x14)))
 (let (($x115 (not $x170)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x7 $x140)))
 (let (($x44 (and (not $x21) $x115)))
 (let (($x88 (and (and (and (and (and (and $x44 $x136) $x12) $x159) $x155) $x84) $x142)))
 (let (($x113 (and $x88 $x61)))
 (let (($x174 (= symbol.1 dst_symbol_addr.1)))
 (let (($x33 (and $x174 $x113)))
 (let (($x60 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x171) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x97 $x53)))))))
 (let (($x71 (and (and (and $x163 $x60) $x33) $x37)))
 (let (($x107 (= $x71 true)))
 (let (($x138 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x138 $x107)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x22 $x41)))
 (let (($x58 (forall ((input.ind-%var545X (_ BitVec 32)) )(let (($x23 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var545X)))
 (=> $x23 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var545X) (_ bv0 32)))))
 ))
 (let (($x101 (forall ((input.ind-%var544X (_ BitVec 32)) )(let (($x23 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var544X)))
 (= $x23 false)))
 ))
 (let (($x85 (and $x101 $x58)))
 (let (($x166 (and $x85 $x108)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x89 (and $x52 $x166)))
 (let (($x42 (=> $x89 $x153)))
 (not $x42)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x59)))
 (let (($x147 (= ?x76 input.spec-%var-n-1)))
 (let (($x153 (= $x147 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x16 (concat ?x154 (concat ?x164 (concat ?x36 ?x111)))))
 (let (($x37 (= input.dst.llvm-%n ?x16)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x87)))
 (let ((?x34 (bvand symbol.1 (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x34)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let ((?x151 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x103 (= input.memlabel-mem--symbol.1_end ?x151)))
 (let (($x110 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x63 (and $x110 $x103)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x118 $x63)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x122 $x96)))
 (let (($x40 (not $x144)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x24 (and $x77 $x66)))
 (let (($x136 (and (not $x24) $x40)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x143 $x14)))
 (let (($x115 (not $x170)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x7 $x140)))
 (let (($x44 (and (not $x21) $x115)))
 (let (($x88 (and (and (and (and (and (and $x44 $x136) $x12) $x159) $x155) $x84) $x142)))
 (let (($x113 (and $x88 $x61)))
 (let (($x174 (= symbol.1 dst_symbol_addr.1)))
 (let (($x33 (and $x174 $x113)))
 (let (($x60 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x171) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x97 $x53)))))))
 (let (($x71 (and (and (and $x163 $x60) $x33) $x37)))
 (let (($x107 (= $x71 true)))
 (let (($x138 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x41 (and $x138 $x107)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x22 $x41)))
 (let (($x58 (forall ((input.ind-%var545X (_ BitVec 32)) )(let (($x23 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var545X)))
 (=> $x23 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var545X) (_ bv0 32)))))
 ))
 (let (($x101 (forall ((input.ind-%var544X (_ BitVec 32)) )(let (($x23 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var544X)))
 (= $x23 false)))
 ))
 (let (($x85 (and $x101 $x58)))
 (let (($x166 (and $x85 $x108)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x89 (and $x52 $x166)))
 (let (($x42 (=> $x89 $x153)))
 (not $x42)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x6 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x8 (= $x6 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x76 (concat ?x89 (concat ?x107 ?x37)))))
 (let (($x153 (= input.dst.llvm-%n ?x147)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x158)))
 (let ((?x33 (bvand symbol.1 (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x33)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x156 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x34 (= input.memlabel-mem--symbol.1_end ?x156)))
 (let (($x62 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (and $x62 $x34)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x104 $x142)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x110 (and $x157 $x118)))
 (let (($x128 (not $x110)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x159 (and $x50 $x28)))
 (let (($x103 (and (not $x159) $x128)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x96 $x144)))
 (let (($x136 (not $x40)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x24 $x119)))
 (let (($x12 (and (not $x122) $x136)))
 (let (($x36 (and (and (and (and (and (and $x12 $x103) $x63) $x100) $x88) $x113) $x141)))
 (let (($x111 (and $x36 $x116)))
 (let (($x66 (= symbol.1 dst_symbol_addr.1)))
 (let (($x149 (and $x66 $x111)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x106 (or (bvugt input.memlabel-mem--symbol.1_begin ?x163) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x106) (or $x7 $x140)))))))
 (let (($x175 (and (and (and $x115 $x53) $x149) $x153)))
 (let (($x78 (= $x175 true)))
 (let (($x51 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and $x51 $x78)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x124 $x56)))
 (let (($x72 (forall ((input.ind-%var555X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var555X)))
 (=> $x101 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var555X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var554X)))
 (= $x101 false)))
 ))
 (let (($x171 (and $x11 $x72)))
 (let (($x131 (and $x171 $x177)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x90 (and $x52 $x131)))
 (let (($x48 (=> $x90 $x8)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x6 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x8 (= $x6 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x76 (concat ?x89 (concat ?x107 ?x37)))))
 (let (($x153 (= input.dst.llvm-%n ?x147)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x158)))
 (let ((?x33 (bvand symbol.1 (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x33)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x156 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x34 (= input.memlabel-mem--symbol.1_end ?x156)))
 (let (($x62 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (and $x62 $x34)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x104 $x142)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x110 (and $x157 $x118)))
 (let (($x128 (not $x110)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x159 (and $x50 $x28)))
 (let (($x103 (and (not $x159) $x128)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x96 $x144)))
 (let (($x136 (not $x40)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x24 $x119)))
 (let (($x12 (and (not $x122) $x136)))
 (let (($x36 (and (and (and (and (and (and $x12 $x103) $x63) $x100) $x88) $x113) $x141)))
 (let (($x111 (and $x36 $x116)))
 (let (($x66 (= symbol.1 dst_symbol_addr.1)))
 (let (($x149 (and $x66 $x111)))
 (let (($x53 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x106 (or (bvugt input.memlabel-mem--symbol.1_begin ?x163) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x106) (or $x7 $x140)))))))
 (let (($x175 (and (and (and $x115 $x53) $x149) $x153)))
 (let (($x78 (= $x175 true)))
 (let (($x51 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and $x51 $x78)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x124 $x56)))
 (let (($x72 (forall ((input.ind-%var555X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var555X)))
 (=> $x101 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var555X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var554X (_ BitVec 32)) )(let (($x101 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var554X)))
 (= $x101 false)))
 ))
 (let (($x171 (and $x11 $x72)))
 (let (($x131 (and $x171 $x177)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x90 (and $x52 $x131)))
 (let (($x48 (=> $x90 $x8)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (forall ((input.ind-%var575X (_ BitVec 32)) )(let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x134 (concat ?x92 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32)))))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x139 (concat ?x105 ?x134)))))))))
 ))
 (let (($x169 (forall ((input.ind-%var574X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var574X) (bvult input.ind-%var574X (_ bv0 32)))))
 ))
 (let (($x70 (and $x169 $x109)))
 (let (($x47 (= $x70 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x48 (concat ?x90 (concat ?x78 ?x153)))))
 (let (($x161 (= input.dst.llvm-%n ?x45)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x129)))
 (let ((?x149 (bvand symbol.1 (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x149)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let ((?x102 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x33 (= input.memlabel-mem--symbol.1_end ?x102)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x141 (and $x61 $x33)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x87 $x141)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x176 $x104)))
 (let (($x84 (not $x62)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x83 $x155)))
 (let (($x34 (and (not $x100) $x84)))
 (let (($x110 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x118 $x110)))
 (let (($x103 (not $x128)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x159 $x151)))
 (let (($x63 (and (not $x157) $x103)))
 (let (($x107 (and (and (and (and (and (and $x63 $x34) $x142) $x164) $x36) $x111) $x93)))
 (let (($x37 (and $x107 $x59)))
 (let (($x28 (= symbol.1 dst_symbol_addr.1)))
 (let (($x41 (and $x28 $x37)))
 (let (($x140 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x42 (or (bvugt input.memlabel-mem--symbol.1_begin ?x115) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x42) (or $x24 $x119)))))))
 (let (($x150 (and (and (and $x136 $x140) $x41) $x161)))
 (let (($x80 (= $x150 true)))
 (let (($x68 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x5 (and $x68 $x80)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x31 (and $x26 $x5)))
 (let (($x43 (forall ((input.ind-%var565X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var565X)))
 (=> $x11 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var565X) (_ bv0 32)))))
 ))
 (let (($x73 (forall ((input.ind-%var564X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var564X)))
 (= $x11 false)))
 ))
 (let (($x163 (and $x73 $x43)))
 (let (($x27 (and $x163 $x31)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x52 $x27)))
 (let (($x81 (=> $x23 $x47)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (forall ((input.ind-%var575X (_ BitVec 32)) )(let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x134 (concat ?x92 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32)))))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var575X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x139 (concat ?x105 ?x134)))))))))
 ))
 (let (($x169 (forall ((input.ind-%var574X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var574X) (bvult input.ind-%var574X (_ bv0 32)))))
 ))
 (let (($x70 (and $x169 $x109)))
 (let (($x47 (= $x70 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x48 (concat ?x90 (concat ?x78 ?x153)))))
 (let (($x161 (= input.dst.llvm-%n ?x45)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x129)))
 (let ((?x149 (bvand symbol.1 (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x149)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let ((?x102 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x33 (= input.memlabel-mem--symbol.1_end ?x102)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x141 (and $x61 $x33)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x87 $x141)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x176 $x104)))
 (let (($x84 (not $x62)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x83 $x155)))
 (let (($x34 (and (not $x100) $x84)))
 (let (($x110 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x118 $x110)))
 (let (($x103 (not $x128)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x159 $x151)))
 (let (($x63 (and (not $x157) $x103)))
 (let (($x107 (and (and (and (and (and (and $x63 $x34) $x142) $x164) $x36) $x111) $x93)))
 (let (($x37 (and $x107 $x59)))
 (let (($x28 (= symbol.1 dst_symbol_addr.1)))
 (let (($x41 (and $x28 $x37)))
 (let (($x140 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x42 (or (bvugt input.memlabel-mem--symbol.1_begin ?x115) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x42) (or $x24 $x119)))))))
 (let (($x150 (and (and (and $x136 $x140) $x41) $x161)))
 (let (($x80 (= $x150 true)))
 (let (($x68 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x5 (and $x68 $x80)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x31 (and $x26 $x5)))
 (let (($x43 (forall ((input.ind-%var565X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var565X)))
 (=> $x11 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var565X) (_ bv0 32)))))
 ))
 (let (($x73 (forall ((input.ind-%var564X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var564X)))
 (= $x11 false)))
 ))
 (let (($x163 (and $x73 $x43)))
 (let (($x27 (and $x163 $x31)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x52 $x27)))
 (let (($x81 (=> $x23 $x47)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x217 (= $x190 false)))
 (let (($x218 (= $x217 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x77)))
 (let (($x210 (= ?x24 input.dst.llvm-%n)))
 (let (($x211 (= $x210 true)))
 (let (($x207 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x207 true)))
 (let ((?x191 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x192 (bvadd symbol.1 ?x191)))
 (let (($x201 (and (bvule input.memlabel-mem--symbol.1_begin ?x192) (bvule (bvadd ?x192 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x205 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false $x201)))))
 (let (($x194 (=> (and $x190 (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x201)))))
 (let (($x195 (= $x194 true)))
 (let (($x187 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x187 true)))
 (let (($x184 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x184 true)))
 (let (($x181 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x181 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x178 true)))
 (let (($x79 (forall ((input.ind-%var591X (_ BitVec 32)) )(let ((?x127 (bvadd symbol.1 (bvmul input.ind-%var591X (_ bv4 32)))))
 (let ((?x74 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x127))))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv2 32))) ?x74)))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv3 32))) ?x64)))
 (let ((?x7 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var591X)))
 (let (($x105 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var591X)))
 (=> $x105 (= ?x7 ?x132)))))))))
 ))
 (let (($x47 (forall ((input.ind-%var590X (_ BitVec 32)) )(let (($x109 (and (bvule (_ bv0 32) input.ind-%var590X) (bvult input.ind-%var590X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x105 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var590X)))
 (= $x105 $x109))))
 ))
 (let (($x162 (and $x47 $x79)))
 (let (($x15 (= $x162 true)))
 (let (($x67 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x135 (= $x67 true)))
 (let (($x13 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x169 (= $x13 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x56)))
 (let ((?x78 (bvand symbol.1 (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x78)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x9 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x8 (= input.memlabel-mem--symbol.1_end ?x9)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (and $x41 $x8)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x37 $x48)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x111 (and $x158 $x116)))
 (let (($x71 (not $x111)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (and $x141 $x36)))
 (let (($x93 (and (not $x89) $x71)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x166 $x87)))
 (let (($x113 (not $x61)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x108 $x88)))
 (let (($x33 (and (not $x164) $x113)))
 (let (($x31 (and (and (and (and (and (and $x33 $x93) $x107) $x59) $x177) $x175) $x153)))
 (let (($x27 (and $x31 $x6)))
 (let (($x142 (= symbol.1 dst_symbol_addr.1)))
 (let (($x23 (and $x142 $x27)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x103 (or (bvugt input.memlabel-mem--symbol.1_begin ?x118) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x103) (or $x100 $x156)))))))
 (let (($x98 (and $x76 $x23)))
 (let (($x94 (= $x98 true)))
 (let (($x136 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x136 true)))
 (let (($x82 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x96 (= $x82 true)))
 (let (($x66 (= ?x24 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (= $x66 true)))
 (let (($x144 (and $x119 $x96)))
 (let (($x140 (and $x144 $x174)))
 (let (($x75 (and $x140 $x94)))
 (let (($x126 (and $x75 $x169)))
 (let (($x121 (and $x126 $x135)))
 (let (($x10 (and $x121 $x15)))
 (let (($x180 (and $x10 $x179)))
 (let (($x183 (and $x180 $x182)))
 (let (($x186 (and $x183 $x185)))
 (let (($x189 (and $x186 $x188)))
 (let (($x206 (and $x189 $x195)))
 (let (($x209 (and $x206 $x208)))
 (let (($x212 (and $x209 $x211)))
 (let (($x42 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x213 (and $x42 $x212)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x214 (and $x133 $x213)))
 (let (($x40 (forall ((input.ind-%var601X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var601X)))
 (=> $x11 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var601X) (_ bv0 32)))))
 ))
 (let (($x39 (forall ((input.ind-%var600X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var600X)))
 (= $x11 false)))
 ))
 (let (($x143 (and $x39 $x40)))
 (let (($x215 (and $x143 $x214)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x216 (and $x52 $x215)))
 (let (($x219 (=> $x216 $x218)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x217 (= $x190 false)))
 (let (($x218 (= $x217 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x77)))
 (let (($x210 (= ?x24 input.dst.llvm-%n)))
 (let (($x211 (= $x210 true)))
 (let (($x207 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x207 true)))
 (let ((?x191 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x192 (bvadd symbol.1 ?x191)))
 (let (($x201 (and (bvule input.memlabel-mem--symbol.1_begin ?x192) (bvule (bvadd ?x192 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x205 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false $x201)))))
 (let (($x194 (=> (and $x190 (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x201)))))
 (let (($x195 (= $x194 true)))
 (let (($x187 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x187 true)))
 (let (($x184 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x184 true)))
 (let (($x181 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x181 true)))
 (let (($x178 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x179 (= $x178 true)))
 (let (($x79 (forall ((input.ind-%var591X (_ BitVec 32)) )(let ((?x127 (bvadd symbol.1 (bvmul input.ind-%var591X (_ bv4 32)))))
 (let ((?x74 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x127))))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv2 32))) ?x74)))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x127 (_ bv3 32))) ?x64)))
 (let ((?x7 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var591X)))
 (let (($x105 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var591X)))
 (=> $x105 (= ?x7 ?x132)))))))))
 ))
 (let (($x47 (forall ((input.ind-%var590X (_ BitVec 32)) )(let (($x109 (and (bvule (_ bv0 32) input.ind-%var590X) (bvult input.ind-%var590X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x105 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var590X)))
 (= $x105 $x109))))
 ))
 (let (($x162 (and $x47 $x79)))
 (let (($x15 (= $x162 true)))
 (let (($x67 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x135 (= $x67 true)))
 (let (($x13 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x169 (= $x13 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x56)))
 (let ((?x78 (bvand symbol.1 (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x78)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x9 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x8 (= input.memlabel-mem--symbol.1_end ?x9)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (and $x41 $x8)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x37 $x48)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x111 (and $x158 $x116)))
 (let (($x71 (not $x111)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (and $x141 $x36)))
 (let (($x93 (and (not $x89) $x71)))
 (let (($x87 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x166 $x87)))
 (let (($x113 (not $x61)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x108 $x88)))
 (let (($x33 (and (not $x164) $x113)))
 (let (($x31 (and (and (and (and (and (and $x33 $x93) $x107) $x59) $x177) $x175) $x153)))
 (let (($x27 (and $x31 $x6)))
 (let (($x142 (= symbol.1 dst_symbol_addr.1)))
 (let (($x23 (and $x142 $x27)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x103 (or (bvugt input.memlabel-mem--symbol.1_begin ?x118) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x103) (or $x100 $x156)))))))
 (let (($x98 (and $x76 $x23)))
 (let (($x94 (= $x98 true)))
 (let (($x136 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x174 (= $x136 true)))
 (let (($x82 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x96 (= $x82 true)))
 (let (($x66 (= ?x24 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (= $x66 true)))
 (let (($x144 (and $x119 $x96)))
 (let (($x140 (and $x144 $x174)))
 (let (($x75 (and $x140 $x94)))
 (let (($x126 (and $x75 $x169)))
 (let (($x121 (and $x126 $x135)))
 (let (($x10 (and $x121 $x15)))
 (let (($x180 (and $x10 $x179)))
 (let (($x183 (and $x180 $x182)))
 (let (($x186 (and $x183 $x185)))
 (let (($x189 (and $x186 $x188)))
 (let (($x206 (and $x189 $x195)))
 (let (($x209 (and $x206 $x208)))
 (let (($x212 (and $x209 $x211)))
 (let (($x42 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x213 (and $x42 $x212)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x214 (and $x133 $x213)))
 (let (($x40 (forall ((input.ind-%var601X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var601X)))
 (=> $x11 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var601X) (_ bv0 32)))))
 ))
 (let (($x39 (forall ((input.ind-%var600X (_ BitVec 32)) )(let (($x11 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var600X)))
 (= $x11 false)))
 ))
 (let (($x143 (and $x39 $x40)))
 (let (($x215 (and $x143 $x214)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x216 (and $x52 $x215)))
 (let (($x219 (=> $x216 $x218)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000001c)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000001c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x7ffffe83 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe82 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe81 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x7ffffe80 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x35000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x32003f2c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x32003f2f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x3500019f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x32003f2c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x35000010)
  (define-fun symbol.1 () (_ BitVec 32)
    #x35000010)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!4 (bvadd #x35000013 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x35000012 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x35000011 (bvmul #x00000004 x!0)))
            (k!4 (bvadd #x35000010 (bvmul #x00000004 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (not $x69)))
 (let (($x148 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (not $x148)))
 (let (($x43 (or $x125 $x172)))
 (let (($x68 (= $x43 true)))
 (let ((?x32 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x32)))
 (let (($x51 (= ?x145 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x51 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x139)))
 (let (($x95 (= ?x92 input.dst.llvm-%n)))
 (let (($x152 (= $x95 true)))
 (let (($x134 (= ?x92 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (= $x134 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x73 (= $x99 true)))
 (let (($x170 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x163 (= $x170 true)))
 (let (($x147 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x18 (= $x147 true)))
 (let (($x193 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x12 (= $x193 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x219 true)))
 (let (($x215 (forall ((input.ind-%var777X (_ BitVec 32)) )(let ((?x203 (bvadd symbol.1 (bvmul input.ind-%var777X (_ bv4 32)))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x203))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv2 32))) ?x206)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv3 32))) ?x209)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var777X)))
 (let (($x19 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var777X)))
 (=> $x19 (= ?x181 ?x212)))))))))
 ))
 (let (($x35 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x15 (and (bvule (_ bv0 32) input.ind-%var776X) (bvult input.ind-%var776X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x19 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var776X)))
 (= $x19 $x15))))
 ))
 (let (($x216 (and $x35 $x215)))
 (let (($x217 (= $x216 true)))
 (let (($x171 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x165 (= $x171 true)))
 (let (($x127 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x65 (= $x127 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x135)))
 (let ((?x126 (bvand symbol.1 (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x126)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x23 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x98 (= input.memlabel-mem--symbol.1_end ?x23)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (and $x6 $x98)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x56 $x94)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (and $x177 $x80)))
 (let (($x90 (not $x131)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x48 (and $x9 $x8)))
 (let (($x5 (and (not $x48) $x90)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x129 $x59)))
 (let (($x37 (not $x150)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x45 $x107)))
 (let (($x16 (and (not $x161) $x37)))
 (let (($x70 (and (and (and (and (and (and $x16 $x5) $x78) $x31) $x75) $x169) $x67)))
 (let (($x47 (and $x70 $x121)))
 (let (($x108 (= symbol.1 dst_symbol_addr.1)))
 (let (($x7 (and $x108 $x47)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x61 (or (bvugt input.memlabel-mem--symbol.1_begin ?x102) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x61) (or $x36 $x89)))))))
 (let (($x22 (and $x93 $x7)))
 (let (($x72 (= $x22 true)))
 (let (($x30 (and $x72 $x65)))
 (let (($x85 (and $x30 $x165)))
 (let (($x218 (and $x85 $x217)))
 (let (($x97 (and $x218 $x220)))
 (let (($x168 (and $x97 $x12)))
 (let (($x26 (and $x168 $x18)))
 (let (($x130 (and $x26 $x163)))
 (let (($x106 (and $x130 $x73)))
 (let (($x25 (and $x106 $x20)))
 (let (($x91 (and $x25 $x152)))
 (let (($x58 (and $x91 $x101)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (and $x50 $x58)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x146 (and $x62 $x138)))
 (let (($x156 (forall ((input.ind-%var787X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var787X)))
 (=> $x174 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var787X) (_ bv0 32)))))
 ))
 (let (($x34 (forall ((input.ind-%var786X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var786X)))
 (= $x174 false)))
 ))
 (let (($x176 (and $x34 $x156)))
 (let (($x117 (and $x176 $x146)))
 (let (($x82 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x123 (and $x82 $x117)))
 (let ((?x11 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x52 (bvadd symbol.1 ?x11)))
 (let (($x77 (and (bvule input.memlabel-mem--symbol.1_begin ?x52) (bvule (bvadd ?x52 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x122 (=> (bvule ?x52 (bvsub (bvadd ?x52 (_ bv4 32)) (_ bv1 32))) (or false (or false $x77)))))
 (let (($x60 (=> (and $x69 (bvule ?x52 (bvsub (bvadd ?x52 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x77)))))
 (let (($x17 (and $x60 $x123)))
 (let (($x160 (=> $x17 $x68)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (not $x69)))
 (let (($x148 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (not $x148)))
 (let (($x43 (or $x125 $x172)))
 (let (($x68 (= $x43 true)))
 (let ((?x32 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x145 (bvneg ?x32)))
 (let (($x51 (= ?x145 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x51 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x139)))
 (let (($x95 (= ?x92 input.dst.llvm-%n)))
 (let (($x152 (= $x95 true)))
 (let (($x134 (= ?x92 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (= $x134 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x73 (= $x99 true)))
 (let (($x170 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x163 (= $x170 true)))
 (let (($x147 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x18 (= $x147 true)))
 (let (($x193 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x12 (= $x193 true)))
 (let (($x219 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x219 true)))
 (let (($x215 (forall ((input.ind-%var777X (_ BitVec 32)) )(let ((?x203 (bvadd symbol.1 (bvmul input.ind-%var777X (_ bv4 32)))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x203))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv2 32))) ?x206)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x203 (_ bv3 32))) ?x209)))
 (let ((?x181 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var777X)))
 (let (($x19 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var777X)))
 (=> $x19 (= ?x181 ?x212)))))))))
 ))
 (let (($x35 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x15 (and (bvule (_ bv0 32) input.ind-%var776X) (bvult input.ind-%var776X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x19 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var776X)))
 (= $x19 $x15))))
 ))
 (let (($x216 (and $x35 $x215)))
 (let (($x217 (= $x216 true)))
 (let (($x171 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x165 (= $x171 true)))
 (let (($x127 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x65 (= $x127 true)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x135)))
 (let ((?x126 (bvand symbol.1 (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x126)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x23 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x98 (= input.memlabel-mem--symbol.1_end ?x23)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (and $x6 $x98)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x56 $x94)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (and $x177 $x80)))
 (let (($x90 (not $x131)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x48 (and $x9 $x8)))
 (let (($x5 (and (not $x48) $x90)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x129 $x59)))
 (let (($x37 (not $x150)))
 (let (($x107 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x45 $x107)))
 (let (($x16 (and (not $x161) $x37)))
 (let (($x70 (and (and (and (and (and (and $x16 $x5) $x78) $x31) $x75) $x169) $x67)))
 (let (($x47 (and $x70 $x121)))
 (let (($x108 (= symbol.1 dst_symbol_addr.1)))
 (let (($x7 (and $x108 $x47)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x61 (or (bvugt input.memlabel-mem--symbol.1_begin ?x102) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x61) (or $x36 $x89)))))))
 (let (($x22 (and $x93 $x7)))
 (let (($x72 (= $x22 true)))
 (let (($x30 (and $x72 $x65)))
 (let (($x85 (and $x30 $x165)))
 (let (($x218 (and $x85 $x217)))
 (let (($x97 (and $x218 $x220)))
 (let (($x168 (and $x97 $x12)))
 (let (($x26 (and $x168 $x18)))
 (let (($x130 (and $x26 $x163)))
 (let (($x106 (and $x130 $x73)))
 (let (($x25 (and $x106 $x20)))
 (let (($x91 (and $x25 $x152)))
 (let (($x58 (and $x91 $x101)))
 (let (($x50 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (and $x50 $x58)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x146 (and $x62 $x138)))
 (let (($x156 (forall ((input.ind-%var787X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var787X)))
 (=> $x174 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var787X) (_ bv0 32)))))
 ))
 (let (($x34 (forall ((input.ind-%var786X (_ BitVec 32)) )(let (($x174 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var786X)))
 (= $x174 false)))
 ))
 (let (($x176 (and $x34 $x156)))
 (let (($x117 (and $x176 $x146)))
 (let (($x82 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x123 (and $x82 $x117)))
 (let ((?x11 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x52 (bvadd symbol.1 ?x11)))
 (let (($x77 (and (bvule input.memlabel-mem--symbol.1_begin ?x52) (bvule (bvadd ?x52 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x122 (=> (bvule ?x52 (bvsub (bvadd ?x52 (_ bv4 32)) (_ bv1 32))) (or false (or false $x77)))))
 (let (($x60 (=> (and $x69 (bvule ?x52 (bvsub (bvadd ?x52 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x77)))))
 (let (($x17 (and $x60 $x123)))
 (let (($x160 (=> $x17 $x68)))
 (not $x160)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x246 (bvmul (_ bv4294967295 32) ?x245)))
 (let ((?x247 (bvneg ?x246)))
 (let (($x249 (= ?x247 ?x248)))
 (let (($x250 (= $x249 true)))
 (let ((?x233 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x233)))
 (let (($x235 (= ?x234 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x235 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x231 (= $x230 true)))
 (let (($x227 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x228 (= $x227 true)))
 (let (($x224 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x225 (= $x224 true)))
 (let (($x81 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x81 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x201 true)))
 (let (($x46 (forall ((input.ind-%var797X (_ BitVec 32)) )(let ((?x185 (bvadd symbol.1 (bvmul input.ind-%var797X (_ bv4 32)))))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x185))))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv2 32))) ?x192)))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv3 32))) ?x189)))
 (let ((?x160 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var797X)))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var797X)))
 (=> $x145 (= ?x160 ?x197)))))))))
 ))
 (let (($x125 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x17 (and (bvule (_ bv0 32) input.ind-%var796X) (bvult input.ind-%var796X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var796X)))
 (= $x145 $x17))))
 ))
 (let (($x137 (and $x125 $x46)))
 (let (($x200 (= $x137 true)))
 (let (($x25 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x95 (= $x25 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x26 (bvsub ?x114 ?x40)))
 (let (($x99 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x26) (bvult ?x114 ?x26))))
 (let ((?x12 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvmul (_ bv4 64) ?x12)))
 (let ((?x147 ((_ extract 63 32) ?x168)))
 (let (($x18 (= (_ bv0 32) ?x147)))
 (let (($x97 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x38 (and (and (and true $x97) $x18) $x99)))
 (let (($x216 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x139 (and $x216 $x38)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (=> $x69 $x139)))
 (let (($x134 (= $x92 true)))
 (let (($x209 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x212 (= $x209 true)))
 (let (($x205 (= $x69 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x10)))
 (let ((?x79 (bvand symbol.1 (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x79)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x30 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x171 (= input.memlabel-mem--symbol.1_end ?x30)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x165 (and $x127 $x171)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x54 $x165)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x70 (and $x126 $x67)))
 (let (($x135 (not $x70)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x109 (and $x13 $x169)))
 (let (($x47 (and (not $x109) $x135)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x27 $x23)))
 (let (($x94 (not $x98)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x29 $x56)))
 (let (($x173 (and (not $x6) $x94)))
 (let (($x211 (and (and (and (and (and (and $x173 $x47) $x7) $x72) $x85) $x162) $x15)))
 (let (($x191 (and $x211 $x35)))
 (let (($x59 (= symbol.1 dst_symbol_addr.1)))
 (let (($x207 (and $x59 $x191)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x48 (or (bvugt input.memlabel-mem--symbol.1_begin ?x16) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x48) (or $x131 $x90)))))))
 (let (($x208 (and $x31 $x207)))
 (let (($x194 (= $x208 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x111)))
 (let (($x45 (= ?x93 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x45 true)))
 (let (($x142 (= ?x93 input.dst.llvm-%n)))
 (let (($x108 (= $x142 true)))
 (let (($x161 (and $x108 $x107)))
 (let (($x195 (and $x161 $x194)))
 (let (($x206 (and $x195 $x205)))
 (let (($x213 (and $x206 $x212)))
 (let (($x20 (and $x213 $x134)))
 (let (($x152 (and $x20 $x95)))
 (let (($x179 (and $x152 $x200)))
 (let (($x83 (and $x179 $x118)))
 (let (($x223 (and $x83 $x222)))
 (let (($x226 (and $x223 $x225)))
 (let (($x229 (and $x226 $x228)))
 (let (($x232 (and $x229 $x231)))
 (let (($x237 (and $x232 $x236)))
 (let (($x158 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and (not $x158) $x237)))
 (let (($x89 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and $x89 $x239)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x241 (and $x33 $x240)))
 (let (($x87 (forall ((input.ind-%var807X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var807X)))
 (=> $x103 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var807X) (_ bv0 32)))))
 ))
 (let (($x176 (forall ((input.ind-%var806X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var806X)))
 (= $x103 false)))
 ))
 (let (($x61 (and $x176 $x87)))
 (let (($x242 (and $x61 $x241)))
 (let (($x174 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x243 (and $x174 $x242)))
 (let (($x122 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x136 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x122)))))
 (let (($x143 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x122)))))
 (let (($x244 (and $x143 $x243)))
 (let (($x251 (=> $x244 $x250)))
 (not $x251)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x246 (bvmul (_ bv4294967295 32) ?x245)))
 (let ((?x247 (bvneg ?x246)))
 (let (($x249 (= ?x247 ?x248)))
 (let (($x250 (= $x249 true)))
 (let ((?x233 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x233)))
 (let (($x235 (= ?x234 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x235 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x231 (= $x230 true)))
 (let (($x227 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x228 (= $x227 true)))
 (let (($x224 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x225 (= $x224 true)))
 (let (($x81 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x222 (= $x81 true)))
 (let (($x201 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x118 (= $x201 true)))
 (let (($x46 (forall ((input.ind-%var797X (_ BitVec 32)) )(let ((?x185 (bvadd symbol.1 (bvmul input.ind-%var797X (_ bv4 32)))))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x185))))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv2 32))) ?x192)))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv3 32))) ?x189)))
 (let ((?x160 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var797X)))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var797X)))
 (=> $x145 (= ?x160 ?x197)))))))))
 ))
 (let (($x125 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x17 (and (bvule (_ bv0 32) input.ind-%var796X) (bvult input.ind-%var796X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x145 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var796X)))
 (= $x145 $x17))))
 ))
 (let (($x137 (and $x125 $x46)))
 (let (($x200 (= $x137 true)))
 (let (($x25 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x95 (= $x25 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x26 (bvsub ?x114 ?x40)))
 (let (($x99 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x26) (bvult ?x114 ?x26))))
 (let ((?x12 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvmul (_ bv4 64) ?x12)))
 (let ((?x147 ((_ extract 63 32) ?x168)))
 (let (($x18 (= (_ bv0 32) ?x147)))
 (let (($x97 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x38 (and (and (and true $x97) $x18) $x99)))
 (let (($x216 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x139 (and $x216 $x38)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (=> $x69 $x139)))
 (let (($x134 (= $x92 true)))
 (let (($x209 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x212 (= $x209 true)))
 (let (($x205 (= $x69 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x10)))
 (let ((?x79 (bvand symbol.1 (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x79)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x30 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x171 (= input.memlabel-mem--symbol.1_end ?x30)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x165 (and $x127 $x171)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x54 $x165)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x70 (and $x126 $x67)))
 (let (($x135 (not $x70)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x109 (and $x13 $x169)))
 (let (($x47 (and (not $x109) $x135)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x27 $x23)))
 (let (($x94 (not $x98)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x29 $x56)))
 (let (($x173 (and (not $x6) $x94)))
 (let (($x211 (and (and (and (and (and (and $x173 $x47) $x7) $x72) $x85) $x162) $x15)))
 (let (($x191 (and $x211 $x35)))
 (let (($x59 (= symbol.1 dst_symbol_addr.1)))
 (let (($x207 (and $x59 $x191)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x48 (or (bvugt input.memlabel-mem--symbol.1_begin ?x16) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x48) (or $x131 $x90)))))))
 (let (($x208 (and $x31 $x207)))
 (let (($x194 (= $x208 true)))
 (let ((?x111 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x111)))
 (let (($x45 (= ?x93 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (= $x45 true)))
 (let (($x142 (= ?x93 input.dst.llvm-%n)))
 (let (($x108 (= $x142 true)))
 (let (($x161 (and $x108 $x107)))
 (let (($x195 (and $x161 $x194)))
 (let (($x206 (and $x195 $x205)))
 (let (($x213 (and $x206 $x212)))
 (let (($x20 (and $x213 $x134)))
 (let (($x152 (and $x20 $x95)))
 (let (($x179 (and $x152 $x200)))
 (let (($x83 (and $x179 $x118)))
 (let (($x223 (and $x83 $x222)))
 (let (($x226 (and $x223 $x225)))
 (let (($x229 (and $x226 $x228)))
 (let (($x232 (and $x229 $x231)))
 (let (($x237 (and $x232 $x236)))
 (let (($x158 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x239 (and (not $x158) $x237)))
 (let (($x89 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and $x89 $x239)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x241 (and $x33 $x240)))
 (let (($x87 (forall ((input.ind-%var807X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var807X)))
 (=> $x103 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var807X) (_ bv0 32)))))
 ))
 (let (($x176 (forall ((input.ind-%var806X (_ BitVec 32)) )(let (($x103 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var806X)))
 (= $x103 false)))
 ))
 (let (($x61 (and $x176 $x87)))
 (let (($x242 (and $x61 $x241)))
 (let (($x174 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x243 (and $x174 $x242)))
 (let (($x122 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x136 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x122)))))
 (let (($x143 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x122)))))
 (let (($x244 (and $x143 $x243)))
 (let (($x251 (=> $x244 $x250)))
 (not $x251)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x138 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x146 (bvule ?x138 (_ bv3 32))))
 (let (($x112 (= $x146 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x28)))
 (let (($x63 (= ?x159 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x63 true)))
 (let (($x101 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x58 (= $x101 true)))
 (let (($x164 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x68 (= $x164 true)))
 (let (($x151 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x34 (= $x151 true)))
 (let (($x50 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x104 (= $x50 true)))
 (let ((?x246 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x246)))
 (let ((?x244 (bvand symbol.1 (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x244)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x242)))
 (let ((?x237 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x239 (= input.memlabel-mem--symbol.1_end ?x237)))
 (let (($x235 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x240 (and $x235 $x239)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (and $x234 $x240)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x227 (and $x225 $x226)))
 (let (($x228 (not $x227)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x224 (and $x222 $x223)))
 (let (($x230 (and (not $x224) $x228)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x200 $x179)))
 (let (($x118 (not $x201)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x167 $x46)))
 (let (($x81 (and (not $x137) $x118)))
 (let (($x120 (and (and (and (and (and (and $x81 $x230) $x231) $x233) $x241) $x243) $x245)))
 (let (($x55 (and $x120 $x247)))
 (let (($x148 (= symbol.1 dst_symbol_addr.1)))
 (let (($x41 (and $x148 $x55)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x187 (or (bvugt input.memlabel-mem--symbol.1_begin ?x184) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x187) (or $x188 $x204)))))))
 (let (($x51 (and $x199 $x41)))
 (let (($x221 (= $x51 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x145 (= $x152 true)))
 (let (($x20 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x25 (= $x20 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (= $x139 true)))
 (let (($x163 (forall ((input.ind-%var817X (_ BitVec 32)) )(let ((?x217 (bvadd symbol.1 (bvmul input.ind-%var817X (_ bv4 32)))))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x217))))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv2 32))) ?x73)))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv3 32))) ?x168)))
 (let ((?x210 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var817X)))
 (let (($x183 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var817X)))
 (=> $x183 (= ?x210 ?x106)))))))))
 ))
 (let (($x85 (forall ((input.ind-%var816X (_ BitVec 32)) )(let (($x171 (and (bvule (_ bv0 32) input.ind-%var816X) (bvult input.ind-%var816X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x183 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var816X)))
 (= $x183 $x171))))
 ))
 (let (($x130 (and $x85 $x163)))
 (let (($x99 (= $x130 true)))
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x169)))
 (let (($x70 (= ?x109 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (= $x70 true)))
 (let (($x121 (= ?x109 input.dst.llvm-%n)))
 (let (($x126 (= $x121 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x31 (bvsub ?x114 ?x40)))
 (let (($x56 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x31) (bvult ?x114 ?x31))))
 (let ((?x5 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x105 (bvmul (_ bv4 64) ?x5)))
 (let ((?x78 ((_ extract 63 32) ?x105)))
 (let (($x57 (= (_ bv0 32) ?x78)))
 (let (($x80 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x27 (and (and (and true $x80) $x57) $x56)))
 (let (($x8 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x23 (and $x8 $x27)))
 (let (($x124 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (=> $x124 $x23)))
 (let (($x94 (= $x98 true)))
 (let (($x153 (= $x124 true)))
 (let (($x173 (and $x153 $x94)))
 (let (($x67 (and $x173 $x126)))
 (let (($x47 (and $x67 $x135)))
 (let (($x38 (and $x47 $x99)))
 (let (($x134 (and $x38 $x92)))
 (let (($x95 (and $x134 $x25)))
 (let (($x123 (and $x95 $x145)))
 (let (($x100 (and $x123 $x221)))
 (let (($x84 (and $x100 $x104)))
 (let (($x155 (and $x84 $x34)))
 (let (($x91 (and $x155 $x68)))
 (let (($x39 (and $x91 $x58)))
 (let (($x96 (and $x39 $x110)))
 (let (($x37 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and (not $x37) $x96)))
 (let (($x161 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (and $x161 $x140)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x108 $x74)))
 (let (($x111 (forall ((input.ind-%var827X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var827X)))
 (=> $x76 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var827X) (_ bv0 32)))))
 ))
 (let (($x87 (forall ((input.ind-%var826X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var826X)))
 (= $x76 false)))
 ))
 (let (($x93 (and $x87 $x111)))
 (let (($x144 (and $x93 $x128)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x180 (and $x154 $x144)))
 (let (($x21 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x174 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x21)))))
 (let (($x53 (=> (and $x124 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x21)))))
 (let (($x32 (and $x53 $x180)))
 (let (($x43 (=> $x32 $x112)))
 (not $x43))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x138 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x146 (bvule ?x138 (_ bv3 32))))
 (let (($x112 (= $x146 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x159 (bvneg ?x28)))
 (let (($x63 (= ?x159 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x63 true)))
 (let (($x101 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x58 (= $x101 true)))
 (let (($x164 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x68 (= $x164 true)))
 (let (($x151 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x34 (= $x151 true)))
 (let (($x50 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x104 (= $x50 true)))
 (let ((?x246 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x246)))
 (let ((?x244 (bvand symbol.1 (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x244)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x242)))
 (let ((?x237 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x239 (= input.memlabel-mem--symbol.1_end ?x237)))
 (let (($x235 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x240 (and $x235 $x239)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (and $x234 $x240)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x227 (and $x225 $x226)))
 (let (($x228 (not $x227)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x224 (and $x222 $x223)))
 (let (($x230 (and (not $x224) $x228)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x200 $x179)))
 (let (($x118 (not $x201)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x167 $x46)))
 (let (($x81 (and (not $x137) $x118)))
 (let (($x120 (and (and (and (and (and (and $x81 $x230) $x231) $x233) $x241) $x243) $x245)))
 (let (($x55 (and $x120 $x247)))
 (let (($x148 (= symbol.1 dst_symbol_addr.1)))
 (let (($x41 (and $x148 $x55)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x187 (or (bvugt input.memlabel-mem--symbol.1_begin ?x184) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x187) (or $x188 $x204)))))))
 (let (($x51 (and $x199 $x41)))
 (let (($x221 (= $x51 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x145 (= $x152 true)))
 (let (($x20 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x25 (= $x20 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (= $x139 true)))
 (let (($x163 (forall ((input.ind-%var817X (_ BitVec 32)) )(let ((?x217 (bvadd symbol.1 (bvmul input.ind-%var817X (_ bv4 32)))))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x217))))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv2 32))) ?x73)))
 (let ((?x106 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv3 32))) ?x168)))
 (let ((?x210 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var817X)))
 (let (($x183 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var817X)))
 (=> $x183 (= ?x210 ?x106)))))))))
 ))
 (let (($x85 (forall ((input.ind-%var816X (_ BitVec 32)) )(let (($x171 (and (bvule (_ bv0 32) input.ind-%var816X) (bvult input.ind-%var816X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x183 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var816X)))
 (= $x183 $x171))))
 ))
 (let (($x130 (and $x85 $x163)))
 (let (($x99 (= $x130 true)))
 (let ((?x169 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x169)))
 (let (($x70 (= ?x109 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (= $x70 true)))
 (let (($x121 (= ?x109 input.dst.llvm-%n)))
 (let (($x126 (= $x121 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x31 (bvsub ?x114 ?x40)))
 (let (($x56 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x31) (bvult ?x114 ?x31))))
 (let ((?x5 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x105 (bvmul (_ bv4 64) ?x5)))
 (let ((?x78 ((_ extract 63 32) ?x105)))
 (let (($x57 (= (_ bv0 32) ?x78)))
 (let (($x80 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x27 (and (and (and true $x80) $x57) $x56)))
 (let (($x8 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x23 (and $x8 $x27)))
 (let (($x124 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x98 (=> $x124 $x23)))
 (let (($x94 (= $x98 true)))
 (let (($x153 (= $x124 true)))
 (let (($x173 (and $x153 $x94)))
 (let (($x67 (and $x173 $x126)))
 (let (($x47 (and $x67 $x135)))
 (let (($x38 (and $x47 $x99)))
 (let (($x134 (and $x38 $x92)))
 (let (($x95 (and $x134 $x25)))
 (let (($x123 (and $x95 $x145)))
 (let (($x100 (and $x123 $x221)))
 (let (($x84 (and $x100 $x104)))
 (let (($x155 (and $x84 $x34)))
 (let (($x91 (and $x155 $x68)))
 (let (($x39 (and $x91 $x58)))
 (let (($x96 (and $x39 $x110)))
 (let (($x37 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and (not $x37) $x96)))
 (let (($x161 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (and $x161 $x140)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x108 $x74)))
 (let (($x111 (forall ((input.ind-%var827X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var827X)))
 (=> $x76 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var827X) (_ bv0 32)))))
 ))
 (let (($x87 (forall ((input.ind-%var826X (_ BitVec 32)) )(let (($x76 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var826X)))
 (= $x76 false)))
 ))
 (let (($x93 (and $x87 $x111)))
 (let (($x144 (and $x93 $x128)))
 (let (($x154 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x180 (and $x154 $x144)))
 (let (($x21 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x174 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x21)))))
 (let (($x53 (=> (and $x124 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x21)))))
 (let (($x32 (and $x53 $x180)))
 (let (($x43 (=> $x32 $x112)))
 (not $x43))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x02000002)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7fffffe0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x67d27f64)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x67d27f67)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000016f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x67d27f64)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7fffffe0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7fffffe0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x02000002)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x7fffffe3 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x7fffffe2 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x7fffffe1 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x7fffffe0 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000400)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000002)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x200001c0)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x2000034f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x200001c0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x200001c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x200001c3 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x200001c2 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x200001c1 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x200001c0 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) false
      (not (bvule #x00000003 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x216 (bvule ?x19 (_ bv4 32))))
 (let (($x113 (= $x216 true)))
 (let ((?x205 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x205)))
 (let (($x207 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x207 true)))
 (let (($x35 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x35 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x202 (= $x72 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x162 (= $x149 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x64)))
 (let ((?x112 (bvand symbol.1 (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x112)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x144 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (and $x140 $x144)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x96 $x180)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x101 (and $x68 $x91)))
 (let (($x58 (not $x101)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x164 (and $x34 $x155)))
 (let (($x28 (and (not $x164) $x58)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x221 $x100)))
 (let (($x104 (not $x50)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x55 $x41)))
 (let (($x151 (and (not $x51) $x104)))
 (let (($x141 (and (and (and (and (and (and $x151 $x28) $x159) $x110) $x32) $x146) $x43)))
 (let (($x61 (and $x141 $x49)))
 (let (($x233 (= symbol.1 dst_symbol_addr.1)))
 (let (($x33 (and $x233 $x61)))
 (let (($x243 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x235 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x239 (or (bvugt input.memlabel-mem--symbol.1_begin ?x235) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x239) (or $x242 $x243)))))))
 (let (($x103 (and $x247 $x33)))
 (let (($x156 (= $x103 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x248 (= $x230 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x227 (= $x226 true)))
 (let (($x224 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (= $x224 true)))
 (let (($x118 (forall ((input.ind-%var907X (_ BitVec 32)) )(let ((?x186 (bvadd symbol.1 (bvmul input.ind-%var907X (_ bv4 32)))))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x186))))
 (let ((?x46 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv2 32))) ?x17)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv3 32))) ?x46)))
 (let ((?x134 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var907X)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var907X)))
 (=> $x220 (= ?x134 ?x200)))))))))
 ))
 (let (($x99 (forall ((input.ind-%var906X (_ BitVec 32)) )(let (($x163 (and (bvule (_ bv0 32) input.ind-%var906X) (bvult input.ind-%var906X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var906X)))
 (= $x220 $x163))))
 ))
 (let (($x81 (and $x99 $x118)))
 (let (($x222 (= $x81 true)))
 (let ((?x85 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x85)))
 (let (($x147 (= ?x210 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (= $x147 true)))
 (let (($x15 (= ?x210 input.dst.llvm-%n)))
 (let (($x218 (= $x15 true)))
 (let (($x30 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x65 (= $x30 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x94 (bvsub ?x114 ?x40)))
 (let (($x109 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x94) (bvult ?x114 ?x94))))
 (let ((?x56 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x27 (bvmul (_ bv4 64) ?x56)))
 (let ((?x23 ((_ extract 63 32) ?x27)))
 (let (($x98 (= (_ bv0 32) ?x23)))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x67 (and (and (and true $x59) $x98) $x109)))
 (let (($x78 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x70 (and $x78 $x67)))
 (let (($x211 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (=> $x211 $x70)))
 (let (($x47 (= $x135 true)))
 (let (($x90 (= $x211 true)))
 (let (($x183 (and $x90 $x47)))
 (let (($x171 (and $x183 $x65)))
 (let (($x217 (and $x171 $x218)))
 (let (($x195 (and $x217 $x18)))
 (let (($x223 (and $x195 $x222)))
 (let (($x225 (and $x223 $x229)))
 (let (($x228 (and $x225 $x227)))
 (let (($x231 (and $x228 $x248)))
 (let (($x102 (and $x231 $x156)))
 (let (($x181 (and $x102 $x162)))
 (let (($x10 (and $x181 $x202)))
 (let (($x213 (and $x10 $x212)))
 (let (($x191 (and $x213 $x208)))
 (let (($x6 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x209 (and (not $x6) $x191)))
 (let (($x131 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and $x131 $x209)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x175 $x214)))
 (let (($x16 (forall ((input.ind-%var917X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var917X)))
 (=> $x36 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var917X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var916X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var916X)))
 (= $x36 false)))
 ))
 (let (($x9 (and $x111 $x16)))
 (let (($x54 (and $x9 $x7)))
 (let (($x176 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x127 (and $x176 $x54)))
 (let (($x143 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x143)))))
 (let (($x42 (=> (and $x211 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x143)))))
 (let (($x215 (and $x42 $x127)))
 (let (($x158 (=> $x215 $x113)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x216 (bvule ?x19 (_ bv4 32))))
 (let (($x113 (= $x216 true)))
 (let ((?x205 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x205)))
 (let (($x207 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x207 true)))
 (let (($x35 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x35 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x202 (= $x72 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x162 (= $x149 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x64)))
 (let ((?x112 (bvand symbol.1 (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x112)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x144 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (and $x140 $x144)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x96 $x180)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x101 (and $x68 $x91)))
 (let (($x58 (not $x101)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x164 (and $x34 $x155)))
 (let (($x28 (and (not $x164) $x58)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x221 $x100)))
 (let (($x104 (not $x50)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x55 $x41)))
 (let (($x151 (and (not $x51) $x104)))
 (let (($x141 (and (and (and (and (and (and $x151 $x28) $x159) $x110) $x32) $x146) $x43)))
 (let (($x61 (and $x141 $x49)))
 (let (($x233 (= symbol.1 dst_symbol_addr.1)))
 (let (($x33 (and $x233 $x61)))
 (let (($x243 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x235 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x239 (or (bvugt input.memlabel-mem--symbol.1_begin ?x235) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x239) (or $x242 $x243)))))))
 (let (($x103 (and $x247 $x33)))
 (let (($x156 (= $x103 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x248 (= $x230 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x227 (= $x226 true)))
 (let (($x224 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (= $x224 true)))
 (let (($x118 (forall ((input.ind-%var907X (_ BitVec 32)) )(let ((?x186 (bvadd symbol.1 (bvmul input.ind-%var907X (_ bv4 32)))))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x186))))
 (let ((?x46 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv2 32))) ?x17)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x186 (_ bv3 32))) ?x46)))
 (let ((?x134 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var907X)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var907X)))
 (=> $x220 (= ?x134 ?x200)))))))))
 ))
 (let (($x99 (forall ((input.ind-%var906X (_ BitVec 32)) )(let (($x163 (and (bvule (_ bv0 32) input.ind-%var906X) (bvult input.ind-%var906X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var906X)))
 (= $x220 $x163))))
 ))
 (let (($x81 (and $x99 $x118)))
 (let (($x222 (= $x81 true)))
 (let ((?x85 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x85)))
 (let (($x147 (= ?x210 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x18 (= $x147 true)))
 (let (($x15 (= ?x210 input.dst.llvm-%n)))
 (let (($x218 (= $x15 true)))
 (let (($x30 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x65 (= $x30 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x94 (bvsub ?x114 ?x40)))
 (let (($x109 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x94) (bvult ?x114 ?x94))))
 (let ((?x56 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x27 (bvmul (_ bv4 64) ?x56)))
 (let ((?x23 ((_ extract 63 32) ?x27)))
 (let (($x98 (= (_ bv0 32) ?x23)))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x67 (and (and (and true $x59) $x98) $x109)))
 (let (($x78 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x70 (and $x78 $x67)))
 (let (($x211 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (=> $x211 $x70)))
 (let (($x47 (= $x135 true)))
 (let (($x90 (= $x211 true)))
 (let (($x183 (and $x90 $x47)))
 (let (($x171 (and $x183 $x65)))
 (let (($x217 (and $x171 $x218)))
 (let (($x195 (and $x217 $x18)))
 (let (($x223 (and $x195 $x222)))
 (let (($x225 (and $x223 $x229)))
 (let (($x228 (and $x225 $x227)))
 (let (($x231 (and $x228 $x248)))
 (let (($x102 (and $x231 $x156)))
 (let (($x181 (and $x102 $x162)))
 (let (($x10 (and $x181 $x202)))
 (let (($x213 (and $x10 $x212)))
 (let (($x191 (and $x213 $x208)))
 (let (($x6 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x209 (and (not $x6) $x191)))
 (let (($x131 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and $x131 $x209)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x175 $x214)))
 (let (($x16 (forall ((input.ind-%var917X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var917X)))
 (=> $x36 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var917X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var916X (_ BitVec 32)) )(let (($x36 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var916X)))
 (= $x36 false)))
 ))
 (let (($x9 (and $x111 $x16)))
 (let (($x54 (and $x9 $x7)))
 (let (($x176 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x127 (and $x176 $x54)))
 (let (($x143 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x143)))))
 (let (($x42 (=> (and $x211 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x143)))))
 (let (($x215 (and $x42 $x127)))
 (let (($x158 (=> $x215 $x113)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2001fffc)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2001ffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000187)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2001fffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffff8)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) false
      (not (bvule #x00000004 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x02000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x050f4020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0447a000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0447a003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x050f41af)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0447a000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x050f4020)
  (define-fun symbol.1 () (_ BitVec 32)
    #x050f4020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x02000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x050f4023 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x050f4022 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x050f4021 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x050f4020 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x204 (bvule ?x139 (_ bv399 32))))
 (let (($x142 (= $x204 true)))
 (let ((?x132 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x132)))
 (let (($x125 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x125 true)))
 (let (($x145 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x190 (= $x145 true)))
 (let (($x219 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x73 (= $x219 true)))
 (let (($x150 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x92 (= $x150 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x172)))
 (let ((?x113 (bvand symbol.1 (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x113)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x7 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x54 (= input.memlabel-mem--symbol.1_end ?x7)))
 (let (($x214 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x127 (and $x214 $x54)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x209 $x127)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x212 (and $x10 $x35)))
 (let (($x213 (not $x212)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x202 (and $x181 $x72)))
 (let (($x206 (and (not $x202) $x213)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x33 $x103)))
 (let (($x102 (not $x156)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x64 $x49)))
 (let (($x162 (and (not $x61) $x102)))
 (let (($x107 (and (and (and (and (and (and $x162 $x206) $x207) $x191) $x215) $x216) $x158)))
 (let (($x93 (and $x107 $x52)))
 (let (($x117 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x117 $x93)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x74 (or (bvugt input.memlabel-mem--symbol.1_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x74) (or $x32 $x79)))))))
 (let (($x76 (and $x141 $x108)))
 (let (($x166 (= $x76 true)))
 (let (($x101 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x58 (= $x101 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x39 true)))
 (let (($x151 (forall ((input.ind-%var997X (_ BitVec 32)) )(let ((?x245 (bvadd symbol.1 (bvmul input.ind-%var997X (_ bv4 32)))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x245))))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv2 32))) ?x233)))
 (let ((?x100 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv3 32))) ?x51)))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var997X)))
 (let (($x199 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var997X)))
 (=> $x199 (= ?x226 ?x100)))))))))
 ))
 (let (($x223 (forall ((input.ind-%var996X (_ BitVec 32)) )(let (($x81 (and (bvule (_ bv0 32) input.ind-%var996X) (bvult input.ind-%var996X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x199 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var996X)))
 (= $x199 $x81))))
 ))
 (let (($x34 (and $x223 $x151)))
 (let (($x155 (= $x34 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x134)))
 (let (($x83 (= ?x25 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (= $x83 true)))
 (let (($x198 (= ?x25 input.dst.llvm-%n)))
 (let (($x186 (= $x198 true)))
 (let (($x170 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x170 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x171 (bvsub ?x114 ?x40)))
 (let (($x15 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x171) (bvult ?x114 ?x171))))
 (let ((?x47 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x47)))
 (let ((?x30 ((_ extract 63 32) ?x183)))
 (let (($x65 (= (_ bv0 32) ?x30)))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x147 (and (and (and true $x70) $x65) $x15)))
 (let (($x94 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x18 (and $x94 $x147)))
 (let (($x95 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (=> $x95 $x18)))
 (let (($x220 (= $x195 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x23 (= $x27 true)))
 (let (($x29 (= $x95 true)))
 (let (($x98 (and $x29 $x23)))
 (let (($x26 (and $x98 $x220)))
 (let (($x130 (and $x26 $x163)))
 (let (($x137 (and $x130 $x186)))
 (let (($x148 (and $x137 $x184)))
 (let (($x164 (and $x148 $x155)))
 (let (($x91 (and $x164 $x68)))
 (let (($x28 (and $x91 $x58)))
 (let (($x238 (and $x28 $x166)))
 (let (($x193 (and $x238 $x92)))
 (let (($x152 (and $x193 $x73)))
 (let (($x157 (and $x152 $x190)))
 (let (($x123 (and $x157 $x160)))
 (let (($x121 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x187 (and (not $x121) $x123)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x188 (and $x31 $x187)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x75 $x188)))
 (let (($x5 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1007X)))
 (=> $x45 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1007X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (= $x45 false)))
 ))
 (let (($x105 (and $x16 $x5)))
 (let (($x168 (and $x105 $x12)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x106 (and $x87 $x168)))
 (let (($x53 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x176 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x53)))))
 (let (($x77 (=> (and $x95 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x53)))))
 (let (($x196 (and $x77 $x106)))
 (let (($x37 (=> $x196 $x142)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x204 (bvule ?x139 (_ bv399 32))))
 (let (($x142 (= $x204 true)))
 (let ((?x132 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x132)))
 (let (($x125 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x125 true)))
 (let (($x145 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x190 (= $x145 true)))
 (let (($x219 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x73 (= $x219 true)))
 (let (($x150 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x92 (= $x150 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x172)))
 (let ((?x113 (bvand symbol.1 (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x113)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x7 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x54 (= input.memlabel-mem--symbol.1_end ?x7)))
 (let (($x214 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x127 (and $x214 $x54)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x209 $x127)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x212 (and $x10 $x35)))
 (let (($x213 (not $x212)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x202 (and $x181 $x72)))
 (let (($x206 (and (not $x202) $x213)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x33 $x103)))
 (let (($x102 (not $x156)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x64 $x49)))
 (let (($x162 (and (not $x61) $x102)))
 (let (($x107 (and (and (and (and (and (and $x162 $x206) $x207) $x191) $x215) $x216) $x158)))
 (let (($x93 (and $x107 $x52)))
 (let (($x117 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x117 $x93)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x74 (or (bvugt input.memlabel-mem--symbol.1_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x74) (or $x32 $x79)))))))
 (let (($x76 (and $x141 $x108)))
 (let (($x166 (= $x76 true)))
 (let (($x101 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x58 (= $x101 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x39 true)))
 (let (($x151 (forall ((input.ind-%var997X (_ BitVec 32)) )(let ((?x245 (bvadd symbol.1 (bvmul input.ind-%var997X (_ bv4 32)))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x245))))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv2 32))) ?x233)))
 (let ((?x100 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x245 (_ bv3 32))) ?x51)))
 (let ((?x226 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var997X)))
 (let (($x199 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var997X)))
 (=> $x199 (= ?x226 ?x100)))))))))
 ))
 (let (($x223 (forall ((input.ind-%var996X (_ BitVec 32)) )(let (($x81 (and (bvule (_ bv0 32) input.ind-%var996X) (bvult input.ind-%var996X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x199 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var996X)))
 (= $x199 $x81))))
 ))
 (let (($x34 (and $x223 $x151)))
 (let (($x155 (= $x34 true)))
 (let ((?x134 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x25 (bvneg ?x134)))
 (let (($x83 (= ?x25 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (= $x83 true)))
 (let (($x198 (= ?x25 input.dst.llvm-%n)))
 (let (($x186 (= $x198 true)))
 (let (($x170 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x170 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x171 (bvsub ?x114 ?x40)))
 (let (($x15 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x171) (bvult ?x114 ?x171))))
 (let ((?x47 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x183 (bvmul (_ bv4 64) ?x47)))
 (let ((?x30 ((_ extract 63 32) ?x183)))
 (let (($x65 (= (_ bv0 32) ?x30)))
 (let (($x70 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x147 (and (and (and true $x70) $x65) $x15)))
 (let (($x94 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x18 (and $x94 $x147)))
 (let (($x95 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (=> $x95 $x18)))
 (let (($x220 (= $x195 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x23 (= $x27 true)))
 (let (($x29 (= $x95 true)))
 (let (($x98 (and $x29 $x23)))
 (let (($x26 (and $x98 $x220)))
 (let (($x130 (and $x26 $x163)))
 (let (($x137 (and $x130 $x186)))
 (let (($x148 (and $x137 $x184)))
 (let (($x164 (and $x148 $x155)))
 (let (($x91 (and $x164 $x68)))
 (let (($x28 (and $x91 $x58)))
 (let (($x238 (and $x28 $x166)))
 (let (($x193 (and $x238 $x92)))
 (let (($x152 (and $x193 $x73)))
 (let (($x157 (and $x152 $x190)))
 (let (($x123 (and $x157 $x160)))
 (let (($x121 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x187 (and (not $x121) $x123)))
 (let (($x31 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x188 (and $x31 $x187)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x75 $x188)))
 (let (($x5 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1007X)))
 (=> $x45 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1007X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x45 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (= $x45 false)))
 ))
 (let (($x105 (and $x16 $x5)))
 (let (($x168 (and $x105 $x12)))
 (let (($x87 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x106 (and $x87 $x168)))
 (let (($x53 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x176 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x53)))))
 (let (($x77 (=> (and $x95 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x53)))))
 (let (($x196 (and $x77 $x106)))
 (let (($x37 (=> $x196 $x142)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x252 (bvsle ?x229 (_ bv399 32))))
 (let (($x8 (= $x252 true)))
 (let ((?x237 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x239 (bvneg ?x237)))
 (let (($x234 (= ?x239 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x234 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x241 (= $x231 true)))
 (let (($x17 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x46 (= $x17 true)))
 (let (($x80 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x225 (= $x80 true)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x203)))
 (let ((?x142 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x142)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x12 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x168 (= input.memlabel-mem--symbol.1_end ?x12)))
 (let (($x188 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (and $x188 $x168)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x187 $x106)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x152 $x145)))
 (let (($x157 (not $x190)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x193 $x219)))
 (let (($x185 (and (not $x73) $x157)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x108 $x76)))
 (let (($x238 (not $x166)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x172 $x52)))
 (let (($x92 (and (not $x93) $x238)))
 (let (($x177 (and (and (and (and (and (and $x92 $x185) $x125) $x123) $x196) $x204) $x37)))
 (let (($x9 (and $x177 $x86)))
 (let (($x207 (= symbol.1 dst_symbol_addr.1)))
 (let (($x175 (and $x207 $x9)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x191 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x214 (or (bvugt input.memlabel-mem--symbol.1_begin ?x191) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x214) (or $x215 $x20)))))))
 (let (($x36 (and $x107 $x175)))
 (let (($x116 (= $x36 true)))
 (let (($x35 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x212 (= $x35 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x205 (= $x202 true)))
 (let (($x102 (forall ((input.ind-%var1017X (_ BitVec 32)) )(let ((?x146 (bvadd symbol.1 (bvmul input.ind-%var1017X (_ bv4 32)))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x146))))
 (let ((?x49 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv2 32))) ?x159)))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv3 32))) ?x49)))
 (let ((?x164 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1017X)))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1017X)))
 (=> $x236 (= ?x164 ?x33)))))))))
 ))
 (let (($x104 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let (($x100 (and (bvule (_ bv0 32) input.ind-%var1016X) (bvult input.ind-%var1016X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1016X)))
 (= $x236 $x100))))
 ))
 (let (($x162 (and $x104 $x102)))
 (let (($x181 (= $x162 true)))
 (let ((?x201 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x201)))
 (let (($x228 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (= $x228 true)))
 (let (($x222 (= ?x81 input.dst.llvm-%n)))
 (let (($x223 (= $x222 true)))
 (let (($x184 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x148 (= $x184 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x220 (bvsub ?x114 ?x40)))
 (let (($x130 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x220) (bvult ?x114 ?x220))))
 (let ((?x15 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x15)))
 (let ((?x18 ((_ extract 63 32) ?x147)))
 (let (($x195 (= (_ bv0 32) ?x18)))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x25 (and (and (and true $x85) $x195) $x130)))
 (let (($x30 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x198 (and $x30 $x25)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (=> $x230 $x198)))
 (let (($x137 (= $x186 true)))
 (let (($x70 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x218 (= $x70 true)))
 (let (($x109 (= $x230 true)))
 (let (($x135 (and $x109 $x218)))
 (let (($x83 (and $x135 $x137)))
 (let (($x199 (and $x83 $x148)))
 (let (($x226 (and $x199 $x223)))
 (let (($x245 (and $x226 $x244)))
 (let (($x72 (and $x245 $x181)))
 (let (($x10 (and $x72 $x205)))
 (let (($x213 (and $x10 $x212)))
 (let (($x182 (and $x213 $x116)))
 (let (($x167 (and $x182 $x225)))
 (let (($x248 (and $x167 $x46)))
 (let (($x242 (and $x248 $x241)))
 (let (($x250 (and $x242 $x246)))
 (let (($x13 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and (not $x13) $x250)))
 (let (($x94 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (and $x94 $x240)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x98 $x251)))
 (let (($x56 (forall ((input.ind-%var1027X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1027X)))
 (=> $x48 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1027X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var1026X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1026X)))
 (= $x48 false)))
 ))
 (let (($x27 (and $x5 $x56)))
 (let (($x200 (and $x27 $x189)))
 (let (($x111 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x111 $x200)))
 (let (($x42 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x87 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x42)))))
 (let (($x66 (=> (and $x230 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x42)))))
 (let (($x243 (and $x66 $x179)))
 (let (($x6 (=> $x243 $x8)))
 (not $x6))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x252 (bvsle ?x229 (_ bv399 32))))
 (let (($x8 (= $x252 true)))
 (let ((?x237 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x239 (bvneg ?x237)))
 (let (($x234 (= ?x239 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x234 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x241 (= $x231 true)))
 (let (($x17 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x46 (= $x17 true)))
 (let (($x80 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x225 (= $x80 true)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x203)))
 (let ((?x142 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x142)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x12 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x168 (= input.memlabel-mem--symbol.1_end ?x12)))
 (let (($x188 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (and $x188 $x168)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x187 $x106)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x152 $x145)))
 (let (($x157 (not $x190)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x73 (and $x193 $x219)))
 (let (($x185 (and (not $x73) $x157)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x108 $x76)))
 (let (($x238 (not $x166)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x172 $x52)))
 (let (($x92 (and (not $x93) $x238)))
 (let (($x177 (and (and (and (and (and (and $x92 $x185) $x125) $x123) $x196) $x204) $x37)))
 (let (($x9 (and $x177 $x86)))
 (let (($x207 (= symbol.1 dst_symbol_addr.1)))
 (let (($x175 (and $x207 $x9)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x191 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x214 (or (bvugt input.memlabel-mem--symbol.1_begin ?x191) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x214) (or $x215 $x20)))))))
 (let (($x36 (and $x107 $x175)))
 (let (($x116 (= $x36 true)))
 (let (($x35 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x212 (= $x35 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x205 (= $x202 true)))
 (let (($x102 (forall ((input.ind-%var1017X (_ BitVec 32)) )(let ((?x146 (bvadd symbol.1 (bvmul input.ind-%var1017X (_ bv4 32)))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x146))))
 (let ((?x49 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv2 32))) ?x159)))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv3 32))) ?x49)))
 (let ((?x164 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1017X)))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1017X)))
 (=> $x236 (= ?x164 ?x33)))))))))
 ))
 (let (($x104 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let (($x100 (and (bvule (_ bv0 32) input.ind-%var1016X) (bvult input.ind-%var1016X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1016X)))
 (= $x236 $x100))))
 ))
 (let (($x162 (and $x104 $x102)))
 (let (($x181 (= $x162 true)))
 (let ((?x201 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x201)))
 (let (($x228 (= ?x81 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (= $x228 true)))
 (let (($x222 (= ?x81 input.dst.llvm-%n)))
 (let (($x223 (= $x222 true)))
 (let (($x184 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x148 (= $x184 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x220 (bvsub ?x114 ?x40)))
 (let (($x130 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x220) (bvult ?x114 ?x220))))
 (let ((?x15 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x147 (bvmul (_ bv4 64) ?x15)))
 (let ((?x18 ((_ extract 63 32) ?x147)))
 (let (($x195 (= (_ bv0 32) ?x18)))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x25 (and (and (and true $x85) $x195) $x130)))
 (let (($x30 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x198 (and $x30 $x25)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (=> $x230 $x198)))
 (let (($x137 (= $x186 true)))
 (let (($x70 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x218 (= $x70 true)))
 (let (($x109 (= $x230 true)))
 (let (($x135 (and $x109 $x218)))
 (let (($x83 (and $x135 $x137)))
 (let (($x199 (and $x83 $x148)))
 (let (($x226 (and $x199 $x223)))
 (let (($x245 (and $x226 $x244)))
 (let (($x72 (and $x245 $x181)))
 (let (($x10 (and $x72 $x205)))
 (let (($x213 (and $x10 $x212)))
 (let (($x182 (and $x213 $x116)))
 (let (($x167 (and $x182 $x225)))
 (let (($x248 (and $x167 $x46)))
 (let (($x242 (and $x248 $x241)))
 (let (($x250 (and $x242 $x246)))
 (let (($x13 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x240 (and (not $x13) $x250)))
 (let (($x94 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x251 (and $x94 $x240)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x98 $x251)))
 (let (($x56 (forall ((input.ind-%var1027X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1027X)))
 (=> $x48 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1027X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var1026X (_ BitVec 32)) )(let (($x48 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1026X)))
 (= $x48 false)))
 ))
 (let (($x27 (and $x5 $x56)))
 (let (($x200 (and $x27 $x189)))
 (let (($x111 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x111 $x200)))
 (let (($x42 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x87 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x42)))))
 (let (($x66 (=> (and $x230 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x42)))))
 (let (($x243 (and $x66 $x179)))
 (let (($x6 (=> $x243 $x8)))
 (not $x6))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x79 (bvsge ?x34 (_ bv0 32))))
 (let (($x78 (= $x79 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x96)))
 (let (($x63 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x63 true)))
 (let (($x58 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x128 (= $x58 true)))
 (let (($x41 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x247 (= $x41 true)))
 (let (($x59 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x59 true)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x38)))
 (let ((?x8 (bvand symbol.1 (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x8)))
 (let ((?x229 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x252 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x229)))
 (let ((?x189 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x200 (= input.memlabel-mem--symbol.1_end ?x189)))
 (let (($x251 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x179 (and $x251 $x200)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (and $x240 $x179)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x241 (and $x248 $x231)))
 (let (($x242 (not $x241)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x46 (and $x167 $x17)))
 (let (($x239 (and (not $x46) $x242)))
 (let (($x36 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x175 $x36)))
 (let (($x182 (not $x116)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x203 $x86)))
 (let (($x225 (and (not $x9) $x182)))
 (let (($x129 (and (and (and (and (and (and $x225 $x239) $x234) $x250) $x243) $x252) $x6)))
 (let (($x105 (and $x129 $x11)))
 (let (($x125 (= symbol.1 dst_symbol_addr.1)))
 (let (($x75 (and $x125 $x105)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x188 (or (bvugt input.memlabel-mem--symbol.1_begin ?x123) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x188) (or $x196 $x227)))))))
 (let (($x45 (and $x177 $x75)))
 (let (($x153 (= $x45 true)))
 (let (($x145 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (= $x145 true)))
 (let (($x73 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x132 (= $x73 true)))
 (let (($x238 (forall ((input.ind-%var1037X (_ BitVec 32)) )(let ((?x216 (bvadd symbol.1 (bvmul input.ind-%var1037X (_ bv4 32)))))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x216))))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv2 32))) ?x82)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv3 32))) ?x52)))
 (let ((?x72 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1037X)))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1037X)))
 (=> $x22 (= ?x72 ?x108)))))))))
 ))
 (let (($x156 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let (($x33 (and (bvule (_ bv0 32) input.ind-%var1036X) (bvult input.ind-%var1036X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1036X)))
 (= $x22 $x33))))
 ))
 (let (($x92 (and $x156 $x238)))
 (let (($x193 (= $x92 true)))
 (let ((?x233 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x233)))
 (let (($x68 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (= $x68 true)))
 (let (($x50 (= ?x100 input.dst.llvm-%n)))
 (let (($x104 (= $x50 true)))
 (let (($x244 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x245 (= $x244 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x137 (bvsub ?x114 ?x40)))
 (let (($x199 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x137) (bvult ?x114 ?x137))))
 (let ((?x130 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x25 (bvmul (_ bv4 64) ?x130)))
 (let ((?x198 ((_ extract 63 32) ?x25)))
 (let (($x186 (= (_ bv0 32) ?x198)))
 (let (($x170 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x81 (and (and (and true $x170) $x186) $x199)))
 (let (($x18 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x222 (and $x18 $x81)))
 (let (($x91 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (=> $x91 $x222)))
 (let (($x226 (= $x223 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x99 (= $x85 true)))
 (let (($x165 (= $x91 true)))
 (let (($x210 (and $x165 $x99)))
 (let (($x228 (and $x210 $x226)))
 (let (($x236 (and $x228 $x245)))
 (let (($x164 (and $x236 $x104)))
 (let (($x146 (and $x164 $x138)))
 (let (($x219 (and $x146 $x193)))
 (let (($x152 (and $x219 $x132)))
 (let (($x157 (and $x152 $x190)))
 (let (($x194 (and $x157 $x153)))
 (let (($x84 (and $x194 $x155)))
 (let (($x101 (and $x84 $x247)))
 (let (($x144 (and $x101 $x128)))
 (let (($x28 (and $x144 $x110)))
 (let (($x65 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (and (not $x65) $x28)))
 (let (($x30 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x30 $x74)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x221 (and $x135 $x32)))
 (let (($x67 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1047X)))
 (=> $x57 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1047X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1046X)))
 (= $x57 false)))
 ))
 (let (($x70 (and $x56 $x67)))
 (let (($x232 (and $x70 $x221)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x120 (and $x16 $x232)))
 (let (($x77 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x77)))))
 (let (($x60 (=> (and $x91 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x77)))))
 (let (($x180 (and $x60 $x120)))
 (let (($x121 (=> $x180 $x78)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x79 (bvsge ?x34 (_ bv0 32))))
 (let (($x78 (= $x79 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x140 (bvneg ?x96)))
 (let (($x63 (= ?x140 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x63 true)))
 (let (($x58 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x128 (= $x58 true)))
 (let (($x41 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x247 (= $x41 true)))
 (let (($x59 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x155 (= $x59 true)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x38)))
 (let ((?x8 (bvand symbol.1 (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x8)))
 (let ((?x229 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x252 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x229)))
 (let ((?x189 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x200 (= input.memlabel-mem--symbol.1_end ?x189)))
 (let (($x251 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x179 (and $x251 $x200)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (and $x240 $x179)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x241 (and $x248 $x231)))
 (let (($x242 (not $x241)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x46 (and $x167 $x17)))
 (let (($x239 (and (not $x46) $x242)))
 (let (($x36 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x175 $x36)))
 (let (($x182 (not $x116)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x203 $x86)))
 (let (($x225 (and (not $x9) $x182)))
 (let (($x129 (and (and (and (and (and (and $x225 $x239) $x234) $x250) $x243) $x252) $x6)))
 (let (($x105 (and $x129 $x11)))
 (let (($x125 (= symbol.1 dst_symbol_addr.1)))
 (let (($x75 (and $x125 $x105)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x188 (or (bvugt input.memlabel-mem--symbol.1_begin ?x123) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x188) (or $x196 $x227)))))))
 (let (($x45 (and $x177 $x75)))
 (let (($x153 (= $x45 true)))
 (let (($x145 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (= $x145 true)))
 (let (($x73 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x132 (= $x73 true)))
 (let (($x238 (forall ((input.ind-%var1037X (_ BitVec 32)) )(let ((?x216 (bvadd symbol.1 (bvmul input.ind-%var1037X (_ bv4 32)))))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x216))))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv2 32))) ?x82)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x216 (_ bv3 32))) ?x52)))
 (let ((?x72 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1037X)))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1037X)))
 (=> $x22 (= ?x72 ?x108)))))))))
 ))
 (let (($x156 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let (($x33 (and (bvule (_ bv0 32) input.ind-%var1036X) (bvult input.ind-%var1036X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x22 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1036X)))
 (= $x22 $x33))))
 ))
 (let (($x92 (and $x156 $x238)))
 (let (($x193 (= $x92 true)))
 (let ((?x233 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x233)))
 (let (($x68 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (= $x68 true)))
 (let (($x50 (= ?x100 input.dst.llvm-%n)))
 (let (($x104 (= $x50 true)))
 (let (($x244 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x245 (= $x244 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x137 (bvsub ?x114 ?x40)))
 (let (($x199 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x137) (bvult ?x114 ?x137))))
 (let ((?x130 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x25 (bvmul (_ bv4 64) ?x130)))
 (let ((?x198 ((_ extract 63 32) ?x25)))
 (let (($x186 (= (_ bv0 32) ?x198)))
 (let (($x170 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x81 (and (and (and true $x170) $x186) $x199)))
 (let (($x18 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x222 (and $x18 $x81)))
 (let (($x91 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x223 (=> $x91 $x222)))
 (let (($x226 (= $x223 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x99 (= $x85 true)))
 (let (($x165 (= $x91 true)))
 (let (($x210 (and $x165 $x99)))
 (let (($x228 (and $x210 $x226)))
 (let (($x236 (and $x228 $x245)))
 (let (($x164 (and $x236 $x104)))
 (let (($x146 (and $x164 $x138)))
 (let (($x219 (and $x146 $x193)))
 (let (($x152 (and $x219 $x132)))
 (let (($x157 (and $x152 $x190)))
 (let (($x194 (and $x157 $x153)))
 (let (($x84 (and $x194 $x155)))
 (let (($x101 (and $x84 $x247)))
 (let (($x144 (and $x101 $x128)))
 (let (($x28 (and $x144 $x110)))
 (let (($x65 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x74 (and (not $x65) $x28)))
 (let (($x30 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x30 $x74)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x221 (and $x135 $x32)))
 (let (($x67 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1047X)))
 (=> $x57 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1047X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x57 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1046X)))
 (= $x57 false)))
 ))
 (let (($x70 (and $x56 $x67)))
 (let (($x232 (and $x70 $x221)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x120 (and $x16 $x232)))
 (let (($x77 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x77)))))
 (let (($x60 (=> (and $x91 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x77)))))
 (let (($x180 (and $x60 $x120)))
 (let (($x121 (=> $x180 $x78)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x20 (bvule ?x162 (_ bv399 32))))
 (let (($x23 (= $x20 true)))
 (let ((?x97 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x209 (bvneg ?x97)))
 (let (($x249 (= ?x209 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x249 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x7 (= $x212 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x64 true)))
 (let (($x197 (forall ((input.ind-%var1057X (_ BitVec 32)) )(let ((?x121 (bvadd symbol.1 (bvmul input.ind-%var1057X (_ bv4 32)))))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x121))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv2 32))) ?x185)))
 (let ((?x98 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv3 32))) ?x31)))
 (let ((?x41 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1057X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1057X)))
 (=> $x131 (= ?x41 ?x98)))))))))
 ))
 (let (($x194 (forall ((input.ind-%var1056X (_ BitVec 32)) )(let (($x45 (and (bvule (_ bv0 32) input.ind-%var1056X) (bvult input.ind-%var1056X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1056X)))
 (= $x131 $x45))))
 ))
 (let (($x169 (and $x194 $x197)))
 (let (($x181 (= $x169 true)))
 (let (($x179 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x243 (= $x179 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x242 (bvsub ?x114 ?x40)))
 (let (($x206 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x242) (bvult ?x114 ?x242))))
 (let ((?x237 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x248 (bvmul (_ bv4 64) ?x237)))
 (let ((?x231 ((_ extract 63 32) ?x248)))
 (let (($x241 (= (_ bv0 32) ?x231)))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x55 (and (and (and true $x17) $x241) $x206)))
 (let (($x36 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x240 (and $x36 $x55)))
 (let (($x10 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x10 $x240)))
 (let (($x189 (= $x251 true)))
 (let (($x203 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x86 (= $x203 true)))
 (let (($x115 (= $x10 true)))
 (let (($x161 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x142 (= $x161 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x160)))
 (let ((?x157 (bvand symbol.1 (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x157)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x219 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x73 (= input.memlabel-mem--symbol.1_end ?x219)))
 (let (($x193 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x132 (and $x193 $x73)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x92 $x132)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (and $x113 $x107)))
 (let (($x82 (not $x89)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x172 (and $x191 $x207)))
 (let (($x108 (and (not $x172) $x82)))
 (let (($x205 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x72 $x205)))
 (let (($x216 (not $x19)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x33 $x103)))
 (let (($x150 (and (not $x156) $x216)))
 (let (($x168 (and (and (and (and (and (and $x150 $x108) $x76) $x238) $x152) $x190) $x14)))
 (let (($x196 (and $x168 $x37)))
 (let (($x223 (= symbol.1 dst_symbol_addr.1)))
 (let (($x106 (and $x223 $x196)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x244 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x244)))
 (let (($x51 (or (bvugt input.memlabel-mem--symbol.1_begin ?x244) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x51) (or $x104 $x164)))))))
 (let (($x227 (and $x159 $x106)))
 (let (($x139 (= $x227 true)))
 (let (($x184 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x148 (= $x184 true)))
 (let ((?x163 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x163)))
 (let (($x201 (= ?x130 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x201 true)))
 (let (($x25 (= ?x130 input.dst.llvm-%n)))
 (let (($x198 (= $x25 true)))
 (let (($x220 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x170 (= $x220 true)))
 (let (($x186 (and $x170 $x198)))
 (let (($x137 (and $x186 $x83)))
 (let (($x199 (and $x137 $x148)))
 (let (($x204 (and $x199 $x139)))
 (let (($x177 (and $x204 $x142)))
 (let (($x125 (and $x177 $x115)))
 (let (($x9 (and $x125 $x86)))
 (let (($x200 (and $x9 $x189)))
 (let (($x39 (and $x200 $x243)))
 (let (($x61 (and $x39 $x181)))
 (let (($x35 (and $x61 $x112)))
 (let (($x54 (and $x35 $x7)))
 (let (($x213 (and $x54 $x208)))
 (let (($x195 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and (not $x195) $x213)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and $x18 $x214)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x149 (and $x210 $x215)))
 (let (($x171 (forall ((input.ind-%var1067X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1067X)))
 (=> $x126 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1067X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var1066X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1066X)))
 (= $x126 false)))
 ))
 (let (($x85 (and $x67 $x171)))
 (let (($x141 (and $x85 $x149)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x5 $x141)))
 (let (($x66 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x16 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x66)))))
 (let (($x136 (=> (and $x10 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x66)))))
 (let (($x127 (and $x136 $x88)))
 (let (($x13 (=> $x127 $x23)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x20 (bvule ?x162 (_ bv399 32))))
 (let (($x23 (= $x20 true)))
 (let ((?x97 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x209 (bvneg ?x97)))
 (let (($x249 (= ?x209 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x249 true)))
 (let (($x212 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x7 (= $x212 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x64 true)))
 (let (($x197 (forall ((input.ind-%var1057X (_ BitVec 32)) )(let ((?x121 (bvadd symbol.1 (bvmul input.ind-%var1057X (_ bv4 32)))))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x121))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv2 32))) ?x185)))
 (let ((?x98 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x121 (_ bv3 32))) ?x31)))
 (let ((?x41 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1057X)))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1057X)))
 (=> $x131 (= ?x41 ?x98)))))))))
 ))
 (let (($x194 (forall ((input.ind-%var1056X (_ BitVec 32)) )(let (($x45 (and (bvule (_ bv0 32) input.ind-%var1056X) (bvult input.ind-%var1056X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x131 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1056X)))
 (= $x131 $x45))))
 ))
 (let (($x169 (and $x194 $x197)))
 (let (($x181 (= $x169 true)))
 (let (($x179 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x243 (= $x179 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x242 (bvsub ?x114 ?x40)))
 (let (($x206 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x242) (bvult ?x114 ?x242))))
 (let ((?x237 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x248 (bvmul (_ bv4 64) ?x237)))
 (let ((?x231 ((_ extract 63 32) ?x248)))
 (let (($x241 (= (_ bv0 32) ?x231)))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x55 (and (and (and true $x17) $x241) $x206)))
 (let (($x36 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x240 (and $x36 $x55)))
 (let (($x10 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x10 $x240)))
 (let (($x189 (= $x251 true)))
 (let (($x203 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x86 (= $x203 true)))
 (let (($x115 (= $x10 true)))
 (let (($x161 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x142 (= $x161 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x160)))
 (let ((?x157 (bvand symbol.1 (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x157)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x219 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x73 (= input.memlabel-mem--symbol.1_end ?x219)))
 (let (($x193 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x132 (and $x193 $x73)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x92 $x132)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (and $x113 $x107)))
 (let (($x82 (not $x89)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x172 (and $x191 $x207)))
 (let (($x108 (and (not $x172) $x82)))
 (let (($x205 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x72 $x205)))
 (let (($x216 (not $x19)))
 (let (($x103 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x33 $x103)))
 (let (($x150 (and (not $x156) $x216)))
 (let (($x168 (and (and (and (and (and (and $x150 $x108) $x76) $x238) $x152) $x190) $x14)))
 (let (($x196 (and $x168 $x37)))
 (let (($x223 (= symbol.1 dst_symbol_addr.1)))
 (let (($x106 (and $x223 $x196)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x244 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x244)))
 (let (($x51 (or (bvugt input.memlabel-mem--symbol.1_begin ?x244) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x51) (or $x104 $x164)))))))
 (let (($x227 (and $x159 $x106)))
 (let (($x139 (= $x227 true)))
 (let (($x184 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x148 (= $x184 true)))
 (let ((?x163 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x163)))
 (let (($x201 (= ?x130 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (= $x201 true)))
 (let (($x25 (= ?x130 input.dst.llvm-%n)))
 (let (($x198 (= $x25 true)))
 (let (($x220 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x170 (= $x220 true)))
 (let (($x186 (and $x170 $x198)))
 (let (($x137 (and $x186 $x83)))
 (let (($x199 (and $x137 $x148)))
 (let (($x204 (and $x199 $x139)))
 (let (($x177 (and $x204 $x142)))
 (let (($x125 (and $x177 $x115)))
 (let (($x9 (and $x125 $x86)))
 (let (($x200 (and $x9 $x189)))
 (let (($x39 (and $x200 $x243)))
 (let (($x61 (and $x39 $x181)))
 (let (($x35 (and $x61 $x112)))
 (let (($x54 (and $x35 $x7)))
 (let (($x213 (and $x54 $x208)))
 (let (($x195 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and (not $x195) $x213)))
 (let (($x18 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and $x18 $x214)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x149 (and $x210 $x215)))
 (let (($x171 (forall ((input.ind-%var1067X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1067X)))
 (=> $x126 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1067X) (_ bv0 32)))))
 ))
 (let (($x67 (forall ((input.ind-%var1066X (_ BitVec 32)) )(let (($x126 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1066X)))
 (= $x126 false)))
 ))
 (let (($x85 (and $x67 $x171)))
 (let (($x141 (and $x85 $x149)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x5 $x141)))
 (let (($x66 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x16 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x66)))))
 (let (($x136 (=> (and $x10 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x66)))))
 (let (($x127 (and $x136 $x88)))
 (let (($x13 (=> $x127 $x23)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (bvsle ?x155 (_ bv399 32))))
 (let (($x218 (= $x79 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x74)))
 (let (($x140 (= ?x32 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x140 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (= $x144 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (= $x6 true)))
 (let (($x235 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let ((?x13 (bvadd symbol.1 (bvmul input.ind-%var1077X (_ bv4 32)))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x13))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv2 32))) ?x81)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv3 32))) ?x94)))
 (let ((?x64 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1077X)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1077X)))
 (=> $x117 (= ?x64 ?x135)))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1076X (_ BitVec 32)) )(let (($x48 (and (bvule (_ bv0 32) input.ind-%var1076X) (bvult input.ind-%var1076X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1076X)))
 (= $x117 $x48))))
 ))
 (let (($x217 (and $x197 $x235)))
 (let (($x84 (= $x217 true)))
 (let (($x78 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x121 (= $x78 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x200 (bvsub ?x114 ?x40)))
 (let (($x131 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x200) (bvult ?x114 ?x200))))
 (let ((?x55 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x240 (bvmul (_ bv4 64) ?x55)))
 (let ((?x251 ((_ extract 63 32) ?x240)))
 (let (($x189 (= (_ bv0 32) ?x251)))
 (let (($x234 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x45 (and (and (and true $x234) $x189) $x131)))
 (let (($x241 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x153 (and $x241 $x45)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (=> $x58 $x153)))
 (let (($x41 (= $x194 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x46 (= $x246 true)))
 (let (($x167 (= $x58 true)))
 (let (($x182 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x116 (= $x182 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x139)))
 (let ((?x106 (bvand symbol.1 (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x106)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x157 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x14 (= input.memlabel-mem--symbol.1_end ?x157)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (and $x12 $x14)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x190 $x168)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x193 (and $x187 $x92)))
 (let (($x219 (not $x193)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x238 (and $x192 $x166)))
 (let (($x132 (and (not $x238) $x219)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x107 $x89)))
 (let (($x108 (not $x82)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x172 $x52)))
 (let (($x76 (and (not $x113) $x108)))
 (let (($x203 (and (and (and (and (and (and $x76 $x132) $x152) $x145) $x160) $x196) $x227)))
 (let (($x86 (and $x203 $x204)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x9 (and $x68 $x86)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x223 (or (bvugt input.memlabel-mem--symbol.1_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x207 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x223) (or $x93 $x72)))))))
 (let (($x80 (and $x207 $x9)))
 (let (($x175 (= $x80 true)))
 (let (($x233 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x100 (= $x233 true)))
 (let ((?x199 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x199)))
 (let (($x245 (= ?x226 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x236 (= $x245 true)))
 (let (($x228 (= ?x226 input.dst.llvm-%n)))
 (let (($x49 (= $x228 true)))
 (let (($x137 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x184 (= $x137 true)))
 (let (($x244 (and $x184 $x49)))
 (let (($x51 (and $x244 $x236)))
 (let (($x104 (and $x51 $x100)))
 (let (($x36 (and $x104 $x175)))
 (let (($x225 (and $x36 $x116)))
 (let (($x17 (and $x225 $x167)))
 (let (($x237 (and $x17 $x46)))
 (let (($x101 (and $x237 $x41)))
 (let (($x173 (and $x101 $x121)))
 (let (($x229 (and $x173 $x84)))
 (let (($x128 (and $x229 $x129)))
 (let (($x120 (and $x128 $x232)))
 (let (($x96 (and $x120 $x63)))
 (let (($x201 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and (not $x201) $x96)))
 (let (($x198 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (and $x198 $x221)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x252 (and $x163 $x180)))
 (let (($x220 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1087X)))
 (=> $x47 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1087X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var1086X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1086X)))
 (= $x47 false)))
 ))
 (let (($x170 (and $x171 $x220)))
 (let (($x38 (and $x170 $x252)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x11 (and $x56 $x38)))
 (let (($x60 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x5 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x60)))))
 (let (($x174 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x60)))))
 (let (($x34 (and $x174 $x11)))
 (let (($x65 (=> $x34 $x218)))
 (not $x65))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (bvsle ?x155 (_ bv399 32))))
 (let (($x218 (= $x79 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x74)))
 (let (($x140 (= ?x32 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x140 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (= $x144 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (= $x6 true)))
 (let (($x235 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let ((?x13 (bvadd symbol.1 (bvmul input.ind-%var1077X (_ bv4 32)))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x13))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv2 32))) ?x81)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv3 32))) ?x94)))
 (let ((?x64 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1077X)))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1077X)))
 (=> $x117 (= ?x64 ?x135)))))))))
 ))
 (let (($x197 (forall ((input.ind-%var1076X (_ BitVec 32)) )(let (($x48 (and (bvule (_ bv0 32) input.ind-%var1076X) (bvult input.ind-%var1076X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x117 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1076X)))
 (= $x117 $x48))))
 ))
 (let (($x217 (and $x197 $x235)))
 (let (($x84 (= $x217 true)))
 (let (($x78 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x121 (= $x78 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x200 (bvsub ?x114 ?x40)))
 (let (($x131 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x200) (bvult ?x114 ?x200))))
 (let ((?x55 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x240 (bvmul (_ bv4 64) ?x55)))
 (let ((?x251 ((_ extract 63 32) ?x240)))
 (let (($x189 (= (_ bv0 32) ?x251)))
 (let (($x234 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x45 (and (and (and true $x234) $x189) $x131)))
 (let (($x241 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x153 (and $x241 $x45)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (=> $x58 $x153)))
 (let (($x41 (= $x194 true)))
 (let (($x246 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x46 (= $x246 true)))
 (let (($x167 (= $x58 true)))
 (let (($x182 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x116 (= $x182 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x139)))
 (let ((?x106 (bvand symbol.1 (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x106)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x157 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x14 (= input.memlabel-mem--symbol.1_end ?x157)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (and $x12 $x14)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x190 $x168)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x193 (and $x187 $x92)))
 (let (($x219 (not $x193)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x238 (and $x192 $x166)))
 (let (($x132 (and (not $x238) $x219)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x107 $x89)))
 (let (($x108 (not $x82)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x172 $x52)))
 (let (($x76 (and (not $x113) $x108)))
 (let (($x203 (and (and (and (and (and (and $x76 $x132) $x152) $x145) $x160) $x196) $x227)))
 (let (($x86 (and $x203 $x204)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x9 (and $x68 $x86)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x223 (or (bvugt input.memlabel-mem--symbol.1_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x207 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x223) (or $x93 $x72)))))))
 (let (($x80 (and $x207 $x9)))
 (let (($x175 (= $x80 true)))
 (let (($x233 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x100 (= $x233 true)))
 (let ((?x199 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x199)))
 (let (($x245 (= ?x226 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x236 (= $x245 true)))
 (let (($x228 (= ?x226 input.dst.llvm-%n)))
 (let (($x49 (= $x228 true)))
 (let (($x137 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x184 (= $x137 true)))
 (let (($x244 (and $x184 $x49)))
 (let (($x51 (and $x244 $x236)))
 (let (($x104 (and $x51 $x100)))
 (let (($x36 (and $x104 $x175)))
 (let (($x225 (and $x36 $x116)))
 (let (($x17 (and $x225 $x167)))
 (let (($x237 (and $x17 $x46)))
 (let (($x101 (and $x237 $x41)))
 (let (($x173 (and $x101 $x121)))
 (let (($x229 (and $x173 $x84)))
 (let (($x128 (and $x229 $x129)))
 (let (($x120 (and $x128 $x232)))
 (let (($x96 (and $x120 $x63)))
 (let (($x201 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x221 (and (not $x201) $x96)))
 (let (($x198 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x180 (and $x198 $x221)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x252 (and $x163 $x180)))
 (let (($x220 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1087X)))
 (=> $x47 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1087X) (_ bv0 32)))))
 ))
 (let (($x171 (forall ((input.ind-%var1086X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1086X)))
 (= $x47 false)))
 ))
 (let (($x170 (and $x171 $x220)))
 (let (($x38 (and $x170 $x252)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x11 (and $x56 $x38)))
 (let (($x60 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x5 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x60)))))
 (let (($x174 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x60)))))
 (let (($x34 (and $x174 $x11)))
 (let (($x65 (=> $x34 $x218)))
 (not $x65))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x20 (bvsge ?x181 (_ bv0 32))))
 (let (($x99 (= $x20 true)))
 (let ((?x214 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x214)))
 (let (($x209 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x209 true)))
 (let (($x54 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (= $x54 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x43 (forall ((input.ind-%var1097X (_ BitVec 32)) )(let ((?x65 (bvadd symbol.1 (bvmul input.ind-%var1097X (_ bv4 32)))))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x65))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv2 32))) ?x50)))
 (let ((?x210 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv3 32))) ?x30)))
 (let ((?x6 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1097X)))
 (let (($x8 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1097X)))
 (=> $x8 (= ?x6 ?x210)))))))))
 ))
 (let (($x235 (forall ((input.ind-%var1096X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var1096X) (bvult input.ind-%var1096X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x8 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1096X)))
 (= $x8 $x57))))
 ))
 (let (($x134 (and $x235 $x43)))
 (let (($x61 (= $x134 true)))
 (let (($x23 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x13 (= $x23 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x101 (bvsub ?x114 ?x40)))
 (let (($x117 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x101) (bvult ?x114 ?x101))))
 (let ((?x45 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x153 (bvmul (_ bv4 64) ?x45)))
 (let ((?x194 ((_ extract 63 32) ?x153)))
 (let (($x41 (= (_ bv0 32) ?x194)))
 (let (($x39 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x48 (and (and (and true $x39) $x41) $x117)))
 (let (($x189 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x90 (and $x189 $x48)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (=> $x212 $x90)))
 (let (($x64 (= $x197 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x206 (= $x75 true)))
 (let (($x119 (= $x212 true)))
 (let (($x239 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x250 (= $x239 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x175)))
 (let ((?x9 (bvand symbol.1 (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x9)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x204)))
 (let ((?x106 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x227 (= input.memlabel-mem--symbol.1_end ?x106)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x203 (and $x125 $x227)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x196 $x203)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x177 $x190)))
 (let (($x157 (not $x12)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (and $x142 $x188)))
 (let (($x168 (and (not $x145) $x157)))
 (let (($x193 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x92 $x193)))
 (let (($x132 (not $x219)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x238 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (and $x238 $x73)))
 (let (($x152 (and (not $x187) $x132)))
 (let (($x246 (and (and (and (and (and (and $x152 $x168) $x160) $x37) $x139) $x86) $x80)))
 (let (($x46 (and $x246 $x36)))
 (let (($x205 (= symbol.1 dst_symbol_addr.1)))
 (let (($x237 (and $x205 $x46)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x68 (or (bvugt input.memlabel-mem--symbol.1_begin ?x150) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x68) (or $x123 $x107)))))))
 (let (($x248 (and $x166 $x237)))
 (let (($x231 (= $x248 true)))
 (let (($x33 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x103 (= $x33 true)))
 (let ((?x104 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x104)))
 (let (($x159 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x222 (= $x159 true)))
 (let (($x146 (= ?x138 input.dst.llvm-%n)))
 (let (($x191 (= $x146 true)))
 (let (($x51 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x233 (= $x51 true)))
 (let (($x22 (and $x233 $x191)))
 (let (($x223 (and $x22 $x222)))
 (let (($x93 (and $x223 $x103)))
 (let (($x241 (and $x93 $x231)))
 (let (($x242 (and $x241 $x250)))
 (let (($x234 (and $x242 $x119)))
 (let (($x55 (and $x234 $x206)))
 (let (($x35 (and $x55 $x64)))
 (let (($x183 (and $x35 $x13)))
 (let (($x27 (and $x183 $x61)))
 (let (($x7 (and $x27 $x44)))
 (let (($x88 (and $x7 $x141)))
 (let (($x97 (and $x88 $x249)))
 (let (($x245 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and (not $x245) $x97)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (and $x49 $x149)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x28 (and $x199 $x127)))
 (let (($x137 (forall ((input.ind-%var1107X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1107X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1107X) (_ bv0 32)))))
 ))
 (let (($x220 (forall ((input.ind-%var1106X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1106X)))
 (= $x15 false)))
 ))
 (let (($x184 (and $x220 $x137)))
 (let (($x224 (and $x184 $x28)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x67 $x224)))
 (let (($x136 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x56 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x136)))))
 (let (($x154 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x136)))))
 (let (($x162 (and $x154 $x185)))
 (let (($x195 (=> $x162 $x99)))
 (not $x195))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x20 (bvsge ?x181 (_ bv0 32))))
 (let (($x99 (= $x20 true)))
 (let ((?x214 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x215 (bvneg ?x214)))
 (let (($x209 (= ?x215 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x209 true)))
 (let (($x54 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (= $x54 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x43 (forall ((input.ind-%var1097X (_ BitVec 32)) )(let ((?x65 (bvadd symbol.1 (bvmul input.ind-%var1097X (_ bv4 32)))))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x65))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv2 32))) ?x50)))
 (let ((?x210 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv3 32))) ?x30)))
 (let ((?x6 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1097X)))
 (let (($x8 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1097X)))
 (=> $x8 (= ?x6 ?x210)))))))))
 ))
 (let (($x235 (forall ((input.ind-%var1096X (_ BitVec 32)) )(let (($x57 (and (bvule (_ bv0 32) input.ind-%var1096X) (bvult input.ind-%var1096X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x8 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1096X)))
 (= $x8 $x57))))
 ))
 (let (($x134 (and $x235 $x43)))
 (let (($x61 (= $x134 true)))
 (let (($x23 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x13 (= $x23 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x101 (bvsub ?x114 ?x40)))
 (let (($x117 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x101) (bvult ?x114 ?x101))))
 (let ((?x45 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x153 (bvmul (_ bv4 64) ?x45)))
 (let ((?x194 ((_ extract 63 32) ?x153)))
 (let (($x41 (= (_ bv0 32) ?x194)))
 (let (($x39 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x48 (and (and (and true $x39) $x41) $x117)))
 (let (($x189 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x90 (and $x189 $x48)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x197 (=> $x212 $x90)))
 (let (($x64 (= $x197 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x206 (= $x75 true)))
 (let (($x119 (= $x212 true)))
 (let (($x239 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x250 (= $x239 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x175)))
 (let ((?x9 (bvand symbol.1 (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x9)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x204)))
 (let ((?x106 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x227 (= input.memlabel-mem--symbol.1_end ?x106)))
 (let (($x125 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x203 (and $x125 $x227)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x196 $x203)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x177 $x190)))
 (let (($x157 (not $x12)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (and $x142 $x188)))
 (let (($x168 (and (not $x145) $x157)))
 (let (($x193 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x92 $x193)))
 (let (($x132 (not $x219)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x238 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (and $x238 $x73)))
 (let (($x152 (and (not $x187) $x132)))
 (let (($x246 (and (and (and (and (and (and $x152 $x168) $x160) $x37) $x139) $x86) $x80)))
 (let (($x46 (and $x246 $x36)))
 (let (($x205 (= symbol.1 dst_symbol_addr.1)))
 (let (($x237 (and $x205 $x46)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x68 (or (bvugt input.memlabel-mem--symbol.1_begin ?x150) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x68) (or $x123 $x107)))))))
 (let (($x248 (and $x166 $x237)))
 (let (($x231 (= $x248 true)))
 (let (($x33 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x103 (= $x33 true)))
 (let ((?x104 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x138 (bvneg ?x104)))
 (let (($x159 (= ?x138 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x222 (= $x159 true)))
 (let (($x146 (= ?x138 input.dst.llvm-%n)))
 (let (($x191 (= $x146 true)))
 (let (($x51 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x233 (= $x51 true)))
 (let (($x22 (and $x233 $x191)))
 (let (($x223 (and $x22 $x222)))
 (let (($x93 (and $x223 $x103)))
 (let (($x241 (and $x93 $x231)))
 (let (($x242 (and $x241 $x250)))
 (let (($x234 (and $x242 $x119)))
 (let (($x55 (and $x234 $x206)))
 (let (($x35 (and $x55 $x64)))
 (let (($x183 (and $x35 $x13)))
 (let (($x27 (and $x183 $x61)))
 (let (($x7 (and $x27 $x44)))
 (let (($x88 (and $x7 $x141)))
 (let (($x97 (and $x88 $x249)))
 (let (($x245 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x149 (and (not $x245) $x97)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x127 (and $x49 $x149)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x28 (and $x199 $x127)))
 (let (($x137 (forall ((input.ind-%var1107X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1107X)))
 (=> $x15 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1107X) (_ bv0 32)))))
 ))
 (let (($x220 (forall ((input.ind-%var1106X (_ BitVec 32)) )(let (($x15 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1106X)))
 (= $x15 false)))
 ))
 (let (($x184 (and $x220 $x137)))
 (let (($x224 (and $x184 $x28)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x67 $x224)))
 (let (($x136 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x56 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x136)))))
 (let (($x154 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x136)))))
 (let (($x162 (and $x154 $x185)))
 (let (($x195 (=> $x162 $x99)))
 (not $x195))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x84 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (bvule ?x84 input.dst.llvm-%n)))
 (let (($x118 (= $x79 true)))
 (let ((?x221 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x221)))
 (let (($x32 (= ?x180 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x32 true)))
 (let ((?x93 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x93)))
 (let (($x120 (= ?x19 input.dst.llvm-%n)))
 (let (($x38 (= $x120 true)))
 (let (($x124 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x133 (= $x124 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (= $x186 true)))
 (let (($x163 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let ((?x181 (bvadd symbol.1 (bvmul input.ind-%var1117X (_ bv4 32)))))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x181))))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv2 32))) ?x59)))
 (let ((?x18 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv3 32))) ?x156)))
 (let ((?x134 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1117X)))
 (let (($x147 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1117X)))
 (=> $x147 (= ?x134 ?x18)))))))))
 ))
 (let (($x210 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x50 (and (bvule (_ bv0 32) input.ind-%var1116X) (bvult input.ind-%var1116X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x147 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1116X)))
 (= $x147 $x50))))
 ))
 (let (($x47 (and $x210 $x163)))
 (let (($x165 (= $x47 true)))
 (let (($x235 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x6 (= $x235 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x90 (bvsub ?x114 ?x40)))
 (let (($x23 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x90) (bvult ?x114 ?x90))))
 (let ((?x121 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x121)))
 (let ((?x117 ((_ extract 63 32) ?x173)))
 (let (($x48 (= (_ bv0 32) ?x117)))
 (let (($x78 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x8 (and (and (and true $x78) $x48) $x23)))
 (let (($x45 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x135 (and $x45 $x8)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (=> $x144 $x135)))
 (let (($x57 (= $x94 true)))
 (let (($x200 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x243 (= $x200 true)))
 (let (($x179 (= $x144 true)))
 (let (($x240 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x251 (= $x240 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x46)))
 (let ((?x175 (bvand symbol.1 (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x175)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x204 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x204)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x167 $x86)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x139 $x17)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x116 $x115)))
 (let (($x225 (not $x37)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (and $x168 $x182)))
 (let (($x125 (and (not $x160) $x225)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x145 $x14)))
 (let (($x190 (not $x177)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x152 $x142)))
 (let (($x157 (and (not $x188) $x190)))
 (let (($x242 (and (and (and (and (and (and $x157 $x125) $x106) $x203) $x9) $x246) $x36)))
 (let (($x119 (and $x242 $x237)))
 (let (($x123 (= symbol.1 dst_symbol_addr.1)))
 (let (($x234 (and $x123 $x119)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x89) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x76) (or $x238 $x73)))))))
 (let (($x75 (and $x132 $x234)))
 (let (($x206 (= $x75 true)))
 (let (($x207 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x164 (= $x207 true)))
 (let (($x216 (= ?x19 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x192 (= $x216 true)))
 (let (($x223 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x33 (= $x223 true)))
 (let (($x150 (and $x33 $x192)))
 (let (($x68 (and $x150 $x164)))
 (let (($x55 (and $x68 $x206)))
 (let (($x189 (and $x55 $x251)))
 (let (($x105 (and $x189 $x179)))
 (let (($x39 (and $x105 $x243)))
 (let (($x29 (and $x39 $x57)))
 (let (($x128 (and $x29 $x6)))
 (let (($x158 (and $x128 $x165)))
 (let (($x70 (and $x158 $x229)))
 (let (($x232 (and $x70 $x133)))
 (let (($x11 (and $x232 $x38)))
 (let (($x74 (and $x11 $x140)))
 (let (($x159 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x252 (and (not $x159) $x74)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (and $x191 $x252)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x213 (and $x104 $x34)))
 (let (($x51 (forall ((input.ind-%var1127X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1127X)))
 (=> $x130 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1127X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var1126X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1126X)))
 (= $x130 false)))
 ))
 (let (($x233 (and $x137 $x51)))
 (let (($x151 (and $x233 $x213)))
 (let (($x171 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x171 $x151)))
 (let (($x174 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x67 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x174)))))
 (let (($x176 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x174)))))
 (let (($x155 (and $x176 $x81)))
 (let (($x201 (=> $x155 $x118)))
 (not $x201))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x84 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x79 (bvule ?x84 input.dst.llvm-%n)))
 (let (($x118 (= $x79 true)))
 (let ((?x221 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x221)))
 (let (($x32 (= ?x180 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x32 true)))
 (let ((?x93 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x93)))
 (let (($x120 (= ?x19 input.dst.llvm-%n)))
 (let (($x38 (= $x120 true)))
 (let (($x124 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x133 (= $x124 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (= $x186 true)))
 (let (($x163 (forall ((input.ind-%var1117X (_ BitVec 32)) )(let ((?x181 (bvadd symbol.1 (bvmul input.ind-%var1117X (_ bv4 32)))))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x181))))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv2 32))) ?x59)))
 (let ((?x18 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x181 (_ bv3 32))) ?x156)))
 (let ((?x134 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1117X)))
 (let (($x147 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1117X)))
 (=> $x147 (= ?x134 ?x18)))))))))
 ))
 (let (($x210 (forall ((input.ind-%var1116X (_ BitVec 32)) )(let (($x50 (and (bvule (_ bv0 32) input.ind-%var1116X) (bvult input.ind-%var1116X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x147 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1116X)))
 (= $x147 $x50))))
 ))
 (let (($x47 (and $x210 $x163)))
 (let (($x165 (= $x47 true)))
 (let (($x235 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x6 (= $x235 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x90 (bvsub ?x114 ?x40)))
 (let (($x23 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x90) (bvult ?x114 ?x90))))
 (let ((?x121 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x121)))
 (let ((?x117 ((_ extract 63 32) ?x173)))
 (let (($x48 (= (_ bv0 32) ?x117)))
 (let (($x78 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x8 (and (and (and true $x78) $x48) $x23)))
 (let (($x45 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x135 (and $x45 $x8)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (=> $x144 $x135)))
 (let (($x57 (= $x94 true)))
 (let (($x200 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x243 (= $x200 true)))
 (let (($x179 (= $x144 true)))
 (let (($x240 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x251 (= $x240 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x46)))
 (let ((?x175 (bvand symbol.1 (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x175)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x204 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x204)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x167 $x86)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x139 $x17)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x116 $x115)))
 (let (($x225 (not $x37)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (and $x168 $x182)))
 (let (($x125 (and (not $x160) $x225)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x145 $x14)))
 (let (($x190 (not $x177)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x152 $x142)))
 (let (($x157 (and (not $x188) $x190)))
 (let (($x242 (and (and (and (and (and (and $x157 $x125) $x106) $x203) $x9) $x246) $x36)))
 (let (($x119 (and $x242 $x237)))
 (let (($x123 (= symbol.1 dst_symbol_addr.1)))
 (let (($x234 (and $x123 $x119)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x89) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x76) (or $x238 $x73)))))))
 (let (($x75 (and $x132 $x234)))
 (let (($x206 (= $x75 true)))
 (let (($x207 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x164 (= $x207 true)))
 (let (($x216 (= ?x19 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x192 (= $x216 true)))
 (let (($x223 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x33 (= $x223 true)))
 (let (($x150 (and $x33 $x192)))
 (let (($x68 (and $x150 $x164)))
 (let (($x55 (and $x68 $x206)))
 (let (($x189 (and $x55 $x251)))
 (let (($x105 (and $x189 $x179)))
 (let (($x39 (and $x105 $x243)))
 (let (($x29 (and $x39 $x57)))
 (let (($x128 (and $x29 $x6)))
 (let (($x158 (and $x128 $x165)))
 (let (($x70 (and $x158 $x229)))
 (let (($x232 (and $x70 $x133)))
 (let (($x11 (and $x232 $x38)))
 (let (($x74 (and $x11 $x140)))
 (let (($x159 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x252 (and (not $x159) $x74)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (and $x191 $x252)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x213 (and $x104 $x34)))
 (let (($x51 (forall ((input.ind-%var1127X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1127X)))
 (=> $x130 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1127X) (_ bv0 32)))))
 ))
 (let (($x137 (forall ((input.ind-%var1126X (_ BitVec 32)) )(let (($x130 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1126X)))
 (= $x130 false)))
 ))
 (let (($x233 (and $x137 $x51)))
 (let (($x151 (and $x233 $x213)))
 (let (($x171 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x171 $x151)))
 (let (($x174 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x67 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x174)))))
 (let (($x176 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x174)))))
 (let (($x155 (and $x176 $x81)))
 (let (($x201 (=> $x155 $x118)))
 (not $x201))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x301 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let ((?x13 (bvadd symbol.1 (bvmul input.ind-%var1165X (_ bv4 32)))))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x174 (bvadd ?x114 (_ bv3 32))))
 (let ((?x268 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x114 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x271 (store ?x268 (bvadd ?x114 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x274 (store ?x271 (bvadd ?x114 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x276 (store ?x274 ?x174 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x295 (concat (select ?x276 (bvadd ?x13 (_ bv2 32))) (concat (select ?x276 (bvadd ?x13 (_ bv1 32))) (select ?x276 ?x13)))))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1165X)))
 (let (($x256 (= input.ind-%var1165X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x299 (= (ite $x256 input.spec-%var-i-0.L3%6%bbentry ?x234) (concat (select ?x276 (bvadd ?x13 (_ bv3 32))) ?x295))))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (let (($x257 (or $x204 $x256)))
 (=> $x257 $x299))))))))))))))))
 ))
 (let (($x259 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x250 (bvule (_ bv0 32) input.ind-%var1164X)))
 (let (($x255 (and $x250 (bvult input.ind-%var1164X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x256 (= input.ind-%var1164X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (let (($x257 (or $x204 $x256)))
 (= $x257 $x255)))))))
 ))
 (let (($x302 (and $x259 $x301)))
 (let (($x303 (= $x302 true)))
 (let ((?x209 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x249 (bvneg ?x209)))
 (let (($x141 (= ?x249 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x141 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x7 true)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x198)))
 (let ((?x85 (bvand symbol.1 (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x85)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x118 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x201 (= input.memlabel-mem--symbol.1_end ?x118)))
 (let (($x79 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x169 (and $x79 $x201)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (and $x84 $x169)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (and $x32 $x140)))
 (let (($x252 (not $x74)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x180 (and $x11 $x221)))
 (let (($x213 (and (not $x180) $x252)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x70 $x124)))
 (let (($x232 (not $x133)))
 (let (($x186 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x158 $x186)))
 (let (($x38 (and (not $x229) $x232)))
 (let (($x244 (and (and (and (and (and (and $x38 $x213) $x151) $x155) $x230) $x172) $x61)))
 (let (($x43 (and $x244 $x228)))
 (let (($x162 (= symbol.1 dst_symbol_addr.1)))
 (let (($x218 (and $x162 $x43)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x122 (or (bvugt input.memlabel-mem--symbol.1_begin ?x129) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x122) (or $x59 $x156)))))))
 (let (($x96 (and $x165 $x218)))
 (let (($x202 (= $x96 true)))
 (let (($x50 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x30 (= $x50 true)))
 (let (($x147 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x147 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (= $x235 true)))
 (let (($x135 (forall ((input.ind-%var1141X (_ BitVec 32)) )(let ((?x13 (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32)))))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x13))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv2 32))) ?x117)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv3 32))) ?x197)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1141X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1141X)))
 (=> $x204 (= ?x234 ?x35)))))))))
 ))
 (let (($x242 (forall ((input.ind-%var1140X (_ BitVec 32)) )(let (($x250 (bvule (_ bv0 32) input.ind-%var1140X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1140X)))
 (= $x204 (and $x250 (bvult input.ind-%var1140X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x94 (and $x242 $x135)))
 (let (($x57 (= $x94 true)))
 (let (($x227 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x203 (= $x227 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x168 (bvsub ?x114 ?x40)))
 (let (($x116 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x168) (bvult ?x114 ?x168))))
 (let ((?x14 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x177 (bvmul (_ bv4 64) ?x14)))
 (let ((?x190 ((_ extract 63 32) ?x177)))
 (let (($x157 (= (_ bv0 32) ?x190)))
 (let (($x12 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x225 (and (and (and true $x12) $x157) $x116)))
 (let (($x52 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x125 (and $x52 $x225)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x144 $x125)))
 (let (($x106 (= $x248 true)))
 (let (($x187 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x161 (= $x187 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x205 (= $x238 true)))
 (let (($x76 (= $x144 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x68)))
 (let (($x89 (= ?x113 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (= $x89 true)))
 (let (($x107 (= ?x113 input.dst.llvm-%n)))
 (let (($x219 (= $x107 true)))
 (let (($x108 (and $x219 $x82)))
 (let (($x166 (and $x108 $x76)))
 (let (($x73 (and $x166 $x205)))
 (let (($x92 (and $x73 $x161)))
 (let (($x231 (and $x92 $x106)))
 (let (($x241 (and $x231 $x203)))
 (let (($x29 (and $x241 $x57)))
 (let (($x128 (and $x29 $x6)))
 (let (($x24 (and $x128 $x102)))
 (let (($x210 (and $x24 $x30)))
 (let (($x44 (and $x210 $x202)))
 (let (($x127 (and $x44 $x149)))
 (let (($x54 (and $x127 $x88)))
 (let (($x207 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and (not $x207) $x54)))
 (let (($x192 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x28 (and $x192 $x97)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x65 (and $x93 $x28)))
 (let (($x223 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x226 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1151X)))
 (=> $x226 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1151X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let (($x226 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1150X)))
 (= $x226 false)))
 ))
 (let (($x33 (and $x51 $x223)))
 (let (($x112 (and $x33 $x65)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x211 (and $x220 $x112)))
 (let (($x154 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x171 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x154)))))
 (let (($x87 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x154)))))
 (let (($x224 (and $x87 $x211)))
 (let (($x304 (=> $x224 $x303)))
 (not $x304)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x301 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let ((?x13 (bvadd symbol.1 (bvmul input.ind-%var1165X (_ bv4 32)))))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x174 (bvadd ?x114 (_ bv3 32))))
 (let ((?x268 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x114 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x271 (store ?x268 (bvadd ?x114 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x274 (store ?x271 (bvadd ?x114 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x276 (store ?x274 ?x174 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x295 (concat (select ?x276 (bvadd ?x13 (_ bv2 32))) (concat (select ?x276 (bvadd ?x13 (_ bv1 32))) (select ?x276 ?x13)))))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1165X)))
 (let (($x256 (= input.ind-%var1165X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x299 (= (ite $x256 input.spec-%var-i-0.L3%6%bbentry ?x234) (concat (select ?x276 (bvadd ?x13 (_ bv3 32))) ?x295))))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (let (($x257 (or $x204 $x256)))
 (=> $x257 $x299))))))))))))))))
 ))
 (let (($x259 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x250 (bvule (_ bv0 32) input.ind-%var1164X)))
 (let (($x255 (and $x250 (bvult input.ind-%var1164X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x256 (= input.ind-%var1164X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (let (($x257 (or $x204 $x256)))
 (= $x257 $x255)))))))
 ))
 (let (($x302 (and $x259 $x301)))
 (let (($x303 (= $x302 true)))
 (let ((?x209 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x249 (bvneg ?x209)))
 (let (($x141 (= ?x249 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x88 (= $x141 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x7 true)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x198)))
 (let ((?x85 (bvand symbol.1 (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x85)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x118 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x201 (= input.memlabel-mem--symbol.1_end ?x118)))
 (let (($x79 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x169 (and $x79 $x201)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (and $x84 $x169)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (and $x32 $x140)))
 (let (($x252 (not $x74)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x180 (and $x11 $x221)))
 (let (($x213 (and (not $x180) $x252)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x70 $x124)))
 (let (($x232 (not $x133)))
 (let (($x186 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x158 $x186)))
 (let (($x38 (and (not $x229) $x232)))
 (let (($x244 (and (and (and (and (and (and $x38 $x213) $x151) $x155) $x230) $x172) $x61)))
 (let (($x43 (and $x244 $x228)))
 (let (($x162 (= symbol.1 dst_symbol_addr.1)))
 (let (($x218 (and $x162 $x43)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x122 (or (bvugt input.memlabel-mem--symbol.1_begin ?x129) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x122) (or $x59 $x156)))))))
 (let (($x96 (and $x165 $x218)))
 (let (($x202 (= $x96 true)))
 (let (($x50 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x30 (= $x50 true)))
 (let (($x147 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x147 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (= $x235 true)))
 (let (($x135 (forall ((input.ind-%var1141X (_ BitVec 32)) )(let ((?x13 (bvadd symbol.1 (bvmul input.ind-%var1141X (_ bv4 32)))))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x13))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv2 32))) ?x117)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x13 (_ bv3 32))) ?x197)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1141X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1141X)))
 (=> $x204 (= ?x234 ?x35)))))))))
 ))
 (let (($x242 (forall ((input.ind-%var1140X (_ BitVec 32)) )(let (($x250 (bvule (_ bv0 32) input.ind-%var1140X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1140X)))
 (= $x204 (and $x250 (bvult input.ind-%var1140X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x94 (and $x242 $x135)))
 (let (($x57 (= $x94 true)))
 (let (($x227 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x203 (= $x227 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x168 (bvsub ?x114 ?x40)))
 (let (($x116 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x168) (bvult ?x114 ?x168))))
 (let ((?x14 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x177 (bvmul (_ bv4 64) ?x14)))
 (let ((?x190 ((_ extract 63 32) ?x177)))
 (let (($x157 (= (_ bv0 32) ?x190)))
 (let (($x12 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x225 (and (and (and true $x12) $x157) $x116)))
 (let (($x52 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x125 (and $x52 $x225)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x144 $x125)))
 (let (($x106 (= $x248 true)))
 (let (($x187 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x161 (= $x187 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x205 (= $x238 true)))
 (let (($x76 (= $x144 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x68)))
 (let (($x89 (= ?x113 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (= $x89 true)))
 (let (($x107 (= ?x113 input.dst.llvm-%n)))
 (let (($x219 (= $x107 true)))
 (let (($x108 (and $x219 $x82)))
 (let (($x166 (and $x108 $x76)))
 (let (($x73 (and $x166 $x205)))
 (let (($x92 (and $x73 $x161)))
 (let (($x231 (and $x92 $x106)))
 (let (($x241 (and $x231 $x203)))
 (let (($x29 (and $x241 $x57)))
 (let (($x128 (and $x29 $x6)))
 (let (($x24 (and $x128 $x102)))
 (let (($x210 (and $x24 $x30)))
 (let (($x44 (and $x210 $x202)))
 (let (($x127 (and $x44 $x149)))
 (let (($x54 (and $x127 $x88)))
 (let (($x207 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and (not $x207) $x54)))
 (let (($x192 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x28 (and $x192 $x97)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x65 (and $x93 $x28)))
 (let (($x223 (forall ((input.ind-%var1151X (_ BitVec 32)) )(let (($x226 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1151X)))
 (=> $x226 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1151X) (_ bv0 32)))))
 ))
 (let (($x51 (forall ((input.ind-%var1150X (_ BitVec 32)) )(let (($x226 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1150X)))
 (= $x226 false)))
 ))
 (let (($x33 (and $x51 $x223)))
 (let (($x112 (and $x33 $x65)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x211 (and $x220 $x112)))
 (let (($x154 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x171 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x154)))))
 (let (($x87 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x154)))))
 (let (($x224 (and $x87 $x211)))
 (let (($x304 (=> $x224 $x303)))
 (not $x304)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x49 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x146 (bvmul (_ bv4294967295 32) ?x49)))
 (let ((?x233 (bvneg ?x146)))
 (let (($x130 (= ?x233 ?x104)))
 (let (($x83 (= $x130 true)))
 (let ((?x299 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x299)))
 (let (($x301 (= ?x300 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x301 true)))
 (let (($x293 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x295 (= $x293 true)))
 (let (($x294 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x292 (= $x294 true)))
 (let (($x275 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (= $x275 true)))
 (let (($x273 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x272 (= $x273 true)))
 (let (($x268 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let ((?x112 (bvadd symbol.1 (bvmul input.ind-%var1175X (_ bv4 32)))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x112))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv2 32))) ?x257)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv3 32))) ?x255)))
 (let ((?x61 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1175X)))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (=> $x81 (= ?x61 ?x298)))))))))
 ))
 (let (($x21 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var1174X) (bvult input.ind-%var1174X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (= $x81 $x230))))
 ))
 (let (($x270 (and $x21 $x268)))
 (let (($x269 (= $x270 true)))
 (let (($x252 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x213 (= $x252 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x70 (bvsub ?x114 ?x40)))
 (let (($x38 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x70) (bvult ?x114 ?x70))))
 (let ((?x158 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x186 (bvmul (_ bv4 64) ?x158)))
 (let ((?x229 ((_ extract 63 32) ?x186)))
 (let (($x120 (= (_ bv0 32) ?x229)))
 (let (($x27 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x180 (and (and (and true $x27) $x120) $x38)))
 (let (($x18 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x34 (and $x18 $x180)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (=> $x58 $x34)))
 (let (($x140 (= $x32 true)))
 (let (($x99 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x195 (= $x99 true)))
 (let (($x215 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x95 (= $x215 true)))
 (let (($x47 (= $x58 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x57)))
 (let ((?x135 (bvand symbol.1 (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x135)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x117 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x197 (and $x121 $x117)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x183 $x197)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x242 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x206 (and $x242 $x234)))
 (let (($x78 (not $x206)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x246 $x175)))
 (let (($x90 (and (not $x36) $x78)))
 (let (($x227 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x231 $x227)))
 (let (($x241 (not $x203)))
 (let (($x248 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x125 $x248)))
 (let (($x250 (and (not $x106) $x241)))
 (let (($x24 (and (and (and (and (and (and $x250 $x90) $x64) $x48) $x35) $x8) $x94)))
 (let (($x50 (and $x24 $x29)))
 (let (($x152 (= symbol.1 dst_symbol_addr.1)))
 (let (($x30 (and $x152 $x50)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x188) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x225 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x157 $x37)))))))
 (let (($x210 (and $x225 $x30)))
 (let (($x181 (= $x210 true)))
 (let ((?x238 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x238)))
 (let (($x161 (= ?x205 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (= $x161 true)))
 (let (($x73 (= ?x205 input.dst.llvm-%n)))
 (let (($x187 (= $x73 true)))
 (let (($x193 (and $x187 $x92)))
 (let (($x247 (and $x193 $x181)))
 (let (($x129 (and $x247 $x47)))
 (let (($x122 (and $x129 $x95)))
 (let (($x59 (and $x122 $x195)))
 (let (($x74 (and $x59 $x140)))
 (let (($x184 (and $x74 $x213)))
 (let (($x271 (and $x184 $x269)))
 (let (($x274 (and $x271 $x272)))
 (let (($x296 (and $x274 $x276)))
 (let (($x291 (and $x296 $x292)))
 (let (($x297 (and $x291 $x295)))
 (let (($x303 (and $x297 $x302)))
 (let (($x166 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x305 (and (not $x166) $x303)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (and $x108 $x305)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x219 $x91)))
 (let (($x68 (forall ((input.ind-%var1185X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1185X)))
 (=> $x138 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1185X) (_ bv0 32)))))
 ))
 (let (($x223 (forall ((input.ind-%var1184X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1184X)))
 (= $x138 false)))
 ))
 (let (($x113 (and $x223 $x68)))
 (let (($x134 (and $x113 $x143)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x137 $x134)))
 (let (($x176 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x220 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x176)))))
 (let (($x111 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x176)))))
 (let (($x75 (and $x111 $x86)))
 (let (($x208 (=> $x75 $x83)))
 (not $x208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x49 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x146 (bvmul (_ bv4294967295 32) ?x49)))
 (let ((?x233 (bvneg ?x146)))
 (let (($x130 (= ?x233 ?x104)))
 (let (($x83 (= $x130 true)))
 (let ((?x299 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x299)))
 (let (($x301 (= ?x300 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x301 true)))
 (let (($x293 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x295 (= $x293 true)))
 (let (($x294 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x292 (= $x294 true)))
 (let (($x275 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (= $x275 true)))
 (let (($x273 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x272 (= $x273 true)))
 (let (($x268 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let ((?x112 (bvadd symbol.1 (bvmul input.ind-%var1175X (_ bv4 32)))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x112))))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv2 32))) ?x257)))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x112 (_ bv3 32))) ?x255)))
 (let ((?x61 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1175X)))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (=> $x81 (= ?x61 ?x298)))))))))
 ))
 (let (($x21 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x230 (and (bvule (_ bv0 32) input.ind-%var1174X) (bvult input.ind-%var1174X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x81 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1174X)))
 (= $x81 $x230))))
 ))
 (let (($x270 (and $x21 $x268)))
 (let (($x269 (= $x270 true)))
 (let (($x252 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x213 (= $x252 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x70 (bvsub ?x114 ?x40)))
 (let (($x38 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x70) (bvult ?x114 ?x70))))
 (let ((?x158 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x186 (bvmul (_ bv4 64) ?x158)))
 (let ((?x229 ((_ extract 63 32) ?x186)))
 (let (($x120 (= (_ bv0 32) ?x229)))
 (let (($x27 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x180 (and (and (and true $x27) $x120) $x38)))
 (let (($x18 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x34 (and $x18 $x180)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (=> $x58 $x34)))
 (let (($x140 (= $x32 true)))
 (let (($x99 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x195 (= $x99 true)))
 (let (($x215 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x95 (= $x215 true)))
 (let (($x47 (= $x58 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x57)))
 (let ((?x135 (bvand symbol.1 (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x135)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x117 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x197 (and $x121 $x117)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x183 $x197)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x242 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x206 (and $x242 $x234)))
 (let (($x78 (not $x206)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x246 $x175)))
 (let (($x90 (and (not $x36) $x78)))
 (let (($x227 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x231 $x227)))
 (let (($x241 (not $x203)))
 (let (($x248 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x125 $x248)))
 (let (($x250 (and (not $x106) $x241)))
 (let (($x24 (and (and (and (and (and (and $x250 $x90) $x64) $x48) $x35) $x8) $x94)))
 (let (($x50 (and $x24 $x29)))
 (let (($x152 (= symbol.1 dst_symbol_addr.1)))
 (let (($x30 (and $x152 $x50)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x145 (or (bvugt input.memlabel-mem--symbol.1_begin ?x188) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x225 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x145) (or $x157 $x37)))))))
 (let (($x210 (and $x225 $x30)))
 (let (($x181 (= $x210 true)))
 (let ((?x238 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x238)))
 (let (($x161 (= ?x205 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (= $x161 true)))
 (let (($x73 (= ?x205 input.dst.llvm-%n)))
 (let (($x187 (= $x73 true)))
 (let (($x193 (and $x187 $x92)))
 (let (($x247 (and $x193 $x181)))
 (let (($x129 (and $x247 $x47)))
 (let (($x122 (and $x129 $x95)))
 (let (($x59 (and $x122 $x195)))
 (let (($x74 (and $x59 $x140)))
 (let (($x184 (and $x74 $x213)))
 (let (($x271 (and $x184 $x269)))
 (let (($x274 (and $x271 $x272)))
 (let (($x296 (and $x274 $x276)))
 (let (($x291 (and $x296 $x292)))
 (let (($x297 (and $x291 $x295)))
 (let (($x303 (and $x297 $x302)))
 (let (($x166 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x305 (and (not $x166) $x303)))
 (let (($x108 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (and $x108 $x305)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x219 $x91)))
 (let (($x68 (forall ((input.ind-%var1185X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1185X)))
 (=> $x138 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1185X) (_ bv0 32)))))
 ))
 (let (($x223 (forall ((input.ind-%var1184X (_ BitVec 32)) )(let (($x138 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1184X)))
 (= $x138 false)))
 ))
 (let (($x113 (and $x223 $x68)))
 (let (($x134 (and $x113 $x143)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x137 $x134)))
 (let (($x176 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x220 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x176)))))
 (let (($x111 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x176)))))
 (let (($x75 (and $x111 $x86)))
 (let (($x208 (=> $x75 $x83)))
 (not $x208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x118 (bvule ?x79 (_ bv399 32))))
 (let (($x97 (= $x118 true)))
 (let ((?x218 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x218)))
 (let (($x88 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x88 true)))
 (let (($x15 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x84 (= $x15 true)))
 (let (($x150 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x85 (= $x150 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x236 (= $x226 true)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x130)))
 (let ((?x233 (bvand symbol.1 (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x233)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x143 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x143)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x91 $x134)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x305 $x86)))
 (let (($x303 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x295 (and $x291 $x293)))
 (let (($x297 (not $x295)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x292 (and $x296 $x294)))
 (let (($x300 (and (not $x292) $x297)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x271 $x273)))
 (let (($x274 (not $x272)))
 (let (($x270 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x268 $x270)))
 (let (($x276 (and (not $x269) $x274)))
 (let (($x155 (and (and (and (and (and (and $x276 $x300) $x301) $x303) $x75) $x146) $x104)))
 (let (($x244 (and $x155 $x83)))
 (let (($x21 (= symbol.1 dst_symbol_addr.1)))
 (let (($x191 (and $x21 $x244)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x259 (or (bvugt input.memlabel-mem--symbol.1_begin ?x65) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x266 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x259) (or $x224 $x256)))))))
 (let (($x216 (and $x266 $x191)))
 (let (($x33 (= $x216 true)))
 (let (($x81 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x81 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (= $x252 true)))
 (let (($x34 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x11 (bvadd symbol.1 (bvmul input.ind-%var1195X (_ bv4 32)))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x11))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv2 32))) ?x229)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv3 32))) ?x124)))
 (let ((?x30 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1195X)))
 (let (($x101 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x101 (= ?x30 ?x232)))))))))
 ))
 (let (($x24 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var1194X) (bvult input.ind-%var1194X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x101 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x101 $x135))))
 ))
 (let (($x32 (and $x24 $x34)))
 (let (($x140 (= $x32 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x90)))
 (let (($x48 (= ?x235 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (= $x48 true)))
 (let (($x64 (= ?x235 input.dst.llvm-%n)))
 (let (($x6 (= $x64 true)))
 (let (($x242 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x234 (= $x242 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x248 (bvsub ?x114 ?x40)))
 (let (($x227 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x248) (bvult ?x114 ?x248))))
 (let ((?x225 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x52 (bvmul (_ bv4 64) ?x225)))
 (let ((?x152 ((_ extract 63 32) ?x52)))
 (let (($x125 (= (_ bv0 32) ?x152)))
 (let (($x160 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x250 (and (and (and true $x160) $x125) $x227)))
 (let (($x157 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x246 (and $x157 $x250)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (=> $x69 $x246)))
 (let (($x36 (= $x175 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x115 (= $x12 true)))
 (let (($x116 (= $x69 true)))
 (let (($x145 (and $x116 $x115)))
 (let (($x13 (and $x145 $x36)))
 (let (($x206 (and $x13 $x234)))
 (let (($x243 (and $x206 $x6)))
 (let (($x183 (and $x243 $x128)))
 (let (($x74 (and $x183 $x140)))
 (let (($x184 (and $x74 $x213)))
 (let (($x201 (and $x184 $x169)))
 (let (($x93 (and $x201 $x33)))
 (let (($x63 (and $x93 $x236)))
 (let (($x151 (and $x63 $x85)))
 (let (($x43 (and $x151 $x84)))
 (let (($x209 (and $x43 $x127)))
 (let (($x142 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (and (not $x142) $x209)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x193 $x44)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x187 $x96)))
 (let (($x238 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1205X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1205X) (_ bv0 32)))))
 ))
 (let (($x68 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1204X)))
 (= $x19 false)))
 ))
 (let (($x205 (and $x68 $x238)))
 (let (($x249 (and $x205 $x7)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x54 (and $x51 $x249)))
 (let (($x87 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x137 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x87)))))
 (let (($x16 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x87)))))
 (let (($x199 (and $x16 $x54)))
 (let (($x110 (=> $x199 $x97)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x118 (bvule ?x79 (_ bv399 32))))
 (let (($x97 (= $x118 true)))
 (let ((?x218 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x218)))
 (let (($x88 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x88 true)))
 (let (($x15 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x84 (= $x15 true)))
 (let (($x150 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x85 (= $x150 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x236 (= $x226 true)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x130)))
 (let ((?x233 (bvand symbol.1 (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x233)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x143 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x143)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x91 $x134)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x305 $x86)))
 (let (($x303 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x295 (and $x291 $x293)))
 (let (($x297 (not $x295)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x292 (and $x296 $x294)))
 (let (($x300 (and (not $x292) $x297)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x271 $x273)))
 (let (($x274 (not $x272)))
 (let (($x270 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x268 $x270)))
 (let (($x276 (and (not $x269) $x274)))
 (let (($x155 (and (and (and (and (and (and $x276 $x300) $x301) $x303) $x75) $x146) $x104)))
 (let (($x244 (and $x155 $x83)))
 (let (($x21 (= symbol.1 dst_symbol_addr.1)))
 (let (($x191 (and $x21 $x244)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x259 (or (bvugt input.memlabel-mem--symbol.1_begin ?x65) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x266 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x259) (or $x224 $x256)))))))
 (let (($x216 (and $x266 $x191)))
 (let (($x33 (= $x216 true)))
 (let (($x81 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x81 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (= $x252 true)))
 (let (($x34 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x11 (bvadd symbol.1 (bvmul input.ind-%var1195X (_ bv4 32)))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x11))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv2 32))) ?x229)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv3 32))) ?x124)))
 (let ((?x30 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1195X)))
 (let (($x101 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x101 (= ?x30 ?x232)))))))))
 ))
 (let (($x24 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var1194X) (bvult input.ind-%var1194X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x101 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x101 $x135))))
 ))
 (let (($x32 (and $x24 $x34)))
 (let (($x140 (= $x32 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x90)))
 (let (($x48 (= ?x235 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x128 (= $x48 true)))
 (let (($x64 (= ?x235 input.dst.llvm-%n)))
 (let (($x6 (= $x64 true)))
 (let (($x242 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x234 (= $x242 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x248 (bvsub ?x114 ?x40)))
 (let (($x227 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x248) (bvult ?x114 ?x248))))
 (let ((?x225 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x52 (bvmul (_ bv4 64) ?x225)))
 (let ((?x152 ((_ extract 63 32) ?x52)))
 (let (($x125 (= (_ bv0 32) ?x152)))
 (let (($x160 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x250 (and (and (and true $x160) $x125) $x227)))
 (let (($x157 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x246 (and $x157 $x250)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (=> $x69 $x246)))
 (let (($x36 (= $x175 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x115 (= $x12 true)))
 (let (($x116 (= $x69 true)))
 (let (($x145 (and $x116 $x115)))
 (let (($x13 (and $x145 $x36)))
 (let (($x206 (and $x13 $x234)))
 (let (($x243 (and $x206 $x6)))
 (let (($x183 (and $x243 $x128)))
 (let (($x74 (and $x183 $x140)))
 (let (($x184 (and $x74 $x213)))
 (let (($x201 (and $x184 $x169)))
 (let (($x93 (and $x201 $x33)))
 (let (($x63 (and $x93 $x236)))
 (let (($x151 (and $x63 $x85)))
 (let (($x43 (and $x151 $x84)))
 (let (($x209 (and $x43 $x127)))
 (let (($x142 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (and (not $x142) $x209)))
 (let (($x193 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x96 (and $x193 $x44)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x187 $x96)))
 (let (($x238 (forall ((input.ind-%var1205X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1205X)))
 (=> $x19 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1205X) (_ bv0 32)))))
 ))
 (let (($x68 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let (($x19 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1204X)))
 (= $x19 false)))
 ))
 (let (($x205 (and $x68 $x238)))
 (let (($x249 (and $x205 $x7)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x54 (and $x51 $x249)))
 (let (($x87 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x137 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x87)))))
 (let (($x16 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x87)))))
 (let (($x199 (and $x16 $x54)))
 (let (($x110 (=> $x199 $x97)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x165 (bvsle ?x29 (_ bv399 32))))
 (let (($x107 (= $x165 true)))
 (let ((?x59 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x59)))
 (let (($x95 (= ?x20 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x95 true)))
 (let (($x129 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x18 (= $x129 true)))
 (let (($x197 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x197 true)))
 (let (($x76 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x50 (= $x76 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x28)))
 (let ((?x97 (bvand symbol.1 (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x97)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x7 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x249 (= input.memlabel-mem--symbol.1_end ?x7)))
 (let (($x96 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x54 (and $x96 $x249)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (and $x44 $x54)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (and $x151 $x15)))
 (let (($x43 (not $x84)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (and $x63 $x150)))
 (let (($x141 (and (not $x85) $x43)))
 (let (($x216 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x191 $x216)))
 (let (($x93 (not $x33)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x130 $x83)))
 (let (($x236 (and (not $x244) $x93)))
 (let (($x82 (and (and (and (and (and (and $x236 $x141) $x88) $x209) $x199) $x118) $x110)))
 (let (($x113 (and $x82 $x55)))
 (let (($x301 (= symbol.1 dst_symbol_addr.1)))
 (let (($x219 (and $x301 $x113)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x303 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x303)))
 (let (($x91 (or (bvugt input.memlabel-mem--symbol.1_begin ?x303) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x91) (or $x75 $x53)))))))
 (let (($x138 (and $x155 $x219)))
 (let (($x222 (= $x138 true)))
 (let (($x293 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x295 (= $x293 true)))
 (let (($x292 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x299 (= $x292 true)))
 (let (($x274 (forall ((input.ind-%var1215X (_ BitVec 32)) )(let ((?x257 (bvadd symbol.1 (bvmul input.ind-%var1215X (_ bv4 32)))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x257))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv2 32))) ?x26)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv3 32))) ?x270)))
 (let ((?x74 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1215X)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1215X)))
 (=> $x195 (= ?x74 ?x271)))))))))
 ))
 (let (($x180 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var1214X) (bvult input.ind-%var1214X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1214X)))
 (= $x195 $x232))))
 ))
 (let (($x276 (and $x180 $x274)))
 (let (($x296 (= $x276 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x8)))
 (let (($x181 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (= $x181 true)))
 (let (($x94 (= ?x135 input.dst.llvm-%n)))
 (let (($x24 (= $x94 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x183 (= $x128 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x36 (bvsub ?x114 ?x40)))
 (let (($x206 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x36) (bvult ?x114 ?x36))))
 (let ((?x227 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x250 (bvmul (_ bv4 64) ?x227)))
 (let ((?x246 ((_ extract 63 32) ?x250)))
 (let (($x175 (= (_ bv0 32) ?x246)))
 (let (($x204 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x235 (and (and (and true $x204) $x175) $x206)))
 (let (($x152 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x64 (and $x152 $x235)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (=> $x212 $x64)))
 (let (($x243 (= $x6 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x203 (= $x160 true)))
 (let (($x182 (= $x212 true)))
 (let (($x196 (and $x182 $x203)))
 (let (($x48 (and $x196 $x243)))
 (let (($x101 (and $x48 $x183)))
 (let (($x30 (and $x101 $x24)))
 (let (($x11 (and $x30 $x27)))
 (let (($x294 (and $x11 $x296)))
 (let (($x291 (and $x294 $x299)))
 (let (($x297 (and $x291 $x295)))
 (let (($x214 (and $x297 $x222)))
 (let (($x121 (and $x214 $x50)))
 (let (($x47 (and $x121 $x35)))
 (let (($x170 (and $x47 $x18)))
 (let (($x215 (and $x170 $x122)))
 (let (($x190 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and (not $x190) $x215)))
 (let (($x157 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (and $x157 $x156)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x173 (and $x145 $x25)))
 (let (($x188 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x89 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1225X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x89 false)))
 ))
 (let (($x12 (and $x238 $x188)))
 (let (($x147 (and $x12 $x173)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x223 $x147)))
 (let (($x111 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x51 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x111)))))
 (let (($x5 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x111)))))
 (let (($x163 (and $x5 $x23)))
 (let (($x166 (=> $x163 $x107)))
 (not $x166))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x165 (bvsle ?x29 (_ bv399 32))))
 (let (($x107 (= $x165 true)))
 (let ((?x59 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x59)))
 (let (($x95 (= ?x20 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x95 true)))
 (let (($x129 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x18 (= $x129 true)))
 (let (($x197 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x197 true)))
 (let (($x76 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x50 (= $x76 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x28)))
 (let ((?x97 (bvand symbol.1 (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x97)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x7 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x249 (= input.memlabel-mem--symbol.1_end ?x7)))
 (let (($x96 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x54 (and $x96 $x249)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (and $x44 $x54)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (and $x151 $x15)))
 (let (($x43 (not $x84)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (and $x63 $x150)))
 (let (($x141 (and (not $x85) $x43)))
 (let (($x216 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x191 $x216)))
 (let (($x93 (not $x33)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x130 $x83)))
 (let (($x236 (and (not $x244) $x93)))
 (let (($x82 (and (and (and (and (and (and $x236 $x141) $x88) $x209) $x199) $x118) $x110)))
 (let (($x113 (and $x82 $x55)))
 (let (($x301 (= symbol.1 dst_symbol_addr.1)))
 (let (($x219 (and $x301 $x113)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x303 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x303)))
 (let (($x91 (or (bvugt input.memlabel-mem--symbol.1_begin ?x303) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x91) (or $x75 $x53)))))))
 (let (($x138 (and $x155 $x219)))
 (let (($x222 (= $x138 true)))
 (let (($x293 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x295 (= $x293 true)))
 (let (($x292 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x299 (= $x292 true)))
 (let (($x274 (forall ((input.ind-%var1215X (_ BitVec 32)) )(let ((?x257 (bvadd symbol.1 (bvmul input.ind-%var1215X (_ bv4 32)))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x257))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv2 32))) ?x26)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv3 32))) ?x270)))
 (let ((?x74 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1215X)))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1215X)))
 (=> $x195 (= ?x74 ?x271)))))))))
 ))
 (let (($x180 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var1214X) (bvult input.ind-%var1214X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x195 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1214X)))
 (= $x195 $x232))))
 ))
 (let (($x276 (and $x180 $x274)))
 (let (($x296 (= $x276 true)))
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x8)))
 (let (($x181 (= ?x135 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (= $x181 true)))
 (let (($x94 (= ?x135 input.dst.llvm-%n)))
 (let (($x24 (= $x94 true)))
 (let (($x128 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x183 (= $x128 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x36 (bvsub ?x114 ?x40)))
 (let (($x206 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x36) (bvult ?x114 ?x36))))
 (let ((?x227 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x250 (bvmul (_ bv4 64) ?x227)))
 (let ((?x246 ((_ extract 63 32) ?x250)))
 (let (($x175 (= (_ bv0 32) ?x246)))
 (let (($x204 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x235 (and (and (and true $x204) $x175) $x206)))
 (let (($x152 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x64 (and $x152 $x235)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (=> $x212 $x64)))
 (let (($x243 (= $x6 true)))
 (let (($x160 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x203 (= $x160 true)))
 (let (($x182 (= $x212 true)))
 (let (($x196 (and $x182 $x203)))
 (let (($x48 (and $x196 $x243)))
 (let (($x101 (and $x48 $x183)))
 (let (($x30 (and $x101 $x24)))
 (let (($x11 (and $x30 $x27)))
 (let (($x294 (and $x11 $x296)))
 (let (($x291 (and $x294 $x299)))
 (let (($x297 (and $x291 $x295)))
 (let (($x214 (and $x297 $x222)))
 (let (($x121 (and $x214 $x50)))
 (let (($x47 (and $x121 $x35)))
 (let (($x170 (and $x47 $x18)))
 (let (($x215 (and $x170 $x122)))
 (let (($x190 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x156 (and (not $x190) $x215)))
 (let (($x157 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (and $x157 $x156)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x173 (and $x145 $x25)))
 (let (($x188 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x89 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1225X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x89 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x89 false)))
 ))
 (let (($x12 (and $x238 $x188)))
 (let (($x147 (and $x12 $x173)))
 (let (($x223 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x223 $x147)))
 (let (($x111 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x51 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x111)))))
 (let (($x5 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x111)))))
 (let (($x163 (and $x5 $x23)))
 (let (($x166 (=> $x163 $x107)))
 (not $x166))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x32 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x256 (bvsge ?x32 (_ bv0 32))))
 (let (($x73 (= $x256 true)))
 (let ((?x112 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x112)))
 (let (($x61 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x61 true)))
 (let (($x169 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x169 true)))
 (let (($x221 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x158 (= $x221 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x140 (= $x123 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x172)))
 (let ((?x107 (bvand symbol.1 (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x107)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x173 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x173)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x23 (and $x25 $x147)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x156 $x23)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (and $x47 $x129)))
 (let (($x170 (not $x18)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (and $x121 $x197)))
 (let (($x20 (and (not $x35) $x170)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x219 $x138)))
 (let (($x214 (not $x222)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x28 $x55)))
 (let (($x50 (and (not $x113) $x214)))
 (let (($x92 (and (and (and (and (and (and $x50 $x20) $x95) $x215) $x163) $x165) $x166)))
 (let (($x205 (and $x92 $x228)))
 (let (($x88 (= symbol.1 dst_symbol_addr.1)))
 (let (($x187 (and $x88 $x205)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x209 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x209)))
 (let (($x96 (or (bvugt input.memlabel-mem--symbol.1_begin ?x209) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x96) (or $x199 $x210)))))))
 (let (($x19 (and $x82 $x187)))
 (let (($x164 (= $x19 true)))
 (let (($x15 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (= $x15 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (= $x85 true)))
 (let (($x93 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let ((?x146 (bvadd symbol.1 (bvmul input.ind-%var1235X (_ bv4 32)))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x146))))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv2 32))) ?x208)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv3 32))) ?x83)))
 (let ((?x294 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1235X)))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (=> $x65 (= ?x294 ?x191)))))))))
 ))
 (let (($x272 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var1234X) (bvult input.ind-%var1234X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1234X)))
 (= $x65 $x271))))
 ))
 (let (($x236 (and $x272 $x93)))
 (let (($x63 (= $x236 true)))
 (let ((?x229 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x229)))
 (let (($x213 (= ?x232 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x211 (= $x213 true)))
 (let (($x38 (= ?x232 input.dst.llvm-%n)))
 (let (($x180 (= $x38 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x11 (= $x27 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x243 (bvsub ?x114 ?x40)))
 (let (($x101 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x243) (bvult ?x114 ?x243))))
 (let ((?x206 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x235 (bvmul (_ bv4 64) ?x206)))
 (let ((?x64 ((_ extract 63 32) ?x235)))
 (let (($x6 (= (_ bv0 32) ?x64)))
 (let (($x242 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x135 (and (and (and true $x242) $x6) $x101)))
 (let (($x246 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x94 (and $x246 $x135)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (=> $x144 $x94)))
 (let (($x30 (= $x24 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x78 (= $x204 true)))
 (let (($x106 (= $x144 true)))
 (let (($x231 (and $x106 $x78)))
 (let (($x181 (and $x231 $x30)))
 (let (($x195 (and $x181 $x11)))
 (let (($x74 (and $x195 $x180)))
 (let (($x257 (and $x74 $x211)))
 (let (($x150 (and $x257 $x63)))
 (let (($x151 (and $x150 $x218)))
 (let (($x43 (and $x151 $x84)))
 (let (($x304 (and $x43 $x164)))
 (let (($x70 (and $x304 $x140)))
 (let (($x81 (and $x70 $x158)))
 (let (($x62 (and $x81 $x149)))
 (let (($x201 (and $x62 $x198)))
 (let (($x125 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x259 (and (not $x125) $x201)))
 (let (($x152 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (and $x152 $x259)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x196 $x224)))
 (let (($x168 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1245X)))
 (=> $x161 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1245X) (_ bv0 32)))))
 ))
 (let (($x188 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1244X)))
 (= $x161 false)))
 ))
 (let (($x160 (and $x188 $x168)))
 (let (($x186 (and $x160 $x133)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x162 (and $x68 $x186)))
 (let (($x16 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x223 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x16)))))
 (let (($x56 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x16)))))
 (let (($x254 (and $x56 $x162)))
 (let (($x142 (=> $x254 $x73)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x32 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x256 (bvsge ?x32 (_ bv0 32))))
 (let (($x73 (= $x256 true)))
 (let ((?x112 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x112)))
 (let (($x61 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x61 true)))
 (let (($x169 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x169 true)))
 (let (($x221 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x158 (= $x221 true)))
 (let (($x123 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x140 (= $x123 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x172)))
 (let ((?x107 (bvand symbol.1 (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x107)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x173 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x173)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x23 (and $x25 $x147)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x156 $x23)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x18 (and $x47 $x129)))
 (let (($x170 (not $x18)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x35 (and $x121 $x197)))
 (let (($x20 (and (not $x35) $x170)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x219 $x138)))
 (let (($x214 (not $x222)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x28 $x55)))
 (let (($x50 (and (not $x113) $x214)))
 (let (($x92 (and (and (and (and (and (and $x50 $x20) $x95) $x215) $x163) $x165) $x166)))
 (let (($x205 (and $x92 $x228)))
 (let (($x88 (= symbol.1 dst_symbol_addr.1)))
 (let (($x187 (and $x88 $x205)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x209 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x209)))
 (let (($x96 (or (bvugt input.memlabel-mem--symbol.1_begin ?x209) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x96) (or $x199 $x210)))))))
 (let (($x19 (and $x82 $x187)))
 (let (($x164 (= $x19 true)))
 (let (($x15 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (= $x15 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (= $x85 true)))
 (let (($x93 (forall ((input.ind-%var1235X (_ BitVec 32)) )(let ((?x146 (bvadd symbol.1 (bvmul input.ind-%var1235X (_ bv4 32)))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x146))))
 (let ((?x83 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv2 32))) ?x208)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x146 (_ bv3 32))) ?x83)))
 (let ((?x294 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1235X)))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1235X)))
 (=> $x65 (= ?x294 ?x191)))))))))
 ))
 (let (($x272 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var1234X) (bvult input.ind-%var1234X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1234X)))
 (= $x65 $x271))))
 ))
 (let (($x236 (and $x272 $x93)))
 (let (($x63 (= $x236 true)))
 (let ((?x229 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x229)))
 (let (($x213 (= ?x232 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x211 (= $x213 true)))
 (let (($x38 (= ?x232 input.dst.llvm-%n)))
 (let (($x180 (= $x38 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x11 (= $x27 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x243 (bvsub ?x114 ?x40)))
 (let (($x101 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x243) (bvult ?x114 ?x243))))
 (let ((?x206 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x235 (bvmul (_ bv4 64) ?x206)))
 (let ((?x64 ((_ extract 63 32) ?x235)))
 (let (($x6 (= (_ bv0 32) ?x64)))
 (let (($x242 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x135 (and (and (and true $x242) $x6) $x101)))
 (let (($x246 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x94 (and $x246 $x135)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (=> $x144 $x94)))
 (let (($x30 (= $x24 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x78 (= $x204 true)))
 (let (($x106 (= $x144 true)))
 (let (($x231 (and $x106 $x78)))
 (let (($x181 (and $x231 $x30)))
 (let (($x195 (and $x181 $x11)))
 (let (($x74 (and $x195 $x180)))
 (let (($x257 (and $x74 $x211)))
 (let (($x150 (and $x257 $x63)))
 (let (($x151 (and $x150 $x218)))
 (let (($x43 (and $x151 $x84)))
 (let (($x304 (and $x43 $x164)))
 (let (($x70 (and $x304 $x140)))
 (let (($x81 (and $x70 $x158)))
 (let (($x62 (and $x81 $x149)))
 (let (($x201 (and $x62 $x198)))
 (let (($x125 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x259 (and (not $x125) $x201)))
 (let (($x152 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (and $x152 $x259)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x196 $x224)))
 (let (($x168 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1245X)))
 (=> $x161 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1245X) (_ bv0 32)))))
 ))
 (let (($x188 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1244X)))
 (= $x161 false)))
 ))
 (let (($x160 (and $x188 $x168)))
 (let (($x186 (and $x160 $x133)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x162 (and $x68 $x186)))
 (let (($x16 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x223 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x16)))))
 (let (($x56 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x16)))))
 (let (($x254 (and $x56 $x162)))
 (let (($x142 (=> $x254 $x73)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x53 (bvule ?x276 (_ bv399 32))))
 (let (($x115 (= $x53 true)))
 (let ((?x10 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x305 (bvneg ?x10)))
 (let (($x22 (= ?x305 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x22 true)))
 (let (($x295 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x295 true)))
 (let (($x268 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (= $x268 true)))
 (let (($x202 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let ((?x142 (bvadd symbol.1 (bvmul input.ind-%var1255X (_ bv4 32)))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x142))))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv2 32))) ?x141)))
 (let ((?x145 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv3 32))) ?x193)))
 (let ((?x221 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1255X)))
 (let (($x108 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1255X)))
 (=> $x108 (= ?x221 ?x145)))))))))
 ))
 (let (($x304 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x19 (and (bvule (_ bv0 32) input.ind-%var1254X) (bvult input.ind-%var1254X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x108 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1254X)))
 (= $x108 $x19))))
 ))
 (let (($x37 (and $x304 $x202)))
 (let (($x296 (= $x37 true)))
 (let (($x23 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x23 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x170 (bvsub ?x114 ?x40)))
 (let (($x300 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x170) (bvult ?x114 ?x170))))
 (let ((?x59 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x47 (bvmul (_ bv4 64) ?x59)))
 (let ((?x129 ((_ extract 63 32) ?x47)))
 (let (($x18 (= (_ bv0 32) ?x129)))
 (let (($x197 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x120 (and (and (and true $x197) $x18) $x300)))
 (let (($x138 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x156 (and $x138 $x120)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x58 $x156)))
 (let (($x173 (= $x25 true)))
 (let (($x28 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x55 (= $x28 true)))
 (let (($x42 (= $x58 true)))
 (let (($x192 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x97 (= $x192 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x127)))
 (let ((?x43 (bvand symbol.1 (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x43)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let ((?x150 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x150)))
 (let (($x63 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x218 (and $x63 $x85)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x236 $x218)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x132 (and $x233 $x155)))
 (let (($x208 (not $x132)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x130 (and $x303 $x301)))
 (let (($x191 (and (not $x130) $x208)))
 (let (($x299 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x294 $x299)))
 (let (($x146 (not $x49)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x271 $x273)))
 (let (($x226 (and (not $x272) $x146)))
 (let (($x249 (and (and (and (and (and (and $x226 $x191) $x216) $x93) $x151) $x84) $x230)))
 (let (($x199 (and $x249 $x110)))
 (let (($x24 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (and $x24 $x199)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x124 (or (bvugt input.memlabel-mem--symbol.1_begin ?x27) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x124) (or $x180 $x74)))))))
 (let (($x210 (and $x26 $x54)))
 (let (($x79 (= $x210 true)))
 (let (($x128 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x128 true)))
 (let ((?x234 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x234)))
 (let (($x8 (= ?x206 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (= $x8 true)))
 (let (($x235 (= ?x206 input.dst.llvm-%n)))
 (let (($x64 (= $x235 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x242 (= $x36 true)))
 (let (($x6 (and $x242 $x64)))
 (let (($x243 (and $x6 $x48)))
 (let (($x101 (and $x243 $x183)))
 (let (($x118 (and $x101 $x79)))
 (let (($x82 (and $x118 $x97)))
 (let (($x88 (and $x82 $x42)))
 (let (($x113 (and $x88 $x55)))
 (let (($x147 (and $x113 $x173)))
 (let (($x252 (and $x147 $x163)))
 (let (($x269 (and $x252 $x296)))
 (let (($x293 (and $x269 $x298)))
 (let (($x134 (and $x293 $x143)))
 (let (($x297 (and $x134 $x302)))
 (let (($x175 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (and (not $x175) $x297)))
 (let (($x246 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (and $x246 $x91)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x231 $x75)))
 (let (($x248 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let (($x14 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1265X)))
 (=> $x14 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1265X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x14 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1264X)))
 (= $x14 false)))
 ))
 (let (($x204 (and $x168 $x248)))
 (let (($x266 (and $x204 $x275)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x255 (and $x238 $x266)))
 (let (($x5 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x68 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x5)))))
 (let (($x67 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x5)))))
 (let (($x86 (and $x67 $x255)))
 (let (($x190 (=> $x86 $x115)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x53 (bvule ?x276 (_ bv399 32))))
 (let (($x115 (= $x53 true)))
 (let ((?x10 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x305 (bvneg ?x10)))
 (let (($x22 (= ?x305 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x22 true)))
 (let (($x295 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x295 true)))
 (let (($x268 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (= $x268 true)))
 (let (($x202 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let ((?x142 (bvadd symbol.1 (bvmul input.ind-%var1255X (_ bv4 32)))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x142))))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv2 32))) ?x141)))
 (let ((?x145 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv3 32))) ?x193)))
 (let ((?x221 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1255X)))
 (let (($x108 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1255X)))
 (=> $x108 (= ?x221 ?x145)))))))))
 ))
 (let (($x304 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x19 (and (bvule (_ bv0 32) input.ind-%var1254X) (bvult input.ind-%var1254X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x108 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1254X)))
 (= $x108 $x19))))
 ))
 (let (($x37 (and $x304 $x202)))
 (let (($x296 (= $x37 true)))
 (let (($x23 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x23 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x170 (bvsub ?x114 ?x40)))
 (let (($x300 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x170) (bvult ?x114 ?x170))))
 (let ((?x59 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x47 (bvmul (_ bv4 64) ?x59)))
 (let ((?x129 ((_ extract 63 32) ?x47)))
 (let (($x18 (= (_ bv0 32) ?x129)))
 (let (($x197 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x120 (and (and (and true $x197) $x18) $x300)))
 (let (($x138 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x156 (and $x138 $x120)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x58 $x156)))
 (let (($x173 (= $x25 true)))
 (let (($x28 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x55 (= $x28 true)))
 (let (($x42 (= $x58 true)))
 (let (($x192 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x97 (= $x192 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x127)))
 (let ((?x43 (bvand symbol.1 (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x43)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let ((?x150 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x150)))
 (let (($x63 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x218 (and $x63 $x85)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x236 $x218)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x132 (and $x233 $x155)))
 (let (($x208 (not $x132)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x130 (and $x303 $x301)))
 (let (($x191 (and (not $x130) $x208)))
 (let (($x299 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x294 $x299)))
 (let (($x146 (not $x49)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x271 $x273)))
 (let (($x226 (and (not $x272) $x146)))
 (let (($x249 (and (and (and (and (and (and $x226 $x191) $x216) $x93) $x151) $x84) $x230)))
 (let (($x199 (and $x249 $x110)))
 (let (($x24 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (and $x24 $x199)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x124 (or (bvugt input.memlabel-mem--symbol.1_begin ?x27) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x124) (or $x180 $x74)))))))
 (let (($x210 (and $x26 $x54)))
 (let (($x79 (= $x210 true)))
 (let (($x128 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x183 (= $x128 true)))
 (let ((?x234 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x234)))
 (let (($x8 (= ?x206 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x48 (= $x8 true)))
 (let (($x235 (= ?x206 input.dst.llvm-%n)))
 (let (($x64 (= $x235 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x242 (= $x36 true)))
 (let (($x6 (and $x242 $x64)))
 (let (($x243 (and $x6 $x48)))
 (let (($x101 (and $x243 $x183)))
 (let (($x118 (and $x101 $x79)))
 (let (($x82 (and $x118 $x97)))
 (let (($x88 (and $x82 $x42)))
 (let (($x113 (and $x88 $x55)))
 (let (($x147 (and $x113 $x173)))
 (let (($x252 (and $x147 $x163)))
 (let (($x269 (and $x252 $x296)))
 (let (($x293 (and $x269 $x298)))
 (let (($x134 (and $x293 $x143)))
 (let (($x297 (and $x134 $x302)))
 (let (($x175 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (and (not $x175) $x297)))
 (let (($x246 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x75 (and $x246 $x91)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x231 $x75)))
 (let (($x248 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let (($x14 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1265X)))
 (=> $x14 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1265X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let (($x14 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1264X)))
 (= $x14 false)))
 ))
 (let (($x204 (and $x168 $x248)))
 (let (($x266 (and $x204 $x275)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x255 (and $x238 $x266)))
 (let (($x5 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x68 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x5)))))
 (let (($x67 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x5)))))
 (let (($x86 (and $x67 $x255)))
 (let (($x190 (=> $x86 $x115)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (bvsle ?x140 (_ bv399 32))))
 (let (($x203 (= $x256 true)))
 (let ((?x259 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x259)))
 (let (($x258 (= ?x224 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x258 true)))
 (let (($x62 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (= $x62 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (= $x166 true)))
 (let (($x99 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let ((?x190 (bvadd symbol.1 (bvmul input.ind-%var1275X (_ bv4 32)))))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x190))))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv2 32))) ?x135)))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv3 32))) ?x157)))
 (let ((?x268 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1275X)))
 (let (($x21 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1275X)))
 (=> $x21 (= ?x268 ?x196)))))))))
 ))
 (let (($x202 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var1274X) (bvult input.ind-%var1274X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x21 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1274X)))
 (= $x21 $x89))))
 ))
 (let (($x241 (and $x202 $x99)))
 (let (($x70 (= $x241 true)))
 (let (($x73 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x142 (= $x73 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x147 (bvsub ?x114 ?x40)))
 (let (($x108 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x147) (bvult ?x114 ?x147))))
 (let ((?x120 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x120)))
 (let ((?x25 ((_ extract 63 32) ?x156)))
 (let (($x173 (= (_ bv0 32) ?x25)))
 (let (($x95 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x19 (and (and (and true $x95) $x173) $x108)))
 (let (($x18 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x164 (and $x18 $x19)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x304 (=> $x69 $x164)))
 (let (($x221 (= $x304 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x35 (= $x122 true)))
 (let (($x121 (= $x69 true)))
 (let (($x214 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x222 (= $x214 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x79)))
 (let ((?x54 (bvand symbol.1 (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x54)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let ((?x43 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x230 (= input.memlabel-mem--symbol.1_end ?x43)))
 (let (($x7 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x249 (and $x7 $x230)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x84 $x249)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x44 $x236)))
 (let (($x150 (not $x63)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x117 $x33)))
 (let (($x218 (and (not $x93) $x150)))
 (let (($x132 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x155 $x132)))
 (let (($x191 (not $x208)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x130 $x83)))
 (let (($x216 (and (not $x233) $x191)))
 (let (($x28 (and (and (and (and (and (and $x216 $x218) $x151) $x15) $x127) $x199) $x210)))
 (let (($x55 (and $x28 $x118)))
 (let (($x213 (= symbol.1 dst_symbol_addr.1)))
 (let (($x113 (and $x213 $x55)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x24 (or (bvugt input.memlabel-mem--symbol.1_begin ?x65) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x301 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x24) (or $x244 $x294)))))))
 (let (($x76 (and $x301 $x113)))
 (let (($x219 (= $x76 true)))
 (let (($x229 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x232 (= $x229 true)))
 (let ((?x101 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x101)))
 (let (($x11 (= ?x30 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x195 (= $x11 true)))
 (let (($x181 (= ?x30 input.dst.llvm-%n)))
 (let (($x270 (= $x181 true)))
 (let (($x243 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x243 true)))
 (let (($x27 (and $x128 $x270)))
 (let (($x124 (and $x27 $x195)))
 (let (($x180 (and $x124 $x232)))
 (let (($x138 (and $x180 $x219)))
 (let (($x50 (and $x138 $x222)))
 (let (($x197 (and $x50 $x121)))
 (let (($x59 (and $x197 $x35)))
 (let (($x81 (and $x59 $x221)))
 (let (($x177 (and $x81 $x142)))
 (let (($x29 (and $x177 $x70)))
 (let (($x149 (and $x29 $x92)))
 (let (($x162 (and $x149 $x186)))
 (let (($x112 (and $x162 $x61)))
 (let (($x8 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and (not $x8) $x112)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x254 (and $x64 $x133)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x165 (and $x234 $x254)))
 (let (($x36 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1285X)))
 (=> $x225 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1285X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1284X)))
 (= $x225 false)))
 ))
 (let (($x242 (and $x248 $x36)))
 (let (($x172 (and $x242 $x165)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x188 $x172)))
 (let (($x56 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x238 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x56)))))
 (let (($x171 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x56)))))
 (let (($x32 (and $x171 $x228)))
 (let (($x125 (=> $x32 $x203)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (bvsle ?x140 (_ bv399 32))))
 (let (($x203 (= $x256 true)))
 (let ((?x259 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x259)))
 (let (($x258 (= ?x224 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x258 true)))
 (let (($x62 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (= $x62 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (= $x166 true)))
 (let (($x99 (forall ((input.ind-%var1275X (_ BitVec 32)) )(let ((?x190 (bvadd symbol.1 (bvmul input.ind-%var1275X (_ bv4 32)))))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x190))))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv2 32))) ?x135)))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv3 32))) ?x157)))
 (let ((?x268 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1275X)))
 (let (($x21 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1275X)))
 (=> $x21 (= ?x268 ?x196)))))))))
 ))
 (let (($x202 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var1274X) (bvult input.ind-%var1274X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x21 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1274X)))
 (= $x21 $x89))))
 ))
 (let (($x241 (and $x202 $x99)))
 (let (($x70 (= $x241 true)))
 (let (($x73 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x142 (= $x73 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x147 (bvsub ?x114 ?x40)))
 (let (($x108 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x147) (bvult ?x114 ?x147))))
 (let ((?x120 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x120)))
 (let ((?x25 ((_ extract 63 32) ?x156)))
 (let (($x173 (= (_ bv0 32) ?x25)))
 (let (($x95 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x19 (and (and (and true $x95) $x173) $x108)))
 (let (($x18 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x164 (and $x18 $x19)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x304 (=> $x69 $x164)))
 (let (($x221 (= $x304 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x35 (= $x122 true)))
 (let (($x121 (= $x69 true)))
 (let (($x214 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x222 (= $x214 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x79)))
 (let ((?x54 (bvand symbol.1 (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x54)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let ((?x43 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x230 (= input.memlabel-mem--symbol.1_end ?x43)))
 (let (($x7 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x249 (and $x7 $x230)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x84 $x249)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x44 $x236)))
 (let (($x150 (not $x63)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x117 $x33)))
 (let (($x218 (and (not $x93) $x150)))
 (let (($x132 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x155 $x132)))
 (let (($x191 (not $x208)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x130 $x83)))
 (let (($x216 (and (not $x233) $x191)))
 (let (($x28 (and (and (and (and (and (and $x216 $x218) $x151) $x15) $x127) $x199) $x210)))
 (let (($x55 (and $x28 $x118)))
 (let (($x213 (= symbol.1 dst_symbol_addr.1)))
 (let (($x113 (and $x213 $x55)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x24 (or (bvugt input.memlabel-mem--symbol.1_begin ?x65) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x301 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x24) (or $x244 $x294)))))))
 (let (($x76 (and $x301 $x113)))
 (let (($x219 (= $x76 true)))
 (let (($x229 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x232 (= $x229 true)))
 (let ((?x101 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x101)))
 (let (($x11 (= ?x30 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x195 (= $x11 true)))
 (let (($x181 (= ?x30 input.dst.llvm-%n)))
 (let (($x270 (= $x181 true)))
 (let (($x243 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x243 true)))
 (let (($x27 (and $x128 $x270)))
 (let (($x124 (and $x27 $x195)))
 (let (($x180 (and $x124 $x232)))
 (let (($x138 (and $x180 $x219)))
 (let (($x50 (and $x138 $x222)))
 (let (($x197 (and $x50 $x121)))
 (let (($x59 (and $x197 $x35)))
 (let (($x81 (and $x59 $x221)))
 (let (($x177 (and $x81 $x142)))
 (let (($x29 (and $x177 $x70)))
 (let (($x149 (and $x29 $x92)))
 (let (($x162 (and $x149 $x186)))
 (let (($x112 (and $x162 $x61)))
 (let (($x8 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and (not $x8) $x112)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x254 (and $x64 $x133)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x165 (and $x234 $x254)))
 (let (($x36 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1285X)))
 (=> $x225 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1285X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x225 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1284X)))
 (= $x225 false)))
 ))
 (let (($x242 (and $x248 $x36)))
 (let (($x172 (and $x242 $x165)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x188 $x172)))
 (let (($x56 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x238 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x56)))))
 (let (($x171 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x56)))))
 (let (($x32 (and $x171 $x228)))
 (let (($x125 (=> $x32 $x203)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x296 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x53 (bvsge ?x296 (_ bv0 32))))
 (let (($x78 (= $x53 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x91)))
 (let (($x305 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x305 true)))
 (let (($x134 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x266 (= $x134 true)))
 (let (($x247 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (= $x247 true)))
 (let (($x267 (forall ((input.ind-%var1295X (_ BitVec 32)) )(let ((?x125 (bvadd symbol.1 (bvmul input.ind-%var1295X (_ bv4 32)))))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x125))))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv2 32))) ?x38)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv3 32))) ?x152)))
 (let ((?x166 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1295X)))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1295X)))
 (=> $x107 (= ?x166 ?x231)))))))))
 ))
 (let (($x99 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1294X) (bvult input.ind-%var1294X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1294X)))
 (= $x107 $x161))))
 ))
 (let (($x90 (and $x99 $x267)))
 (let (($x269 (= $x90 true)))
 (let (($x115 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x190 (= $x115 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x81 (bvsub ?x114 ?x40)))
 (let (($x21 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x81) (bvult ?x114 ?x81))))
 (let ((?x19 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x164 (bvmul (_ bv4 64) ?x19)))
 (let ((?x304 ((_ extract 63 32) ?x164)))
 (let (($x221 (= (_ bv0 32) ?x304)))
 (let (($x252 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x89 (and (and (and true $x252) $x221) $x21)))
 (let (($x173 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x72 (and $x173 $x89)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (=> $x212 $x72)))
 (let (($x268 (= $x202 true)))
 (let (($x187 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x300 (= $x187 true)))
 (let (($x77 (= $x212 true)))
 (let (($x20 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x215 (= $x20 true)))
 (let ((?x219 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x219)))
 (let ((?x113 (bvand symbol.1 (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x113)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x54 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x210 (= input.memlabel-mem--symbol.1_end ?x54)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x28 (and $x88 $x210)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x199 $x28)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x82 $x84)))
 (let (($x43 (not $x7)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x97 $x96)))
 (let (($x249 (and (not $x15) $x43)))
 (let (($x63 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x236 $x63)))
 (let (($x218 (not $x150)))
 (let (($x85 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x93 $x85)))
 (let (($x151 (and (not $x44) $x218)))
 (let (($x122 (and (and (and (and (and (and $x151 $x249) $x127) $x110) $x79) $x55) $x76)))
 (let (($x35 (and $x122 $x138)))
 (let (($x299 (= symbol.1 dst_symbol_addr.1)))
 (let (($x59 (and $x299 $x35)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x226 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x213 (or (bvugt input.memlabel-mem--symbol.1_begin ?x226) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x213) (or $x209 $x155)))))))
 (let (($x47 (and $x33 $x59)))
 (let (($x129 (= $x47 true)))
 (let (($x271 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x273 (= $x271 true)))
 (let ((?x180 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x180)))
 (let (($x26 (= ?x211 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (= $x26 true)))
 (let (($x257 (= ?x211 input.dst.llvm-%n)))
 (let (($x303 (= $x257 true)))
 (let (($x124 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x229 (= $x124 true)))
 (let (($x65 (and $x229 $x303)))
 (let (($x24 (and $x65 $x94)))
 (let (($x244 (and $x24 $x273)))
 (let (($x18 (and $x244 $x129)))
 (let (($x170 (and $x18 $x215)))
 (let (($x95 (and $x170 $x77)))
 (let (($x120 (and $x95 $x300)))
 (let (($x293 (and $x120 $x268)))
 (let (($x52 (and $x293 $x190)))
 (let (($x12 (and $x52 $x269)))
 (let (($x143 (and $x12 $x66)))
 (let (($x255 (and $x143 $x266)))
 (let (($x10 (and $x255 $x22)))
 (let (($x11 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x275 (and (not $x11) $x10)))
 (let (($x270 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and $x270 $x275)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x201 (and $x101 $x86)))
 (let (($x243 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let (($x227 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1305X)))
 (=> $x227 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1305X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x227 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1304X)))
 (= $x227 false)))
 ))
 (let (($x128 (and $x36 $x243)))
 (let (($x57 (and $x128 $x201)))
 (let (($x168 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x168 $x57)))
 (let (($x67 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x188 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x67)))))
 (let (($x220 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x67)))))
 (let (($x276 (and $x220 $x141)))
 (let (($x175 (=> $x276 $x78)))
 (not $x175))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x296 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x53 (bvsge ?x296 (_ bv0 32))))
 (let (($x78 (= $x53 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x75 (bvneg ?x91)))
 (let (($x305 (= ?x75 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x22 (= $x305 true)))
 (let (($x134 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x266 (= $x134 true)))
 (let (($x247 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (= $x247 true)))
 (let (($x267 (forall ((input.ind-%var1295X (_ BitVec 32)) )(let ((?x125 (bvadd symbol.1 (bvmul input.ind-%var1295X (_ bv4 32)))))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x125))))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv2 32))) ?x38)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x125 (_ bv3 32))) ?x152)))
 (let ((?x166 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1295X)))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1295X)))
 (=> $x107 (= ?x166 ?x231)))))))))
 ))
 (let (($x99 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1294X) (bvult input.ind-%var1294X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x107 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1294X)))
 (= $x107 $x161))))
 ))
 (let (($x90 (and $x99 $x267)))
 (let (($x269 (= $x90 true)))
 (let (($x115 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x190 (= $x115 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x81 (bvsub ?x114 ?x40)))
 (let (($x21 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x81) (bvult ?x114 ?x81))))
 (let ((?x19 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x164 (bvmul (_ bv4 64) ?x19)))
 (let ((?x304 ((_ extract 63 32) ?x164)))
 (let (($x221 (= (_ bv0 32) ?x304)))
 (let (($x252 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x89 (and (and (and true $x252) $x221) $x21)))
 (let (($x173 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x72 (and $x173 $x89)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (=> $x212 $x72)))
 (let (($x268 (= $x202 true)))
 (let (($x187 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x300 (= $x187 true)))
 (let (($x77 (= $x212 true)))
 (let (($x20 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x215 (= $x20 true)))
 (let ((?x219 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x219)))
 (let ((?x113 (bvand symbol.1 (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x113)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x54 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x210 (= input.memlabel-mem--symbol.1_end ?x54)))
 (let (($x88 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x28 (and $x88 $x210)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x199 $x28)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x82 $x84)))
 (let (($x43 (not $x7)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x97 $x96)))
 (let (($x249 (and (not $x15) $x43)))
 (let (($x63 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x236 $x63)))
 (let (($x218 (not $x150)))
 (let (($x85 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x93 $x85)))
 (let (($x151 (and (not $x44) $x218)))
 (let (($x122 (and (and (and (and (and (and $x151 $x249) $x127) $x110) $x79) $x55) $x76)))
 (let (($x35 (and $x122 $x138)))
 (let (($x299 (= symbol.1 dst_symbol_addr.1)))
 (let (($x59 (and $x299 $x35)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x226 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x213 (or (bvugt input.memlabel-mem--symbol.1_begin ?x226) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x213) (or $x209 $x155)))))))
 (let (($x47 (and $x33 $x59)))
 (let (($x129 (= $x47 true)))
 (let (($x271 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x273 (= $x271 true)))
 (let ((?x180 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x180)))
 (let (($x26 (= ?x211 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (= $x26 true)))
 (let (($x257 (= ?x211 input.dst.llvm-%n)))
 (let (($x303 (= $x257 true)))
 (let (($x124 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x229 (= $x124 true)))
 (let (($x65 (and $x229 $x303)))
 (let (($x24 (and $x65 $x94)))
 (let (($x244 (and $x24 $x273)))
 (let (($x18 (and $x244 $x129)))
 (let (($x170 (and $x18 $x215)))
 (let (($x95 (and $x170 $x77)))
 (let (($x120 (and $x95 $x300)))
 (let (($x293 (and $x120 $x268)))
 (let (($x52 (and $x293 $x190)))
 (let (($x12 (and $x52 $x269)))
 (let (($x143 (and $x12 $x66)))
 (let (($x255 (and $x143 $x266)))
 (let (($x10 (and $x255 $x22)))
 (let (($x11 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x275 (and (not $x11) $x10)))
 (let (($x270 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and $x270 $x275)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x201 (and $x101 $x86)))
 (let (($x243 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let (($x227 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1305X)))
 (=> $x227 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1305X) (_ bv0 32)))))
 ))
 (let (($x36 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x227 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1304X)))
 (= $x227 false)))
 ))
 (let (($x128 (and $x36 $x243)))
 (let (($x57 (and $x128 $x201)))
 (let (($x168 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x168 $x57)))
 (let (($x67 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x188 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x67)))))
 (let (($x220 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x67)))))
 (let (($x276 (and $x220 $x141)))
 (let (($x175 (=> $x276 $x78)))
 (not $x175))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x70 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (bvule ?x70 input.dst.llvm-%n)))
 (let (($x102 (= $x256 true)))
 (let ((?x133 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x254 (bvneg ?x133)))
 (let (($x224 (= ?x254 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x224 true)))
 (let ((?x244 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x244)))
 (let (($x162 (= ?x49 input.dst.llvm-%n)))
 (let (($x172 (= $x162 true)))
 (let (($x184 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x60 (= $x184 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x6 true)))
 (let (($x234 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let ((?x296 (bvadd symbol.1 (bvmul input.ind-%var1315X (_ bv4 32)))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x296))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x296 (_ bv2 32))) ?x123)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x296 (_ bv3 32))) ?x272)))
 (let ((?x90 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1315X)))
 (let (($x250 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1315X)))
 (=> $x250 (= ?x90 ?x246)))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x38 (and (bvule (_ bv0 32) input.ind-%var1314X) (bvult input.ind-%var1314X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x250 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (= $x250 $x38))))
 ))
 (let (($x225 (and $x231 $x234)))
 (let (($x106 (= $x225 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x166 (= $x99 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x72 (bvsub ?x114 ?x40)))
 (let (($x115 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x72) (bvult ?x114 ?x72))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x177 (bvmul (_ bv4 64) ?x142)))
 (let ((?x21 ((_ extract 63 32) ?x177)))
 (let (($x89 (= (_ bv0 32) ?x21)))
 (let (($x73 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x107 (and (and (and true $x73) $x89) $x115)))
 (let (($x19 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x196 (and $x19 $x107)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x157 (=> $x144 $x196)))
 (let (($x161 (= $x157 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x147 true)))
 (let (($x23 (= $x144 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x25 (= $x156 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x35)))
 (let ((?x219 (bvand symbol.1 (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x219)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let ((?x118 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x55 (= input.memlabel-mem--symbol.1_end ?x118)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x197 (and $x121 $x55)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x79 $x197)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x110 (and $x222 $x42)))
 (let (($x50 (not $x110)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x249 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (and $x249 $x214)))
 (let (($x88 (and (not $x127) $x50)))
 (let (($x230 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x15 $x230)))
 (let (($x84 (not $x82)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x151 $x97)))
 (let (($x43 (and (not $x96) $x84)))
 (let (($x170 (and (and (and (and (and (and $x43 $x88) $x54) $x28) $x113) $x122) $x138)))
 (let (($x77 (and $x170 $x59)))
 (let (($x209 (= symbol.1 dst_symbol_addr.1)))
 (let (($x95 (and $x209 $x77)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x216 (or (bvugt input.memlabel-mem--symbol.1_begin ?x132) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x218 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x216) (or $x93 $x85)))))))
 (let (($x187 (and $x218 $x95)))
 (let (($x300 (= $x187 true)))
 (let (($x301 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x74 (= $x301 true)))
 (let (($x146 (= ?x49 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (= $x146 true)))
 (let (($x24 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x271 (= $x24 true)))
 (let (($x226 (and $x271 $x117)))
 (let (($x213 (and $x226 $x74)))
 (let (($x120 (and $x213 $x300)))
 (let (($x173 (and $x120 $x25)))
 (let (($x205 (and $x173 $x23)))
 (let (($x252 (and $x205 $x163)))
 (let (($x116 (and $x252 $x161)))
 (let (($x149 (and $x116 $x166)))
 (let (($x104 (and $x149 $x106)))
 (let (($x160 (and $x104 $x29)))
 (let (($x186 (and $x160 $x60)))
 (let (($x228 (and $x186 $x172)))
 (let (($x259 (and $x228 $x258)))
 (let (($x26 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x26) $x259)))
 (let (($x303 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x303 $x165)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x180 $x32)))
 (let (($x124 (forall ((input.ind-%var1325X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1325X)))
 (=> $x206 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1325X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1324X)))
 (= $x206 false)))
 ))
 (let (($x229 (and $x243 $x124)))
 (let (($x34 (and $x229 $x297)))
 (let (($x248 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x135 (and $x248 $x34)))
 (let (($x171 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x168 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x171)))))
 (let (($x137 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x171)))))
 (let (($x140 (and $x137 $x135)))
 (let (($x8 (=> $x140 $x102)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x70 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x256 (bvule ?x70 input.dst.llvm-%n)))
 (let (($x102 (= $x256 true)))
 (let ((?x133 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x254 (bvneg ?x133)))
 (let (($x224 (= ?x254 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x224 true)))
 (let ((?x244 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x49 (bvneg ?x244)))
 (let (($x162 (= ?x49 input.dst.llvm-%n)))
 (let (($x172 (= $x162 true)))
 (let (($x184 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x60 (= $x184 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x29 (= $x6 true)))
 (let (($x234 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let ((?x296 (bvadd symbol.1 (bvmul input.ind-%var1315X (_ bv4 32)))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x296))))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x296 (_ bv2 32))) ?x123)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x296 (_ bv3 32))) ?x272)))
 (let ((?x90 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1315X)))
 (let (($x250 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1315X)))
 (=> $x250 (= ?x90 ?x246)))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x38 (and (bvule (_ bv0 32) input.ind-%var1314X) (bvult input.ind-%var1314X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x250 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (= $x250 $x38))))
 ))
 (let (($x225 (and $x231 $x234)))
 (let (($x106 (= $x225 true)))
 (let (($x99 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x166 (= $x99 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x72 (bvsub ?x114 ?x40)))
 (let (($x115 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x72) (bvult ?x114 ?x72))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x177 (bvmul (_ bv4 64) ?x142)))
 (let ((?x21 ((_ extract 63 32) ?x177)))
 (let (($x89 (= (_ bv0 32) ?x21)))
 (let (($x73 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x107 (and (and (and true $x73) $x89) $x115)))
 (let (($x19 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x196 (and $x19 $x107)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x157 (=> $x144 $x196)))
 (let (($x161 (= $x157 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x163 (= $x147 true)))
 (let (($x23 (= $x144 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x25 (= $x156 true)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x35)))
 (let ((?x219 (bvand symbol.1 (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x219)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let ((?x118 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x55 (= input.memlabel-mem--symbol.1_end ?x118)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x197 (and $x121 $x55)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x79 $x197)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x110 (and $x222 $x42)))
 (let (($x50 (not $x110)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x249 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (and $x249 $x214)))
 (let (($x88 (and (not $x127) $x50)))
 (let (($x230 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x15 $x230)))
 (let (($x84 (not $x82)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x151 $x97)))
 (let (($x43 (and (not $x96) $x84)))
 (let (($x170 (and (and (and (and (and (and $x43 $x88) $x54) $x28) $x113) $x122) $x138)))
 (let (($x77 (and $x170 $x59)))
 (let (($x209 (= symbol.1 dst_symbol_addr.1)))
 (let (($x95 (and $x209 $x77)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x216 (or (bvugt input.memlabel-mem--symbol.1_begin ?x132) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x218 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x216) (or $x93 $x85)))))))
 (let (($x187 (and $x218 $x95)))
 (let (($x300 (= $x187 true)))
 (let (($x301 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x74 (= $x301 true)))
 (let (($x146 (= ?x49 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x117 (= $x146 true)))
 (let (($x24 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x271 (= $x24 true)))
 (let (($x226 (and $x271 $x117)))
 (let (($x213 (and $x226 $x74)))
 (let (($x120 (and $x213 $x300)))
 (let (($x173 (and $x120 $x25)))
 (let (($x205 (and $x173 $x23)))
 (let (($x252 (and $x205 $x163)))
 (let (($x116 (and $x252 $x161)))
 (let (($x149 (and $x116 $x166)))
 (let (($x104 (and $x149 $x106)))
 (let (($x160 (and $x104 $x29)))
 (let (($x186 (and $x160 $x60)))
 (let (($x228 (and $x186 $x172)))
 (let (($x259 (and $x228 $x258)))
 (let (($x26 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x165 (and (not $x26) $x259)))
 (let (($x303 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (and $x303 $x165)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x297 (and $x180 $x32)))
 (let (($x124 (forall ((input.ind-%var1325X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1325X)))
 (=> $x206 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1325X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1324X)))
 (= $x206 false)))
 ))
 (let (($x229 (and $x243 $x124)))
 (let (($x34 (and $x229 $x297)))
 (let (($x248 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x135 (and $x248 $x34)))
 (let (($x171 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x168 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x171)))))
 (let (($x137 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x171)))))
 (let (($x140 (and $x137 $x135)))
 (let (($x8 (=> $x140 $x102)))
 (not $x8))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x289 (forall ((input.ind-%var1359X (_ BitVec 32)) )(let ((?x190 (bvadd symbol.1 (bvmul input.ind-%var1359X (_ bv4 32)))))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x171 (bvadd ?x114 (_ bv3 32))))
 (let ((?x131 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x114 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x239 (store ?x131 (bvadd ?x114 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x237 (store ?x239 (bvadd ?x114 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x100 (store ?x237 ?x171 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x185 (concat (select ?x100 (bvadd ?x190 (_ bv2 32))) (concat (select ?x100 (bvadd ?x190 (_ bv1 32))) (select ?x100 ?x190)))))
 (let ((?x95 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1359X)))
 (let (($x17 (= input.ind-%var1359X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x264 (= (ite $x17 input.spec-%var-i-0.L3%6%bbentry ?x95) (concat (select ?x100 (bvadd ?x190 (_ bv3 32))) ?x185))))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1359X)))
 (let (($x9 (or $x118 $x17)))
 (=> $x9 $x264))))))))))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1358X (_ BitVec 32)) )(let (($x215 (bvule (_ bv0 32) input.ind-%var1358X)))
 (let (($x139 (and $x215 (bvult input.ind-%var1358X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x17 (= input.ind-%var1358X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1358X)))
 (let (($x9 (or $x118 $x17)))
 (= $x9 $x139)))))))
 ))
 (let (($x261 (and $x251 $x289)))
 (let (($x263 (= $x261 true)))
 (let ((?x305 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x305)))
 (let (($x266 (= ?x22 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x266 true)))
 (let (($x143 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x275 (= $x143 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x64)))
 (let ((?x204 (bvand symbol.1 (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x204)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x102 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x8 (= input.memlabel-mem--symbol.1_end ?x102)))
 (let (($x256 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x37 (and $x256 $x8)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (and $x70 $x37)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x259 (and $x224 $x258)))
 (let (($x165 (not $x259)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x254 (and $x228 $x133)))
 (let (($x297 (and (not $x254) $x165)))
 (let (($x184 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x160 $x184)))
 (let (($x186 (not $x60)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x104 $x6)))
 (let (($x172 (and (not $x29) $x186)))
 (let (($x27 (and (and (and (and (and (and $x172 $x297) $x34) $x140) $x295) $x130) $x269)))
 (let (($x267 (and $x27 $x181)))
 (let (($x276 (= symbol.1 dst_symbol_addr.1)))
 (let (($x203 (and $x276 $x267)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x174 (or (bvugt input.memlabel-mem--symbol.1_begin ?x92) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x174) (or $x123 $x272)))))))
 (let (($x112 (and $x106 $x203)))
 (let (($x292 (= $x112 true)))
 (let (($x38 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x152 (= $x38 true)))
 (let (($x250 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x274 (= $x250 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x99 true)))
 (let (($x196 (forall ((input.ind-%var1335X (_ BitVec 32)) )(let ((?x190 (bvadd symbol.1 (bvmul input.ind-%var1335X (_ bv4 32)))))
 (let ((?x21 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x190))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv2 32))) ?x21)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv3 32))) ?x202)))
 (let ((?x95 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1335X)))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1335X)))
 (=> $x118 (= ?x95 ?x293)))))))))
 ))
 (let (($x170 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let (($x215 (bvule (_ bv0 32) input.ind-%var1334X)))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1334X)))
 (= $x118 (and $x215 (bvult input.ind-%var1334X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x157 (and $x170 $x196)))
 (let (($x161 (= $x157 true)))
 (let (($x210 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x28 (= $x210 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x249 (bvsub ?x114 ?x40)))
 (let (($x222 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x249) (bvult ?x114 ?x249))))
 (let ((?x230 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvmul (_ bv4 64) ?x230)))
 (let ((?x84 ((_ extract 63 32) ?x82)))
 (let (($x43 (= (_ bv0 32) ?x84)))
 (let (($x7 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x50 (and (and (and true $x7) $x43) $x222)))
 (let (($x83 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x88 (and $x83 $x50)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (=> $x58 $x88)))
 (let (($x54 (= $x47 true)))
 (let (($x44 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x192 (= $x44 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x299 (= $x93 true)))
 (let (($x216 (= $x58 true)))
 (let ((?x213 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x213)))
 (let (($x132 (= ?x233 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (= $x132 true)))
 (let (($x155 (= ?x233 input.dst.llvm-%n)))
 (let (($x150 (= $x155 true)))
 (let (($x191 (and $x150 $x208)))
 (let (($x33 (and $x191 $x216)))
 (let (($x85 (and $x33 $x299)))
 (let (($x236 (and $x85 $x192)))
 (let (($x129 (and $x236 $x54)))
 (let (($x18 (and $x129 $x28)))
 (let (($x116 (and $x18 $x161)))
 (let (($x149 (and $x116 $x166)))
 (let (($x136 (and $x149 $x274)))
 (let (($x231 (and $x136 $x152)))
 (let (($x66 (and $x231 $x292)))
 (let (($x86 (and $x66 $x275)))
 (let (($x134 (and $x86 $x255)))
 (let (($x301 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (and (not $x301) $x134)))
 (let (($x117 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and $x117 $x10)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x125 (and $x244 $x201)))
 (let (($x24 (forall ((input.ind-%var1345X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1345X)))
 (=> $x30 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1345X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1344X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1344X)))
 (= $x30 false)))
 ))
 (let (($x271 (and $x124 $x24)))
 (let (($x298 (and $x271 $x125)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x291 (and $x36 $x298)))
 (let (($x220 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x248 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x220)))))
 (let (($x51 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x220)))))
 (let (($x57 (and $x51 $x291)))
 (let (($x290 (=> $x57 $x263)))
 (not $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x289 (forall ((input.ind-%var1359X (_ BitVec 32)) )(let ((?x190 (bvadd symbol.1 (bvmul input.ind-%var1359X (_ bv4 32)))))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x171 (bvadd ?x114 (_ bv3 32))))
 (let ((?x131 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x114 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x239 (store ?x131 (bvadd ?x114 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x237 (store ?x239 (bvadd ?x114 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x100 (store ?x237 ?x171 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x185 (concat (select ?x100 (bvadd ?x190 (_ bv2 32))) (concat (select ?x100 (bvadd ?x190 (_ bv1 32))) (select ?x100 ?x190)))))
 (let ((?x95 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1359X)))
 (let (($x17 (= input.ind-%var1359X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x264 (= (ite $x17 input.spec-%var-i-0.L3%6%bbentry ?x95) (concat (select ?x100 (bvadd ?x190 (_ bv3 32))) ?x185))))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1359X)))
 (let (($x9 (or $x118 $x17)))
 (=> $x9 $x264))))))))))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1358X (_ BitVec 32)) )(let (($x215 (bvule (_ bv0 32) input.ind-%var1358X)))
 (let (($x139 (and $x215 (bvult input.ind-%var1358X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x17 (= input.ind-%var1358X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1358X)))
 (let (($x9 (or $x118 $x17)))
 (= $x9 $x139)))))))
 ))
 (let (($x261 (and $x251 $x289)))
 (let (($x263 (= $x261 true)))
 (let ((?x305 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x22 (bvneg ?x305)))
 (let (($x266 (= ?x22 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x266 true)))
 (let (($x143 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x275 (= $x143 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x64)))
 (let ((?x204 (bvand symbol.1 (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x204)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x102 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x8 (= input.memlabel-mem--symbol.1_end ?x102)))
 (let (($x256 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x37 (and $x256 $x8)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (and $x70 $x37)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x259 (and $x224 $x258)))
 (let (($x165 (not $x259)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x254 (and $x228 $x133)))
 (let (($x297 (and (not $x254) $x165)))
 (let (($x184 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x160 $x184)))
 (let (($x186 (not $x60)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x104 $x6)))
 (let (($x172 (and (not $x29) $x186)))
 (let (($x27 (and (and (and (and (and (and $x172 $x297) $x34) $x140) $x295) $x130) $x269)))
 (let (($x267 (and $x27 $x181)))
 (let (($x276 (= symbol.1 dst_symbol_addr.1)))
 (let (($x203 (and $x276 $x267)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x174 (or (bvugt input.memlabel-mem--symbol.1_begin ?x92) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x174) (or $x123 $x272)))))))
 (let (($x112 (and $x106 $x203)))
 (let (($x292 (= $x112 true)))
 (let (($x38 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x152 (= $x38 true)))
 (let (($x250 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x274 (= $x250 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x166 (= $x99 true)))
 (let (($x196 (forall ((input.ind-%var1335X (_ BitVec 32)) )(let ((?x190 (bvadd symbol.1 (bvmul input.ind-%var1335X (_ bv4 32)))))
 (let ((?x21 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x190))))
 (let ((?x202 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv2 32))) ?x21)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x190 (_ bv3 32))) ?x202)))
 (let ((?x95 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1335X)))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1335X)))
 (=> $x118 (= ?x95 ?x293)))))))))
 ))
 (let (($x170 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let (($x215 (bvule (_ bv0 32) input.ind-%var1334X)))
 (let (($x118 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1334X)))
 (= $x118 (and $x215 (bvult input.ind-%var1334X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x157 (and $x170 $x196)))
 (let (($x161 (= $x157 true)))
 (let (($x210 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x28 (= $x210 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x249 (bvsub ?x114 ?x40)))
 (let (($x222 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x249) (bvult ?x114 ?x249))))
 (let ((?x230 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x82 (bvmul (_ bv4 64) ?x230)))
 (let ((?x84 ((_ extract 63 32) ?x82)))
 (let (($x43 (= (_ bv0 32) ?x84)))
 (let (($x7 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x50 (and (and (and true $x7) $x43) $x222)))
 (let (($x83 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x88 (and $x83 $x50)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (=> $x58 $x88)))
 (let (($x54 (= $x47 true)))
 (let (($x44 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x192 (= $x44 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x299 (= $x93 true)))
 (let (($x216 (= $x58 true)))
 (let ((?x213 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x213)))
 (let (($x132 (= ?x233 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (= $x132 true)))
 (let (($x155 (= ?x233 input.dst.llvm-%n)))
 (let (($x150 (= $x155 true)))
 (let (($x191 (and $x150 $x208)))
 (let (($x33 (and $x191 $x216)))
 (let (($x85 (and $x33 $x299)))
 (let (($x236 (and $x85 $x192)))
 (let (($x129 (and $x236 $x54)))
 (let (($x18 (and $x129 $x28)))
 (let (($x116 (and $x18 $x161)))
 (let (($x149 (and $x116 $x166)))
 (let (($x136 (and $x149 $x274)))
 (let (($x231 (and $x136 $x152)))
 (let (($x66 (and $x231 $x292)))
 (let (($x86 (and $x66 $x275)))
 (let (($x134 (and $x86 $x255)))
 (let (($x301 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x10 (and (not $x301) $x134)))
 (let (($x117 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x201 (and $x117 $x10)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x125 (and $x244 $x201)))
 (let (($x24 (forall ((input.ind-%var1345X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1345X)))
 (=> $x30 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1345X) (_ bv0 32)))))
 ))
 (let (($x124 (forall ((input.ind-%var1344X (_ BitVec 32)) )(let (($x30 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1344X)))
 (= $x30 false)))
 ))
 (let (($x271 (and $x124 $x24)))
 (let (($x298 (and $x271 $x125)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x291 (and $x36 $x298)))
 (let (($x220 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x248 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x220)))))
 (let (($x51 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x220)))))
 (let (($x57 (and $x51 $x291)))
 (let (($x290 (=> $x57 $x263)))
 (not $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x69)))
 (let (($x200 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (not $x200)))
 (let (($x167 (or $x189 $x131)))
 (let (($x153 (= $x167 true)))
 (let ((?x291 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x291)))
 (let (($x17 (= ?x57 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x17 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x266 (bvneg ?x22)))
 (let (($x201 (= ?x266 input.dst.llvm-%n)))
 (let (($x125 (= $x201 true)))
 (let (($x255 (= ?x266 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (= $x255 true)))
 (let (($x143 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x275 (= $x143 true)))
 (let (($x112 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x292 (= $x112 true)))
 (let (($x181 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x267 (= $x181 true)))
 (let (($x269 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (= $x269 true)))
 (let (($x154 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let ((?x128 (bvadd symbol.1 (bvmul input.ind-%var1369X (_ bv4 32)))))
 (let ((?x140 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x128))))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv2 32))) ?x140)))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv3 32))) ?x256)))
 (let ((?x12 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1369X)))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1369X)))
 (=> $x92 (= ?x12 ?x37)))))))))
 ))
 (let (($x235 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1368X) (bvult input.ind-%var1368X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1368X)))
 (= $x92 $x272))))
 ))
 (let (($x130 (and $x235 $x154)))
 (let (($x198 (= $x130 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x231 (= $x152 true)))
 (let (($x274 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x274 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x166 (= $x99 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x142)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x89)))
 (let ((?x268 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x268)))
 (let ((?x300 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x73 (= input.memlabel-mem--symbol.1_end ?x300)))
 (let (($x170 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x190 (and $x170 $x73)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x138 $x190)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x54 $x129)))
 (let (($x28 (not $x210)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x50 $x88)))
 (let (($x118 (and (not $x47) $x28)))
 (let (($x214 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x110 $x214)))
 (let (($x127 (not $x249)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x82 $x84)))
 (let (($x222 (and (not $x43) $x127)))
 (let (($x107 (and (and (and (and (and (and $x222 $x118) $x215) $x219) $x72) $x163) $x52)))
 (let (($x196 (and $x107 $x177)))
 (let (($x294 (= symbol.1 dst_symbol_addr.1)))
 (let (($x157 (and $x294 $x196)))
 (let (($x209 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x236 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x230 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x236) (or $x151 $x209)))))))
 (let (($x161 (and $x230 $x157)))
 (let (($x116 (= $x161 true)))
 (let (($x149 (and $x116 $x166)))
 (let (($x38 (and $x149 $x136)))
 (let (($x296 (and $x38 $x231)))
 (let (($x204 (and $x296 $x198)))
 (let (($x64 (and $x204 $x27)))
 (let (($x203 (and $x64 $x267)))
 (let (($x66 (and $x203 $x292)))
 (let (($x86 (and $x66 $x275)))
 (let (($x10 (and $x86 $x134)))
 (let (($x298 (and $x10 $x125)))
 (let (($x103 (and $x298 $x9)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (and $x191 $x103)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x139 (and $x150 $x119)))
 (let (($x213 (forall ((input.ind-%var1379X (_ BitVec 32)) )(let (($x211 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1379X)))
 (=> $x211 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1379X) (_ bv0 32)))))
 ))
 (let (($x24 (forall ((input.ind-%var1378X (_ BitVec 32)) )(let (($x211 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1378X)))
 (= $x211 false)))
 ))
 (let (($x233 (and $x24 $x213)))
 (let (($x240 (and $x233 $x139)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x251 (and $x243 $x240)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let (($x137 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x36 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x137)))))
 (let (($x223 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x137)))))
 (let (($x253 (and $x223 $x251)))
 (let (($x239 (=> $x253 $x153)))
 (not $x239)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x131 (not $x69)))
 (let (($x200 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (not $x200)))
 (let (($x167 (or $x189 $x131)))
 (let (($x153 (= $x167 true)))
 (let ((?x291 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x291)))
 (let (($x17 (= ?x57 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x17 true)))
 (let ((?x22 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x266 (bvneg ?x22)))
 (let (($x201 (= ?x266 input.dst.llvm-%n)))
 (let (($x125 (= $x201 true)))
 (let (($x255 (= ?x266 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (= $x255 true)))
 (let (($x143 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x275 (= $x143 true)))
 (let (($x112 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x292 (= $x112 true)))
 (let (($x181 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x267 (= $x181 true)))
 (let (($x269 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (= $x269 true)))
 (let (($x154 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let ((?x128 (bvadd symbol.1 (bvmul input.ind-%var1369X (_ bv4 32)))))
 (let ((?x140 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x128))))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv2 32))) ?x140)))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x128 (_ bv3 32))) ?x256)))
 (let ((?x12 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1369X)))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1369X)))
 (=> $x92 (= ?x12 ?x37)))))))))
 ))
 (let (($x235 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1368X) (bvult input.ind-%var1368X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x92 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1368X)))
 (= $x92 $x272))))
 ))
 (let (($x130 (and $x235 $x154)))
 (let (($x198 (= $x130 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x231 (= $x152 true)))
 (let (($x274 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x274 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x166 (= $x99 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x142)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x89)))
 (let ((?x268 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x268)))
 (let ((?x300 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x73 (= input.memlabel-mem--symbol.1_end ?x300)))
 (let (($x170 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x190 (and $x170 $x73)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x138 $x190)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x54 $x129)))
 (let (($x28 (not $x210)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x50 $x88)))
 (let (($x118 (and (not $x47) $x28)))
 (let (($x214 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x110 $x214)))
 (let (($x127 (not $x249)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x82 $x84)))
 (let (($x222 (and (not $x43) $x127)))
 (let (($x107 (and (and (and (and (and (and $x222 $x118) $x215) $x219) $x72) $x163) $x52)))
 (let (($x196 (and $x107 $x177)))
 (let (($x294 (= symbol.1 dst_symbol_addr.1)))
 (let (($x157 (and $x294 $x196)))
 (let (($x209 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x236 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x230 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x236) (or $x151 $x209)))))))
 (let (($x161 (and $x230 $x157)))
 (let (($x116 (= $x161 true)))
 (let (($x149 (and $x116 $x166)))
 (let (($x38 (and $x149 $x136)))
 (let (($x296 (and $x38 $x231)))
 (let (($x204 (and $x296 $x198)))
 (let (($x64 (and $x204 $x27)))
 (let (($x203 (and $x64 $x267)))
 (let (($x66 (and $x203 $x292)))
 (let (($x86 (and $x66 $x275)))
 (let (($x10 (and $x86 $x134)))
 (let (($x298 (and $x10 $x125)))
 (let (($x103 (and $x298 $x9)))
 (let (($x191 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (and $x191 $x103)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x139 (and $x150 $x119)))
 (let (($x213 (forall ((input.ind-%var1379X (_ BitVec 32)) )(let (($x211 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1379X)))
 (=> $x211 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1379X) (_ bv0 32)))))
 ))
 (let (($x24 (forall ((input.ind-%var1378X (_ BitVec 32)) )(let (($x211 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1378X)))
 (= $x211 false)))
 ))
 (let (($x233 (and $x24 $x213)))
 (let (($x240 (and $x233 $x139)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x251 (and $x243 $x240)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let (($x137 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x36 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x137)))))
 (let (($x223 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x137)))))
 (let (($x253 (and $x223 $x251)))
 (let (($x239 (=> $x253 $x153)))
 (not $x239)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x180 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x270 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x257 (bvmul (_ bv4294967295 32) ?x270)))
 (let ((?x229 (bvneg ?x257)))
 (let (($x206 (= ?x229 ?x180)))
 (let (($x48 (= $x206 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x265 (bvneg ?x264)))
 (let (($x289 (= ?x265 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x289 true)))
 (let (($x285 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x285 true)))
 (let (($x288 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x282 (= $x288 true)))
 (let (($x31 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (= $x31 true)))
 (let (($x45 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (= $x45 true)))
 (let (($x234 (forall ((input.ind-%var1389X (_ BitVec 32)) )(let ((?x224 (bvadd symbol.1 (bvmul input.ind-%var1389X (_ bv4 32)))))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x224))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv2 32))) ?x60)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv3 32))) ?x254)))
 (let ((?x247 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1389X)))
 (let (($x9 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1389X)))
 (=> $x9 (= ?x247 ?x78)))))))))
 ))
 (let (($x167 (forall ((input.ind-%var1388X (_ BitVec 32)) )(let (($x189 (and (bvule (_ bv0 32) input.ind-%var1388X) (bvult input.ind-%var1388X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x9 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1388X)))
 (= $x9 $x189))))
 ))
 (let (($x165 (and $x167 $x234)))
 (let (($x273 (= $x165 true)))
 (let (($x125 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x298 (= $x125 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x292 (bvsub ?x114 ?x40)))
 (let (($x86 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x292) (bvult ?x114 ?x292))))
 (let ((?x181 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x267 (bvmul (_ bv4 64) ?x181)))
 (let ((?x203 ((_ extract 63 32) ?x267)))
 (let (($x112 (= (_ bv0 32) ?x203)))
 (let (($x27 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x266 (and (and (and true $x27) $x112) $x86)))
 (let (($x154 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x255 (and $x154 $x266)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (=> $x212 $x255)))
 (let (($x10 (= $x134 true)))
 (let (($x140 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x256 (= $x140 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x135 (= $x101 true)))
 (let (($x227 (= $x212 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x92)))
 (let ((?x231 (bvand symbol.1 (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x231)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x149 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x250 (= input.memlabel-mem--symbol.1_end ?x149)))
 (let (($x99 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x274 (and $x99 $x250)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x116 $x274)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (and $x115 $x89)))
 (let (($x107 (not $x52)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x163 (and $x293 $x268)))
 (let (($x177 (and (not $x163) $x107)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x170 $x95)))
 (let (($x73 (not $x300)))
 (let (($x202 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x219 $x202)))
 (let (($x72 (and (not $x138) $x73)))
 (let (($x104 (and (and (and (and (and (and $x72 $x177) $x196) $x161) $x136) $x152) $x296)))
 (let (($x297 (and $x104 $x53)))
 (let (($x110 (= symbol.1 dst_symbol_addr.1)))
 (let (($x128 (and $x110 $x297)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x88 (or (bvugt input.memlabel-mem--symbol.1_begin ?x127) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x88) (or $x129 $x210)))))))
 (let (($x102 (and $x122 $x128)))
 (let (($x8 (= $x102 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x7)))
 (let (($x294 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (= $x294 true)))
 (let (($x230 (= ?x42 input.dst.llvm-%n)))
 (let (($x33 (= $x230 true)))
 (let (($x84 (and $x33 $x82)))
 (let (($x172 (and $x84 $x8)))
 (let (($x70 (and $x172 $x227)))
 (let (($x34 (and $x70 $x135)))
 (let (($x37 (and $x34 $x256)))
 (let (($x201 (and $x37 $x10)))
 (let (($x291 (and $x201 $x298)))
 (let (($x301 (and $x291 $x273)))
 (let (($x237 (and $x301 $x80)))
 (let (($x148 (and $x237 $x100)))
 (let (($x279 (and $x148 $x282)))
 (let (($x245 (and $x279 $x185)))
 (let (($x263 (and $x245 $x261)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and (not $x97) $x263)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (and $x83 $x126)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x176 (and $x63 $x62)))
 (let (($x44 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1399X)))
 (=> $x49 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1399X) (_ bv0 32)))))
 ))
 (let (($x213 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1398X)))
 (= $x49 false)))
 ))
 (let (($x192 (and $x213 $x44)))
 (let (($x90 (and $x192 $x176)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x55 (and $x124 $x90)))
 (let (($x51 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x243 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x51)))))
 (let (($x68 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x51)))))
 (let (($x187 (and $x68 $x55)))
 (let (($x302 (=> $x187 $x48)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x180 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x270 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x257 (bvmul (_ bv4294967295 32) ?x270)))
 (let ((?x229 (bvneg ?x257)))
 (let (($x206 (= ?x229 ?x180)))
 (let (($x48 (= $x206 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x265 (bvneg ?x264)))
 (let (($x289 (= ?x265 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x289 true)))
 (let (($x285 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x285 true)))
 (let (($x288 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x282 (= $x288 true)))
 (let (($x31 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (= $x31 true)))
 (let (($x45 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (= $x45 true)))
 (let (($x234 (forall ((input.ind-%var1389X (_ BitVec 32)) )(let ((?x224 (bvadd symbol.1 (bvmul input.ind-%var1389X (_ bv4 32)))))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x224))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv2 32))) ?x60)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x224 (_ bv3 32))) ?x254)))
 (let ((?x247 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1389X)))
 (let (($x9 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1389X)))
 (=> $x9 (= ?x247 ?x78)))))))))
 ))
 (let (($x167 (forall ((input.ind-%var1388X (_ BitVec 32)) )(let (($x189 (and (bvule (_ bv0 32) input.ind-%var1388X) (bvult input.ind-%var1388X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x9 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1388X)))
 (= $x9 $x189))))
 ))
 (let (($x165 (and $x167 $x234)))
 (let (($x273 (= $x165 true)))
 (let (($x125 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x298 (= $x125 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x292 (bvsub ?x114 ?x40)))
 (let (($x86 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x292) (bvult ?x114 ?x292))))
 (let ((?x181 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x267 (bvmul (_ bv4 64) ?x181)))
 (let ((?x203 ((_ extract 63 32) ?x267)))
 (let (($x112 (= (_ bv0 32) ?x203)))
 (let (($x27 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x266 (and (and (and true $x27) $x112) $x86)))
 (let (($x154 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x255 (and $x154 $x266)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (=> $x212 $x255)))
 (let (($x10 (= $x134 true)))
 (let (($x140 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x256 (= $x140 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x135 (= $x101 true)))
 (let (($x227 (= $x212 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x92)))
 (let ((?x231 (bvand symbol.1 (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x231)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x149 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x250 (= input.memlabel-mem--symbol.1_end ?x149)))
 (let (($x99 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x274 (and $x99 $x250)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x116 $x274)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (and $x115 $x89)))
 (let (($x107 (not $x52)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x163 (and $x293 $x268)))
 (let (($x177 (and (not $x163) $x107)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x170 $x95)))
 (let (($x73 (not $x300)))
 (let (($x202 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x219 $x202)))
 (let (($x72 (and (not $x138) $x73)))
 (let (($x104 (and (and (and (and (and (and $x72 $x177) $x196) $x161) $x136) $x152) $x296)))
 (let (($x297 (and $x104 $x53)))
 (let (($x110 (= symbol.1 dst_symbol_addr.1)))
 (let (($x128 (and $x110 $x297)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x88 (or (bvugt input.memlabel-mem--symbol.1_begin ?x127) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x88) (or $x129 $x210)))))))
 (let (($x102 (and $x122 $x128)))
 (let (($x8 (= $x102 true)))
 (let ((?x7 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x7)))
 (let (($x294 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (= $x294 true)))
 (let (($x230 (= ?x42 input.dst.llvm-%n)))
 (let (($x33 (= $x230 true)))
 (let (($x84 (and $x33 $x82)))
 (let (($x172 (and $x84 $x8)))
 (let (($x70 (and $x172 $x227)))
 (let (($x34 (and $x70 $x135)))
 (let (($x37 (and $x34 $x256)))
 (let (($x201 (and $x37 $x10)))
 (let (($x291 (and $x201 $x298)))
 (let (($x301 (and $x291 $x273)))
 (let (($x237 (and $x301 $x80)))
 (let (($x148 (and $x237 $x100)))
 (let (($x279 (and $x148 $x282)))
 (let (($x245 (and $x279 $x185)))
 (let (($x263 (and $x245 $x261)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and (not $x97) $x263)))
 (let (($x83 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (and $x83 $x126)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x176 (and $x63 $x62)))
 (let (($x44 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1399X)))
 (=> $x49 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1399X) (_ bv0 32)))))
 ))
 (let (($x213 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let (($x49 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1398X)))
 (= $x49 false)))
 ))
 (let (($x192 (and $x213 $x44)))
 (let (($x90 (and $x192 $x176)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x55 (and $x124 $x90)))
 (let (($x51 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x243 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x51)))))
 (let (($x68 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x51)))))
 (let (($x187 (and $x68 $x55)))
 (let (($x302 (=> $x187 $x48)))
 (not $x302)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x251 (bvule ?x240 (_ bv399 32))))
 (let (($x29 (= $x251 true)))
 (let ((?x303 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x303)))
 (let (($x169 (= ?x158 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x169 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x139 (= $x119 true)))
 (let (($x93 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x41 (= $x93 true)))
 (let (($x211 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x94 (= $x211 true)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x206)))
 (let ((?x229 (bvand symbol.1 (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x229)))
 (let ((?x270 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x270)))
 (let ((?x176 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x90 (= input.memlabel-mem--symbol.1_end ?x176)))
 (let (($x62 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x55 (and $x62 $x90)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x126 $x55)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x185 (and $x279 $x285)))
 (let (($x245 (not $x185)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x282 (and $x148 $x288)))
 (let (($x265 (and (not $x282) $x245)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x301 $x45)))
 (let (($x237 (not $x80)))
 (let (($x165 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (and $x234 $x165)))
 (let (($x100 (and (not $x273) $x237)))
 (let (($x103 (and (and (and (and (and (and $x100 $x265) $x289) $x263) $x187) $x257) $x180)))
 (let (($x87 (and $x103 $x48)))
 (let (($x167 (= symbol.1 dst_symbol_addr.1)))
 (let (($x117 (and $x167 $x87)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x225 (or (bvugt input.memlabel-mem--symbol.1_begin ?x32) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x259 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x225) (or $x133 $x184)))))))
 (let (($x208 (and $x259 $x117)))
 (let (($x233 (= $x208 true)))
 (let (($x9 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x200 (= $x9 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (= $x125 true)))
 (let (($x255 (forall ((input.ind-%var1409X (_ BitVec 32)) )(let ((?x305 (bvadd symbol.1 (bvmul input.ind-%var1409X (_ bv4 32)))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x305))))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv2 32))) ?x203)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv3 32))) ?x66)))
 (let ((?x128 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1409X)))
 (let (($x149 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1409X)))
 (=> $x149 (= ?x128 ?x275)))))))))
 ))
 (let (($x104 (forall ((input.ind-%var1408X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var1408X) (bvult input.ind-%var1408X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x149 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1408X)))
 (= $x149 $x231))))
 ))
 (let (($x134 (and $x104 $x255)))
 (let (($x10 (= $x134 true)))
 (let ((?x177 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x177)))
 (let (($x161 (= ?x123 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x246 (= $x161 true)))
 (let (($x196 (= ?x123 input.dst.llvm-%n)))
 (let (($x272 (= $x196 true)))
 (let (($x115 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x89 (= $x115 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x202 (bvsub ?x114 ?x40)))
 (let (($x95 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x202) (bvult ?x114 ?x202))))
 (let ((?x122 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x199 (bvmul (_ bv4 64) ?x122)))
 (let ((?x110 ((_ extract 63 32) ?x199)))
 (let (($x219 (= (_ bv0 32) ?x110)))
 (let (($x81 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x72 (and (and (and true $x81) $x219) $x95)))
 (let (($x129 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x293 (and $x129 $x72)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x268 (=> $x144 $x293)))
 (let (($x163 (= $x268 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x50 (= $x222 true)))
 (let (($x21 (= $x144 true)))
 (let (($x88 (and $x21 $x50)))
 (let (($x142 (and $x88 $x163)))
 (let (($x52 (and $x142 $x89)))
 (let (($x157 (and $x52 $x272)))
 (let (($x116 (and $x157 $x246)))
 (let (($x201 (and $x116 $x10)))
 (let (($x291 (and $x201 $x298)))
 (let (($x253 (and $x291 $x200)))
 (let (($x150 (and $x253 $x233)))
 (let (($x91 (and $x150 $x94)))
 (let (($x57 (and $x91 $x41)))
 (let (($x276 (and $x57 $x139)))
 (let (($x226 (and $x276 $x61)))
 (let (($x249 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and (not $x249) $x226)))
 (let (($x84 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and $x84 $x244)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x30 (and $x33 $x146)))
 (let (($x7 (forall ((input.ind-%var1419X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1419X)))
 (=> $x132 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1419X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var1418X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1418X)))
 (= $x132 false)))
 ))
 (let (($x42 (and $x44 $x7)))
 (let (($x106 (and $x42 $x30)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x174 (and $x24 $x106)))
 (let (($x223 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x223)))))
 (let (($x238 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x223)))))
 (let (($x17 (and $x238 $x174)))
 (let (($x239 (=> $x17 $x29)))
 (not $x239))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x251 (bvule ?x240 (_ bv399 32))))
 (let (($x29 (= $x251 true)))
 (let ((?x303 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x303)))
 (let (($x169 (= ?x158 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x61 (= $x169 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x139 (= $x119 true)))
 (let (($x93 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x41 (= $x93 true)))
 (let (($x211 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x94 (= $x211 true)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x206)))
 (let ((?x229 (bvand symbol.1 (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x229)))
 (let ((?x270 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x257 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x270)))
 (let ((?x176 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x90 (= input.memlabel-mem--symbol.1_end ?x176)))
 (let (($x62 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x55 (and $x62 $x90)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x126 $x55)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x185 (and $x279 $x285)))
 (let (($x245 (not $x185)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x282 (and $x148 $x288)))
 (let (($x265 (and (not $x282) $x245)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x301 $x45)))
 (let (($x237 (not $x80)))
 (let (($x165 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (and $x234 $x165)))
 (let (($x100 (and (not $x273) $x237)))
 (let (($x103 (and (and (and (and (and (and $x100 $x265) $x289) $x263) $x187) $x257) $x180)))
 (let (($x87 (and $x103 $x48)))
 (let (($x167 (= symbol.1 dst_symbol_addr.1)))
 (let (($x117 (and $x167 $x87)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x225 (or (bvugt input.memlabel-mem--symbol.1_begin ?x32) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x259 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x225) (or $x133 $x184)))))))
 (let (($x208 (and $x259 $x117)))
 (let (($x233 (= $x208 true)))
 (let (($x9 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x200 (= $x9 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x298 (= $x125 true)))
 (let (($x255 (forall ((input.ind-%var1409X (_ BitVec 32)) )(let ((?x305 (bvadd symbol.1 (bvmul input.ind-%var1409X (_ bv4 32)))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x305))))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv2 32))) ?x203)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x305 (_ bv3 32))) ?x66)))
 (let ((?x128 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1409X)))
 (let (($x149 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1409X)))
 (=> $x149 (= ?x128 ?x275)))))))))
 ))
 (let (($x104 (forall ((input.ind-%var1408X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var1408X) (bvult input.ind-%var1408X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x149 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1408X)))
 (= $x149 $x231))))
 ))
 (let (($x134 (and $x104 $x255)))
 (let (($x10 (= $x134 true)))
 (let ((?x177 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x177)))
 (let (($x161 (= ?x123 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x246 (= $x161 true)))
 (let (($x196 (= ?x123 input.dst.llvm-%n)))
 (let (($x272 (= $x196 true)))
 (let (($x115 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x89 (= $x115 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x202 (bvsub ?x114 ?x40)))
 (let (($x95 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x202) (bvult ?x114 ?x202))))
 (let ((?x122 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x199 (bvmul (_ bv4 64) ?x122)))
 (let ((?x110 ((_ extract 63 32) ?x199)))
 (let (($x219 (= (_ bv0 32) ?x110)))
 (let (($x81 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x72 (and (and (and true $x81) $x219) $x95)))
 (let (($x129 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x293 (and $x129 $x72)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x268 (=> $x144 $x293)))
 (let (($x163 (= $x268 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x50 (= $x222 true)))
 (let (($x21 (= $x144 true)))
 (let (($x88 (and $x21 $x50)))
 (let (($x142 (and $x88 $x163)))
 (let (($x52 (and $x142 $x89)))
 (let (($x157 (and $x52 $x272)))
 (let (($x116 (and $x157 $x246)))
 (let (($x201 (and $x116 $x10)))
 (let (($x291 (and $x201 $x298)))
 (let (($x253 (and $x291 $x200)))
 (let (($x150 (and $x253 $x233)))
 (let (($x91 (and $x150 $x94)))
 (let (($x57 (and $x91 $x41)))
 (let (($x276 (and $x57 $x139)))
 (let (($x226 (and $x276 $x61)))
 (let (($x249 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and (not $x249) $x226)))
 (let (($x84 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x146 (and $x84 $x244)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x30 (and $x33 $x146)))
 (let (($x7 (forall ((input.ind-%var1419X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1419X)))
 (=> $x132 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1419X) (_ bv0 32)))))
 ))
 (let (($x44 (forall ((input.ind-%var1418X (_ BitVec 32)) )(let (($x132 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1418X)))
 (= $x132 false)))
 ))
 (let (($x42 (and $x44 $x7)))
 (let (($x106 (and $x42 $x30)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x174 (and $x24 $x106)))
 (let (($x223 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x223)))))
 (let (($x238 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x223)))))
 (let (($x17 (and $x238 $x174)))
 (let (($x239 (=> $x17 $x29)))
 (not $x239))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x53 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x269 (bvsle ?x53 (_ bv399 32))))
 (let (($x236 (= $x269 true)))
 (let ((?x37 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x295 (bvneg ?x37)))
 (let (($x135 (= ?x295 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x34 (= $x135 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x154 (= $x70 true)))
 (let (($x274 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x274 true)))
 (let (($x209 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x297 (= $x209 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x162)))
 (let ((?x29 (bvand symbol.1 (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x29)))
 (let ((?x240 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x240)))
 (let ((?x30 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x106 (= input.memlabel-mem--symbol.1_end ?x30)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x174 (and $x146 $x106)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x244 $x174)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x57 $x119)))
 (let (($x276 (not $x139)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x41 (and $x91 $x93)))
 (let (($x158 (and (not $x41) $x276)))
 (let (($x208 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x117 $x208)))
 (let (($x150 (not $x233)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x206 $x48)))
 (let (($x94 (and (not $x87) $x150)))
 (let (($x151 (and (and (and (and (and (and $x94 $x158) $x169) $x226) $x17) $x251) $x239)))
 (let (($x192 (and $x151 $x6)))
 (let (($x289 (= symbol.1 dst_symbol_addr.1)))
 (let (($x63 (and $x289 $x192)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x263 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x263)))
 (let (($x62 (or (bvugt input.memlabel-mem--symbol.1_begin ?x263) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x62) (or $x187 $x111)))))))
 (let (($x49 (and $x103 $x63)))
 (let (($x74 (= $x49 true)))
 (let (($x285 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x285 true)))
 (let (($x282 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (= $x282 true)))
 (let (($x237 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let ((?x60 (bvadd symbol.1 (bvmul input.ind-%var1429X (_ bv4 32)))))
 (let ((?x131 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x60))))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv2 32))) ?x131)))
 (let ((?x301 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv3 32))) ?x165)))
 (let ((?x201 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1429X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1429X)))
 (=> $x256 (= ?x201 ?x301)))))))))
 ))
 (let (($x266 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var1428X) (bvult input.ind-%var1428X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1428X)))
 (= $x256 $x275))))
 ))
 (let (($x100 (and $x266 $x237)))
 (let (($x148 (= $x100 true)))
 (let ((?x152 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x231 (bvneg ?x152)))
 (let (($x8 (= ?x231 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (= $x8 true)))
 (let (($x296 (= ?x231 input.dst.llvm-%n)))
 (let (($x104 (= $x296 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x116 (= $x246 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x163 (bvsub ?x114 ?x40)))
 (let (($x52 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x163) (bvult ?x114 ?x163))))
 (let ((?x95 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvmul (_ bv4 64) ?x95)))
 (let ((?x293 ((_ extract 63 32) ?x72)))
 (let (($x268 (= (_ bv0 32) ?x293)))
 (let (($x190 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x123 (and (and (and true $x190) $x268) $x52)))
 (let (($x110 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x196 (and $x110 $x123)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x272 (=> $x58 $x196)))
 (let (($x157 (= $x272 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x300 (= $x81 true)))
 (let (($x28 (= $x58 true)))
 (let (($x215 (and $x28 $x300)))
 (let (($x161 (and $x215 $x157)))
 (let (($x149 (and $x161 $x116)))
 (let (($x128 (and $x149 $x104)))
 (let (($x305 (and $x128 $x27)))
 (let (($x288 (and $x305 $x148)))
 (let (($x279 (and $x288 $x264)))
 (let (($x245 (and $x279 $x185)))
 (let (($x15 (and $x245 $x74)))
 (let (($x99 (and $x15 $x297)))
 (let (($x227 (and $x99 $x136)))
 (let (($x198 (and $x227 $x154)))
 (let (($x101 (and $x198 $x34)))
 (let (($x54 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and (not $x54) $x101)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x129 $x13)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x166 (and $x88 $x130)))
 (let (($x127 (forall ((input.ind-%var1439X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1439X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1439X) (_ bv0 32)))))
 ))
 (let (($x7 (forall ((input.ind-%var1438X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1438X)))
 (= $x218 false)))
 ))
 (let (($x222 (and $x7 $x127)))
 (let (($x235 (and $x222 $x166)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x38 (and $x213 $x235)))
 (let (($x68 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x24 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x68)))))
 (let (($x188 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x68)))))
 (let (($x204 (and $x188 $x38)))
 (let (($x97 (=> $x204 $x236)))
 (not $x97))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x53 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x269 (bvsle ?x53 (_ bv399 32))))
 (let (($x236 (= $x269 true)))
 (let ((?x37 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x295 (bvneg ?x37)))
 (let (($x135 (= ?x295 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x34 (= $x135 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x154 (= $x70 true)))
 (let (($x274 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x136 (= $x274 true)))
 (let (($x209 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x297 (= $x209 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x162)))
 (let ((?x29 (bvand symbol.1 (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x29)))
 (let ((?x240 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x240)))
 (let ((?x30 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x106 (= input.memlabel-mem--symbol.1_end ?x30)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x174 (and $x146 $x106)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x244 $x174)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (and $x57 $x119)))
 (let (($x276 (not $x139)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x41 (and $x91 $x93)))
 (let (($x158 (and (not $x41) $x276)))
 (let (($x208 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x117 $x208)))
 (let (($x150 (not $x233)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x206 $x48)))
 (let (($x94 (and (not $x87) $x150)))
 (let (($x151 (and (and (and (and (and (and $x94 $x158) $x169) $x226) $x17) $x251) $x239)))
 (let (($x192 (and $x151 $x6)))
 (let (($x289 (= symbol.1 dst_symbol_addr.1)))
 (let (($x63 (and $x289 $x192)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x263 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x263)))
 (let (($x62 (or (bvugt input.memlabel-mem--symbol.1_begin ?x263) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x62) (or $x187 $x111)))))))
 (let (($x49 (and $x103 $x63)))
 (let (($x74 (= $x49 true)))
 (let (($x285 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x285 true)))
 (let (($x282 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (= $x282 true)))
 (let (($x237 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let ((?x60 (bvadd symbol.1 (bvmul input.ind-%var1429X (_ bv4 32)))))
 (let ((?x131 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x60))))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv2 32))) ?x131)))
 (let ((?x301 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv3 32))) ?x165)))
 (let ((?x201 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1429X)))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1429X)))
 (=> $x256 (= ?x201 ?x301)))))))))
 ))
 (let (($x266 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var1428X) (bvult input.ind-%var1428X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x256 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1428X)))
 (= $x256 $x275))))
 ))
 (let (($x100 (and $x266 $x237)))
 (let (($x148 (= $x100 true)))
 (let ((?x152 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x231 (bvneg ?x152)))
 (let (($x8 (= ?x231 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (= $x8 true)))
 (let (($x296 (= ?x231 input.dst.llvm-%n)))
 (let (($x104 (= $x296 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x116 (= $x246 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x163 (bvsub ?x114 ?x40)))
 (let (($x52 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x163) (bvult ?x114 ?x163))))
 (let ((?x95 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvmul (_ bv4 64) ?x95)))
 (let ((?x293 ((_ extract 63 32) ?x72)))
 (let (($x268 (= (_ bv0 32) ?x293)))
 (let (($x190 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x123 (and (and (and true $x190) $x268) $x52)))
 (let (($x110 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x196 (and $x110 $x123)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x272 (=> $x58 $x196)))
 (let (($x157 (= $x272 true)))
 (let (($x81 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x300 (= $x81 true)))
 (let (($x28 (= $x58 true)))
 (let (($x215 (and $x28 $x300)))
 (let (($x161 (and $x215 $x157)))
 (let (($x149 (and $x161 $x116)))
 (let (($x128 (and $x149 $x104)))
 (let (($x305 (and $x128 $x27)))
 (let (($x288 (and $x305 $x148)))
 (let (($x279 (and $x288 $x264)))
 (let (($x245 (and $x279 $x185)))
 (let (($x15 (and $x245 $x74)))
 (let (($x99 (and $x15 $x297)))
 (let (($x227 (and $x99 $x136)))
 (let (($x198 (and $x227 $x154)))
 (let (($x101 (and $x198 $x34)))
 (let (($x54 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and (not $x54) $x101)))
 (let (($x129 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x129 $x13)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x166 (and $x88 $x130)))
 (let (($x127 (forall ((input.ind-%var1439X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1439X)))
 (=> $x218 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1439X) (_ bv0 32)))))
 ))
 (let (($x7 (forall ((input.ind-%var1438X (_ BitVec 32)) )(let (($x218 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1438X)))
 (= $x218 false)))
 ))
 (let (($x222 (and $x7 $x127)))
 (let (($x235 (and $x222 $x166)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x38 (and $x213 $x235)))
 (let (($x68 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x24 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x68)))))
 (let (($x188 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x68)))))
 (let (($x204 (and $x188 $x38)))
 (let (($x97 (=> $x204 $x236)))
 (not $x97))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x134 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x184 (bvsge ?x134 (_ bv0 32))))
 (let (($x230 (= $x184 true)))
 (let ((?x224 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x224)))
 (let (($x247 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x216 (= $x247 true)))
 (let (($x200 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x195 (= $x200 true)))
 (let (($x22 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x181 (= $x22 true)))
 (let (($x214 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x214 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x153)))
 (let ((?x236 (bvand symbol.1 (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x236)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x269 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x166 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x235 (= input.memlabel-mem--symbol.1_end ?x166)))
 (let (($x130 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x38 (and $x130 $x235)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (and $x13 $x38)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x154 (and $x227 $x70)))
 (let (($x198 (not $x154)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x136 (and $x99 $x274)))
 (let (($x295 (and (not $x136) $x198)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x63 $x49)))
 (let (($x15 (not $x74)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x162 $x6)))
 (let (($x297 (and (not $x192) $x15)))
 (let (($x82 (and (and (and (and (and (and $x297 $x295) $x135) $x101) $x204) $x269) $x97)))
 (let (($x42 (and $x82 $x75)))
 (let (($x169 (= symbol.1 dst_symbol_addr.1)))
 (let (($x33 (and $x169 $x42)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x226 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x146 (or (bvugt input.memlabel-mem--symbol.1_begin ?x226) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x146) (or $x17 $x102)))))))
 (let (($x132 (and $x151 $x33)))
 (let (($x85 (= $x132 true)))
 (let (($x119 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x139 (= $x119 true)))
 (let (($x41 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x303 (= $x41 true)))
 (let (($x150 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let ((?x257 (bvadd symbol.1 (bvmul input.ind-%var1449X (_ bv4 32)))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x257))))
 (let ((?x48 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv2 32))) ?x302)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv3 32))) ?x48)))
 (let ((?x288 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1449X)))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1449X)))
 (=> $x32 (= ?x288 ?x117)))))))))
 ))
 (let (($x80 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x301 (and (bvule (_ bv0 32) input.ind-%var1448X) (bvult input.ind-%var1448X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1448X)))
 (= $x32 $x301))))
 ))
 (let (($x94 (and $x80 $x150)))
 (let (($x91 (= $x94 true)))
 (let ((?x203 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x275 (bvneg ?x203)))
 (let (($x298 (= ?x275 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x228 (= $x298 true)))
 (let (($x86 (= ?x275 input.dst.llvm-%n)))
 (let (($x266 (= $x86 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x305 (= $x27 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x157 (bvsub ?x114 ?x40)))
 (let (($x149 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x157) (bvult ?x114 ?x157))))
 (let ((?x52 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x123 (bvmul (_ bv4 64) ?x52)))
 (let ((?x196 ((_ extract 63 32) ?x123)))
 (let (($x272 (= (_ bv0 32) ?x196)))
 (let (($x115 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x231 (and (and (and true $x115) $x272) $x149)))
 (let (($x293 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x296 (and $x293 $x231)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (=> $x69 $x296)))
 (let (($x128 (= $x104 true)))
 (let (($x190 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x107 (= $x190 true)))
 (let (($x138 (= $x69 true)))
 (let (($x170 (and $x138 $x107)))
 (let (($x8 (and $x170 $x128)))
 (let (($x256 (and $x8 $x305)))
 (let (($x201 (and $x256 $x266)))
 (let (($x60 (and $x201 $x228)))
 (let (($x93 (and $x60 $x91)))
 (let (($x57 (and $x93 $x303)))
 (let (($x276 (and $x57 $x139)))
 (let (($x290 (and $x276 $x85)))
 (let (($x292 (and $x290 $x10)))
 (let (($x9 (and $x292 $x181)))
 (let (($x160 (and $x9 $x195)))
 (let (($x253 (and $x160 $x216)))
 (let (($x219 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and (not $x219) $x253)))
 (let (($x110 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and $x110 $x225)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x215 $x133)))
 (let (($x118 (forall ((input.ind-%var1459X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1459X)))
 (=> $x294 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1459X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1458X)))
 (= $x294 false)))
 ))
 (let (($x81 (and $x127 $x118)))
 (let (($x267 (and $x81 $x143)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x64 (and $x44 $x267)))
 (let (($x238 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x213 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x238)))))
 (let (($x168 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x238)))))
 (let (($x186 (and $x168 $x64)))
 (let (($x249 (=> $x186 $x230)))
 (not $x249))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x134 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x184 (bvsge ?x134 (_ bv0 32))))
 (let (($x230 (= $x184 true)))
 (let ((?x224 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x258 (bvneg ?x224)))
 (let (($x247 (= ?x258 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x216 (= $x247 true)))
 (let (($x200 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x195 (= $x200 true)))
 (let (($x22 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x181 (= $x22 true)))
 (let (($x214 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x10 (= $x214 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x153)))
 (let ((?x236 (bvand symbol.1 (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x236)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x269 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x166 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x235 (= input.memlabel-mem--symbol.1_end ?x166)))
 (let (($x130 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x38 (and $x130 $x235)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (and $x13 $x38)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x154 (and $x227 $x70)))
 (let (($x198 (not $x154)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x136 (and $x99 $x274)))
 (let (($x295 (and (not $x136) $x198)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x63 $x49)))
 (let (($x15 (not $x74)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x162 $x6)))
 (let (($x297 (and (not $x192) $x15)))
 (let (($x82 (and (and (and (and (and (and $x297 $x295) $x135) $x101) $x204) $x269) $x97)))
 (let (($x42 (and $x82 $x75)))
 (let (($x169 (= symbol.1 dst_symbol_addr.1)))
 (let (($x33 (and $x169 $x42)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x226 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x146 (or (bvugt input.memlabel-mem--symbol.1_begin ?x226) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x146) (or $x17 $x102)))))))
 (let (($x132 (and $x151 $x33)))
 (let (($x85 (= $x132 true)))
 (let (($x119 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x139 (= $x119 true)))
 (let (($x41 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x303 (= $x41 true)))
 (let (($x150 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let ((?x257 (bvadd symbol.1 (bvmul input.ind-%var1449X (_ bv4 32)))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x257))))
 (let ((?x48 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv2 32))) ?x302)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv3 32))) ?x48)))
 (let ((?x288 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1449X)))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1449X)))
 (=> $x32 (= ?x288 ?x117)))))))))
 ))
 (let (($x80 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x301 (and (bvule (_ bv0 32) input.ind-%var1448X) (bvult input.ind-%var1448X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x32 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1448X)))
 (= $x32 $x301))))
 ))
 (let (($x94 (and $x80 $x150)))
 (let (($x91 (= $x94 true)))
 (let ((?x203 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x275 (bvneg ?x203)))
 (let (($x298 (= ?x275 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x228 (= $x298 true)))
 (let (($x86 (= ?x275 input.dst.llvm-%n)))
 (let (($x266 (= $x86 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x305 (= $x27 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x157 (bvsub ?x114 ?x40)))
 (let (($x149 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x157) (bvult ?x114 ?x157))))
 (let ((?x52 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x123 (bvmul (_ bv4 64) ?x52)))
 (let ((?x196 ((_ extract 63 32) ?x123)))
 (let (($x272 (= (_ bv0 32) ?x196)))
 (let (($x115 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x231 (and (and (and true $x115) $x272) $x149)))
 (let (($x293 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x296 (and $x293 $x231)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (=> $x69 $x296)))
 (let (($x128 (= $x104 true)))
 (let (($x190 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x107 (= $x190 true)))
 (let (($x138 (= $x69 true)))
 (let (($x170 (and $x138 $x107)))
 (let (($x8 (and $x170 $x128)))
 (let (($x256 (and $x8 $x305)))
 (let (($x201 (and $x256 $x266)))
 (let (($x60 (and $x201 $x228)))
 (let (($x93 (and $x60 $x91)))
 (let (($x57 (and $x93 $x303)))
 (let (($x276 (and $x57 $x139)))
 (let (($x290 (and $x276 $x85)))
 (let (($x292 (and $x290 $x10)))
 (let (($x9 (and $x292 $x181)))
 (let (($x160 (and $x9 $x195)))
 (let (($x253 (and $x160 $x216)))
 (let (($x219 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and (not $x219) $x253)))
 (let (($x110 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x133 (and $x110 $x225)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x215 $x133)))
 (let (($x118 (forall ((input.ind-%var1459X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1459X)))
 (=> $x294 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1459X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let (($x294 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1458X)))
 (= $x294 false)))
 ))
 (let (($x81 (and $x127 $x118)))
 (let (($x267 (and $x81 $x143)))
 (let (($x44 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x64 (and $x44 $x267)))
 (let (($x238 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x213 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x238)))))
 (let (($x168 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x238)))))
 (let (($x186 (and $x168 $x64)))
 (let (($x249 (=> $x186 $x230)))
 (not $x249))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (bvule ?x100 (_ bv399 32))))
 (let (($x50 (= $x111 true)))
 (let ((?x120 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x120)))
 (let (($x65 (= ?x126 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x65 true)))
 (let (($x185 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x185 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x234 true)))
 (let (($x271 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let ((?x249 (bvadd symbol.1 (bvmul input.ind-%var1469X (_ bv4 32)))))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x249))))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv2 32))) ?x158)))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv3 32))) ?x84)))
 (let ((?x22 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1469X)))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1469X)))
 (=> $x83 (= ?x22 ?x88)))))))))
 ))
 (let (($x290 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var1468X) (bvult input.ind-%var1468X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1468X)))
 (= $x83 $x132))))
 ))
 (let (($x210 (and $x290 $x271)))
 (let (($x148 (= $x210 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x204 (= $x38 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x198 (bvsub ?x114 ?x40)))
 (let (($x265 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x198) (bvult ?x114 ?x198))))
 (let ((?x37 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x227 (bvmul (_ bv4 64) ?x37)))
 (let ((?x70 ((_ extract 63 32) ?x227)))
 (let (($x154 (= (_ bv0 32) ?x70)))
 (let (($x274 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x112 (and (and (and true $x274) $x154) $x265)))
 (let (($x49 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x13 (and $x49 $x112)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (=> $x212 $x13)))
 (let (($x166 (= $x130 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x6 (= $x162 true)))
 (let (($x16 (= $x212 true)))
 (let (($x191 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x29 (= $x191 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x61)))
 (let ((?x276 (bvand symbol.1 (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x276)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x93 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x41 (= input.memlabel-mem--symbol.1_end ?x93)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x303 (and $x91 $x41)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x94 $x303)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x43 (and $x229 $x103)))
 (let (($x302 (not $x43)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x263 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x206 (and $x263 $x289)))
 (let (($x117 (and (not $x206) $x302)))
 (let (($x264 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x288 $x264)))
 (let (($x257 (not $x270)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x301 $x45)))
 (let (($x211 (and (not $x80) $x257)))
 (let (($x106 (and (and (and (and (and (and $x211 $x117) $x208) $x150) $x57) $x139) $x189)))
 (let (($x17 (and $x106 $x239)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x174 (and $x104 $x17)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x27) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x266 $x201)))))))
 (let (($x102 (and $x131 $x174)))
 (let (($x240 (= $x102 true)))
 (let (($x246 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x116 (= $x246 true)))
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x89)))
 (let (($x152 (= ?x52 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (= $x152 true)))
 (let (($x123 (= ?x52 input.dst.llvm-%n)))
 (let (($x196 (= $x123 true)))
 (let (($x163 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x115 (= $x163 true)))
 (let (($x272 (and $x115 $x196)))
 (let (($x157 (and $x272 $x161)))
 (let (($x149 (and $x157 $x116)))
 (let (($x251 (and $x149 $x240)))
 (let (($x151 (and $x251 $x29)))
 (let (($x169 (and $x151 $x16)))
 (let (($x192 (and $x169 $x6)))
 (let (($x235 (and $x192 $x166)))
 (let (($x125 (and $x235 $x204)))
 (let (($x273 (and $x125 $x148)))
 (let (($x285 (and $x273 $x78)))
 (let (($x90 (and $x285 $x176)))
 (let (($x245 (and $x90 $x261)))
 (let (($x268 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (and (not $x268) $x245)))
 (let (($x293 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x187 (and $x293 $x62)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x31 (and $x170 $x187)))
 (let (($x202 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1479X)))
 (=> $x47 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1479X) (_ bv0 32)))))
 ))
 (let (($x118 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1478X)))
 (= $x47 false)))
 ))
 (let (($x190 (and $x118 $x202)))
 (let (($x259 (and $x190 $x31)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x254 (and $x7 $x259)))
 (let (($x188 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x44 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x188)))))
 (let (($x248 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x188)))))
 (let (($x55 (and $x248 $x254)))
 (let (($x54 (=> $x55 $x50)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (bvule ?x100 (_ bv399 32))))
 (let (($x50 (= $x111 true)))
 (let ((?x120 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x120)))
 (let (($x65 (= ?x126 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x65 true)))
 (let (($x185 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x185 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x234 true)))
 (let (($x271 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let ((?x249 (bvadd symbol.1 (bvmul input.ind-%var1469X (_ bv4 32)))))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x249))))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv2 32))) ?x158)))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x249 (_ bv3 32))) ?x84)))
 (let ((?x22 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1469X)))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1469X)))
 (=> $x83 (= ?x22 ?x88)))))))))
 ))
 (let (($x290 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x132 (and (bvule (_ bv0 32) input.ind-%var1468X) (bvult input.ind-%var1468X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x83 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1468X)))
 (= $x83 $x132))))
 ))
 (let (($x210 (and $x290 $x271)))
 (let (($x148 (= $x210 true)))
 (let (($x38 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x204 (= $x38 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x198 (bvsub ?x114 ?x40)))
 (let (($x265 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x198) (bvult ?x114 ?x198))))
 (let ((?x37 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x227 (bvmul (_ bv4 64) ?x37)))
 (let ((?x70 ((_ extract 63 32) ?x227)))
 (let (($x154 (= (_ bv0 32) ?x70)))
 (let (($x274 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x112 (and (and (and true $x274) $x154) $x265)))
 (let (($x49 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x13 (and $x49 $x112)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (=> $x212 $x13)))
 (let (($x166 (= $x130 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x6 (= $x162 true)))
 (let (($x16 (= $x212 true)))
 (let (($x191 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x29 (= $x191 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x61)))
 (let ((?x276 (bvand symbol.1 (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x276)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x93 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x41 (= input.memlabel-mem--symbol.1_end ?x93)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x303 (and $x91 $x41)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x94 $x303)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x43 (and $x229 $x103)))
 (let (($x302 (not $x43)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x263 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x206 (and $x263 $x289)))
 (let (($x117 (and (not $x206) $x302)))
 (let (($x264 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x288 $x264)))
 (let (($x257 (not $x270)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x301 $x45)))
 (let (($x211 (and (not $x80) $x257)))
 (let (($x106 (and (and (and (and (and (and $x211 $x117) $x208) $x150) $x57) $x139) $x189)))
 (let (($x17 (and $x106 $x239)))
 (let (($x104 (= symbol.1 dst_symbol_addr.1)))
 (let (($x174 (and $x104 $x17)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x27) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x266 $x201)))))))
 (let (($x102 (and $x131 $x174)))
 (let (($x240 (= $x102 true)))
 (let (($x246 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x116 (= $x246 true)))
 (let ((?x89 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x89)))
 (let (($x152 (= ?x52 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x161 (= $x152 true)))
 (let (($x123 (= ?x52 input.dst.llvm-%n)))
 (let (($x196 (= $x123 true)))
 (let (($x163 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x115 (= $x163 true)))
 (let (($x272 (and $x115 $x196)))
 (let (($x157 (and $x272 $x161)))
 (let (($x149 (and $x157 $x116)))
 (let (($x251 (and $x149 $x240)))
 (let (($x151 (and $x251 $x29)))
 (let (($x169 (and $x151 $x16)))
 (let (($x192 (and $x169 $x6)))
 (let (($x235 (and $x192 $x166)))
 (let (($x125 (and $x235 $x204)))
 (let (($x273 (and $x125 $x148)))
 (let (($x285 (and $x273 $x78)))
 (let (($x90 (and $x285 $x176)))
 (let (($x245 (and $x90 $x261)))
 (let (($x268 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (and (not $x268) $x245)))
 (let (($x293 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x187 (and $x293 $x62)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x31 (and $x170 $x187)))
 (let (($x202 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1479X)))
 (=> $x47 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1479X) (_ bv0 32)))))
 ))
 (let (($x118 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1478X)))
 (= $x47 false)))
 ))
 (let (($x190 (and $x118 $x202)))
 (let (($x259 (and $x190 $x31)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x254 (and $x7 $x259)))
 (let (($x188 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x44 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x188)))))
 (let (($x248 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x188)))))
 (let (($x55 (and $x248 $x254)))
 (let (($x54 (=> $x55 $x50)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x184 (bvsle ?x10 (_ bv399 32))))
 (let (($x300 (= $x184 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x225)))
 (let (($x258 (= ?x133 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x258 true)))
 (let (($x160 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x267 (= $x160 true)))
 (let (($x97 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (= $x97 true)))
 (let (($x140 (forall ((input.ind-%var1489X (_ BitVec 32)) )(let ((?x54 (bvadd symbol.1 (bvmul input.ind-%var1489X (_ bv4 32)))))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x54))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv2 32))) ?x231)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv3 32))) ?x129)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1489X)))
 (let (($x167 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1489X)))
 (=> $x167 (= ?x234 ?x215)))))))))
 ))
 (let (($x271 (forall ((input.ind-%var1488X (_ BitVec 32)) )(let (($x218 (and (bvule (_ bv0 32) input.ind-%var1488X) (bvult input.ind-%var1488X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x167 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1488X)))
 (= $x167 $x218))))
 ))
 (let (($x73 (and $x271 $x140)))
 (let (($x292 (= $x73 true)))
 (let (($x230 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x249 (= $x230 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x235 (bvsub ?x114 ?x40)))
 (let (($x83 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x235) (bvult ?x114 ?x235))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvmul (_ bv4 64) ?x112)))
 (let ((?x130 ((_ extract 63 32) ?x13)))
 (let (($x166 (= (_ bv0 32) ?x130)))
 (let (($x135 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x132 (and (and (and true $x135) $x166) $x83)))
 (let (($x154 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x85 (and $x154 $x132)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x290 (=> $x144 $x85)))
 (let (($x22 (= $x290 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x136 (= $x34 true)))
 (let (($x99 (= $x144 true)))
 (let (($x15 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x15 true)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x240)))
 (let ((?x174 (bvand symbol.1 (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x174)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x239)))
 (let ((?x276 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x189 (= input.memlabel-mem--symbol.1_end ?x276)))
 (let (($x30 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (and $x30 $x189)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x139 $x106)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (and $x244 $x94)))
 (let (($x93 (not $x91)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x150 (and $x250 $x233)))
 (let (($x303 (and (not $x150) $x93)))
 (let (($x43 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x103 $x43)))
 (let (($x117 (not $x302)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x206 $x48)))
 (let (($x208 (and (not $x229) $x117)))
 (let (($x162 (and (and (and (and (and (and $x208 $x303) $x57) $x119) $x61) $x17) $x102)))
 (let (($x6 (and $x162 $x251)))
 (let (($x298 (= symbol.1 dst_symbol_addr.1)))
 (let (($x192 (and $x298 $x6)))
 (let (($x288 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x32) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x289 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x87 $x288)))))))
 (let (($x209 (and $x289 $x192)))
 (let (($x63 (= $x209 true)))
 (let (($x203 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x275 (= $x203 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x149)))
 (let (($x305 (= ?x128 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (= $x305 true)))
 (let (($x8 (= ?x128 input.dst.llvm-%n)))
 (let (($x165 (= $x8 true)))
 (let (($x157 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x246 (= $x157 true)))
 (let (($x27 (and $x246 $x165)))
 (let (($x66 (and $x27 $x256)))
 (let (($x266 (and $x66 $x275)))
 (let (($x49 (and $x266 $x63)))
 (let (($x297 (and $x49 $x74)))
 (let (($x274 (and $x297 $x99)))
 (let (($x37 (and $x274 $x136)))
 (let (($x9 (and $x37 $x22)))
 (let (($x18 (and $x9 $x249)))
 (let (($x53 (and $x18 $x292)))
 (let (($x195 (and $x53 $x82)))
 (let (($x64 (and $x195 $x267)))
 (let (($x224 (and $x64 $x247)))
 (let (($x152 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and (not $x152) $x224)))
 (let (($x196 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x186 (and $x196 $x143)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x269 (and $x89 $x186)))
 (let (($x163 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1499X)))
 (=> $x122 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1499X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1498X)))
 (= $x122 false)))
 ))
 (let (($x115 (and $x202 $x163)))
 (let (($x153 (and $x115 $x269)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x75 (and $x127 $x153)))
 (let (($x168 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x7 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x168)))))
 (let (($x36 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x168)))))
 (let (($x134 (and $x36 $x75)))
 (let (($x219 (=> $x134 $x300)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x184 (bvsle ?x10 (_ bv399 32))))
 (let (($x300 (= $x184 true)))
 (let ((?x225 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x225)))
 (let (($x258 (= ?x133 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x258 true)))
 (let (($x160 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x267 (= $x160 true)))
 (let (($x97 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (= $x97 true)))
 (let (($x140 (forall ((input.ind-%var1489X (_ BitVec 32)) )(let ((?x54 (bvadd symbol.1 (bvmul input.ind-%var1489X (_ bv4 32)))))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x54))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv2 32))) ?x231)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv3 32))) ?x129)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1489X)))
 (let (($x167 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1489X)))
 (=> $x167 (= ?x234 ?x215)))))))))
 ))
 (let (($x271 (forall ((input.ind-%var1488X (_ BitVec 32)) )(let (($x218 (and (bvule (_ bv0 32) input.ind-%var1488X) (bvult input.ind-%var1488X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x167 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1488X)))
 (= $x167 $x218))))
 ))
 (let (($x73 (and $x271 $x140)))
 (let (($x292 (= $x73 true)))
 (let (($x230 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x249 (= $x230 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x235 (bvsub ?x114 ?x40)))
 (let (($x83 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x235) (bvult ?x114 ?x235))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvmul (_ bv4 64) ?x112)))
 (let ((?x130 ((_ extract 63 32) ?x13)))
 (let (($x166 (= (_ bv0 32) ?x130)))
 (let (($x135 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x132 (and (and (and true $x135) $x166) $x83)))
 (let (($x154 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x85 (and $x154 $x132)))
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x290 (=> $x144 $x85)))
 (let (($x22 (= $x290 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x136 (= $x34 true)))
 (let (($x99 (= $x144 true)))
 (let (($x15 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x74 (= $x15 true)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x240)))
 (let ((?x174 (bvand symbol.1 (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x174)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x239)))
 (let ((?x276 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x189 (= input.memlabel-mem--symbol.1_end ?x276)))
 (let (($x30 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (and $x30 $x189)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x139 $x106)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (and $x244 $x94)))
 (let (($x93 (not $x91)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x150 (and $x250 $x233)))
 (let (($x303 (and (not $x150) $x93)))
 (let (($x43 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x103 $x43)))
 (let (($x117 (not $x302)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x206 $x48)))
 (let (($x208 (and (not $x229) $x117)))
 (let (($x162 (and (and (and (and (and (and $x208 $x303) $x57) $x119) $x61) $x17) $x102)))
 (let (($x6 (and $x162 $x251)))
 (let (($x298 (= symbol.1 dst_symbol_addr.1)))
 (let (($x192 (and $x298 $x6)))
 (let (($x288 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x32) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x289 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x87 $x288)))))))
 (let (($x209 (and $x289 $x192)))
 (let (($x63 (= $x209 true)))
 (let (($x203 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x275 (= $x203 true)))
 (let ((?x149 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x149)))
 (let (($x305 (= ?x128 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x256 (= $x305 true)))
 (let (($x8 (= ?x128 input.dst.llvm-%n)))
 (let (($x165 (= $x8 true)))
 (let (($x157 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x246 (= $x157 true)))
 (let (($x27 (and $x246 $x165)))
 (let (($x66 (and $x27 $x256)))
 (let (($x266 (and $x66 $x275)))
 (let (($x49 (and $x266 $x63)))
 (let (($x297 (and $x49 $x74)))
 (let (($x274 (and $x297 $x99)))
 (let (($x37 (and $x274 $x136)))
 (let (($x9 (and $x37 $x22)))
 (let (($x18 (and $x9 $x249)))
 (let (($x53 (and $x18 $x292)))
 (let (($x195 (and $x53 $x82)))
 (let (($x64 (and $x195 $x267)))
 (let (($x224 (and $x64 $x247)))
 (let (($x152 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x143 (and (not $x152) $x224)))
 (let (($x196 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x186 (and $x196 $x143)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x269 (and $x89 $x186)))
 (let (($x163 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1499X)))
 (=> $x122 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1499X) (_ bv0 32)))))
 ))
 (let (($x202 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x122 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1498X)))
 (= $x122 false)))
 ))
 (let (($x115 (and $x202 $x163)))
 (let (($x153 (and $x115 $x269)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x75 (and $x127 $x153)))
 (let (($x168 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x7 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x168)))))
 (let (($x36 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x168)))))
 (let (($x134 (and $x36 $x75)))
 (let (($x219 (=> $x134 $x300)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (bvsge ?x148 (_ bv0 32))))
 (let (($x107 (= $x111 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x62)))
 (let (($x126 (= ?x187 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= $x126 true)))
 (let (($x90 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x259 (= $x90 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x172 true)))
 (let (($x175 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let ((?x219 (bvadd symbol.1 (bvmul input.ind-%var1509X (_ bv4 32)))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x219))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv2 32))) ?x86)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv3 32))) ?x110)))
 (let ((?x97 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1509X)))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1509X)))
 (=> $x236 (= ?x97 ?x170)))))))))
 ))
 (let (($x140 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1508X) (bvult input.ind-%var1508X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1508X)))
 (= $x236 $x294))))
 ))
 (let (($x177 (and $x140 $x175)))
 (let (($x273 (= $x177 true)))
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x54 (= $x50 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x9 (bvsub ?x114 ?x40)))
 (let (($x167 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x9) (bvult ?x114 ?x9))))
 (let ((?x132 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvmul (_ bv4 64) ?x132)))
 (let ((?x290 ((_ extract 63 32) ?x85)))
 (let (($x22 (= (_ bv0 32) ?x290)))
 (let (($x125 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x218 (and (and (and true $x125) $x22) $x167)))
 (let (($x166 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x96 (and $x166 $x218)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (=> $x58 $x96)))
 (let (($x234 (= $x271 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x265 (= $x33 true)))
 (let (($x5 (= $x58 true)))
 (let (($x295 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x101 (= $x295 true)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x63)))
 (let ((?x192 (bvand symbol.1 (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x192)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x174 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x102 (= input.memlabel-mem--symbol.1_end ?x174)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (and $x169 $x102)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x17 $x162)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x30 (and $x151 $x139)))
 (let (($x276 (not $x30)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (and $x29 $x146)))
 (let (($x106 (and (not $x119) $x276)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x94 $x91)))
 (let (($x303 (not $x93)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x150 $x41)))
 (let (($x57 (and (not $x244) $x303)))
 (let (($x34 (and (and (and (and (and (and $x57 $x106) $x61) $x239) $x240) $x6) $x209)))
 (let (($x136 (and $x34 $x49)))
 (let (($x264 (= symbol.1 dst_symbol_addr.1)))
 (let (($x37 (and $x264 $x136)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x211 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x298 (or (bvugt input.memlabel-mem--symbol.1_begin ?x211) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x233 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x298) (or $x226 $x103)))))))
 (let (($x227 (and $x233 $x37)))
 (let (($x70 (= $x227 true)))
 (let (($x301 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x45 (= $x301 true)))
 (let ((?x266 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x266)))
 (let (($x131 (= ?x228 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x296 (= $x131 true)))
 (let (($x60 (= ?x228 input.dst.llvm-%n)))
 (let (($x263 (= $x60 true)))
 (let (($x66 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x203 (= $x66 true)))
 (let (($x32 (and $x203 $x263)))
 (let (($x104 (and $x32 $x296)))
 (let (($x87 (and $x104 $x45)))
 (let (($x154 (and $x87 $x70)))
 (let (($x198 (and $x154 $x101)))
 (let (($x135 (and $x198 $x5)))
 (let (($x112 (and $x135 $x265)))
 (let (($x285 (and $x112 $x234)))
 (let (($x199 (and $x285 $x54)))
 (let (($x222 (and $x199 $x273)))
 (let (($x176 (and $x222 $x56)))
 (let (($x254 (and $x176 $x259)))
 (let (($x120 (and $x254 $x65)))
 (let (($x305 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x31 (and (not $x305) $x120)))
 (let (($x165 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x165 $x31)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x253 (and $x149 $x55)))
 (let (($x157 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1519X)))
 (=> $x95 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1519X) (_ bv0 32)))))
 ))
 (let (($x163 (forall ((input.ind-%var1518X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1518X)))
 (= $x95 false)))
 ))
 (let (($x246 (and $x163 $x157)))
 (let (($x92 (and $x246 $x253)))
 (let (($x118 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x158 (and $x118 $x92)))
 (let (($x248 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x127 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x248)))))
 (let (($x243 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x248)))))
 (let (($x100 (and $x243 $x158)))
 (let (($x268 (=> $x100 $x107)))
 (not $x268))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (bvsge ?x148 (_ bv0 32))))
 (let (($x107 (= $x111 true)))
 (let ((?x62 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x62)))
 (let (($x126 (= ?x187 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= $x126 true)))
 (let (($x90 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x259 (= $x90 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x172 true)))
 (let (($x175 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let ((?x219 (bvadd symbol.1 (bvmul input.ind-%var1509X (_ bv4 32)))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x219))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv2 32))) ?x86)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv3 32))) ?x110)))
 (let ((?x97 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1509X)))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1509X)))
 (=> $x236 (= ?x97 ?x170)))))))))
 ))
 (let (($x140 (forall ((input.ind-%var1508X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1508X) (bvult input.ind-%var1508X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x236 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1508X)))
 (= $x236 $x294))))
 ))
 (let (($x177 (and $x140 $x175)))
 (let (($x273 (= $x177 true)))
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x54 (= $x50 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x9 (bvsub ?x114 ?x40)))
 (let (($x167 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x9) (bvult ?x114 ?x9))))
 (let ((?x132 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvmul (_ bv4 64) ?x132)))
 (let ((?x290 ((_ extract 63 32) ?x85)))
 (let (($x22 (= (_ bv0 32) ?x290)))
 (let (($x125 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x218 (and (and (and true $x125) $x22) $x167)))
 (let (($x166 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x96 (and $x166 $x218)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (=> $x58 $x96)))
 (let (($x234 (= $x271 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x265 (= $x33 true)))
 (let (($x5 (= $x58 true)))
 (let (($x295 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x101 (= $x295 true)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x63)))
 (let ((?x192 (bvand symbol.1 (_ bv3 32))))
 (let (($x209 (= (_ bv0 32) ?x192)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x174 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x102 (= input.memlabel-mem--symbol.1_end ?x174)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (and $x169 $x102)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x17 $x162)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x30 (and $x151 $x139)))
 (let (($x276 (not $x30)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x119 (and $x29 $x146)))
 (let (($x106 (and (not $x119) $x276)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x94 $x91)))
 (let (($x303 (not $x93)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x150 $x41)))
 (let (($x57 (and (not $x244) $x303)))
 (let (($x34 (and (and (and (and (and (and $x57 $x106) $x61) $x239) $x240) $x6) $x209)))
 (let (($x136 (and $x34 $x49)))
 (let (($x264 (= symbol.1 dst_symbol_addr.1)))
 (let (($x37 (and $x264 $x136)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x211 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x298 (or (bvugt input.memlabel-mem--symbol.1_begin ?x211) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x233 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x298) (or $x226 $x103)))))))
 (let (($x227 (and $x233 $x37)))
 (let (($x70 (= $x227 true)))
 (let (($x301 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x45 (= $x301 true)))
 (let ((?x266 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x266)))
 (let (($x131 (= ?x228 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x296 (= $x131 true)))
 (let (($x60 (= ?x228 input.dst.llvm-%n)))
 (let (($x263 (= $x60 true)))
 (let (($x66 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x203 (= $x66 true)))
 (let (($x32 (and $x203 $x263)))
 (let (($x104 (and $x32 $x296)))
 (let (($x87 (and $x104 $x45)))
 (let (($x154 (and $x87 $x70)))
 (let (($x198 (and $x154 $x101)))
 (let (($x135 (and $x198 $x5)))
 (let (($x112 (and $x135 $x265)))
 (let (($x285 (and $x112 $x234)))
 (let (($x199 (and $x285 $x54)))
 (let (($x222 (and $x199 $x273)))
 (let (($x176 (and $x222 $x56)))
 (let (($x254 (and $x176 $x259)))
 (let (($x120 (and $x254 $x65)))
 (let (($x305 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x31 (and (not $x305) $x120)))
 (let (($x165 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x55 (and $x165 $x31)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x253 (and $x149 $x55)))
 (let (($x157 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1519X)))
 (=> $x95 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1519X) (_ bv0 32)))))
 ))
 (let (($x163 (forall ((input.ind-%var1518X (_ BitVec 32)) )(let (($x95 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1518X)))
 (= $x95 false)))
 ))
 (let (($x246 (and $x163 $x157)))
 (let (($x92 (and $x246 $x253)))
 (let (($x118 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x158 (and $x118 $x92)))
 (let (($x248 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x127 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x248)))))
 (let (($x243 (=> (and $x58 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x248)))))
 (let (($x100 (and $x243 $x158)))
 (let (($x268 (=> $x100 $x107)))
 (not $x268))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x292 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x184 (bvule ?x292 input.dst.llvm-%n)))
 (let (($x12 (= $x184 true)))
 (let ((?x143 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x143)))
 (let (($x133 (= ?x186 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x133 true)))
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x270 (bvneg ?x87)))
 (let (($x64 (= ?x270 input.dst.llvm-%n)))
 (let (($x153 (= $x64 true)))
 (let (($x291 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x67 (= $x291 true)))
 (let (($x272 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (= $x272 true)))
 (let (($x89 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let ((?x148 (bvadd symbol.1 (bvmul input.ind-%var1529X (_ bv4 32)))))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x148))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv2 32))) ?x214)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv3 32))) ?x80)))
 (let ((?x177 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1529X)))
 (let (($x72 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1529X)))
 (=> $x72 (= ?x177 ?x293)))))))))
 ))
 (let (($x170 (forall ((input.ind-%var1528X (_ BitVec 32)) )(let (($x86 (and (bvule (_ bv0 32) input.ind-%var1528X) (bvult input.ind-%var1528X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x72 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1528X)))
 (= $x72 $x86))))
 ))
 (let (($x122 (and $x170 $x89)))
 (let (($x138 (= $x122 true)))
 (let (($x140 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x97 (= $x140 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x96 (bvsub ?x114 ?x40)))
 (let (($x50 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x96) (bvult ?x114 ?x96))))
 (let ((?x249 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x18 (bvmul (_ bv4 64) ?x249)))
 (let ((?x167 ((_ extract 63 32) ?x18)))
 (let (($x218 (= (_ bv0 32) ?x167)))
 (let (($x230 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x236 (and (and (and true $x230) $x218) $x50)))
 (let (($x132 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x215 (and $x132 $x236)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (=> $x69 $x215)))
 (let (($x294 (= $x129 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x204 (= $x235 true)))
 (let (($x38 (= $x69 true)))
 (let (($x13 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x130 (= $x13 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x136)))
 (let ((?x63 (bvand symbol.1 (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x63)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x251 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x251)))
 (let (($x99 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x274 (and $x99 $x6)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x240 $x274)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x239 (and $x74 $x16)))
 (let (($x297 (not $x239)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x61 (and $x106 $x15)))
 (let (($x169 (and (not $x61) $x297)))
 (let (($x189 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x119 $x189)))
 (let (($x139 (not $x151)))
 (let (($x29 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x57 $x29)))
 (let (($x276 (and (not $x146) $x139)))
 (let (($x198 (and (and (and (and (and (and $x276 $x169) $x174) $x162) $x192) $x34) $x49)))
 (let (($x5 (and $x198 $x37)))
 (let (($x226 (= symbol.1 dst_symbol_addr.1)))
 (let (($x135 (and $x226 $x5)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x208 (or (bvugt input.memlabel-mem--symbol.1_begin ?x43) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x303 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x208) (or $x150 $x41)))))))
 (let (($x33 (and $x303 $x135)))
 (let (($x265 (= $x33 true)))
 (let (($x289 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x201 (= $x289 true)))
 (let (($x257 (= ?x270 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (= $x257 true)))
 (let (($x104 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x104 true)))
 (let (($x211 (and $x301 $x250)))
 (let (($x298 (and $x211 $x201)))
 (let (($x112 (and $x298 $x265)))
 (let (($x166 (and $x112 $x130)))
 (let (($x42 (and $x166 $x38)))
 (let (($x125 (and $x42 $x204)))
 (let (($x21 (and $x125 $x294)))
 (let (($x195 (and $x21 $x97)))
 (let (($x180 (and $x195 $x138)))
 (let (($x81 (and $x180 $x53)))
 (let (($x267 (and $x81 $x67)))
 (let (($x75 (and $x267 $x153)))
 (let (($x225 (and $x75 $x258)))
 (let (($x131 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x269 (and (not $x131) $x225)))
 (let (($x263 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x263 $x269)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x245 (and $x266 $x134)))
 (let (($x66 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1539X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1539X) (_ bv0 32)))))
 ))
 (let (($x157 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1538X)))
 (= $x52 false)))
 ))
 (let (($x203 (and $x157 $x66)))
 (let (($x255 (and $x203 $x245)))
 (let (($x202 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x202 $x255)))
 (let (($x36 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x118 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x124 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x36)))))
 (let (($x10 (and $x124 $x231)))
 (let (($x152 (=> $x10 $x12)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x292 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x184 (bvule ?x292 input.dst.llvm-%n)))
 (let (($x12 (= $x184 true)))
 (let ((?x143 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x143)))
 (let (($x133 (= ?x186 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x133 true)))
 (let ((?x87 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x270 (bvneg ?x87)))
 (let (($x64 (= ?x270 input.dst.llvm-%n)))
 (let (($x153 (= $x64 true)))
 (let (($x291 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x67 (= $x291 true)))
 (let (($x272 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (= $x272 true)))
 (let (($x89 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let ((?x148 (bvadd symbol.1 (bvmul input.ind-%var1529X (_ bv4 32)))))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x148))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv2 32))) ?x214)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv3 32))) ?x80)))
 (let ((?x177 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1529X)))
 (let (($x72 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1529X)))
 (=> $x72 (= ?x177 ?x293)))))))))
 ))
 (let (($x170 (forall ((input.ind-%var1528X (_ BitVec 32)) )(let (($x86 (and (bvule (_ bv0 32) input.ind-%var1528X) (bvult input.ind-%var1528X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x72 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1528X)))
 (= $x72 $x86))))
 ))
 (let (($x122 (and $x170 $x89)))
 (let (($x138 (= $x122 true)))
 (let (($x140 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x97 (= $x140 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x96 (bvsub ?x114 ?x40)))
 (let (($x50 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x96) (bvult ?x114 ?x96))))
 (let ((?x249 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x18 (bvmul (_ bv4 64) ?x249)))
 (let ((?x167 ((_ extract 63 32) ?x18)))
 (let (($x218 (= (_ bv0 32) ?x167)))
 (let (($x230 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x236 (and (and (and true $x230) $x218) $x50)))
 (let (($x132 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x215 (and $x132 $x236)))
 (let (($x69 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x129 (=> $x69 $x215)))
 (let (($x294 (= $x129 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x204 (= $x235 true)))
 (let (($x38 (= $x69 true)))
 (let (($x13 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x130 (= $x13 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x136)))
 (let ((?x63 (bvand symbol.1 (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x63)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x251 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x251)))
 (let (($x99 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x274 (and $x99 $x6)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x240 $x274)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x239 (and $x74 $x16)))
 (let (($x297 (not $x239)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x61 (and $x106 $x15)))
 (let (($x169 (and (not $x61) $x297)))
 (let (($x189 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x119 $x189)))
 (let (($x139 (not $x151)))
 (let (($x29 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x57 $x29)))
 (let (($x276 (and (not $x146) $x139)))
 (let (($x198 (and (and (and (and (and (and $x276 $x169) $x174) $x162) $x192) $x34) $x49)))
 (let (($x5 (and $x198 $x37)))
 (let (($x226 (= symbol.1 dst_symbol_addr.1)))
 (let (($x135 (and $x226 $x5)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x208 (or (bvugt input.memlabel-mem--symbol.1_begin ?x43) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x303 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x208) (or $x150 $x41)))))))
 (let (($x33 (and $x303 $x135)))
 (let (($x265 (= $x33 true)))
 (let (($x289 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x201 (= $x289 true)))
 (let (($x257 (= ?x270 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (= $x257 true)))
 (let (($x104 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x104 true)))
 (let (($x211 (and $x301 $x250)))
 (let (($x298 (and $x211 $x201)))
 (let (($x112 (and $x298 $x265)))
 (let (($x166 (and $x112 $x130)))
 (let (($x42 (and $x166 $x38)))
 (let (($x125 (and $x42 $x204)))
 (let (($x21 (and $x125 $x294)))
 (let (($x195 (and $x21 $x97)))
 (let (($x180 (and $x195 $x138)))
 (let (($x81 (and $x180 $x53)))
 (let (($x267 (and $x81 $x67)))
 (let (($x75 (and $x267 $x153)))
 (let (($x225 (and $x75 $x258)))
 (let (($x131 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x269 (and (not $x131) $x225)))
 (let (($x263 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x134 (and $x263 $x269)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x245 (and $x266 $x134)))
 (let (($x66 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1539X)))
 (=> $x52 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1539X) (_ bv0 32)))))
 ))
 (let (($x157 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1538X)))
 (= $x52 false)))
 ))
 (let (($x203 (and $x157 $x66)))
 (let (($x255 (and $x203 $x245)))
 (let (($x202 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x202 $x255)))
 (let (($x36 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x118 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x36)))))
 (let (($x124 (=> (and $x69 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x36)))))
 (let (($x10 (and $x124 $x231)))
 (let (($x152 (=> $x10 $x12)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x280 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let ((?x54 (bvadd symbol.1 (bvmul input.ind-%var1573X (_ bv4 32)))))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x36 (bvadd ?x114 (_ bv3 32))))
 (let ((?x108 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x114 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x20 (store ?x108 (bvadd ?x114 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x59 (store ?x20 (bvadd ?x114 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x232 (store ?x59 ?x36 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x141 (concat (select ?x232 (bvadd ?x54 (_ bv2 32))) (concat (select ?x232 (bvadd ?x54 (_ bv1 32))) (select ?x232 ?x54)))))
 (let ((?x135 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1573X)))
 (let (($x197 (= input.ind-%var1573X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x179 (= (ite $x197 input.spec-%var-i-0.L3%6%bbentry ?x135) (concat (select ?x232 (bvadd ?x54 (_ bv3 32))) ?x141))))
 (let (($x251 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1573X)))
 (let (($x113 (or $x251 $x197)))
 (=> $x113 $x179))))))))))))))))
 ))
 (let (($x25 (forall ((input.ind-%var1572X (_ BitVec 32)) )(let (($x101 (bvule (_ bv0 32) input.ind-%var1572X)))
 (let (($x79 (and $x101 (bvult input.ind-%var1572X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x197 (= input.ind-%var1572X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x251 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1572X)))
 (let (($x113 (or $x251 $x197)))
 (= $x113 $x79)))))))
 ))
 (let (($x194 (and $x25 $x280)))
 (let (($x98 (= $x194 true)))
 (let ((?x126 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x126)))
 (let (($x259 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x254 (= $x259 true)))
 (let (($x176 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x31 (= $x176 true)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x196)))
 (let ((?x190 (bvand symbol.1 (_ bv3 32))))
 (let (($x273 (= (_ bv0 32) ?x190)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x12 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x152 (= input.memlabel-mem--symbol.1_end ?x12)))
 (let (($x184 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (and $x184 $x152)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x292 $x210)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x225 (and $x133 $x258)))
 (let (($x269 (not $x225)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x186 (and $x75 $x143)))
 (let (($x245 (and (not $x186) $x269)))
 (let (($x291 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x81 $x291)))
 (let (($x267 (not $x67)))
 (let (($x272 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x180 $x272)))
 (let (($x153 (and (not $x53) $x267)))
 (let (($x27 (and (and (and (and (and (and $x153 $x245) $x255) $x10) $x185) $x206) $x273)))
 (let (($x175 (and $x27 $x8)))
 (let (($x100 (= symbol.1 dst_symbol_addr.1)))
 (let (($x300 (and $x100 $x175)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x220 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x220) (or $x214 $x80)))))))
 (let (($x224 (and $x138 $x300)))
 (let (($x282 (= $x224 true)))
 (let (($x86 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x110 (= $x86 true)))
 (let (($x72 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x237 (= $x72 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (= $x140 true)))
 (let (($x215 (forall ((input.ind-%var1549X (_ BitVec 32)) )(let ((?x54 (bvadd symbol.1 (bvmul input.ind-%var1549X (_ bv4 32)))))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x54))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv2 32))) ?x167)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv3 32))) ?x271)))
 (let ((?x135 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1549X)))
 (let (($x251 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1549X)))
 (=> $x251 (= ?x135 ?x285)))))))))
 ))
 (let (($x198 (forall ((input.ind-%var1548X (_ BitVec 32)) )(let (($x101 (bvule (_ bv0 32) input.ind-%var1548X)))
 (let (($x251 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1548X)))
 (= $x251 (and $x101 (bvult input.ind-%var1548X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x129 (and $x198 $x215)))
 (let (($x294 (= $x129 true)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x162 (= $x102 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x106 (bvsub ?x114 ?x40)))
 (let (($x74 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x106) (bvult ?x114 ?x106))))
 (let ((?x189 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x151 (bvmul (_ bv4 64) ?x189)))
 (let ((?x139 ((_ extract 63 32) ?x151)))
 (let (($x276 (= (_ bv0 32) ?x139)))
 (let (($x30 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x297 (and (and (and true $x30) $x276) $x74)))
 (let (($x48 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x169 (and $x48 $x297)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (=> $x212 $x169)))
 (let (($x174 (= $x227 true)))
 (let (($x244 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x191 (= $x244 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x264 (= $x150 true)))
 (let (($x208 (= $x212 true)))
 (let ((?x298 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x229 (bvneg ?x298)))
 (let (($x43 (= ?x229 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x302 (= $x43 true)))
 (let (($x103 (= ?x229 input.dst.llvm-%n)))
 (let (($x93 (= $x103 true)))
 (let (($x117 (and $x93 $x302)))
 (let (($x233 (and $x117 $x208)))
 (let (($x41 (and $x233 $x264)))
 (let (($x94 (and $x41 $x191)))
 (let (($x70 (and $x94 $x174)))
 (let (($x154 (and $x70 $x162)))
 (let (($x21 (and $x154 $x294)))
 (let (($x195 (and $x21 $x97)))
 (let (($x171 (and $x195 $x237)))
 (let (($x170 (and $x171 $x110)))
 (let (($x56 (and $x170 $x282)))
 (let (($x55 (and $x56 $x31)))
 (let (($x90 (and $x55 $x254)))
 (let (($x289 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and (not $x289) $x90)))
 (let (($x250 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x253 (and $x250 $x120)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x219 (and $x87 $x253)))
 (let (($x104 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1559X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1559X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1558X)))
 (= $x128 false)))
 ))
 (let (($x301 (and $x66 $x104)))
 (let (($x78 (and $x301 $x219)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x279 (and $x163 $x78)))
 (let (($x243 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x202 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x243)))))
 (let (($x24 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x243)))))
 (let (($x92 (and $x24 $x279)))
 (let (($x281 (=> $x92 $x98)))
 (not $x281)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x280 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let ((?x54 (bvadd symbol.1 (bvmul input.ind-%var1573X (_ bv4 32)))))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x36 (bvadd ?x114 (_ bv3 32))))
 (let ((?x108 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x114 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x20 (store ?x108 (bvadd ?x114 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x59 (store ?x20 (bvadd ?x114 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x232 (store ?x59 ?x36 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x141 (concat (select ?x232 (bvadd ?x54 (_ bv2 32))) (concat (select ?x232 (bvadd ?x54 (_ bv1 32))) (select ?x232 ?x54)))))
 (let ((?x135 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1573X)))
 (let (($x197 (= input.ind-%var1573X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x179 (= (ite $x197 input.spec-%var-i-0.L3%6%bbentry ?x135) (concat (select ?x232 (bvadd ?x54 (_ bv3 32))) ?x141))))
 (let (($x251 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1573X)))
 (let (($x113 (or $x251 $x197)))
 (=> $x113 $x179))))))))))))))))
 ))
 (let (($x25 (forall ((input.ind-%var1572X (_ BitVec 32)) )(let (($x101 (bvule (_ bv0 32) input.ind-%var1572X)))
 (let (($x79 (and $x101 (bvult input.ind-%var1572X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x197 (= input.ind-%var1572X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x251 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1572X)))
 (let (($x113 (or $x251 $x197)))
 (= $x113 $x79)))))))
 ))
 (let (($x194 (and $x25 $x280)))
 (let (($x98 (= $x194 true)))
 (let ((?x126 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x126)))
 (let (($x259 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x254 (= $x259 true)))
 (let (($x176 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x31 (= $x176 true)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x196)))
 (let ((?x190 (bvand symbol.1 (_ bv3 32))))
 (let (($x273 (= (_ bv0 32) ?x190)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x12 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x152 (= input.memlabel-mem--symbol.1_end ?x12)))
 (let (($x184 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (and $x184 $x152)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x292 $x210)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x225 (and $x133 $x258)))
 (let (($x269 (not $x225)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x186 (and $x75 $x143)))
 (let (($x245 (and (not $x186) $x269)))
 (let (($x291 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x81 $x291)))
 (let (($x267 (not $x67)))
 (let (($x272 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x180 $x272)))
 (let (($x153 (and (not $x53) $x267)))
 (let (($x27 (and (and (and (and (and (and $x153 $x245) $x255) $x10) $x185) $x206) $x273)))
 (let (($x175 (and $x27 $x8)))
 (let (($x100 (= symbol.1 dst_symbol_addr.1)))
 (let (($x300 (and $x100 $x175)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x220 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x220) (or $x214 $x80)))))))
 (let (($x224 (and $x138 $x300)))
 (let (($x282 (= $x224 true)))
 (let (($x86 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x110 (= $x86 true)))
 (let (($x72 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x237 (= $x72 true)))
 (let (($x140 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x97 (= $x140 true)))
 (let (($x215 (forall ((input.ind-%var1549X (_ BitVec 32)) )(let ((?x54 (bvadd symbol.1 (bvmul input.ind-%var1549X (_ bv4 32)))))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x54))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv2 32))) ?x167)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x54 (_ bv3 32))) ?x271)))
 (let ((?x135 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1549X)))
 (let (($x251 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1549X)))
 (=> $x251 (= ?x135 ?x285)))))))))
 ))
 (let (($x198 (forall ((input.ind-%var1548X (_ BitVec 32)) )(let (($x101 (bvule (_ bv0 32) input.ind-%var1548X)))
 (let (($x251 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1548X)))
 (= $x251 (and $x101 (bvult input.ind-%var1548X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x129 (and $x198 $x215)))
 (let (($x294 (= $x129 true)))
 (let (($x102 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x162 (= $x102 true)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let ((?x106 (bvsub ?x114 ?x40)))
 (let (($x74 (ite (bvsge ?x40 (_ bv0 32)) (bvuge ?x114 ?x106) (bvult ?x114 ?x106))))
 (let ((?x189 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x151 (bvmul (_ bv4 64) ?x189)))
 (let ((?x139 ((_ extract 63 32) ?x151)))
 (let (($x276 (= (_ bv0 32) ?x139)))
 (let (($x30 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x297 (and (and (and true $x30) $x276) $x74)))
 (let (($x48 (= (bvand ?x114 (_ bv4294967292 32)) ?x114)))
 (let (($x169 (and $x48 $x297)))
 (let (($x212 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (=> $x212 $x169)))
 (let (($x174 (= $x227 true)))
 (let (($x244 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x191 (= $x244 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x264 (= $x150 true)))
 (let (($x208 (= $x212 true)))
 (let ((?x298 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x229 (bvneg ?x298)))
 (let (($x43 (= ?x229 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x302 (= $x43 true)))
 (let (($x103 (= ?x229 input.dst.llvm-%n)))
 (let (($x93 (= $x103 true)))
 (let (($x117 (and $x93 $x302)))
 (let (($x233 (and $x117 $x208)))
 (let (($x41 (and $x233 $x264)))
 (let (($x94 (and $x41 $x191)))
 (let (($x70 (and $x94 $x174)))
 (let (($x154 (and $x70 $x162)))
 (let (($x21 (and $x154 $x294)))
 (let (($x195 (and $x21 $x97)))
 (let (($x171 (and $x195 $x237)))
 (let (($x170 (and $x171 $x110)))
 (let (($x56 (and $x170 $x282)))
 (let (($x55 (and $x56 $x31)))
 (let (($x90 (and $x55 $x254)))
 (let (($x289 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and (not $x289) $x90)))
 (let (($x250 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x253 (and $x250 $x120)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x219 (and $x87 $x253)))
 (let (($x104 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1559X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1559X) (_ bv0 32)))))
 ))
 (let (($x66 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1558X)))
 (= $x128 false)))
 ))
 (let (($x301 (and $x66 $x104)))
 (let (($x78 (and $x301 $x219)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x279 (and $x163 $x78)))
 (let (($x243 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x202 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x243)))))
 (let (($x24 (=> (and $x212 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x243)))))
 (let (($x92 (and $x24 $x279)))
 (let (($x281 (=> $x92 $x98)))
 (not $x281)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (not $x144)))
 (let (($x173 (= $x147 false)))
 (let (($x108 (= $x173 true)))
 (let ((?x279 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x279)))
 (let (($x197 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x197 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x41)))
 (let (($x253 (= ?x244 input.dst.llvm-%n)))
 (let (($x219 (= $x253 true)))
 (let (($x254 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x90 (= $x254 true)))
 (let (($x126 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (= $x126 true)))
 (let (($x56 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let ((?x142 (bvadd symbol.1 (bvmul input.ind-%var1583X (_ bv4 32)))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x142))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv2 32))) ?x190)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv3 32))) ?x196)))
 (let ((?x143 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1583X)))
 (let (($x89 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1583X)))
 (=> $x89 (= ?x143 ?x300)))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x81 (and (bvule (_ bv0 32) input.ind-%var1582X) (bvult input.ind-%var1582X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x89 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1582X)))
 (= $x89 $x81))))
 ))
 (let (($x176 (and $x67 $x56)))
 (let (($x31 (= $x176 true)))
 (let (($x111 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x80 (= $x111 true)))
 (let (($x107 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x268 (= $x107 true)))
 (let (($x187 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x200 (= $x187 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x140)))
 (let ((?x294 (bvand symbol.1 (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x294)))
 (let ((?x215 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x271 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x285 (= input.memlabel-mem--symbol.1_end ?x271)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (and $x167 $x285)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (and $x9 $x50)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x96 (and $x230 $x54)))
 (let (($x234 (not $x96)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x265 (and $x198 $x135)))
 (let (($x218 (and (not $x265) $x234)))
 (let (($x251 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x154 $x251)))
 (let (($x34 (not $x101)))
 (let (($x102 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x70 $x102)))
 (let (($x49 (and (not $x162) $x34)))
 (let (($x110 (and (and (and (and (and (and $x49 $x218) $x199) $x18) $x236) $x129) $x21)))
 (let (($x170 (and $x110 $x97)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x148 (and $x146 $x170)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x139 (or (bvugt input.memlabel-mem--symbol.1_begin ?x119) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x139) (or $x106 $x61)))))))
 (let (($x181 (and $x174 $x148)))
 (let (($x122 (= $x181 true)))
 (let (($x303 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x48 (= $x303 true)))
 (let (($x191 (= ?x244 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (= $x191 true)))
 (let (($x288 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x150 (= $x288 true)))
 (let (($x91 (and $x150 $x94)))
 (let (($x57 (and $x91 $x48)))
 (let (($x82 (and $x57 $x122)))
 (let (($x220 (and $x82 $x200)))
 (let (($x214 (and $x220 $x268)))
 (let (($x293 (and $x214 $x80)))
 (let (($x55 (and $x293 $x31)))
 (let (($x259 (and $x55 $x65)))
 (let (($x120 (and $x259 $x90)))
 (let (($x78 (and $x120 $x219)))
 (let (($x155 (and $x78 $x113)))
 (let (($x117 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (and $x117 $x155)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x79 (and $x93 $x77)))
 (let (($x298 (forall ((input.ind-%var1593X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1593X)))
 (=> $x228 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1593X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var1592X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1592X)))
 (= $x228 false)))
 ))
 (let (($x229 (and $x104 $x298)))
 (let (($x156 (and $x229 $x79)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x25 (and $x157 $x156)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let (($x124 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x163 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x124)))))
 (let (($x213 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x124)))))
 (let (($x46 (and $x213 $x25)))
 (let (($x121 (=> $x46 $x108)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (not $x144)))
 (let (($x173 (= $x147 false)))
 (let (($x108 (= $x173 true)))
 (let ((?x279 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x92 (bvneg ?x279)))
 (let (($x197 (= ?x92 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x197 true)))
 (let ((?x41 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x41)))
 (let (($x253 (= ?x244 input.dst.llvm-%n)))
 (let (($x219 (= $x253 true)))
 (let (($x254 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x90 (= $x254 true)))
 (let (($x126 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (= $x126 true)))
 (let (($x56 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let ((?x142 (bvadd symbol.1 (bvmul input.ind-%var1583X (_ bv4 32)))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x142))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv2 32))) ?x190)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv3 32))) ?x196)))
 (let ((?x143 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1583X)))
 (let (($x89 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1583X)))
 (=> $x89 (= ?x143 ?x300)))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x81 (and (bvule (_ bv0 32) input.ind-%var1582X) (bvult input.ind-%var1582X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x89 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1582X)))
 (= $x89 $x81))))
 ))
 (let (($x176 (and $x67 $x56)))
 (let (($x31 (= $x176 true)))
 (let (($x111 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x80 (= $x111 true)))
 (let (($x107 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x268 (= $x107 true)))
 (let (($x187 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x200 (= $x187 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x140)))
 (let ((?x294 (bvand symbol.1 (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x294)))
 (let ((?x215 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x271 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x285 (= input.memlabel-mem--symbol.1_end ?x271)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x50 (and $x167 $x285)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (and $x9 $x50)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x96 (and $x230 $x54)))
 (let (($x234 (not $x96)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x265 (and $x198 $x135)))
 (let (($x218 (and (not $x265) $x234)))
 (let (($x251 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x154 $x251)))
 (let (($x34 (not $x101)))
 (let (($x102 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x70 $x102)))
 (let (($x49 (and (not $x162) $x34)))
 (let (($x110 (and (and (and (and (and (and $x49 $x218) $x199) $x18) $x236) $x129) $x21)))
 (let (($x170 (and $x110 $x97)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x148 (and $x146 $x170)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x139 (or (bvugt input.memlabel-mem--symbol.1_begin ?x119) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x139) (or $x106 $x61)))))))
 (let (($x181 (and $x174 $x148)))
 (let (($x122 (= $x181 true)))
 (let (($x303 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x48 (= $x303 true)))
 (let (($x191 (= ?x244 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x94 (= $x191 true)))
 (let (($x288 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x150 (= $x288 true)))
 (let (($x91 (and $x150 $x94)))
 (let (($x57 (and $x91 $x48)))
 (let (($x82 (and $x57 $x122)))
 (let (($x220 (and $x82 $x200)))
 (let (($x214 (and $x220 $x268)))
 (let (($x293 (and $x214 $x80)))
 (let (($x55 (and $x293 $x31)))
 (let (($x259 (and $x55 $x65)))
 (let (($x120 (and $x259 $x90)))
 (let (($x78 (and $x120 $x219)))
 (let (($x155 (and $x78 $x113)))
 (let (($x117 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x77 (and $x117 $x155)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x79 (and $x93 $x77)))
 (let (($x298 (forall ((input.ind-%var1593X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1593X)))
 (=> $x228 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1593X) (_ bv0 32)))))
 ))
 (let (($x104 (forall ((input.ind-%var1592X (_ BitVec 32)) )(let (($x228 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1592X)))
 (= $x228 false)))
 ))
 (let (($x229 (and $x104 $x298)))
 (let (($x156 (and $x229 $x79)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x25 (and $x157 $x156)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let (($x124 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x163 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x124)))))
 (let (($x213 (=> (and $x144 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x124)))))
 (let (($x46 (and $x213 $x25)))
 (let (($x121 (=> $x46 $x108)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000152)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000152)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000152)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000152)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000152)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffe77 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffe76 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffe75 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffe74 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000152 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000180)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000180)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xf7f81898)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdc724c0c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000180)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000180)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdc724c0f)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xf7f81a27)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdc724c0c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xf7f81898)
  (define-fun symbol.1 () (_ BitVec 32)
    #xf7f81898)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000180)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #xf7f8189b (bvmul #x00000004 x!0)))
              (k!7 (bvadd #xf7f8189a (bvmul #x00000004 x!0)))
              (k!7 (bvadd #xf7f81899 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #xf7f81898 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000180 x!0)
         (ite (bvule #x00000181 x!0) #x00000181 #x00000180)
         #x00000000))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x210 (or $x153 $x133)))
 (let (($x45 (= $x210 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x245)))
 (let (($x269 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x269 true)))
 (let ((?x222 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x222)))
 (let (($x184 (= ?x100 input.dst.llvm-%n)))
 (let (($x231 (= $x184 true)))
 (let (($x258 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (= $x258 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x211 (= $x247 true)))
 (let (($x87 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x87 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x257 (= $x263 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x226 true)))
 (let (($x121 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let ((?x279 (bvadd symbol.1 (bvmul input.ind-%var1643X (_ bv4 32)))))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x279 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x279))))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x279 (_ bv2 32))) ?x155)))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x279 (_ bv3 32))) ?x156)))
 (let ((?x216 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1643X)))
 (let (($x53 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1643X)))
 (=> $x53 (= ?x216 ?x147)))))))))
 ))
 (let (($x149 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let (($x8 (and (bvule (_ bv0 32) input.ind-%var1642X) (bvult input.ind-%var1642X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x53 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1642X)))
 (= $x53 $x8))))
 ))
 (let (($x164 (and $x149 $x121)))
 (let (($x172 (= $x164 true)))
 (let (($x111 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x80 (= $x111 true)))
 (let (($x107 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x268 (= $x107 true)))
 (let (($x82 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x187 (= $x82 true)))
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x215)))
 (let ((?x236 (bvand symbol.1 (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x236)))
 (let ((?x285 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x285)))
 (let ((?x237 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x9 (= input.memlabel-mem--symbol.1_end ?x237)))
 (let (($x249 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x167 (and $x249 $x9)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (and $x72 $x167)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x230 (and $x265 $x204)))
 (let (($x54 (not $x230)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (and $x49 $x198)))
 (let (($x234 (and (not $x135) $x54)))
 (let (($x63 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x162 $x63)))
 (let (($x251 (not $x154)))
 (let (($x70 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x146 $x70)))
 (let (($x34 (and (not $x102) $x251)))
 (let (($x97 (and (and (and (and (and (and $x34 $x234) $x218) $x199) $x271) $x50) $x171)))
 (let (($x170 (and $x97 $x129)))
 (let (($x30 (= symbol.1 dst_symbol_addr.1)))
 (let (($x148 (and $x30 $x170)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x139 (or (bvugt input.memlabel-mem--symbol.1_begin ?x119) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x139) (or $x15 $x61)))))))
 (let (($x181 (and $x29 $x148)))
 (let (($x122 (= $x181 true)))
 (let (($x200 (and $x122 $x187)))
 (let (($x214 (and $x200 $x268)))
 (let (($x293 (and $x214 $x80)))
 (let (($x223 (and $x293 $x172)))
 (let (($x186 (and $x223 $x138)))
 (let (($x301 (and $x186 $x257)))
 (let (($x256 (and $x301 $x128)))
 (let (($x75 (and $x256 $x211)))
 (let (($x292 (and $x75 $x225)))
 (let (($x10 (and $x292 $x231)))
 (let (($x95 (and $x10 $x255)))
 (let (($x303 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (and $x303 $x95)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x115 (and $x191 $x12)))
 (let (($x264 (forall ((input.ind-%var1653X (_ BitVec 32)) )(let (($x270 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1653X)))
 (=> $x270 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1653X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let (($x270 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1652X)))
 (= $x270 false)))
 ))
 (let (($x41 (and $x298 $x264)))
 (let (($x180 (and $x41 $x115)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x272 (and $x66 $x180)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let (($x24 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x157 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x24)))))
 (let (($x44 (=> (and $x133 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x24)))))
 (let (($x152 (and $x44 $x272)))
 (let (($x289 (=> $x152 $x45)))
 (not $x289)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x210 (or $x153 $x133)))
 (let (($x45 (= $x210 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x245)))
 (let (($x269 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x255 (= $x269 true)))
 (let ((?x222 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x222)))
 (let (($x184 (= ?x100 input.dst.llvm-%n)))
 (let (($x231 (= $x184 true)))
 (let (($x258 (= ?x100 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (= $x258 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x211 (= $x247 true)))
 (let (($x87 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x128 (= $x87 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x257 (= $x263 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x226 true)))
 (let (($x121 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let ((?x279 (bvadd symbol.1 (bvmul input.ind-%var1643X (_ bv4 32)))))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x279 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x279))))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x279 (_ bv2 32))) ?x155)))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x279 (_ bv3 32))) ?x156)))
 (let ((?x216 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1643X)))
 (let (($x53 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1643X)))
 (=> $x53 (= ?x216 ?x147)))))))))
 ))
 (let (($x149 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let (($x8 (and (bvule (_ bv0 32) input.ind-%var1642X) (bvult input.ind-%var1642X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x53 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1642X)))
 (= $x53 $x8))))
 ))
 (let (($x164 (and $x149 $x121)))
 (let (($x172 (= $x164 true)))
 (let (($x111 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x80 (= $x111 true)))
 (let (($x107 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x268 (= $x107 true)))
 (let (($x82 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x187 (= $x82 true)))
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x215)))
 (let ((?x236 (bvand symbol.1 (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x236)))
 (let ((?x285 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x285)))
 (let ((?x237 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x9 (= input.memlabel-mem--symbol.1_end ?x237)))
 (let (($x249 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x167 (and $x249 $x9)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (and $x72 $x167)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x230 (and $x265 $x204)))
 (let (($x54 (not $x230)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x135 (and $x49 $x198)))
 (let (($x234 (and (not $x135) $x54)))
 (let (($x63 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x162 $x63)))
 (let (($x251 (not $x154)))
 (let (($x70 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x146 $x70)))
 (let (($x34 (and (not $x102) $x251)))
 (let (($x97 (and (and (and (and (and (and $x34 $x234) $x218) $x199) $x271) $x50) $x171)))
 (let (($x170 (and $x97 $x129)))
 (let (($x30 (= symbol.1 dst_symbol_addr.1)))
 (let (($x148 (and $x30 $x170)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x139 (or (bvugt input.memlabel-mem--symbol.1_begin ?x119) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x139) (or $x15 $x61)))))))
 (let (($x181 (and $x29 $x148)))
 (let (($x122 (= $x181 true)))
 (let (($x200 (and $x122 $x187)))
 (let (($x214 (and $x200 $x268)))
 (let (($x293 (and $x214 $x80)))
 (let (($x223 (and $x293 $x172)))
 (let (($x186 (and $x223 $x138)))
 (let (($x301 (and $x186 $x257)))
 (let (($x256 (and $x301 $x128)))
 (let (($x75 (and $x256 $x211)))
 (let (($x292 (and $x75 $x225)))
 (let (($x10 (and $x292 $x231)))
 (let (($x95 (and $x10 $x255)))
 (let (($x303 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x12 (and $x303 $x95)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x115 (and $x191 $x12)))
 (let (($x264 (forall ((input.ind-%var1653X (_ BitVec 32)) )(let (($x270 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1653X)))
 (=> $x270 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1653X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var1652X (_ BitVec 32)) )(let (($x270 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1652X)))
 (= $x270 false)))
 ))
 (let (($x41 (and $x298 $x264)))
 (let (($x180 (and $x41 $x115)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x272 (and $x66 $x180)))
 (let ((?x40 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvadd symbol.1 ?x40)))
 (let (($x24 (and (bvule input.memlabel-mem--symbol.1_begin ?x114) (bvule (bvadd ?x114 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x157 (=> (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32))) (or false (or false $x24)))))
 (let (($x44 (=> (and $x133 (bvule ?x114 (bvsub (bvadd ?x114 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x24)))))
 (let (($x152 (and $x44 $x272)))
 (let (($x289 (=> $x152 $x45)))
 (not $x289)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let ((?x142 (bvadd symbol.1 (bvmul input.ind-%var1683X (_ bv4 32)))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x142))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv2 32))) ?x149)))
 (let ((?x46 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv3 32))) ?x78)))
 (let ((?x285 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1683X)))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1683X)))
 (=> $x86 (= ?x285 ?x46)))))))))
 ))
 (let (($x59 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1682X)))
 (= $x86 (and (bvule (_ bv0 32) input.ind-%var1682X) (bvult input.ind-%var1682X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x59 $x51)))
 (let (($x6 (= $x177 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x139)))
 (let (($x176 (= ?x276 input.dst.llvm-%n)))
 (let (($x282 (= $x176 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x62)))
 (let ((?x228 (bvand symbol.1 (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x228)))
 (let ((?x229 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x229)))
 (let ((?x81 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x137 (= input.memlabel-mem--symbol.1_end ?x81)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x250 (and $x48 $x137)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x302 (and $x68 $x250)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (and $x180 $x272)))
 (let (($x153 (not $x152)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x95 $x12)))
 (let (($x45 (and (not $x115) $x153)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x231 $x10)))
 (let (($x246 (not $x245)))
 (let (($x292 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x225 $x292)))
 (let (($x255 (and (not $x184) $x246)))
 (let (($x224 (and (and (and (and (and (and $x255 $x45) $x289) $x112) $x302) $x93) $x296)))
 (let (($x254 (and $x224 $x208)))
 (let (($x121 (= symbol.1 dst_symbol_addr.1)))
 (let (($x90 (and $x121 $x254)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x256 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x257 (or (bvugt input.memlabel-mem--symbol.1_begin ?x138) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x258 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x257) (or $x256 $x247)))))))
 (let (($x126 (and $x258 $x90)))
 (let (($x65 (= $x126 true)))
 (let (($x155 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (= $x155 true)))
 (let (($x79 (forall ((input.ind-%var1663X (_ BitVec 32)) )(let ((?x142 (bvadd symbol.1 (bvmul input.ind-%var1663X (_ bv4 32)))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x142))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv2 32))) ?x149)))
 (let ((?x46 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv3 32))) ?x78)))
 (let ((?x285 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1663X)))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1663X)))
 (=> $x86 (= ?x285 ?x46)))))))))
 ))
 (let (($x9 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x249 (bvule (_ bv0 32) input.ind-%var1662X)))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1662X)))
 (= $x86 (and $x249 (bvult input.ind-%var1662X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x197 (and $x9 $x79)))
 (let (($x113 (= $x197 true)))
 (let (($x102 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (not $x102)))
 (let (($x204 (= $x101 true)))
 (let (($x49 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x198 (and true $x49)))
 (let (($x135 (=> $x101 $x198)))
 (let (($x96 (= $x135 true)))
 (let (($x57 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x30 (= $x57 true)))
 (let (($x297 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x169 (= $x297 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x17 (= $x61 true)))
 (let (($x239 (= ?x276 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (= $x239 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x119 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x227 (= $x16 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x91 (= $x94 true)))
 (let ((?x288 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x150 (bvneg ?x288)))
 (let (($x41 (= ?x150 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x41 true)))
 (let (($x303 (and $x244 $x91)))
 (let (($x174 (and $x303 $x227)))
 (let (($x151 (and $x174 $x189)))
 (let (($x106 (and $x151 $x15)))
 (let (($x74 (and $x106 $x17)))
 (let (($x29 (and $x74 $x169)))
 (let (($x146 (and $x29 $x30)))
 (let (($x265 (and $x146 $x96)))
 (let (($x230 (and $x265 $x204)))
 (let (($x92 (and $x230 $x113)))
 (let (($x147 (and $x92 $x156)))
 (let (($x56 (and $x147 $x65)))
 (let (($x31 (and $x56 $x282)))
 (let (($x43 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x259 (and $x43 $x31)))
 (let (($x201 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and $x201 $x259)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x64 (and $x66 $x120)))
 (let (($x157 (forall ((input.ind-%var1673X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1673X)))
 (=> $x40 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1673X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var1672X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1672X)))
 (= $x40 false)))
 ))
 (let (($x44 (and $x248 $x157)))
 (let (($x143 (and $x44 $x64)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x134 (and $x196 $x143)))
 (let (($x33 (=> $x134 $x6)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let ((?x142 (bvadd symbol.1 (bvmul input.ind-%var1683X (_ bv4 32)))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x142))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv2 32))) ?x149)))
 (let ((?x46 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv3 32))) ?x78)))
 (let ((?x285 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1683X)))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1683X)))
 (=> $x86 (= ?x285 ?x46)))))))))
 ))
 (let (($x59 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1682X)))
 (= $x86 (and (bvule (_ bv0 32) input.ind-%var1682X) (bvult input.ind-%var1682X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x59 $x51)))
 (let (($x6 (= $x177 true)))
 (let ((?x139 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x276 (bvneg ?x139)))
 (let (($x176 (= ?x276 input.dst.llvm-%n)))
 (let (($x282 (= $x176 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x62)))
 (let ((?x228 (bvand symbol.1 (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x228)))
 (let ((?x229 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x229)))
 (let ((?x81 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x137 (= input.memlabel-mem--symbol.1_end ?x81)))
 (let (($x48 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x250 (and $x48 $x137)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x302 (and $x68 $x250)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (and $x180 $x272)))
 (let (($x153 (not $x152)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x95 $x12)))
 (let (($x45 (and (not $x115) $x153)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x231 $x10)))
 (let (($x246 (not $x245)))
 (let (($x292 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x225 $x292)))
 (let (($x255 (and (not $x184) $x246)))
 (let (($x224 (and (and (and (and (and (and $x255 $x45) $x289) $x112) $x302) $x93) $x296)))
 (let (($x254 (and $x224 $x208)))
 (let (($x121 (= symbol.1 dst_symbol_addr.1)))
 (let (($x90 (and $x121 $x254)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x256 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x257 (or (bvugt input.memlabel-mem--symbol.1_begin ?x138) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x258 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x257) (or $x256 $x247)))))))
 (let (($x126 (and $x258 $x90)))
 (let (($x65 (= $x126 true)))
 (let (($x155 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x156 (= $x155 true)))
 (let (($x79 (forall ((input.ind-%var1663X (_ BitVec 32)) )(let ((?x142 (bvadd symbol.1 (bvmul input.ind-%var1663X (_ bv4 32)))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x142))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv2 32))) ?x149)))
 (let ((?x46 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x142 (_ bv3 32))) ?x78)))
 (let ((?x285 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1663X)))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1663X)))
 (=> $x86 (= ?x285 ?x46)))))))))
 ))
 (let (($x9 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x249 (bvule (_ bv0 32) input.ind-%var1662X)))
 (let (($x86 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1662X)))
 (= $x86 (and $x249 (bvult input.ind-%var1662X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x197 (and $x9 $x79)))
 (let (($x113 (= $x197 true)))
 (let (($x102 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x101 (not $x102)))
 (let (($x204 (= $x101 true)))
 (let (($x49 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x198 (and true $x49)))
 (let (($x135 (=> $x101 $x198)))
 (let (($x96 (= $x135 true)))
 (let (($x57 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x30 (= $x57 true)))
 (let (($x297 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x169 (= $x297 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x17 (= $x61 true)))
 (let (($x239 (= ?x276 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x15 (= $x239 true)))
 (let (($x119 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x119 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x227 (= $x16 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x91 (= $x94 true)))
 (let ((?x288 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x150 (bvneg ?x288)))
 (let (($x41 (= ?x150 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x41 true)))
 (let (($x303 (and $x244 $x91)))
 (let (($x174 (and $x303 $x227)))
 (let (($x151 (and $x174 $x189)))
 (let (($x106 (and $x151 $x15)))
 (let (($x74 (and $x106 $x17)))
 (let (($x29 (and $x74 $x169)))
 (let (($x146 (and $x29 $x30)))
 (let (($x265 (and $x146 $x96)))
 (let (($x230 (and $x265 $x204)))
 (let (($x92 (and $x230 $x113)))
 (let (($x147 (and $x92 $x156)))
 (let (($x56 (and $x147 $x65)))
 (let (($x31 (and $x56 $x282)))
 (let (($x43 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x259 (and $x43 $x31)))
 (let (($x201 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and $x201 $x259)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x64 (and $x66 $x120)))
 (let (($x157 (forall ((input.ind-%var1673X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1673X)))
 (=> $x40 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1673X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var1672X (_ BitVec 32)) )(let (($x40 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1672X)))
 (= $x40 false)))
 ))
 (let (($x44 (and $x248 $x157)))
 (let (($x143 (and $x44 $x64)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x134 (and $x196 $x143)))
 (let (($x33 (=> $x134 $x6)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x234 (not $x58)))
 (let (($x199 (or $x58 $x234)))
 (let (($x21 (= $x199 true)))
 (let ((?x268 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x268)))
 (let (($x187 (= ?x214 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x187 true)))
 (let ((?x63 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x63)))
 (let (($x195 (= ?x251 input.dst.llvm-%n)))
 (let (($x215 (= $x195 true)))
 (let (($x110 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x54 (= $x110 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (= $x238 true)))
 (let (($x188 (forall ((input.ind-%var1693X (_ BitVec 32)) )(let ((?x76 (bvadd symbol.1 (bvmul input.ind-%var1693X (_ bv4 32)))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x76))))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv2 32))) ?x6)))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv3 32))) ?x236)))
 (let ((?x228 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1693X)))
 (let (($x89 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1693X)))
 (=> $x89 (= ?x228 ?x50)))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1692X (_ BitVec 32)) )(let (($x250 (and (bvule (_ bv0 32) input.ind-%var1692X) (bvult input.ind-%var1692X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x89 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1692X)))
 (= $x89 $x250))))
 ))
 (let (($x36 (and $x67 $x188)))
 (let (($x144 (= $x36 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x153 (= $x152 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x180 (= $x210 true)))
 (let (($x95 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x95 true)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x258 (= (_ bv0 32) ?x222)))
 (let ((?x75 (bvand symbol.1 (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x75)))
 (let ((?x247 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x247)))
 (let ((?x301 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x87 (= input.memlabel-mem--symbol.1_end ?x301)))
 (let (($x257 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x256 (and $x257 $x87)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x263 $x256)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x164 (and $x156 $x147)))
 (let (($x172 (not $x164)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (and $x113 $x92)))
 (let (($x223 (and (not $x155) $x172)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x78 $x46)))
 (let (($x77 (not $x55)))
 (let (($x185 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x175 $x185)))
 (let (($x197 (and (not $x149) $x77)))
 (let (($x269 (and (and (and (and (and (and $x197 $x223) $x138) $x226) $x128) $x211) $x123)))
 (let (($x231 (and $x269 $x258)))
 (let (($x86 (= symbol.1 dst_symbol_addr.1)))
 (let (($x10 (and $x86 $x231)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x285 (or (bvugt input.memlabel-mem--symbol.1_begin ?x18) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x285) (or $x142 $x107)))))))
 (let (($x245 (and $x8 $x10)))
 (let (($x246 (= $x245 true)))
 (let (($x135 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x96 (= $x135 true)))
 (let (($x34 (= ?x251 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x49 (= $x34 true)))
 (let (($x101 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x101 true)))
 (let (($x198 (and $x154 $x49)))
 (let (($x265 (and $x198 $x96)))
 (let (($x255 (and $x265 $x246)))
 (let (($x115 (and $x255 $x12)))
 (let (($x272 (and $x115 $x180)))
 (let (($x45 (and $x272 $x153)))
 (let (($x69 (and $x45 $x144)))
 (let (($x167 (and $x69 $x202)))
 (let (($x294 (and $x167 $x54)))
 (let (($x129 (and $x294 $x215)))
 (let (($x148 (and $x129 $x200)))
 (let (($x146 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x146 $x148)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x29 $x181)))
 (let (($x74 (forall ((input.ind-%var1703X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1703X)))
 (=> $x91 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1703X) (_ bv0 32)))))
 ))
 (let (($x174 (forall ((input.ind-%var1702X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1702X)))
 (= $x91 false)))
 ))
 (let (($x297 (and $x174 $x74)))
 (let (($x122 (and $x297 $x170)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x220 (and $x41 $x122)))
 (let ((?x7 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x248 (bvadd symbol.1 ?x7)))
 (let (($x43 (and (bvule input.memlabel-mem--symbol.1_begin ?x248) (bvule (bvadd ?x248 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x264 (=> (bvule ?x248 (bvsub (bvadd ?x248 (_ bv4 32)) (_ bv1 32))) (or false (or false $x43)))))
 (let (($x243 (=> (and $x58 (bvule ?x248 (bvsub (bvadd ?x248 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x43)))))
 (let (($x111 (and $x243 $x220)))
 (let (($x80 (=> $x111 $x21)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x234 (not $x58)))
 (let (($x199 (or $x58 $x234)))
 (let (($x21 (= $x199 true)))
 (let ((?x268 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x214 (bvneg ?x268)))
 (let (($x187 (= ?x214 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x187 true)))
 (let ((?x63 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x63)))
 (let (($x195 (= ?x251 input.dst.llvm-%n)))
 (let (($x215 (= $x195 true)))
 (let (($x110 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x54 (= $x110 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (= $x238 true)))
 (let (($x188 (forall ((input.ind-%var1693X (_ BitVec 32)) )(let ((?x76 (bvadd symbol.1 (bvmul input.ind-%var1693X (_ bv4 32)))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x76))))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv2 32))) ?x6)))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x76 (_ bv3 32))) ?x236)))
 (let ((?x228 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1693X)))
 (let (($x89 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1693X)))
 (=> $x89 (= ?x228 ?x50)))))))))
 ))
 (let (($x67 (forall ((input.ind-%var1692X (_ BitVec 32)) )(let (($x250 (and (bvule (_ bv0 32) input.ind-%var1692X) (bvult input.ind-%var1692X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x89 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1692X)))
 (= $x89 $x250))))
 ))
 (let (($x36 (and $x67 $x188)))
 (let (($x144 (= $x36 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x153 (= $x152 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x180 (= $x210 true)))
 (let (($x95 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x95 true)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x258 (= (_ bv0 32) ?x222)))
 (let ((?x75 (bvand symbol.1 (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x75)))
 (let ((?x247 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x247)))
 (let ((?x301 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x87 (= input.memlabel-mem--symbol.1_end ?x301)))
 (let (($x257 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x256 (and $x257 $x87)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x263 $x256)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x164 (and $x156 $x147)))
 (let (($x172 (not $x164)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (and $x113 $x92)))
 (let (($x223 (and (not $x155) $x172)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x78 $x46)))
 (let (($x77 (not $x55)))
 (let (($x185 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x175 $x185)))
 (let (($x197 (and (not $x149) $x77)))
 (let (($x269 (and (and (and (and (and (and $x197 $x223) $x138) $x226) $x128) $x211) $x123)))
 (let (($x231 (and $x269 $x258)))
 (let (($x86 (= symbol.1 dst_symbol_addr.1)))
 (let (($x10 (and $x86 $x231)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x285 (or (bvugt input.memlabel-mem--symbol.1_begin ?x18) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x285) (or $x142 $x107)))))))
 (let (($x245 (and $x8 $x10)))
 (let (($x246 (= $x245 true)))
 (let (($x135 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x96 (= $x135 true)))
 (let (($x34 (= ?x251 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x49 (= $x34 true)))
 (let (($x101 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x154 (= $x101 true)))
 (let (($x198 (and $x154 $x49)))
 (let (($x265 (and $x198 $x96)))
 (let (($x255 (and $x265 $x246)))
 (let (($x115 (and $x255 $x12)))
 (let (($x272 (and $x115 $x180)))
 (let (($x45 (and $x272 $x153)))
 (let (($x69 (and $x45 $x144)))
 (let (($x167 (and $x69 $x202)))
 (let (($x294 (and $x167 $x54)))
 (let (($x129 (and $x294 $x215)))
 (let (($x148 (and $x129 $x200)))
 (let (($x146 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x181 (and $x146 $x148)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x29 $x181)))
 (let (($x74 (forall ((input.ind-%var1703X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1703X)))
 (=> $x91 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1703X) (_ bv0 32)))))
 ))
 (let (($x174 (forall ((input.ind-%var1702X (_ BitVec 32)) )(let (($x91 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1702X)))
 (= $x91 false)))
 ))
 (let (($x297 (and $x174 $x74)))
 (let (($x122 (and $x297 $x170)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x220 (and $x41 $x122)))
 (let ((?x7 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x248 (bvadd symbol.1 ?x7)))
 (let (($x43 (and (bvule input.memlabel-mem--symbol.1_begin ?x248) (bvule (bvadd ?x248 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x264 (=> (bvule ?x248 (bvsub (bvadd ?x248 (_ bv4 32)) (_ bv1 32))) (or false (or false $x43)))))
 (let (($x243 (=> (and $x58 (bvule ?x248 (bvsub (bvadd ?x248 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x43)))))
 (let (($x111 (and $x243 $x220)))
 (let (($x80 (=> $x111 $x21)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x172)))
 (let ((?x147 (bvand symbol.1 (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x147)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x77 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x197 (= input.memlabel-mem--symbol.1_end ?x77)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x46 $x197)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x78 $x113)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x82 $x216)))
 (let (($x230 (not $x8)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x107 $x279)))
 (let (($x175 (and (not $x25) $x230)))
 (let (($x285 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x9 $x285)))
 (let (($x97 (not $x140)))
 (let (($x18 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x190 $x18)))
 (let (($x53 (and (not $x237) $x97)))
 (let (($x225 (and (and (and (and (and (and $x53 $x175) $x185) $x79) $x92) $x156) $x164)))
 (let (($x263 (and $x225 $x223)))
 (let (($x72 (= symbol.1 dst_symbol_addr.1)))
 (let (($x257 (and $x72 $x263)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x70 (or (bvugt input.memlabel-mem--symbol.1_begin ?x57) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x70) (or $x162 $x63)))))))
 (let (($x153 (and $x96 $x257)))
 (let (($x45 (= $x153 true)))
 (let ((?x256 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x258 (concat ?x222 (concat ?x75 (concat ?x292 ?x256)))))
 (let (($x95 (= ?x258 input.dst.llvm-%n)))
 (let (($x12 (= $x95 true)))
 (let (($x231 (= input.dst.llvm-%n ?x258)))
 (let (($x246 (and (and (and $x96 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x257) $x231)))
 (let (($x255 (= $x246 true)))
 (let (($x115 (and $x255 $x12)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x210 (and $x174 $x115)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x180 (and $x94 $x210)))
 (let (($x243 (forall ((input.ind-%var1713X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1713X)))
 (=> $x7 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1713X) (_ bv0 32)))))
 ))
 (let (($x150 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1712X)))
 (= $x7 false)))
 ))
 (let (($x163 (and $x150 $x243)))
 (let (($x272 (and $x163 $x180)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x152 (and $x196 $x272)))
 (let (($x89 (=> $x152 $x45)))
 (not $x89)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x172)))
 (let ((?x147 (bvand symbol.1 (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x147)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x77 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x197 (= input.memlabel-mem--symbol.1_end ?x77)))
 (let (($x46 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (and $x46 $x197)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x78 $x113)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (and $x82 $x216)))
 (let (($x230 (not $x8)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x107 $x279)))
 (let (($x175 (and (not $x25) $x230)))
 (let (($x285 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x9 $x285)))
 (let (($x97 (not $x140)))
 (let (($x18 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x190 $x18)))
 (let (($x53 (and (not $x237) $x97)))
 (let (($x225 (and (and (and (and (and (and $x53 $x175) $x185) $x79) $x92) $x156) $x164)))
 (let (($x263 (and $x225 $x223)))
 (let (($x72 (= symbol.1 dst_symbol_addr.1)))
 (let (($x257 (and $x72 $x263)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x70 (or (bvugt input.memlabel-mem--symbol.1_begin ?x57) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x70) (or $x162 $x63)))))))
 (let (($x153 (and $x96 $x257)))
 (let (($x45 (= $x153 true)))
 (let ((?x256 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x258 (concat ?x222 (concat ?x75 (concat ?x292 ?x256)))))
 (let (($x95 (= ?x258 input.dst.llvm-%n)))
 (let (($x12 (= $x95 true)))
 (let (($x231 (= input.dst.llvm-%n ?x258)))
 (let (($x246 (and (and (and $x96 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x257) $x231)))
 (let (($x255 (= $x246 true)))
 (let (($x115 (and $x255 $x12)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x210 (and $x174 $x115)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x180 (and $x94 $x210)))
 (let (($x243 (forall ((input.ind-%var1713X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1713X)))
 (=> $x7 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1713X) (_ bv0 32)))))
 ))
 (let (($x150 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1712X)))
 (= $x7 false)))
 ))
 (let (($x163 (and $x150 $x243)))
 (let (($x272 (and $x163 $x180)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x152 (and $x196 $x272)))
 (let (($x89 (=> $x152 $x45)))
 (not $x89)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x104)))
 (let (($x229 (= ?x117 input.dst.llvm-%n)))
 (let (($x81 (= $x229 true)))
 (let ((?x231 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x152 (concat ?x210 (concat ?x255 ?x231)))))
 (let (($x87 (= ?x153 input.dst.llvm-%n)))
 (let (($x248 (= $x87 true)))
 (let (($x45 (= input.dst.llvm-%n ?x153)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x301)))
 (let ((?x257 (bvand symbol.1 (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x257)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x263 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x223)))
 (let ((?x226 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x226)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x164 (and $x100 $x147)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (and $x155 $x164)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x46 (and $x121 $x78)))
 (let (($x55 (not $x46)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x138 $x149)))
 (let (($x197 (and (not $x79) $x55)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x216 $x8)))
 (let (($x175 (not $x230)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x25 $x86)))
 (let (($x185 (and (not $x82) $x175)))
 (let (($x292 (and (and (and (and (and (and $x185 $x197) $x113) $x186) $x225) $x263) $x245)))
 (let (($x256 (and $x292 $x269)))
 (let (($x279 (= symbol.1 dst_symbol_addr.1)))
 (let (($x247 (and $x279 $x256)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x10 (or (bvugt input.memlabel-mem--symbol.1_begin ?x96) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x10) (or $x190 $x18)))))))
 (let (($x139 (and (and (and $x97 $x63) $x247) $x45)))
 (let (($x239 (= $x139 true)))
 (let (($x66 (and $x239 $x248)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x270 (and $x102 $x66)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x58 (and $x29 $x270)))
 (let (($x169 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1723X)))
 (=> $x150 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1723X) (_ bv0 32)))))
 ))
 (let (($x264 (forall ((input.ind-%var1722X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1722X)))
 (= $x150 false)))
 ))
 (let (($x57 (and $x264 $x169)))
 (let (($x171 (and $x57 $x58)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x213 (and $x196 $x171)))
 (let (($x250 (=> $x213 $x81)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x104)))
 (let (($x229 (= ?x117 input.dst.llvm-%n)))
 (let (($x81 (= $x229 true)))
 (let ((?x231 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x152 (concat ?x210 (concat ?x255 ?x231)))))
 (let (($x87 (= ?x153 input.dst.llvm-%n)))
 (let (($x248 (= $x87 true)))
 (let (($x45 (= input.dst.llvm-%n ?x153)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x301)))
 (let ((?x257 (bvand symbol.1 (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x257)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x263 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x223)))
 (let ((?x226 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x226)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x164 (and $x100 $x147)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (and $x155 $x164)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x46 (and $x121 $x78)))
 (let (($x55 (not $x46)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x138 $x149)))
 (let (($x197 (and (not $x79) $x55)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x216 $x8)))
 (let (($x175 (not $x230)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x25 $x86)))
 (let (($x185 (and (not $x82) $x175)))
 (let (($x292 (and (and (and (and (and (and $x185 $x197) $x113) $x186) $x225) $x263) $x245)))
 (let (($x256 (and $x292 $x269)))
 (let (($x279 (= symbol.1 dst_symbol_addr.1)))
 (let (($x247 (and $x279 $x256)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x10 (or (bvugt input.memlabel-mem--symbol.1_begin ?x96) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x10) (or $x190 $x18)))))))
 (let (($x139 (and (and (and $x97 $x63) $x247) $x45)))
 (let (($x239 (= $x139 true)))
 (let (($x66 (and $x239 $x248)))
 (let (($x102 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x270 (and $x102 $x66)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x58 (and $x29 $x270)))
 (let (($x169 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1723X)))
 (=> $x150 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1723X) (_ bv0 32)))))
 ))
 (let (($x264 (forall ((input.ind-%var1722X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1722X)))
 (= $x150 false)))
 ))
 (let (($x57 (and $x264 $x169)))
 (let (($x171 (and $x57 $x58)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x213 (and $x196 $x171)))
 (let (($x250 (=> $x213 $x81)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x133)))
 (let (($x298 (= ?x7 input.spec-%var-n-1)))
 (let (($x174 (= $x298 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x279 (concat ?x63 (concat ?x9 ?x237)))))
 (let (($x229 (= input.dst.llvm-%n ?x25)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x87)))
 (let ((?x139 (bvand symbol.1 (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x139)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let ((?x255 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x231 (= input.memlabel-mem--symbol.1_end ?x255)))
 (let (($x210 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (and $x210 $x231)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x115 $x95)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x247 (and $x269 $x256)))
 (let (($x137 (not $x247)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (and $x245 $x292)))
 (let (($x272 (and (not $x301) $x137)))
 (let (($x172 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x75 $x172)))
 (let (($x263 (not $x223)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x147 $x164)))
 (let (($x257 (and (not $x225) $x263)))
 (let (($x43 (and (and (and (and (and (and $x257 $x272) $x152) $x12) $x180) $x45) $x239)))
 (let (($x104 (and $x43 $x248)))
 (let (($x226 (= symbol.1 dst_symbol_addr.1)))
 (let (($x117 (and $x226 $x104)))
 (let (($x8 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x79) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x222 $x113)))))))
 (let (($x302 (and (and (and $x100 $x8) $x117) $x229)))
 (let (($x101 (= $x302 true)))
 (let (($x82 (= ?x25 input.dst.llvm-%n)))
 (let (($x108 (= $x82 true)))
 (let (($x162 (and $x108 $x101)))
 (let (($x265 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and $x265 $x162)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x201 (and $x198 $x258)))
 (let (($x49 (forall ((input.ind-%var1733X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1733X)))
 (=> $x264 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1733X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var1732X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1732X)))
 (= $x264 false)))
 ))
 (let (($x96 (and $x135 $x49)))
 (let (($x91 (and $x96 $x201)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x168 (and $x196 $x91)))
 (let (($x163 (=> $x168 $x174)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x133 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x133)))
 (let (($x298 (= ?x7 input.spec-%var-n-1)))
 (let (($x174 (= $x298 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x279 (concat ?x63 (concat ?x9 ?x237)))))
 (let (($x229 (= input.dst.llvm-%n ?x25)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x87)))
 (let ((?x139 (bvand symbol.1 (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x139)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let ((?x255 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x231 (= input.memlabel-mem--symbol.1_end ?x255)))
 (let (($x210 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (and $x210 $x231)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x115 $x95)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x247 (and $x269 $x256)))
 (let (($x137 (not $x247)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (and $x245 $x292)))
 (let (($x272 (and (not $x301) $x137)))
 (let (($x172 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x75 $x172)))
 (let (($x263 (not $x223)))
 (let (($x164 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x147 $x164)))
 (let (($x257 (and (not $x225) $x263)))
 (let (($x43 (and (and (and (and (and (and $x257 $x272) $x152) $x12) $x180) $x45) $x239)))
 (let (($x104 (and $x43 $x248)))
 (let (($x226 (= symbol.1 dst_symbol_addr.1)))
 (let (($x117 (and $x226 $x104)))
 (let (($x8 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x79) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x222 $x113)))))))
 (let (($x302 (and (and (and $x100 $x8) $x117) $x229)))
 (let (($x101 (= $x302 true)))
 (let (($x82 (= ?x25 input.dst.llvm-%n)))
 (let (($x108 (= $x82 true)))
 (let (($x162 (and $x108 $x101)))
 (let (($x265 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and $x265 $x162)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x201 (and $x198 $x258)))
 (let (($x49 (forall ((input.ind-%var1733X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1733X)))
 (=> $x264 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1733X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var1732X (_ BitVec 32)) )(let (($x264 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1732X)))
 (= $x264 false)))
 ))
 (let (($x96 (and $x135 $x49)))
 (let (($x91 (and $x96 $x201)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x168 (and $x196 $x91)))
 (let (($x163 (=> $x168 $x174)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x44 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x150 (= $x44 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x168 (concat ?x258 (concat ?x229 ?x117)))))
 (let (($x74 (= ?x41 input.dst.llvm-%n)))
 (let (($x190 (= $x74 true)))
 (let (($x133 (= input.dst.llvm-%n ?x41)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x95)))
 (let ((?x255 (bvand symbol.1 (_ bv3 32))))
 (let (($x231 (= (_ bv0 32) ?x255)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let ((?x152 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x270 (= input.memlabel-mem--symbol.1_end ?x152)))
 (let (($x272 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x12 (and $x272 $x270)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x137 $x12)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x263 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x245 (and $x263 $x257)))
 (let (($x292 (not $x245)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (and $x75 $x172)))
 (let (($x123 (and (not $x223) $x292)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x156 $x226)))
 (let (($x164 (not $x147)))
 (let (($x81 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x8 $x81)))
 (let (($x128 (and (not $x230) $x164)))
 (let (($x239 (and (and (and (and (and (and $x128 $x123) $x269) $x247) $x58) $x246) $x231)))
 (let (($x43 (and $x239 $x180)))
 (let (($x100 (= symbol.1 dst_symbol_addr.1)))
 (let (($x87 (and $x100 $x43)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x79 (or (bvugt input.memlabel-mem--symbol.1_begin ?x185) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x79) (or $x78 $x46)))))))
 (let (($x174 (and (and (and $x92 $x25) $x87) $x133)))
 (let (($x163 (= $x174 true)))
 (let (($x216 (and $x163 $x190)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and $x9 $x216)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x94 (and $x154 $x72)))
 (let (($x107 (forall ((input.ind-%var1743X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1743X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1743X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var1742X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1742X)))
 (= $x135 false)))
 ))
 (let (($x279 (and $x140 $x107)))
 (let (($x146 (and $x279 $x94)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x30 (and $x196 $x146)))
 (let (($x227 (=> $x30 $x150)))
 (not $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x44 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x150 (= $x44 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x168 (concat ?x258 (concat ?x229 ?x117)))))
 (let (($x74 (= ?x41 input.dst.llvm-%n)))
 (let (($x190 (= $x74 true)))
 (let (($x133 (= input.dst.llvm-%n ?x41)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x95)))
 (let ((?x255 (bvand symbol.1 (_ bv3 32))))
 (let (($x231 (= (_ bv0 32) ?x255)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let ((?x152 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x270 (= input.memlabel-mem--symbol.1_end ?x152)))
 (let (($x272 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x12 (and $x272 $x270)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x137 $x12)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x263 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x245 (and $x263 $x257)))
 (let (($x292 (not $x245)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x223 (and $x75 $x172)))
 (let (($x123 (and (not $x223) $x292)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x156 $x226)))
 (let (($x164 (not $x147)))
 (let (($x81 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x8 $x81)))
 (let (($x128 (and (not $x230) $x164)))
 (let (($x239 (and (and (and (and (and (and $x128 $x123) $x269) $x247) $x58) $x246) $x231)))
 (let (($x43 (and $x239 $x180)))
 (let (($x100 (= symbol.1 dst_symbol_addr.1)))
 (let (($x87 (and $x100 $x43)))
 (let (($x25 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x79 (or (bvugt input.memlabel-mem--symbol.1_begin ?x185) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x79) (or $x78 $x46)))))))
 (let (($x174 (and (and (and $x92 $x25) $x87) $x133)))
 (let (($x163 (= $x174 true)))
 (let (($x216 (and $x163 $x190)))
 (let (($x9 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x72 (and $x9 $x216)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x94 (and $x154 $x72)))
 (let (($x107 (forall ((input.ind-%var1743X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1743X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1743X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var1742X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1742X)))
 (= $x135 false)))
 ))
 (let (($x279 (and $x140 $x107)))
 (let (($x146 (and $x279 $x94)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x30 (and $x196 $x146)))
 (let (($x227 (=> $x30 $x150)))
 (not $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x200 (forall ((input.ind-%var1763X (_ BitVec 32)) )(let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x110 (concat ?x167 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32)))))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x129 (concat ?x294 ?x110)))))))))
 ))
 (let (($x224 (forall ((input.ind-%var1762X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1762X) (bvult input.ind-%var1762X (_ bv0 32)))))
 ))
 (let (($x148 (and $x224 $x200)))
 (let (($x181 (= $x148 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x100 (concat ?x25 (concat ?x197 ?x55)))))
 (let (($x102 (= input.dst.llvm-%n ?x8)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x74)))
 (let ((?x174 (bvand symbol.1 (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x174)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x229 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x117 (= input.memlabel-mem--symbol.1_end ?x229)))
 (let (($x258 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x302 (and $x258 $x117)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x162 $x302)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (and $x180 $x43)))
 (let (($x298 (not $x87)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x95 (and $x231 $x239)))
 (let (($x91 (and (not $x95) $x298)))
 (let (($x115 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x213 $x115)))
 (let (($x246 (not $x210)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x270 $x12)))
 (let (($x255 (and (not $x58) $x246)))
 (let (($x44 (and (and (and (and (and (and $x255 $x91) $x168) $x101) $x201) $x133) $x163)))
 (let (($x150 (and $x44 $x190)))
 (let (($x152 (= symbol.1 dst_symbol_addr.1)))
 (let (($x227 (and $x152 $x150)))
 (let (($x226 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x257 (or (bvugt input.memlabel-mem--symbol.1_begin ?x223) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x272 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x257) (or $x171 $x269)))))))
 (let (($x104 (and (and (and $x272 $x226) $x227) $x102)))
 (let (($x29 (= $x104 true)))
 (let (($x230 (= ?x8 input.dst.llvm-%n)))
 (let (($x225 (= $x230 true)))
 (let (($x17 (and $x225 $x29)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x77 $x17)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x61 (and $x175 $x169)))
 (let (($x108 (forall ((input.ind-%var1753X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1753X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1753X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var1752X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1752X)))
 (= $x140 false)))
 ))
 (let (($x185 (and $x53 $x108)))
 (let (($x288 (and $x185 $x61)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x264 (and $x196 $x288)))
 (let (($x170 (=> $x264 $x181)))
 (not $x170))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x200 (forall ((input.ind-%var1763X (_ BitVec 32)) )(let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x110 (concat ?x167 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32)))))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1763X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x129 (concat ?x294 ?x110)))))))))
 ))
 (let (($x224 (forall ((input.ind-%var1762X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1762X) (bvult input.ind-%var1762X (_ bv0 32)))))
 ))
 (let (($x148 (and $x224 $x200)))
 (let (($x181 (= $x148 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x100 (concat ?x25 (concat ?x197 ?x55)))))
 (let (($x102 (= input.dst.llvm-%n ?x8)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x74)))
 (let ((?x174 (bvand symbol.1 (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x174)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x229 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x117 (= input.memlabel-mem--symbol.1_end ?x229)))
 (let (($x258 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x302 (and $x258 $x117)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x162 $x302)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x87 (and $x180 $x43)))
 (let (($x298 (not $x87)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x95 (and $x231 $x239)))
 (let (($x91 (and (not $x95) $x298)))
 (let (($x115 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x213 $x115)))
 (let (($x246 (not $x210)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x270 $x12)))
 (let (($x255 (and (not $x58) $x246)))
 (let (($x44 (and (and (and (and (and (and $x255 $x91) $x168) $x101) $x201) $x133) $x163)))
 (let (($x150 (and $x44 $x190)))
 (let (($x152 (= symbol.1 dst_symbol_addr.1)))
 (let (($x227 (and $x152 $x150)))
 (let (($x226 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x257 (or (bvugt input.memlabel-mem--symbol.1_begin ?x223) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x272 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x257) (or $x171 $x269)))))))
 (let (($x104 (and (and (and $x272 $x226) $x227) $x102)))
 (let (($x29 (= $x104 true)))
 (let (($x230 (= ?x8 input.dst.llvm-%n)))
 (let (($x225 (= $x230 true)))
 (let (($x17 (and $x225 $x29)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x169 (and $x77 $x17)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x61 (and $x175 $x169)))
 (let (($x108 (forall ((input.ind-%var1753X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1753X)))
 (=> $x140 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1753X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var1752X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1752X)))
 (= $x140 false)))
 ))
 (let (($x185 (and $x53 $x108)))
 (let (($x288 (and $x185 $x61)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x264 (and $x196 $x288)))
 (let (($x170 (=> $x264 $x181)))
 (not $x170))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x60 (bvsle ?x273 (_ bv399 32))))
 (let (($x203 (= $x60 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x286)))
 (let (($x109 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (= $x109 true)))
 (let (($x98 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x179 (= $x98 true)))
 (let (($x284 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x277 (= $x284 true)))
 (let (($x253 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x219 (= $x253 true)))
 (let ((?x289 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x289)))
 (let ((?x259 (bvand symbol.1 (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x259)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x282 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x31 (= input.memlabel-mem--symbol.1_end ?x282)))
 (let (($x64 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x126 (and $x64 $x31)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x120 $x126)))
 (let (($x254 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x191 $x16)))
 (let (($x300 (not $x15)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x244 (and $x119 $x151)))
 (let (($x112 (and (not $x244) $x300)))
 (let (($x204 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x118 $x204)))
 (let (($x296 (not $x19)))
 (let (($x62 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x271 $x62)))
 (let (($x276 (and (not $x212) $x296)))
 (let (($x106 (and (and (and (and (and (and $x276 $x112) $x291) $x254) $x65) $x56) $x143)))
 (let (($x193 (and $x106 $x68)))
 (let (($x6 (= symbol.1 dst_symbol_addr.1)))
 (let (($x293 (and $x6 $x193)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x124 (or (bvugt input.memlabel-mem--symbol.1_begin ?x33) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x124) (or $x188 $x36)))))))
 (let (($x127 (and $x80 $x293)))
 (let (($x24 (= $x127 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x218 true)))
 (let (($x86 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x70 (= $x86 true)))
 (let (($x135 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let ((?x148 (bvadd symbol.1 (bvmul input.ind-%var1773X (_ bv4 32)))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x148))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv2 32))) ?x78)))
 (let ((?x107 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv3 32))) ?x198)))
 (let ((?x251 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1773X)))
 (let (($x74 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1773X)))
 (=> $x74 (= ?x251 ?x107)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let (($x17 (and (bvule (_ bv0 32) input.ind-%var1772X) (bvult input.ind-%var1772X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x74 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1772X)))
 (= $x74 $x17))))
 ))
 (let (($x10 (and $x61 $x135)))
 (let (($x9 (= $x10 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x117)))
 (let (($x133 (= ?x302 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (= $x133 true)))
 (let (($x201 (= ?x302 input.dst.llvm-%n)))
 (let (($x146 (= $x201 true)))
 (let (($x162 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x258 (= $x162 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x95 (bvsub ?x53 ?x18)))
 (let (($x87 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x95) (bvult ?x53 ?x95))))
 (let ((?x246 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x255 (bvmul (_ bv4 64) ?x246)))
 (let ((?x231 ((_ extract 63 32) ?x255)))
 (let (($x239 (= (_ bv0 32) ?x231)))
 (let (($x115 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x216 (and (and (and true $x115) $x239) $x87)))
 (let (($x270 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x168 (and $x270 $x216)))
 (let (($x157 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (=> $x157 $x168)))
 (let (($x101 (= $x72 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x237 (= $x226 true)))
 (let (($x45 (= $x157 true)))
 (let (($x147 (and $x45 $x237)))
 (let (($x94 (and $x147 $x101)))
 (let (($x250 (and $x94 $x258)))
 (let (($x41 (and $x250 $x146)))
 (let (($x174 (and $x41 $x30)))
 (let (($x279 (and $x174 $x9)))
 (let (($x265 (and $x279 $x70)))
 (let (($x50 (and $x265 $x176)))
 (let (($x183 (and $x50 $x24)))
 (let (($x103 (and $x183 $x219)))
 (let (($x194 (and $x103 $x277)))
 (let (($x105 (and $x194 $x179)))
 (let (($x280 (and $x105 $x11)))
 (let (($x247 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and (not $x247) $x280)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and $x153 $x27)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x171 $x233)))
 (let (($x257 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1783X)))
 (=> $x55 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1783X) (_ bv0 32)))))
 ))
 (let (($x81 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1782X)))
 (= $x55 false)))
 ))
 (let (($x245 (and $x81 $x257)))
 (let (($x14 (and $x245 $x267)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x232 (and $x89 $x14)))
 (let (($x46 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x92 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x46)))))
 (let (($x142 (=> (and $x157 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x46)))))
 (let (($x160 (and $x142 $x232)))
 (let (($x266 (=> $x160 $x203)))
 (not $x266))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x60 (bvsle ?x273 (_ bv399 32))))
 (let (($x203 (= $x60 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x141 (bvneg ?x286)))
 (let (($x109 (= ?x141 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (= $x109 true)))
 (let (($x98 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x179 (= $x98 true)))
 (let (($x284 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x277 (= $x284 true)))
 (let (($x253 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x219 (= $x253 true)))
 (let ((?x289 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x289)))
 (let ((?x259 (bvand symbol.1 (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x259)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x282 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x31 (= input.memlabel-mem--symbol.1_end ?x282)))
 (let (($x64 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x126 (and $x64 $x31)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x120 $x126)))
 (let (($x254 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x191 $x16)))
 (let (($x300 (not $x15)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x244 (and $x119 $x151)))
 (let (($x112 (and (not $x244) $x300)))
 (let (($x204 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x118 $x204)))
 (let (($x296 (not $x19)))
 (let (($x62 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x271 $x62)))
 (let (($x276 (and (not $x212) $x296)))
 (let (($x106 (and (and (and (and (and (and $x276 $x112) $x291) $x254) $x65) $x56) $x143)))
 (let (($x193 (and $x106 $x68)))
 (let (($x6 (= symbol.1 dst_symbol_addr.1)))
 (let (($x293 (and $x6 $x193)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x124 (or (bvugt input.memlabel-mem--symbol.1_begin ?x33) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x124) (or $x188 $x36)))))))
 (let (($x127 (and $x80 $x293)))
 (let (($x24 (= $x127 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x218 true)))
 (let (($x86 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x70 (= $x86 true)))
 (let (($x135 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let ((?x148 (bvadd symbol.1 (bvmul input.ind-%var1773X (_ bv4 32)))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x148))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv2 32))) ?x78)))
 (let ((?x107 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv3 32))) ?x198)))
 (let ((?x251 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1773X)))
 (let (($x74 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1773X)))
 (=> $x74 (= ?x251 ?x107)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let (($x17 (and (bvule (_ bv0 32) input.ind-%var1772X) (bvult input.ind-%var1772X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x74 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1772X)))
 (= $x74 $x17))))
 ))
 (let (($x10 (and $x61 $x135)))
 (let (($x9 (= $x10 true)))
 (let ((?x117 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x117)))
 (let (($x133 (= ?x302 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (= $x133 true)))
 (let (($x201 (= ?x302 input.dst.llvm-%n)))
 (let (($x146 (= $x201 true)))
 (let (($x162 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x258 (= $x162 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x95 (bvsub ?x53 ?x18)))
 (let (($x87 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x95) (bvult ?x53 ?x95))))
 (let ((?x246 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x255 (bvmul (_ bv4 64) ?x246)))
 (let ((?x231 ((_ extract 63 32) ?x255)))
 (let (($x239 (= (_ bv0 32) ?x231)))
 (let (($x115 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x216 (and (and (and true $x115) $x239) $x87)))
 (let (($x270 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x168 (and $x270 $x216)))
 (let (($x157 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (=> $x157 $x168)))
 (let (($x101 (= $x72 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x237 (= $x226 true)))
 (let (($x45 (= $x157 true)))
 (let (($x147 (and $x45 $x237)))
 (let (($x94 (and $x147 $x101)))
 (let (($x250 (and $x94 $x258)))
 (let (($x41 (and $x250 $x146)))
 (let (($x174 (and $x41 $x30)))
 (let (($x279 (and $x174 $x9)))
 (let (($x265 (and $x279 $x70)))
 (let (($x50 (and $x265 $x176)))
 (let (($x183 (and $x50 $x24)))
 (let (($x103 (and $x183 $x219)))
 (let (($x194 (and $x103 $x277)))
 (let (($x105 (and $x194 $x179)))
 (let (($x280 (and $x105 $x11)))
 (let (($x247 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and (not $x247) $x280)))
 (let (($x153 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x233 (and $x153 $x27)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x171 $x233)))
 (let (($x257 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1783X)))
 (=> $x55 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1783X) (_ bv0 32)))))
 ))
 (let (($x81 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x55 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1782X)))
 (= $x55 false)))
 ))
 (let (($x245 (and $x81 $x257)))
 (let (($x14 (and $x245 $x267)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x232 (and $x89 $x14)))
 (let (($x46 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x92 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x46)))))
 (let (($x142 (=> (and $x157 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x46)))))
 (let (($x160 (and $x142 $x232)))
 (let (($x266 (=> $x160 $x203)))
 (not $x266))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x301 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x264 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x187 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x225 (bvneg ?x187)))
 (let (($x221 (= ?x225 ?x301)))
 (let (($x161 (= $x221 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x202)))
 (let (($x215 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x215 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x110 (= $x144 true)))
 (let (($x150 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x227 (= $x150 true)))
 (let (($x223 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x243 (= $x223 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x222 (= $x25 true)))
 (let (($x113 (forall ((input.ind-%var1793X (_ BitVec 32)) )(let ((?x14 (bvadd symbol.1 (bvmul input.ind-%var1793X (_ bv4 32)))))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x14))))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv2 32))) ?x60)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv3 32))) ?x52)))
 (let ((?x127 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1793X)))
 (let (($x31 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1793X)))
 (=> $x31 (= ?x127 ?x114)))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1792X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var1792X) (bvult input.ind-%var1792X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x31 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1792X)))
 (= $x31 $x143))))
 ))
 (let (($x137 (and $x289 $x113)))
 (let (($x230 (= $x137 true)))
 (let (($x254 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x93 (= $x254 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x151 (bvsub ?x53 ?x18)))
 (let (($x16 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x151) (bvult ?x53 ?x151))))
 (let ((?x19 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x296 (bvmul (_ bv4 64) ?x19)))
 (let ((?x276 ((_ extract 63 32) ?x296)))
 (let (($x119 (= (_ bv0 32) ?x276)))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x112 (and (and (and true $x118) $x119) $x16)))
 (let (($x6 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x48 (and $x6 $x112)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x291 (=> $x140 $x48)))
 (let (($x134 (= $x291 true)))
 (let (($x111 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x234 (= $x111 true)))
 (let (($x57 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x36 (= $x57 true)))
 (let (($x249 (= $x140 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x265 (= (_ bv0 32) ?x70)))
 (let ((?x279 (bvand symbol.1 (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x279)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let ((?x107 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x97 (= input.memlabel-mem--symbol.1_end ?x107)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x297 (and $x78 $x97)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x181 $x297)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x200 $x148)))
 (let (($x49 (not $x63)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x228 (and $x61 $x251)))
 (let (($x156 (and (not $x228) $x49)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x174 $x74)))
 (let (($x104 (not $x29)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x41 $x133)))
 (let (($x169 (and (not $x30) $x104)))
 (let (($x21 (and (and (and (and (and (and $x169 $x156) $x121) $x122) $x135) $x9) $x86)))
 (let (($x33 (and $x21 $x265)))
 (let (($x248 (= symbol.1 dst_symbol_addr.1)))
 (let (($x177 (and $x248 $x33)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x168 (or (bvugt input.memlabel-mem--symbol.1_begin ?x43) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x168) (or $x162 $x258)))))))
 (let (($x236 (and $x146 $x177)))
 (let (($x124 (= $x236 true)))
 (let ((?x213 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x213)))
 (let (($x246 (= ?x115 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (= $x246 true)))
 (let (($x298 (= ?x115 input.dst.llvm-%n)))
 (let (($x210 (= $x298 true)))
 (let (($x231 (and $x210 $x255)))
 (let (($x96 (and $x231 $x124)))
 (let (($x188 (and $x96 $x249)))
 (let (($x220 (and $x188 $x36)))
 (let (($x199 (and $x220 $x234)))
 (let (($x208 (and $x199 $x134)))
 (let (($x120 (and $x208 $x93)))
 (let (($x164 (and $x120 $x230)))
 (let (($x7 (and $x164 $x222)))
 (let (($x163 (and $x7 $x243)))
 (let (($x173 (and $x163 $x227)))
 (let (($x195 (and $x173 $x110)))
 (let (($x69 (and $x195 $x129)))
 (let (($x12 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x238 (and (not $x12) $x69)))
 (let (($x270 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x268 (and $x270 $x238)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x44 (and $x147 $x268)))
 (let (($x272 (forall ((input.ind-%var1803X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1803X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1803X) (_ bv0 32)))))
 ))
 (let (($x257 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1802X)))
 (= $x128 false)))
 ))
 (let (($x226 (and $x257 $x272)))
 (let (($x285 (and $x226 $x44)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x102 (and $x197 $x285)))
 (let (($x184 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x89 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x184)))))
 (let (($x108 (=> (and $x140 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x184)))))
 (let (($x214 (and $x108 $x102)))
 (let (($x261 (=> $x214 $x161)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x301 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x264 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x187 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x225 (bvneg ?x187)))
 (let (($x221 (= ?x225 ?x301)))
 (let (($x161 (= $x221 true)))
 (let ((?x202 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x202)))
 (let (($x215 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x215 true)))
 (let (($x144 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x110 (= $x144 true)))
 (let (($x150 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x227 (= $x150 true)))
 (let (($x223 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x243 (= $x223 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x222 (= $x25 true)))
 (let (($x113 (forall ((input.ind-%var1793X (_ BitVec 32)) )(let ((?x14 (bvadd symbol.1 (bvmul input.ind-%var1793X (_ bv4 32)))))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x14))))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv2 32))) ?x60)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x14 (_ bv3 32))) ?x52)))
 (let ((?x127 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1793X)))
 (let (($x31 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1793X)))
 (=> $x31 (= ?x127 ?x114)))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1792X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var1792X) (bvult input.ind-%var1792X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x31 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1792X)))
 (= $x31 $x143))))
 ))
 (let (($x137 (and $x289 $x113)))
 (let (($x230 (= $x137 true)))
 (let (($x254 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x93 (= $x254 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x151 (bvsub ?x53 ?x18)))
 (let (($x16 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x151) (bvult ?x53 ?x151))))
 (let ((?x19 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x296 (bvmul (_ bv4 64) ?x19)))
 (let ((?x276 ((_ extract 63 32) ?x296)))
 (let (($x119 (= (_ bv0 32) ?x276)))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x112 (and (and (and true $x118) $x119) $x16)))
 (let (($x6 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x48 (and $x6 $x112)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x291 (=> $x140 $x48)))
 (let (($x134 (= $x291 true)))
 (let (($x111 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x234 (= $x111 true)))
 (let (($x57 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x36 (= $x57 true)))
 (let (($x249 (= $x140 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x265 (= (_ bv0 32) ?x70)))
 (let ((?x279 (bvand symbol.1 (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x279)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let ((?x107 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x97 (= input.memlabel-mem--symbol.1_end ?x107)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x297 (and $x78 $x97)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x181 $x297)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x63 (and $x200 $x148)))
 (let (($x49 (not $x63)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x228 (and $x61 $x251)))
 (let (($x156 (and (not $x228) $x49)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x174 $x74)))
 (let (($x104 (not $x29)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x41 $x133)))
 (let (($x169 (and (not $x30) $x104)))
 (let (($x21 (and (and (and (and (and (and $x169 $x156) $x121) $x122) $x135) $x9) $x86)))
 (let (($x33 (and $x21 $x265)))
 (let (($x248 (= symbol.1 dst_symbol_addr.1)))
 (let (($x177 (and $x248 $x33)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x168 (or (bvugt input.memlabel-mem--symbol.1_begin ?x43) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x168) (or $x162 $x258)))))))
 (let (($x236 (and $x146 $x177)))
 (let (($x124 (= $x236 true)))
 (let ((?x213 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x115 (bvneg ?x213)))
 (let (($x246 (= ?x115 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x255 (= $x246 true)))
 (let (($x298 (= ?x115 input.dst.llvm-%n)))
 (let (($x210 (= $x298 true)))
 (let (($x231 (and $x210 $x255)))
 (let (($x96 (and $x231 $x124)))
 (let (($x188 (and $x96 $x249)))
 (let (($x220 (and $x188 $x36)))
 (let (($x199 (and $x220 $x234)))
 (let (($x208 (and $x199 $x134)))
 (let (($x120 (and $x208 $x93)))
 (let (($x164 (and $x120 $x230)))
 (let (($x7 (and $x164 $x222)))
 (let (($x163 (and $x7 $x243)))
 (let (($x173 (and $x163 $x227)))
 (let (($x195 (and $x173 $x110)))
 (let (($x69 (and $x195 $x129)))
 (let (($x12 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x238 (and (not $x12) $x69)))
 (let (($x270 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x268 (and $x270 $x238)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x44 (and $x147 $x268)))
 (let (($x272 (forall ((input.ind-%var1803X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1803X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1803X) (_ bv0 32)))))
 ))
 (let (($x257 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1802X)))
 (= $x128 false)))
 ))
 (let (($x226 (and $x257 $x272)))
 (let (($x285 (and $x226 $x44)))
 (let (($x197 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x102 (and $x197 $x285)))
 (let (($x184 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x89 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x184)))))
 (let (($x108 (=> (and $x140 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x184)))))
 (let (($x214 (and $x108 $x102)))
 (let (($x261 (=> $x214 $x161)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (bvule ?x90 (_ bv399 32))))
 (let (($x27 (= $x56 true)))
 (let ((?x103 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x103)))
 (let (($x11 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x11 true)))
 (let (($x65 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x20 (= $x65 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x293 (= $x256 true)))
 (let (($x171 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let ((?x301 (bvadd symbol.1 (bvmul input.ind-%var1813X (_ bv4 32)))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x301))))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv2 32))) ?x32)))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv3 32))) ?x239)))
 (let ((?x150 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1813X)))
 (let (($x52 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1813X)))
 (=> $x52 (= ?x150 ?x75)))))))))
 ))
 (let (($x7 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x25 (and (bvule (_ bv0 32) input.ind-%var1812X) (bvult input.ind-%var1812X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x52 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1812X)))
 (= $x52 $x25))))
 ))
 (let (($x55 (and $x7 $x171)))
 (let (($x8 (= $x55 true)))
 (let (($x266 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x160 (= $x266 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x189 (bvsub ?x53 ?x18)))
 (let (($x127 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x189) (bvult ?x53 ?x189))))
 (let ((?x93 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvmul (_ bv4 64) ?x93)))
 (let ((?x31 ((_ extract 63 32) ?x120)))
 (let (($x259 (= (_ bv0 32) ?x31)))
 (let (($x208 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x14 (and (and (and true $x208) $x259) $x127)))
 (let (($x16 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x34 (and $x16 $x14)))
 (let (($x40 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x154 (=> $x40 $x34)))
 (let (($x179 (= $x154 true)))
 (let (($x300 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x244 (= $x300 true)))
 (let (($x276 (= $x40 true)))
 (let (($x204 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x19 (= $x204 true)))
 (let ((?x220 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x220)))
 (let ((?x57 (bvand symbol.1 (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x57)))
 (let ((?x249 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x249)))
 (let ((?x177 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x236 (= input.memlabel-mem--symbol.1_end ?x177)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (and $x33 $x236)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x265 $x124)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (and $x135 $x165)))
 (let (($x9 (not $x10)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x297 (and $x107 $x97)))
 (let (($x279 (and (not $x297) $x9)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x170 $x122)))
 (let (($x181 (not $x50)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x218 $x121)))
 (let (($x198 (and (not $x176) $x181)))
 (let (($x62 (and (and (and (and (and (and $x198 $x279) $x86) $x70) $x96) $x188) $x36)))
 (let (($x271 (and $x62 $x111)))
 (let (($x41 (= symbol.1 dst_symbol_addr.1)))
 (let (($x212 (and $x41 $x271)))
 (let (($x228 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x251 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x29 (or (bvugt input.memlabel-mem--symbol.1_begin ?x17) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x29) (or $x251 $x228)))))))
 (let (($x303 (and $x156 $x212)))
 (let (($x118 (= $x303 true)))
 (let (($x117 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x302 (= $x117 true)))
 (let ((?x168 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x168)))
 (let (($x258 (= ?x72 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (= $x258 true)))
 (let (($x101 (= ?x72 input.dst.llvm-%n)))
 (let (($x162 (= $x101 true)))
 (let (($x43 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x87 (= $x43 true)))
 (let (($x94 (and $x87 $x162)))
 (let (($x229 (and $x94 $x250)))
 (let (($x146 (and $x229 $x302)))
 (let (($x15 (and $x146 $x118)))
 (let (($x296 (and $x15 $x19)))
 (let (($x119 (and $x296 $x276)))
 (let (($x151 (and $x119 $x244)))
 (let (($x203 (and $x151 $x179)))
 (let (($x273 (and $x203 $x160)))
 (let (($x172 (and $x273 $x8)))
 (let (($x64 (and $x172 $x293)))
 (let (($x219 (and $x64 $x20)))
 (let (($x286 (and $x219 $x105)))
 (let (($x180 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x194 (and (not $x180) $x286)))
 (let (($x231 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x284 (and $x231 $x194)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x98 (and $x210 $x284)))
 (let (($x213 (forall ((input.ind-%var1823X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1823X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1823X) (_ bv0 32)))))
 ))
 (let (($x272 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1822X)))
 (= $x123 false)))
 ))
 (let (($x115 (and $x272 $x213)))
 (let (($x141 (and $x115 $x98)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x280 (and $x81 $x141)))
 (let (($x142 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x197 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x142)))))
 (let (($x155 (=> (and $x40 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x142)))))
 (let (($x282 (and $x155 $x280)))
 (let (($x193 (=> $x282 $x27)))
 (not $x193))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x56 (bvule ?x90 (_ bv399 32))))
 (let (($x27 (= $x56 true)))
 (let ((?x103 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x103)))
 (let (($x11 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x11 true)))
 (let (($x65 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x20 (= $x65 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x293 (= $x256 true)))
 (let (($x171 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let ((?x301 (bvadd symbol.1 (bvmul input.ind-%var1813X (_ bv4 32)))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x301))))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv2 32))) ?x32)))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv3 32))) ?x239)))
 (let ((?x150 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1813X)))
 (let (($x52 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1813X)))
 (=> $x52 (= ?x150 ?x75)))))))))
 ))
 (let (($x7 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x25 (and (bvule (_ bv0 32) input.ind-%var1812X) (bvult input.ind-%var1812X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x52 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1812X)))
 (= $x52 $x25))))
 ))
 (let (($x55 (and $x7 $x171)))
 (let (($x8 (= $x55 true)))
 (let (($x266 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x160 (= $x266 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x189 (bvsub ?x53 ?x18)))
 (let (($x127 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x189) (bvult ?x53 ?x189))))
 (let ((?x93 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvmul (_ bv4 64) ?x93)))
 (let ((?x31 ((_ extract 63 32) ?x120)))
 (let (($x259 (= (_ bv0 32) ?x31)))
 (let (($x208 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x14 (and (and (and true $x208) $x259) $x127)))
 (let (($x16 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x34 (and $x16 $x14)))
 (let (($x40 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x154 (=> $x40 $x34)))
 (let (($x179 (= $x154 true)))
 (let (($x300 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x244 (= $x300 true)))
 (let (($x276 (= $x40 true)))
 (let (($x204 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x19 (= $x204 true)))
 (let ((?x220 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x220)))
 (let ((?x57 (bvand symbol.1 (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x57)))
 (let ((?x249 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x249)))
 (let ((?x177 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x236 (= input.memlabel-mem--symbol.1_end ?x177)))
 (let (($x33 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x124 (and $x33 $x236)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x265 $x124)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x10 (and $x135 $x165)))
 (let (($x9 (not $x10)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x297 (and $x107 $x97)))
 (let (($x279 (and (not $x297) $x9)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x170 $x122)))
 (let (($x181 (not $x50)))
 (let (($x121 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x218 $x121)))
 (let (($x198 (and (not $x176) $x181)))
 (let (($x62 (and (and (and (and (and (and $x198 $x279) $x86) $x70) $x96) $x188) $x36)))
 (let (($x271 (and $x62 $x111)))
 (let (($x41 (= symbol.1 dst_symbol_addr.1)))
 (let (($x212 (and $x41 $x271)))
 (let (($x228 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x251 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x29 (or (bvugt input.memlabel-mem--symbol.1_begin ?x17) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x29) (or $x251 $x228)))))))
 (let (($x303 (and $x156 $x212)))
 (let (($x118 (= $x303 true)))
 (let (($x117 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x302 (= $x117 true)))
 (let ((?x168 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x168)))
 (let (($x258 (= ?x72 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (= $x258 true)))
 (let (($x101 (= ?x72 input.dst.llvm-%n)))
 (let (($x162 (= $x101 true)))
 (let (($x43 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x87 (= $x43 true)))
 (let (($x94 (and $x87 $x162)))
 (let (($x229 (and $x94 $x250)))
 (let (($x146 (and $x229 $x302)))
 (let (($x15 (and $x146 $x118)))
 (let (($x296 (and $x15 $x19)))
 (let (($x119 (and $x296 $x276)))
 (let (($x151 (and $x119 $x244)))
 (let (($x203 (and $x151 $x179)))
 (let (($x273 (and $x203 $x160)))
 (let (($x172 (and $x273 $x8)))
 (let (($x64 (and $x172 $x293)))
 (let (($x219 (and $x64 $x20)))
 (let (($x286 (and $x219 $x105)))
 (let (($x180 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x194 (and (not $x180) $x286)))
 (let (($x231 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x284 (and $x231 $x194)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x98 (and $x210 $x284)))
 (let (($x213 (forall ((input.ind-%var1823X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1823X)))
 (=> $x123 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1823X) (_ bv0 32)))))
 ))
 (let (($x272 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let (($x123 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1822X)))
 (= $x123 false)))
 ))
 (let (($x115 (and $x272 $x213)))
 (let (($x141 (and $x115 $x98)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x280 (and $x81 $x141)))
 (let (($x142 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x197 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x142)))))
 (let (($x155 (=> (and $x40 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x142)))))
 (let (($x282 (and $x155 $x280)))
 (let (($x193 (=> $x282 $x27)))
 (not $x193))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x187 (bvule ?x243 (_ bv399 32))))
 (let (($x237 (= $x187 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x238)))
 (let (($x167 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x167 true)))
 (let (($x195 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x285 (= $x195 true)))
 (let (($x190 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x67 (= $x190 true)))
 (let (($x58 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x163 (= $x58 true)))
 (let ((?x233 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x233)))
 (let ((?x27 (bvand symbol.1 (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x27)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x98 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x141 (= input.memlabel-mem--symbol.1_end ?x98)))
 (let (($x284 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x280 (and $x284 $x141)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x282 (and $x194 $x280)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x20 (and $x64 $x65)))
 (let (($x219 (not $x20)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x293 (and $x172 $x256)))
 (let (($x109 (and (not $x293) $x219)))
 (let (($x269 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x75 $x269)))
 (let (($x171 (not $x245)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x221 $x32)))
 (let (($x8 (and (not $x239) $x171)))
 (let (($x152 (and (and (and (and (and (and $x8 $x109) $x11) $x286) $x282) $x56) $x193)))
 (let (($x226 (and $x152 $x224)))
 (let (($x273 (= symbol.1 dst_symbol_addr.1)))
 (let (($x147 (and $x273 $x226)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x230) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x301 $x126)))))))
 (let (($x128 (and $x261 $x147)))
 (let (($x263 (= $x128 true)))
 (let (($x154 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x154 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x14 (= $x127 true)))
 (let (($x143 (forall ((input.ind-%var1833X (_ BitVec 32)) )(let ((?x16 (bvadd symbol.1 (bvmul input.ind-%var1833X (_ bv4 32)))))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x16))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv2 32))) ?x134)))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv3 32))) ?x254)))
 (let ((?x57 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1833X)))
 (let (($x199 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1833X)))
 (=> $x199 (= ?x57 ?x31)))))))))
 ))
 (let (($x59 (forall ((input.ind-%var1832X (_ BitVec 32)) )(let (($x124 (and (bvule (_ bv0 32) input.ind-%var1832X) (bvult input.ind-%var1832X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x199 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1832X)))
 (= $x199 $x124))))
 ))
 (let (($x189 (and $x59 $x143)))
 (let (($x106 (= $x189 true)))
 (let ((?x97 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x97)))
 (let (($x10 (= ?x297 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (= $x10 true)))
 (let (($x51 (= ?x297 input.dst.llvm-%n)))
 (let (($x135 (= $x51 true)))
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x181 (= $x50 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x200 (bvsub ?x53 ?x18)))
 (let (($x248 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x200) (bvult ?x53 ?x200))))
 (let ((?x251 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x61 (bvmul (_ bv4 64) ?x251)))
 (let ((?x228 ((_ extract 63 32) ?x61)))
 (let (($x294 (= (_ bv0 32) ?x228)))
 (let (($x104 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x121 (and (and (and true $x104) $x294) $x248)))
 (let (($x49 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x176 (and $x49 $x121)))
 (let (($x196 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (=> $x196 $x176)))
 (let (($x170 (= $x78 true)))
 (let (($x117 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x302 (= $x117 true)))
 (let (($x250 (= $x196 true)))
 (let (($x146 (and $x250 $x302)))
 (let (($x122 (and $x146 $x170)))
 (let (($x198 (and $x122 $x181)))
 (let (($x165 (and $x198 $x135)))
 (let (($x279 (and $x165 $x9)))
 (let (($x289 (and $x279 $x106)))
 (let (($x34 (and $x289 $x14)))
 (let (($x203 (and $x34 $x179)))
 (let (($x281 (and $x203 $x263)))
 (let (($x232 (and $x281 $x163)))
 (let (($x110 (and $x232 $x67)))
 (let (($x102 (and $x110 $x285)))
 (let (($x202 (and $x102 $x215)))
 (let (($x258 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (and (not $x258) $x202)))
 (let (($x162 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and $x162 $x44)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x60 (and $x168 $x214)))
 (let (($x43 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1843X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1843X) (_ bv0 32)))))
 ))
 (let (($x213 (forall ((input.ind-%var1842X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1842X)))
 (= $x66 false)))
 ))
 (let (($x87 (and $x213 $x43)))
 (let (($x113 (and $x87 $x60)))
 (let (($x257 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x137 (and $x257 $x113)))
 (let (($x108 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x108)))))
 (let (($x79 (=> (and $x196 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x108)))))
 (let (($x264 (and $x79 $x137)))
 (let (($x12 (=> $x264 $x237)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x187 (bvule ?x243 (_ bv399 32))))
 (let (($x237 (= $x187 true)))
 (let ((?x238 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x238)))
 (let (($x167 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x167 true)))
 (let (($x195 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x285 (= $x195 true)))
 (let (($x190 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x67 (= $x190 true)))
 (let (($x58 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x163 (= $x58 true)))
 (let ((?x233 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x233)))
 (let ((?x27 (bvand symbol.1 (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x27)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x98 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x141 (= input.memlabel-mem--symbol.1_end ?x98)))
 (let (($x284 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x280 (and $x284 $x141)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x282 (and $x194 $x280)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x20 (and $x64 $x65)))
 (let (($x219 (not $x20)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x293 (and $x172 $x256)))
 (let (($x109 (and (not $x293) $x219)))
 (let (($x269 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x75 $x269)))
 (let (($x171 (not $x245)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x221 $x32)))
 (let (($x8 (and (not $x239) $x171)))
 (let (($x152 (and (and (and (and (and (and $x8 $x109) $x11) $x286) $x282) $x56) $x193)))
 (let (($x226 (and $x152 $x224)))
 (let (($x273 (= symbol.1 dst_symbol_addr.1)))
 (let (($x147 (and $x273 $x226)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x230) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x301 $x126)))))))
 (let (($x128 (and $x261 $x147)))
 (let (($x263 (= $x128 true)))
 (let (($x154 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x154 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x14 (= $x127 true)))
 (let (($x143 (forall ((input.ind-%var1833X (_ BitVec 32)) )(let ((?x16 (bvadd symbol.1 (bvmul input.ind-%var1833X (_ bv4 32)))))
 (let ((?x134 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x16))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv2 32))) ?x134)))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv3 32))) ?x254)))
 (let ((?x57 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1833X)))
 (let (($x199 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1833X)))
 (=> $x199 (= ?x57 ?x31)))))))))
 ))
 (let (($x59 (forall ((input.ind-%var1832X (_ BitVec 32)) )(let (($x124 (and (bvule (_ bv0 32) input.ind-%var1832X) (bvult input.ind-%var1832X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x199 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1832X)))
 (= $x199 $x124))))
 ))
 (let (($x189 (and $x59 $x143)))
 (let (($x106 (= $x189 true)))
 (let ((?x97 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x97)))
 (let (($x10 (= ?x297 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x9 (= $x10 true)))
 (let (($x51 (= ?x297 input.dst.llvm-%n)))
 (let (($x135 (= $x51 true)))
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x181 (= $x50 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x200 (bvsub ?x53 ?x18)))
 (let (($x248 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x200) (bvult ?x53 ?x200))))
 (let ((?x251 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x61 (bvmul (_ bv4 64) ?x251)))
 (let ((?x228 ((_ extract 63 32) ?x61)))
 (let (($x294 (= (_ bv0 32) ?x228)))
 (let (($x104 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x121 (and (and (and true $x104) $x294) $x248)))
 (let (($x49 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x176 (and $x49 $x121)))
 (let (($x196 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (=> $x196 $x176)))
 (let (($x170 (= $x78 true)))
 (let (($x117 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x302 (= $x117 true)))
 (let (($x250 (= $x196 true)))
 (let (($x146 (and $x250 $x302)))
 (let (($x122 (and $x146 $x170)))
 (let (($x198 (and $x122 $x181)))
 (let (($x165 (and $x198 $x135)))
 (let (($x279 (and $x165 $x9)))
 (let (($x289 (and $x279 $x106)))
 (let (($x34 (and $x289 $x14)))
 (let (($x203 (and $x34 $x179)))
 (let (($x281 (and $x203 $x263)))
 (let (($x232 (and $x281 $x163)))
 (let (($x110 (and $x232 $x67)))
 (let (($x102 (and $x110 $x285)))
 (let (($x202 (and $x102 $x215)))
 (let (($x258 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (and (not $x258) $x202)))
 (let (($x162 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x214 (and $x162 $x44)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x60 (and $x168 $x214)))
 (let (($x43 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1843X)))
 (=> $x66 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1843X) (_ bv0 32)))))
 ))
 (let (($x213 (forall ((input.ind-%var1842X (_ BitVec 32)) )(let (($x66 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1842X)))
 (= $x66 false)))
 ))
 (let (($x87 (and $x213 $x43)))
 (let (($x113 (and $x87 $x60)))
 (let (($x257 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x137 (and $x257 $x113)))
 (let (($x108 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x108)))))
 (let (($x79 (=> (and $x196 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x108)))))
 (let (($x264 (and $x79 $x137)))
 (let (($x12 (=> $x264 $x237)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x188 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x206 (bvsge ?x188 (_ bv0 32))))
 (let (($x298 (= $x206 true)))
 (let ((?x19 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x296 (bvneg ?x19)))
 (let (($x303 (= ?x296 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x303 true)))
 (let (($x271 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x119 (= $x271 true)))
 (let (($x70 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x80 (= $x70 true)))
 (let (($x95 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x6 (= $x95 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x68)))
 (let ((?x237 (bvand symbol.1 (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x237)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x243)))
 (let ((?x60 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x113 (= input.memlabel-mem--symbol.1_end ?x60)))
 (let (($x214 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x137 (and $x214 $x113)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x44 $x137)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x285 (and $x110 $x195)))
 (let (($x102 (not $x285)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x67 (and $x232 $x190)))
 (let (($x268 (and (not $x67) $x102)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (and $x147 $x128)))
 (let (($x281 (not $x263)))
 (let (($x224 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (and $x233 $x224)))
 (let (($x163 (and (not $x226) $x281)))
 (let (($x255 (and (and (and (and (and (and $x163 $x268) $x167) $x202) $x264) $x187) $x12)))
 (let (($x115 (and $x255 $x253)))
 (let (($x11 (= symbol.1 dst_symbol_addr.1)))
 (let (($x210 (and $x11 $x115)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x286 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x286)))
 (let (($x284 (or (bvugt input.memlabel-mem--symbol.1_begin ?x286) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x284) (or $x282 $x227)))))))
 (let (($x123 (and $x152 $x210)))
 (let (($x45 (= $x123 true)))
 (let (($x65 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x20 (= $x65 true)))
 (let (($x293 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x293 true)))
 (let (($x171 (forall ((input.ind-%var1853X (_ BitVec 32)) )(let ((?x69 (bvadd symbol.1 (bvmul input.ind-%var1853X (_ bv4 32)))))
 (let ((?x160 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x69))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv2 32))) ?x160)))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv3 32))) ?x32)))
 (let ((?x289 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1853X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1853X)))
 (=> $x204 (= ?x289 ?x75)))))))))
 ))
 (let (($x267 (forall ((input.ind-%var1852X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var1852X) (bvult input.ind-%var1852X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1852X)))
 (= $x204 $x31))))
 ))
 (let (($x8 (and $x267 $x171)))
 (let (($x172 (= $x8 true)))
 (let ((?x177 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x177)))
 (let (($x62 (= ?x124 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (= $x62 true)))
 (let (($x96 (= ?x124 input.dst.llvm-%n)))
 (let (($x59 (= $x96 true)))
 (let (($x9 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x279 (= $x9 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x170 (bvsub ?x53 ?x18)))
 (let (($x198 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x170) (bvult ?x53 ?x170))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x121 (bvmul (_ bv4 64) ?x248)))
 (let ((?x176 ((_ extract 63 32) ?x121)))
 (let (($x78 (= (_ bv0 32) ?x176)))
 (let (($x63 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x297 (and (and (and true $x63) $x78) $x198)))
 (let (($x228 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x51 (and $x228 $x297)))
 (let (($x157 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (=> $x157 $x51)))
 (let (($x165 (= $x135 true)))
 (let (($x104 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x41 (= $x104 true)))
 (let (($x74 (= $x157 true)))
 (let (($x169 (and $x74 $x41)))
 (let (($x10 (and $x169 $x165)))
 (let (($x199 (and $x10 $x279)))
 (let (($x57 (and $x199 $x59)))
 (let (($x16 (and $x57 $x191)))
 (let (($x256 (and $x16 $x172)))
 (let (($x64 (and $x256 $x103)))
 (let (($x219 (and $x64 $x20)))
 (let (($x54 (and $x219 $x45)))
 (let (($x234 (and $x54 $x6)))
 (let (($x111 (and $x234 $x80)))
 (let (($x300 (and $x111 $x119)))
 (let (($x212 (and $x300 $x118)))
 (let (($x17 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and (not $x17) $x212)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and $x49 $x276)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x86 (and $x146 $x244)))
 (let (($x229 (forall ((input.ind-%var1863X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1863X)))
 (=> $x246 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1863X) (_ bv0 32)))))
 ))
 (let (($x43 (forall ((input.ind-%var1862X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1862X)))
 (= $x246 false)))
 ))
 (let (($x117 (and $x43 $x229)))
 (let (($x265 (and $x117 $x86)))
 (let (($x272 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x33 (and $x272 $x265)))
 (let (($x155 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x257 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x155)))))
 (let (($x149 (=> (and $x157 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x155)))))
 (let (($x151 (and $x149 $x33)))
 (let (($x180 (=> $x151 $x298)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x188 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x206 (bvsge ?x188 (_ bv0 32))))
 (let (($x298 (= $x206 true)))
 (let ((?x19 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x296 (bvneg ?x19)))
 (let (($x303 (= ?x296 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x303 true)))
 (let (($x271 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x119 (= $x271 true)))
 (let (($x70 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x80 (= $x70 true)))
 (let (($x95 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x6 (= $x95 true)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x253 (= (_ bv0 32) ?x68)))
 (let ((?x237 (bvand symbol.1 (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x237)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x243)))
 (let ((?x60 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x113 (= input.memlabel-mem--symbol.1_end ?x60)))
 (let (($x214 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x137 (and $x214 $x113)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x44 $x137)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x285 (and $x110 $x195)))
 (let (($x102 (not $x285)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x67 (and $x232 $x190)))
 (let (($x268 (and (not $x67) $x102)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (and $x147 $x128)))
 (let (($x281 (not $x263)))
 (let (($x224 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (and $x233 $x224)))
 (let (($x163 (and (not $x226) $x281)))
 (let (($x255 (and (and (and (and (and (and $x163 $x268) $x167) $x202) $x264) $x187) $x12)))
 (let (($x115 (and $x255 $x253)))
 (let (($x11 (= symbol.1 dst_symbol_addr.1)))
 (let (($x210 (and $x11 $x115)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x286 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x286)))
 (let (($x284 (or (bvugt input.memlabel-mem--symbol.1_begin ?x286) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x284) (or $x282 $x227)))))))
 (let (($x123 (and $x152 $x210)))
 (let (($x45 (= $x123 true)))
 (let (($x65 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x20 (= $x65 true)))
 (let (($x293 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x103 (= $x293 true)))
 (let (($x171 (forall ((input.ind-%var1853X (_ BitVec 32)) )(let ((?x69 (bvadd symbol.1 (bvmul input.ind-%var1853X (_ bv4 32)))))
 (let ((?x160 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x69))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv2 32))) ?x160)))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x69 (_ bv3 32))) ?x32)))
 (let ((?x289 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1853X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1853X)))
 (=> $x204 (= ?x289 ?x75)))))))))
 ))
 (let (($x267 (forall ((input.ind-%var1852X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var1852X) (bvult input.ind-%var1852X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1852X)))
 (= $x204 $x31))))
 ))
 (let (($x8 (and $x267 $x171)))
 (let (($x172 (= $x8 true)))
 (let ((?x177 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x124 (bvneg ?x177)))
 (let (($x62 (= ?x124 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x191 (= $x62 true)))
 (let (($x96 (= ?x124 input.dst.llvm-%n)))
 (let (($x59 (= $x96 true)))
 (let (($x9 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x279 (= $x9 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x170 (bvsub ?x53 ?x18)))
 (let (($x198 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x170) (bvult ?x53 ?x170))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x121 (bvmul (_ bv4 64) ?x248)))
 (let ((?x176 ((_ extract 63 32) ?x121)))
 (let (($x78 (= (_ bv0 32) ?x176)))
 (let (($x63 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x297 (and (and (and true $x63) $x78) $x198)))
 (let (($x228 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x51 (and $x228 $x297)))
 (let (($x157 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (=> $x157 $x51)))
 (let (($x165 (= $x135 true)))
 (let (($x104 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x41 (= $x104 true)))
 (let (($x74 (= $x157 true)))
 (let (($x169 (and $x74 $x41)))
 (let (($x10 (and $x169 $x165)))
 (let (($x199 (and $x10 $x279)))
 (let (($x57 (and $x199 $x59)))
 (let (($x16 (and $x57 $x191)))
 (let (($x256 (and $x16 $x172)))
 (let (($x64 (and $x256 $x103)))
 (let (($x219 (and $x64 $x20)))
 (let (($x54 (and $x219 $x45)))
 (let (($x234 (and $x54 $x6)))
 (let (($x111 (and $x234 $x80)))
 (let (($x300 (and $x111 $x119)))
 (let (($x212 (and $x300 $x118)))
 (let (($x17 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and (not $x17) $x212)))
 (let (($x49 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and $x49 $x276)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x86 (and $x146 $x244)))
 (let (($x229 (forall ((input.ind-%var1863X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1863X)))
 (=> $x246 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1863X) (_ bv0 32)))))
 ))
 (let (($x43 (forall ((input.ind-%var1862X (_ BitVec 32)) )(let (($x246 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1862X)))
 (= $x246 false)))
 ))
 (let (($x117 (and $x43 $x229)))
 (let (($x265 (and $x117 $x86)))
 (let (($x272 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x33 (and $x272 $x265)))
 (let (($x155 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x257 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x155)))))
 (let (($x149 (=> (and $x157 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x155)))))
 (let (($x151 (and $x149 $x33)))
 (let (($x180 (=> $x151 $x298)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (bvsle ?x189 (_ bv399 32))))
 (let (($x216 (= $x126 true)))
 (let ((?x25 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x25)))
 (let (($x52 (= ?x222 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x52 true)))
 (let (($x179 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x179 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x183 true)))
 (let (($x277 (forall ((input.ind-%var1873X (_ BitVec 32)) )(let ((?x180 (bvadd symbol.1 (bvmul input.ind-%var1873X (_ bv4 32)))))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x180))))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv2 32))) ?x109)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv3 32))) ?x231)))
 (let ((?x70 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1873X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1873X)))
 (=> $x270 (= ?x70 ?x168)))))))))
 ))
 (let (($x54 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1872X) (bvult input.ind-%var1872X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1872X)))
 (= $x270 $x123))))
 ))
 (let (($x94 (and $x54 $x277)))
 (let (($x106 (= $x94 true)))
 (let (($x137 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x264 (= $x137 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x102 (bvsub ?x53 ?x18)))
 (let (($x266 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x102) (bvult ?x53 ?x102))))
 (let ((?x238 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x110 (bvmul (_ bv4 64) ?x238)))
 (let ((?x195 ((_ extract 63 32) ?x110)))
 (let (($x285 (= (_ bv0 32) ?x195)))
 (let (($x190 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x21 (and (and (and true $x190) $x285) $x266)))
 (let (($x128 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x44 (and $x128 $x21)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x214 (=> $x140 $x44)))
 (let (($x60 (= $x214 true)))
 (let (($x233 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x224 (= $x233 true)))
 (let (($x100 (= $x140 true)))
 (let (($x153 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x153 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x105)))
 (let ((?x219 (bvand symbol.1 (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x219)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x256 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x293 (= input.memlabel-mem--symbol.1_end ?x256)))
 (let (($x172 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x103 (and $x172 $x293)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x8 $x103)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x211 $x261)))
 (let (($x160 (not $x76)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x221 (and $x230 $x273)))
 (let (($x75 (and (not $x221) $x160)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x289 $x14)))
 (let (($x69 (not $x24)))
 (let (($x259 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x31 $x259)))
 (let (($x55 (and (not $x267) $x69)))
 (let (($x141 (and (and (and (and (and (and $x55 $x75) $x269) $x171) $x64) $x20) $x91)))
 (let (($x282 (and $x141 $x193)))
 (let (($x135 (= symbol.1 dst_symbol_addr.1)))
 (let (($x280 (and $x135 $x282)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x236 (or (bvugt input.memlabel-mem--symbol.1_begin ?x9) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x236) (or $x59 $x57)))))))
 (let (($x227 (and $x134 $x280)))
 (let (($x90 (= $x227 true)))
 (let (($x50 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x181 (= $x50 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x156)))
 (let (($x97 (= ?x248 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (= $x97 true)))
 (let (($x121 (= ?x248 input.dst.llvm-%n)))
 (let (($x176 (= $x121 true)))
 (let (($x200 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x63 (= $x200 true)))
 (let (($x78 (and $x63 $x176)))
 (let (($x170 (and $x78 $x122)))
 (let (($x198 (and $x170 $x181)))
 (let (($x56 (and $x198 $x90)))
 (let (($x152 (and $x56 $x27)))
 (let (($x11 (and $x152 $x100)))
 (let (($x226 (and $x11 $x224)))
 (let (($x113 (and $x226 $x60)))
 (let (($x36 (and $x113 $x264)))
 (let (($x93 (and $x36 $x106)))
 (let (($x154 (and $x93 $x112)))
 (let (($x173 (and $x154 $x150)))
 (let (($x203 (and $x173 $x164)))
 (let (($x294 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x7 (and (not $x294) $x203)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x301 (and $x228 $x7)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x169 $x301)))
 (let (($x29 (forall ((input.ind-%var1883X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1883X)))
 (=> $x72 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1883X) (_ bv0 32)))))
 ))
 (let (($x229 (forall ((input.ind-%var1882X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1882X)))
 (= $x72 false)))
 ))
 (let (($x104 (and $x229 $x29)))
 (let (($x291 (and $x104 $x120)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x48 (and $x213 $x291)))
 (let (($x79 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x272 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x79)))))
 (let (($x186 (=> (and $x140 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x79)))))
 (let (($x225 (and $x186 $x48)))
 (let (($x258 (=> $x225 $x216)))
 (not $x258))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (bvsle ?x189 (_ bv399 32))))
 (let (($x216 (= $x126 true)))
 (let ((?x25 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x25)))
 (let (($x52 (= ?x222 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x52 true)))
 (let (($x179 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (= $x179 true)))
 (let (($x183 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x183 true)))
 (let (($x277 (forall ((input.ind-%var1873X (_ BitVec 32)) )(let ((?x180 (bvadd symbol.1 (bvmul input.ind-%var1873X (_ bv4 32)))))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x180))))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv2 32))) ?x109)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv3 32))) ?x231)))
 (let ((?x70 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1873X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1873X)))
 (=> $x270 (= ?x70 ?x168)))))))))
 ))
 (let (($x54 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1872X) (bvult input.ind-%var1872X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1872X)))
 (= $x270 $x123))))
 ))
 (let (($x94 (and $x54 $x277)))
 (let (($x106 (= $x94 true)))
 (let (($x137 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x264 (= $x137 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x102 (bvsub ?x53 ?x18)))
 (let (($x266 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x102) (bvult ?x53 ?x102))))
 (let ((?x238 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x110 (bvmul (_ bv4 64) ?x238)))
 (let ((?x195 ((_ extract 63 32) ?x110)))
 (let (($x285 (= (_ bv0 32) ?x195)))
 (let (($x190 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x21 (and (and (and true $x190) $x285) $x266)))
 (let (($x128 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x44 (and $x128 $x21)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x214 (=> $x140 $x44)))
 (let (($x60 (= $x214 true)))
 (let (($x233 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x224 (= $x233 true)))
 (let (($x100 (= $x140 true)))
 (let (($x153 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x27 (= $x153 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x105)))
 (let ((?x219 (bvand symbol.1 (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x219)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x256 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x293 (= input.memlabel-mem--symbol.1_end ?x256)))
 (let (($x172 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x103 (and $x172 $x293)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x8 $x103)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x211 $x261)))
 (let (($x160 (not $x76)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x221 (and $x230 $x273)))
 (let (($x75 (and (not $x221) $x160)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x289 $x14)))
 (let (($x69 (not $x24)))
 (let (($x259 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x31 $x259)))
 (let (($x55 (and (not $x267) $x69)))
 (let (($x141 (and (and (and (and (and (and $x55 $x75) $x269) $x171) $x64) $x20) $x91)))
 (let (($x282 (and $x141 $x193)))
 (let (($x135 (= symbol.1 dst_symbol_addr.1)))
 (let (($x280 (and $x135 $x282)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x236 (or (bvugt input.memlabel-mem--symbol.1_begin ?x9) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x236) (or $x59 $x57)))))))
 (let (($x227 (and $x134 $x280)))
 (let (($x90 (= $x227 true)))
 (let (($x50 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x181 (= $x50 true)))
 (let ((?x156 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x156)))
 (let (($x97 (= ?x248 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x122 (= $x97 true)))
 (let (($x121 (= ?x248 input.dst.llvm-%n)))
 (let (($x176 (= $x121 true)))
 (let (($x200 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x63 (= $x200 true)))
 (let (($x78 (and $x63 $x176)))
 (let (($x170 (and $x78 $x122)))
 (let (($x198 (and $x170 $x181)))
 (let (($x56 (and $x198 $x90)))
 (let (($x152 (and $x56 $x27)))
 (let (($x11 (and $x152 $x100)))
 (let (($x226 (and $x11 $x224)))
 (let (($x113 (and $x226 $x60)))
 (let (($x36 (and $x113 $x264)))
 (let (($x93 (and $x36 $x106)))
 (let (($x154 (and $x93 $x112)))
 (let (($x173 (and $x154 $x150)))
 (let (($x203 (and $x173 $x164)))
 (let (($x294 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x7 (and (not $x294) $x203)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x301 (and $x228 $x7)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x169 $x301)))
 (let (($x29 (forall ((input.ind-%var1883X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1883X)))
 (=> $x72 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1883X) (_ bv0 32)))))
 ))
 (let (($x229 (forall ((input.ind-%var1882X (_ BitVec 32)) )(let (($x72 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1882X)))
 (= $x72 false)))
 ))
 (let (($x104 (and $x229 $x29)))
 (let (($x291 (and $x104 $x120)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x48 (and $x213 $x291)))
 (let (($x79 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x272 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x79)))))
 (let (($x186 (=> (and $x140 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x79)))))
 (let (($x225 (and $x186 $x48)))
 (let (($x258 (=> $x225 $x216)))
 (not $x258))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 158 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x6 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (bvsge ?x6 (_ bv0 32))))
 (let (($x302 (= $x206 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x276)))
 (let (($x296 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x303 (= $x296 true)))
 (let (($x300 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x265 (= $x300 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x255 (= $x12 true)))
 (let (($x129 (forall ((input.ind-%var1893X (_ BitVec 32)) )(let ((?x258 (bvadd symbol.1 (bvmul input.ind-%var1893X (_ bv4 32)))))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x162 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x297)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x162)))
 (let ((?x183 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1893X)))
 (let (($x208 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1893X)))
 (=> $x208 (= ?x183 ?x146)))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) input.ind-%var1892X) (bvult input.ind-%var1892X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x208 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1892X)))
 (= $x208 $x66))))
 ))
 (let (($x174 (and $x277 $x129)))
 (let (($x234 (= $x174 true)))
 (let (($x298 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x180 (= $x298 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x113 (bvsub ?x53 ?x18)))
 (let (($x270 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x113) (bvult ?x53 ?x113))))
 (let ((?x21 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x21)))
 (let ((?x214 ((_ extract 63 32) ?x44)))
 (let (($x60 (= (_ bv0 32) ?x214)))
 (let (($x167 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x123 (and (and (and true $x167) $x60) $x270)))
 (let (($x285 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x45 (and $x285 $x123)))
 (let (($x40 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (=> $x40 $x45)))
 (let (($x70 (= $x54 true)))
 (let (($x215 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x67 (= $x215 true)))
 (let (($x232 (= $x40 true)))
 (let (($x281 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x263 (= $x281 true)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x90)))
 (let ((?x280 (bvand symbol.1 (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x280)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x219 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x91 (= input.memlabel-mem--symbol.1_end ?x219)))
 (let (($x98 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x141 (and $x98 $x91)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x20 $x141)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x172 (and $x194 $x8)))
 (let (($x256 (not $x172)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x171 (and $x114 $x245)))
 (let (($x103 (and (not $x171) $x256)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x261 $x76)))
 (let (($x75 (not $x160)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x221 $x32)))
 (let (($x269 (and (not $x211) $x75)))
 (let (($x233 (and (and (and (and (and (and $x269 $x103) $x64) $x65) $x105) $x282) $x227)))
 (let (($x224 (and $x233 $x56)))
 (let (($x62 (= symbol.1 dst_symbol_addr.1)))
 (let (($x226 (and $x62 $x224)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x135 (or (bvugt input.memlabel-mem--symbol.1_begin ?x204) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x273 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x135) (or $x239 $x289)))))))
 (let (($x58 (and $x273 $x226)))
 (let (($x147 (= $x58 true)))
 (let (($x177 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x124 (= $x177 true)))
 (let ((?x198 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x198)))
 (let (($x279 (= ?x165 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (= $x279 true)))
 (let (($x10 (= ?x165 input.dst.llvm-%n)))
 (let (($x254 (= $x10 true)))
 (let (($x170 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x50 (= $x170 true)))
 (let (($x9 (and $x50 $x254)))
 (let (($x236 (and $x9 $x199)))
 (let (($x59 (and $x236 $x124)))
 (let (($x128 (and $x59 $x147)))
 (let (($x163 (and $x128 $x263)))
 (let (($x190 (and $x163 $x232)))
 (let (($x238 (and $x190 $x67)))
 (let (($x111 (and $x238 $x70)))
 (let (($x101 (and $x111 $x180)))
 (let (($x243 (and $x101 $x234)))
 (let (($x119 (and $x243 $x255)))
 (let (($x33 (and $x119 $x265)))
 (let (($x19 (and $x33 $x303)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and (not $x97) $x19)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (and $x176 $x86)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x156 $x151)))
 (let (($x200 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1903X)))
 (=> $x133 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1903X) (_ bv0 32)))))
 ))
 (let (($x29 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1902X)))
 (= $x133 false)))
 ))
 (let (($x63 (and $x29 $x200)))
 (let (($x68 (and $x63 $x187)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x253 (and $x43 $x68)))
 (let (($x149 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x213 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x149)))))
 (let (($x92 (=> (and $x40 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x149)))))
 (let (($x188 (and $x92 $x253)))
 (let (($x17 (=> $x188 $x302)))
 (not $x17))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x6 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (bvsge ?x6 (_ bv0 32))))
 (let (($x302 (= $x206 true)))
 (let ((?x276 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x276)))
 (let (($x296 (= ?x244 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x303 (= $x296 true)))
 (let (($x300 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x265 (= $x300 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x255 (= $x12 true)))
 (let (($x129 (forall ((input.ind-%var1893X (_ BitVec 32)) )(let ((?x258 (bvadd symbol.1 (bvmul input.ind-%var1893X (_ bv4 32)))))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x258))))
 (let ((?x162 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv2 32))) ?x297)))
 (let ((?x146 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x258 (_ bv3 32))) ?x162)))
 (let ((?x183 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1893X)))
 (let (($x208 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1893X)))
 (=> $x208 (= ?x183 ?x146)))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let (($x66 (and (bvule (_ bv0 32) input.ind-%var1892X) (bvult input.ind-%var1892X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x208 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1892X)))
 (= $x208 $x66))))
 ))
 (let (($x174 (and $x277 $x129)))
 (let (($x234 (= $x174 true)))
 (let (($x298 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x180 (= $x298 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x113 (bvsub ?x53 ?x18)))
 (let (($x270 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x113) (bvult ?x53 ?x113))))
 (let ((?x21 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x21)))
 (let ((?x214 ((_ extract 63 32) ?x44)))
 (let (($x60 (= (_ bv0 32) ?x214)))
 (let (($x167 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x123 (and (and (and true $x167) $x60) $x270)))
 (let (($x285 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x45 (and $x285 $x123)))
 (let (($x40 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (=> $x40 $x45)))
 (let (($x70 (= $x54 true)))
 (let (($x215 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x67 (= $x215 true)))
 (let (($x232 (= $x40 true)))
 (let (($x281 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x263 (= $x281 true)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x90)))
 (let ((?x280 (bvand symbol.1 (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x280)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x219 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x91 (= input.memlabel-mem--symbol.1_end ?x219)))
 (let (($x98 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x141 (and $x98 $x91)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x20 $x141)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x172 (and $x194 $x8)))
 (let (($x256 (not $x172)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x171 (and $x114 $x245)))
 (let (($x103 (and (not $x171) $x256)))
 (let (($x76 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x261 $x76)))
 (let (($x75 (not $x160)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x221 $x32)))
 (let (($x269 (and (not $x211) $x75)))
 (let (($x233 (and (and (and (and (and (and $x269 $x103) $x64) $x65) $x105) $x282) $x227)))
 (let (($x224 (and $x233 $x56)))
 (let (($x62 (= symbol.1 dst_symbol_addr.1)))
 (let (($x226 (and $x62 $x224)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x135 (or (bvugt input.memlabel-mem--symbol.1_begin ?x204) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x273 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x135) (or $x239 $x289)))))))
 (let (($x58 (and $x273 $x226)))
 (let (($x147 (= $x58 true)))
 (let (($x177 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x124 (= $x177 true)))
 (let ((?x198 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x198)))
 (let (($x279 (= ?x165 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x199 (= $x279 true)))
 (let (($x10 (= ?x165 input.dst.llvm-%n)))
 (let (($x254 (= $x10 true)))
 (let (($x170 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x50 (= $x170 true)))
 (let (($x9 (and $x50 $x254)))
 (let (($x236 (and $x9 $x199)))
 (let (($x59 (and $x236 $x124)))
 (let (($x128 (and $x59 $x147)))
 (let (($x163 (and $x128 $x263)))
 (let (($x190 (and $x163 $x232)))
 (let (($x238 (and $x190 $x67)))
 (let (($x111 (and $x238 $x70)))
 (let (($x101 (and $x111 $x180)))
 (let (($x243 (and $x101 $x234)))
 (let (($x119 (and $x243 $x255)))
 (let (($x33 (and $x119 $x265)))
 (let (($x19 (and $x33 $x303)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (and (not $x97) $x19)))
 (let (($x176 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x151 (and $x176 $x86)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x156 $x151)))
 (let (($x200 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1903X)))
 (=> $x133 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1903X) (_ bv0 32)))))
 ))
 (let (($x29 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let (($x133 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1902X)))
 (= $x133 false)))
 ))
 (let (($x63 (and $x29 $x200)))
 (let (($x68 (and $x63 $x187)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x253 (and $x43 $x68)))
 (let (($x149 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x213 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x149)))))
 (let (($x92 (=> (and $x40 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x149)))))
 (let (($x188 (and $x92 $x253)))
 (let (($x17 (=> $x188 $x302)))
 (not $x17))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (bvule ?x106 input.dst.llvm-%n)))
 (let (($x41 (= $x126 true)))
 (let ((?x7 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x7)))
 (let (($x222 (= ?x301 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x222 true)))
 (let ((?x59 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x59)))
 (let (($x173 (= ?x191 input.dst.llvm-%n)))
 (let (($x291 (= $x173 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x144 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x218 true)))
 (let (($x169 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let ((?x6 (bvadd symbol.1 (bvmul input.ind-%var1913X (_ bv4 32)))))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x6))))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv2 32))) ?x143)))
 (let ((?x49 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv3 32))) ?x96)))
 (let ((?x174 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1913X)))
 (let (($x30 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1913X)))
 (=> $x30 (= ?x174 ?x49)))))))))
 ))
 (let (($x146 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x297 (and (bvule (_ bv0 32) input.ind-%var1912X) (bvult input.ind-%var1912X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x30 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1912X)))
 (= $x30 $x297))))
 ))
 (let (($x72 (and $x146 $x169)))
 (let (($x250 (= $x72 true)))
 (let (($x277 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x183 (= $x277 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x45 (bvsub ?x53 ?x18)))
 (let (($x298 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x45) (bvult ?x53 ?x45))))
 (let ((?x264 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvmul (_ bv4 64) ?x264)))
 (let ((?x270 ((_ extract 63 32) ?x36)))
 (let (($x123 (= (_ bv0 32) ?x270)))
 (let (($x137 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x208 (and (and (and true $x137) $x123) $x298)))
 (let (($x21 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x168 (and $x21 $x208)))
 (let (($x196 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (=> $x196 $x168)))
 (let (($x66 (= $x231 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x82 (= $x102 true)))
 (let (($x268 (= $x196 true)))
 (let (($x110 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x195 (= $x110 true)))
 (let ((?x224 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x224)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x90)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let ((?x193 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x282 (= input.memlabel-mem--symbol.1_end ?x193)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x11 (and $x100 $x282)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (and $x105 $x11)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x65 (and $x27 $x284)))
 (let (($x152 (not $x65)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x103 $x153)))
 (let (($x98 (and (not $x64) $x152)))
 (let (($x293 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x171 $x293)))
 (let (($x8 (not $x194)))
 (let (($x114 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x269 $x114)))
 (let (($x256 (and (not $x245) $x8)))
 (let (($x163 (and (and (and (and (and (and $x256 $x98) $x219) $x141) $x280) $x233) $x56)))
 (let (($x232 (and $x163 $x226)))
 (let (($x239 (= symbol.1 dst_symbol_addr.1)))
 (let (($x190 (and $x239 $x232)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x14) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x221 $x32)))))))
 (let (($x215 (and $x75 $x190)))
 (let (($x67 (= $x215 true)))
 (let (($x134 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x51 (= $x134 true)))
 (let (($x16 (= ?x191 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x230 (= $x16 true)))
 (let (($x236 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x177 (= $x236 true)))
 (let (($x204 (and $x177 $x230)))
 (let (($x135 (and $x204 $x51)))
 (let (($x238 (and $x135 $x67)))
 (let (($x285 (and $x238 $x195)))
 (let (($x202 (and $x285 $x268)))
 (let (($x167 (and $x202 $x82)))
 (let (($x139 (and $x167 $x66)))
 (let (($x154 (and $x139 $x183)))
 (let (($x15 (and $x154 $x250)))
 (let (($x87 (and $x15 $x93)))
 (let (($x150 (and $x87 $x185)))
 (let (($x48 (and $x150 $x291)))
 (let (($x25 (and $x48 $x52)))
 (let (($x279 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and (not $x279) $x25)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and $x254 $x120)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x212 (and $x198 $x225)))
 (let (($x170 (forall ((input.ind-%var1923X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1923X)))
 (=> $x251 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1923X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var1922X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1922X)))
 (= $x251 false)))
 ))
 (let (($x50 (and $x200 $x170)))
 (let (($x223 (and $x50 $x212)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x109 (and $x229 $x223)))
 (let (($x186 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x43 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x186)))))
 (let (($x89 (=> (and $x196 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x186)))))
 (let (($x189 (and $x89 $x109)))
 (let (($x294 (=> $x189 $x41)))
 (not $x294))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (bvule ?x106 input.dst.llvm-%n)))
 (let (($x41 (= $x126 true)))
 (let ((?x7 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x7)))
 (let (($x222 (= ?x301 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x222 true)))
 (let ((?x59 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x59)))
 (let (($x173 (= ?x191 input.dst.llvm-%n)))
 (let (($x291 (= $x173 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x144 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x218 true)))
 (let (($x169 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let ((?x6 (bvadd symbol.1 (bvmul input.ind-%var1913X (_ bv4 32)))))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x6))))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv2 32))) ?x143)))
 (let ((?x49 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x6 (_ bv3 32))) ?x96)))
 (let ((?x174 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1913X)))
 (let (($x30 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1913X)))
 (=> $x30 (= ?x174 ?x49)))))))))
 ))
 (let (($x146 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x297 (and (bvule (_ bv0 32) input.ind-%var1912X) (bvult input.ind-%var1912X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x30 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1912X)))
 (= $x30 $x297))))
 ))
 (let (($x72 (and $x146 $x169)))
 (let (($x250 (= $x72 true)))
 (let (($x277 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x183 (= $x277 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x45 (bvsub ?x53 ?x18)))
 (let (($x298 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x45) (bvult ?x53 ?x45))))
 (let ((?x264 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x36 (bvmul (_ bv4 64) ?x264)))
 (let ((?x270 ((_ extract 63 32) ?x36)))
 (let (($x123 (= (_ bv0 32) ?x270)))
 (let (($x137 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x208 (and (and (and true $x137) $x123) $x298)))
 (let (($x21 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x168 (and $x21 $x208)))
 (let (($x196 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (=> $x196 $x168)))
 (let (($x66 (= $x231 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x82 (= $x102 true)))
 (let (($x268 (= $x196 true)))
 (let (($x110 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x195 (= $x110 true)))
 (let ((?x224 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x224)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x90)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let ((?x193 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x282 (= input.memlabel-mem--symbol.1_end ?x193)))
 (let (($x100 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x11 (and $x100 $x282)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (and $x105 $x11)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x65 (and $x27 $x284)))
 (let (($x152 (not $x65)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x103 $x153)))
 (let (($x98 (and (not $x64) $x152)))
 (let (($x293 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x171 $x293)))
 (let (($x8 (not $x194)))
 (let (($x114 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x269 $x114)))
 (let (($x256 (and (not $x245) $x8)))
 (let (($x163 (and (and (and (and (and (and $x256 $x98) $x219) $x141) $x280) $x233) $x56)))
 (let (($x232 (and $x163 $x226)))
 (let (($x239 (= symbol.1 dst_symbol_addr.1)))
 (let (($x190 (and $x239 $x232)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x14) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x221 $x32)))))))
 (let (($x215 (and $x75 $x190)))
 (let (($x67 (= $x215 true)))
 (let (($x134 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x51 (= $x134 true)))
 (let (($x16 (= ?x191 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x230 (= $x16 true)))
 (let (($x236 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x177 (= $x236 true)))
 (let (($x204 (and $x177 $x230)))
 (let (($x135 (and $x204 $x51)))
 (let (($x238 (and $x135 $x67)))
 (let (($x285 (and $x238 $x195)))
 (let (($x202 (and $x285 $x268)))
 (let (($x167 (and $x202 $x82)))
 (let (($x139 (and $x167 $x66)))
 (let (($x154 (and $x139 $x183)))
 (let (($x15 (and $x154 $x250)))
 (let (($x87 (and $x15 $x93)))
 (let (($x150 (and $x87 $x185)))
 (let (($x48 (and $x150 $x291)))
 (let (($x25 (and $x48 $x52)))
 (let (($x279 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x120 (and (not $x279) $x25)))
 (let (($x254 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x225 (and $x254 $x120)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x212 (and $x198 $x225)))
 (let (($x170 (forall ((input.ind-%var1923X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1923X)))
 (=> $x251 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1923X) (_ bv0 32)))))
 ))
 (let (($x200 (forall ((input.ind-%var1922X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1922X)))
 (= $x251 false)))
 ))
 (let (($x50 (and $x200 $x170)))
 (let (($x223 (and $x50 $x212)))
 (let (($x229 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x109 (and $x229 $x223)))
 (let (($x186 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x43 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x186)))))
 (let (($x89 (=> (and $x196 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x186)))))
 (let (($x189 (and $x89 $x109)))
 (let (($x294 (=> $x189 $x41)))
 (not $x294))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x217 (forall ((input.ind-%var1957X (_ BitVec 32)) )(let ((?x180 (bvadd symbol.1 (bvmul input.ind-%var1957X (_ bv4 32)))))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x186 (bvadd ?x53 (_ bv3 32))))
 (let ((?x83 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x53 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x295 (store ?x83 (bvadd ?x53 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x37 (store ?x295 (bvadd ?x53 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x275 (store ?x37 ?x186 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x158 (concat (select ?x275 (bvadd ?x180 (_ bv2 32))) (concat (select ?x275 (bvadd ?x180 (_ bv1 32))) (select ?x275 ?x180)))))
 (let ((?x190 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1957X)))
 (let (($x274 (= input.ind-%var1957X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x23 (= (ite $x274 input.spec-%var-i-0.L3%6%bbentry ?x190) (concat (select ?x275 (bvadd ?x180 (_ bv3 32))) ?x158))))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1957X)))
 (let (($x192 (or $x193 $x274)))
 (=> $x192 $x23))))))))))))))))
 ))
 (let (($x130 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let (($x263 (bvule (_ bv0 32) input.ind-%var1956X)))
 (let (($x240 (and $x263 (bvult input.ind-%var1956X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x274 (= input.ind-%var1956X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1956X)))
 (let (($x192 (or $x193 $x274)))
 (= $x192 $x240)))))))
 ))
 (let (($x304 (and $x130 $x217)))
 (let (($x145 (= $x304 true)))
 (let ((?x296 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x303 (bvneg ?x296)))
 (let (($x265 (= ?x303 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x265 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x119 true)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x228)))
 (let ((?x117 (bvand symbol.1 (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x117)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x294 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x126 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (and $x126 $x294)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (and $x106 $x95)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x222 $x52)))
 (let (($x120 (not $x25)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (and $x48 $x7)))
 (let (($x212 (and (not $x301) $x120)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x87 $x144)))
 (let (($x150 (not $x185)))
 (let (($x218 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x15 $x218)))
 (let (($x291 (and (not $x93) $x150)))
 (let (($x78 (and (and (and (and (and (and $x291 $x212) $x223) $x189) $x271) $x31) $x234)))
 (let (($x129 (and $x78 $x121)))
 (let (($x188 (= symbol.1 dst_symbol_addr.1)))
 (let (($x216 (and $x188 $x129)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x112) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x250 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x143 $x96)))))))
 (let (($x203 (and $x250 $x216)))
 (let (($x237 (= $x203 true)))
 (let (($x297 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x162 (= $x297 true)))
 (let (($x30 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x30 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (= $x277 true)))
 (let (($x168 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let ((?x180 (bvadd symbol.1 (bvmul input.ind-%var1933X (_ bv4 32)))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x180))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv2 32))) ?x270)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv3 32))) ?x54)))
 (let ((?x190 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1933X)))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1933X)))
 (=> $x193 (= ?x190 ?x111)))))))))
 ))
 (let (($x163 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x263 (bvule (_ bv0 32) input.ind-%var1932X)))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1932X)))
 (= $x193 (and $x263 (bvult input.ind-%var1932X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x231 (and $x163 $x168)))
 (let (($x66 (= $x231 true)))
 (let (($x91 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x141 (= $x91 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x103 (bvsub ?x53 ?x18)))
 (let (($x27 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x103) (bvult ?x53 ?x103))))
 (let ((?x293 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x194 (bvmul (_ bv4 64) ?x293)))
 (let ((?x8 ((_ extract 63 32) ?x194)))
 (let (($x256 (= (_ bv0 32) ?x8)))
 (let (($x172 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x152 (and (and (and true $x172) $x256) $x27)))
 (let (($x259 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x98 (and $x259 $x152)))
 (let (($x157 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (=> $x157 $x98)))
 (let (($x219 (= $x58 true)))
 (let (($x211 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x286 (= $x211 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x221 true)))
 (let (($x55 (= $x157 true)))
 (let ((?x135 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x267 (bvneg ?x135)))
 (let (($x14 (= ?x267 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (= $x14 true)))
 (let (($x289 (= ?x267 input.dst.llvm-%n)))
 (let (($x160 (= $x289 true)))
 (let (($x69 (and $x160 $x24)))
 (let (($x273 (and $x69 $x55)))
 (let (($x32 (and $x273 $x62)))
 (let (($x261 (and $x32 $x286)))
 (let (($x147 (and $x261 $x219)))
 (let (($x128 (and $x147 $x141)))
 (let (($x139 (and $x128 $x66)))
 (let (($x154 (and $x139 $x183)))
 (let (($x138 (and $x154 $x249)))
 (let (($x146 (and $x138 $x162)))
 (let (($x255 (and $x146 $x237)))
 (let (($x151 (and $x255 $x86)))
 (let (($x300 (and $x151 $x33)))
 (let (($x134 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and (not $x134) $x300)))
 (let (($x230 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x187 (and $x230 $x19)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x258 (and $x59 $x187)))
 (let (($x236 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1943X)))
 (=> $x248 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1943X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1942X)))
 (= $x248 false)))
 ))
 (let (($x177 (and $x170 $x236)))
 (let (($x80 (and $x177 $x258)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x220 (and $x29 $x80)))
 (let (($x92 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x229 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x92)))))
 (let (($x197 (=> (and $x157 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x92)))))
 (let (($x68 (and $x197 $x220)))
 (let (($x71 (=> $x68 $x145)))
 (not $x71)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x217 (forall ((input.ind-%var1957X (_ BitVec 32)) )(let ((?x180 (bvadd symbol.1 (bvmul input.ind-%var1957X (_ bv4 32)))))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x186 (bvadd ?x53 (_ bv3 32))))
 (let ((?x83 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x53 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x295 (store ?x83 (bvadd ?x53 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x37 (store ?x295 (bvadd ?x53 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x275 (store ?x37 ?x186 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x158 (concat (select ?x275 (bvadd ?x180 (_ bv2 32))) (concat (select ?x275 (bvadd ?x180 (_ bv1 32))) (select ?x275 ?x180)))))
 (let ((?x190 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1957X)))
 (let (($x274 (= input.ind-%var1957X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x23 (= (ite $x274 input.spec-%var-i-0.L3%6%bbentry ?x190) (concat (select ?x275 (bvadd ?x180 (_ bv3 32))) ?x158))))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1957X)))
 (let (($x192 (or $x193 $x274)))
 (=> $x192 $x23))))))))))))))))
 ))
 (let (($x130 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let (($x263 (bvule (_ bv0 32) input.ind-%var1956X)))
 (let (($x240 (and $x263 (bvult input.ind-%var1956X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x274 (= input.ind-%var1956X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1956X)))
 (let (($x192 (or $x193 $x274)))
 (= $x192 $x240)))))))
 ))
 (let (($x304 (and $x130 $x217)))
 (let (($x145 (= $x304 true)))
 (let ((?x296 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x303 (bvneg ?x296)))
 (let (($x265 (= ?x303 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x33 (= $x265 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x119 true)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x228)))
 (let ((?x117 (bvand symbol.1 (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x117)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x294 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x126 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (and $x126 $x294)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (and $x106 $x95)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x222 $x52)))
 (let (($x120 (not $x25)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (and $x48 $x7)))
 (let (($x212 (and (not $x301) $x120)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x87 $x144)))
 (let (($x150 (not $x185)))
 (let (($x218 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x15 $x218)))
 (let (($x291 (and (not $x93) $x150)))
 (let (($x78 (and (and (and (and (and (and $x291 $x212) $x223) $x189) $x271) $x31) $x234)))
 (let (($x129 (and $x78 $x121)))
 (let (($x188 (= symbol.1 dst_symbol_addr.1)))
 (let (($x216 (and $x188 $x129)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x112) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x250 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x143 $x96)))))))
 (let (($x203 (and $x250 $x216)))
 (let (($x237 (= $x203 true)))
 (let (($x297 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x162 (= $x297 true)))
 (let (($x30 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x30 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (= $x277 true)))
 (let (($x168 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let ((?x180 (bvadd symbol.1 (bvmul input.ind-%var1933X (_ bv4 32)))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x180))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv2 32))) ?x270)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x180 (_ bv3 32))) ?x54)))
 (let ((?x190 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1933X)))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1933X)))
 (=> $x193 (= ?x190 ?x111)))))))))
 ))
 (let (($x163 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x263 (bvule (_ bv0 32) input.ind-%var1932X)))
 (let (($x193 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1932X)))
 (= $x193 (and $x263 (bvult input.ind-%var1932X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x231 (and $x163 $x168)))
 (let (($x66 (= $x231 true)))
 (let (($x91 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x141 (= $x91 true)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let ((?x103 (bvsub ?x53 ?x18)))
 (let (($x27 (ite (bvsge ?x18 (_ bv0 32)) (bvuge ?x53 ?x103) (bvult ?x53 ?x103))))
 (let ((?x293 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x194 (bvmul (_ bv4 64) ?x293)))
 (let ((?x8 ((_ extract 63 32) ?x194)))
 (let (($x256 (= (_ bv0 32) ?x8)))
 (let (($x172 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x152 (and (and (and true $x172) $x256) $x27)))
 (let (($x259 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x98 (and $x259 $x152)))
 (let (($x157 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (=> $x157 $x98)))
 (let (($x219 (= $x58 true)))
 (let (($x211 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x286 (= $x211 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x221 true)))
 (let (($x55 (= $x157 true)))
 (let ((?x135 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x267 (bvneg ?x135)))
 (let (($x14 (= ?x267 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x24 (= $x14 true)))
 (let (($x289 (= ?x267 input.dst.llvm-%n)))
 (let (($x160 (= $x289 true)))
 (let (($x69 (and $x160 $x24)))
 (let (($x273 (and $x69 $x55)))
 (let (($x32 (and $x273 $x62)))
 (let (($x261 (and $x32 $x286)))
 (let (($x147 (and $x261 $x219)))
 (let (($x128 (and $x147 $x141)))
 (let (($x139 (and $x128 $x66)))
 (let (($x154 (and $x139 $x183)))
 (let (($x138 (and $x154 $x249)))
 (let (($x146 (and $x138 $x162)))
 (let (($x255 (and $x146 $x237)))
 (let (($x151 (and $x255 $x86)))
 (let (($x300 (and $x151 $x33)))
 (let (($x134 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and (not $x134) $x300)))
 (let (($x230 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x187 (and $x230 $x19)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x258 (and $x59 $x187)))
 (let (($x236 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1943X)))
 (=> $x248 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1943X) (_ bv0 32)))))
 ))
 (let (($x170 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x248 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1942X)))
 (= $x248 false)))
 ))
 (let (($x177 (and $x170 $x236)))
 (let (($x80 (and $x177 $x258)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x220 (and $x29 $x80)))
 (let (($x92 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x229 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x92)))))
 (let (($x197 (=> (and $x157 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x92)))))
 (let (($x68 (and $x197 $x220)))
 (let (($x71 (=> $x68 $x145)))
 (not $x71)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (not $x140)))
 (let (($x235 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (not $x235)))
 (let (($x99 (or $x166 $x83)))
 (let (($x85 (= $x99 true)))
 (let ((?x220 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x220)))
 (let (($x274 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x274 true)))
 (let ((?x303 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x265 (bvneg ?x303)))
 (let (($x187 (= ?x265 input.dst.llvm-%n)))
 (let (($x258 (= $x187 true)))
 (let (($x33 (= ?x265 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (= $x33 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x119 true)))
 (let (($x203 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x237 (= $x203 true)))
 (let (($x121 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x121 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x234 true)))
 (let (($x77 (forall ((input.ind-%var1967X (_ BitVec 32)) )(let ((?x63 (bvadd symbol.1 (bvmul input.ind-%var1967X (_ bv4 32)))))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x63))))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv2 32))) ?x189)))
 (let ((?x95 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv3 32))) ?x126)))
 (let ((?x243 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1967X)))
 (let (($x112 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1967X)))
 (=> $x112 (= ?x243 ?x95)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var1966X (_ BitVec 32)) )(let (($x96 (and (bvule (_ bv0 32) input.ind-%var1966X) (bvult input.ind-%var1966X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x112 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1966X)))
 (= $x112 $x96))))
 ))
 (let (($x31 (and $x61 $x77)))
 (let (($x161 (= $x31 true)))
 (let (($x162 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x162 true)))
 (let (($x249 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x138 (= $x249 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x183 (= $x277 true)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x264)))
 (let ((?x123 (bvand symbol.1 (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x123)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x67 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x137 (= input.memlabel-mem--symbol.1_end ?x67)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (and $x163 $x137)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x56 $x180)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (and $x219 $x147)))
 (let (($x141 (not $x91)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x58 (and $x152 $x98)))
 (let (($x193 (and (not $x58) $x141)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x65 $x153)))
 (let (($x64 (not $x103)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x194 $x8)))
 (let (($x27 (and (not $x256) $x64)))
 (let (($x208 (and (and (and (and (and (and $x27 $x193) $x263) $x90) $x45) $x82) $x101)))
 (let (($x168 (and $x208 $x36)))
 (let (($x57 (= symbol.1 dst_symbol_addr.1)))
 (let (($x231 (and $x57 $x168)))
 (let (($x239 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x261 (or (bvugt input.memlabel-mem--symbol.1_begin ?x32) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x293 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x261) (or $x269 $x239)))))))
 (let (($x66 (and $x293 $x231)))
 (let (($x139 (= $x66 true)))
 (let (($x154 (and $x139 $x183)))
 (let (($x297 (and $x154 $x138)))
 (let (($x6 (and $x297 $x146)))
 (let (($x117 (and $x6 $x161)))
 (let (($x228 (and $x117 $x78)))
 (let (($x216 (and $x228 $x129)))
 (let (($x255 (and $x216 $x237)))
 (let (($x151 (and $x255 $x86)))
 (let (($x19 (and $x151 $x300)))
 (let (($x80 (and $x19 $x258)))
 (let (($x292 (and $x80 $x192)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x5 (and $x69 $x292)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x240 (and $x160 $x5)))
 (let (($x135 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x165 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1977X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x165 false)))
 ))
 (let (($x267 (and $x236 $x135)))
 (let (($x13 (and $x267 $x240)))
 (let (($x200 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x200 $x13)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let (($x89 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x29 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x89)))))
 (let (($x81 (=> (and $x140 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x89)))))
 (let (($x35 (and $x81 $x130)))
 (let (($x295 (=> $x35 $x85)))
 (not $x295)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (not $x140)))
 (let (($x235 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (not $x235)))
 (let (($x99 (or $x166 $x83)))
 (let (($x85 (= $x99 true)))
 (let ((?x220 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x220)))
 (let (($x274 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x274 true)))
 (let ((?x303 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x265 (bvneg ?x303)))
 (let (($x187 (= ?x265 input.dst.llvm-%n)))
 (let (($x258 (= $x187 true)))
 (let (($x33 (= ?x265 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (= $x33 true)))
 (let (($x119 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x119 true)))
 (let (($x203 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x237 (= $x203 true)))
 (let (($x121 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x121 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x234 true)))
 (let (($x77 (forall ((input.ind-%var1967X (_ BitVec 32)) )(let ((?x63 (bvadd symbol.1 (bvmul input.ind-%var1967X (_ bv4 32)))))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x63))))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv2 32))) ?x189)))
 (let ((?x95 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x63 (_ bv3 32))) ?x126)))
 (let ((?x243 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1967X)))
 (let (($x112 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1967X)))
 (=> $x112 (= ?x243 ?x95)))))))))
 ))
 (let (($x61 (forall ((input.ind-%var1966X (_ BitVec 32)) )(let (($x96 (and (bvule (_ bv0 32) input.ind-%var1966X) (bvult input.ind-%var1966X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x112 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1966X)))
 (= $x112 $x96))))
 ))
 (let (($x31 (and $x61 $x77)))
 (let (($x161 (= $x31 true)))
 (let (($x162 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x162 true)))
 (let (($x249 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x138 (= $x249 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x183 (= $x277 true)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x264)))
 (let ((?x123 (bvand symbol.1 (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x123)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x67 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x137 (= input.memlabel-mem--symbol.1_end ?x67)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (and $x163 $x137)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x56 $x180)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x91 (and $x219 $x147)))
 (let (($x141 (not $x91)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x58 (and $x152 $x98)))
 (let (($x193 (and (not $x58) $x141)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x65 $x153)))
 (let (($x64 (not $x103)))
 (let (($x8 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x194 $x8)))
 (let (($x27 (and (not $x256) $x64)))
 (let (($x208 (and (and (and (and (and (and $x27 $x193) $x263) $x90) $x45) $x82) $x101)))
 (let (($x168 (and $x208 $x36)))
 (let (($x57 (= symbol.1 dst_symbol_addr.1)))
 (let (($x231 (and $x57 $x168)))
 (let (($x239 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x261 (or (bvugt input.memlabel-mem--symbol.1_begin ?x32) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x293 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x261) (or $x269 $x239)))))))
 (let (($x66 (and $x293 $x231)))
 (let (($x139 (= $x66 true)))
 (let (($x154 (and $x139 $x183)))
 (let (($x297 (and $x154 $x138)))
 (let (($x6 (and $x297 $x146)))
 (let (($x117 (and $x6 $x161)))
 (let (($x228 (and $x117 $x78)))
 (let (($x216 (and $x228 $x129)))
 (let (($x255 (and $x216 $x237)))
 (let (($x151 (and $x255 $x86)))
 (let (($x19 (and $x151 $x300)))
 (let (($x80 (and $x19 $x258)))
 (let (($x292 (and $x80 $x192)))
 (let (($x69 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x5 (and $x69 $x292)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x240 (and $x160 $x5)))
 (let (($x135 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x165 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1977X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x165 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x165 false)))
 ))
 (let (($x267 (and $x236 $x135)))
 (let (($x13 (and $x267 $x240)))
 (let (($x200 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x200 $x13)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let (($x89 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x29 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x89)))))
 (let (($x81 (=> (and $x140 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x89)))))
 (let (($x35 (and $x81 $x130)))
 (let (($x295 (=> $x35 $x85)))
 (not $x295)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (or $x17 $x40)))
 (let (($x169 (= $x25 true)))
 (let ((?x48 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x48)))
 (let (($x144 (= ?x7 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x144 true)))
 (let ((?x250 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x250)))
 (let (($x173 (= ?x127 input.dst.llvm-%n)))
 (let (($x225 (= $x173 true)))
 (let (($x34 (= ?x127 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (= $x34 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x122 (= $x248 true)))
 (let (($x16 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x177 (= $x16 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x244 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x184 (= $x12 true)))
 (let (($x99 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x220 (bvadd symbol.1 (bvmul input.ind-%var1987X (_ bv4 32)))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x220))))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv2 32))) ?x292)))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv3 32))) ?x13)))
 (let ((?x78 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1987X)))
 (let (($x106 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1987X)))
 (=> $x106 (= ?x78 ?x235)))))))))
 ))
 (let (($x31 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x74 (and (bvule (_ bv0 32) input.ind-%var1986X) (bvult input.ind-%var1986X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x106 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1986X)))
 (= $x106 $x74))))
 ))
 (let (($x85 (and $x31 $x99)))
 (let (($x295 (= $x85 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x41 (= $x63 true)))
 (let (($x243 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x15 (= $x243 true)))
 (let (($x143 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x96 (= $x143 true)))
 (let ((?x277 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x277)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x66)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x208 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x298 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x264 (and $x298 $x208)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x82 $x264)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x56 $x163)))
 (let (($x67 (not $x190)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x233 $x90)))
 (let (($x180 (and (not $x54) $x67)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x91 $x141)))
 (let (($x113 (not $x193)))
 (let (($x219 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x128 $x219)))
 (let (($x270 (and (not $x147) $x113)))
 (let (($x162 (and (and (and (and (and (and $x270 $x180) $x45) $x70) $x36) $x231) $x139)))
 (let (($x146 (and $x162 $x183)))
 (let (($x245 (= symbol.1 dst_symbol_addr.1)))
 (let (($x6 (and $x245 $x146)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x293 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x293)))
 (let (($x194 (or (bvugt input.memlabel-mem--symbol.1_begin ?x293) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x194) (or $x65 $x153)))))))
 (let (($x112 (and $x58 $x6)))
 (let (($x206 (= $x112 true)))
 (let (($x49 (and $x206 $x96)))
 (let (($x212 (and $x49 $x15)))
 (let (($x294 (and $x212 $x41)))
 (let (($x22 (and $x294 $x295)))
 (let (($x55 (and $x22 $x184)))
 (let (($x254 (and $x55 $x188)))
 (let (($x59 (and $x254 $x177)))
 (let (($x164 (and $x59 $x122)))
 (let (($x93 (and $x164 $x175)))
 (let (($x222 (and $x93 $x225)))
 (let (($x87 (and $x222 $x185)))
 (let (($x259 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (and $x259 $x87)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x301 (and $x76 $x150)))
 (let (($x211 (forall ((input.ind-%var1997X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1997X)))
 (=> $x191 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1997X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var1996X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1996X)))
 (= $x191 false)))
 ))
 (let (($x286 (and $x135 $x211)))
 (let (($x52 (and $x286 $x301)))
 (let (($x170 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x72 (and $x170 $x52)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let (($x197 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x200 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x197)))))
 (let (($x257 (=> (and $x40 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x197)))))
 (let (($x302 (and $x257 $x72)))
 (let (($x120 (=> $x302 $x169)))
 (not $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x25 (or $x17 $x40)))
 (let (($x169 (= $x25 true)))
 (let ((?x48 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x48)))
 (let (($x144 (= ?x7 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x144 true)))
 (let ((?x250 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x127 (bvneg ?x250)))
 (let (($x173 (= ?x127 input.dst.llvm-%n)))
 (let (($x225 (= $x173 true)))
 (let (($x34 (= ?x127 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x175 (= $x34 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x122 (= $x248 true)))
 (let (($x16 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x177 (= $x16 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x244 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x184 (= $x12 true)))
 (let (($x99 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x220 (bvadd symbol.1 (bvmul input.ind-%var1987X (_ bv4 32)))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x220))))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv2 32))) ?x292)))
 (let ((?x235 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv3 32))) ?x13)))
 (let ((?x78 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1987X)))
 (let (($x106 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1987X)))
 (=> $x106 (= ?x78 ?x235)))))))))
 ))
 (let (($x31 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x74 (and (bvule (_ bv0 32) input.ind-%var1986X) (bvult input.ind-%var1986X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x106 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1986X)))
 (= $x106 $x74))))
 ))
 (let (($x85 (and $x31 $x99)))
 (let (($x295 (= $x85 true)))
 (let (($x63 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x41 (= $x63 true)))
 (let (($x243 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x15 (= $x243 true)))
 (let (($x143 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x96 (= $x143 true)))
 (let ((?x277 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x277)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x66)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x208 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x298 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x264 (and $x298 $x208)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x82 $x264)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x56 $x163)))
 (let (($x67 (not $x190)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (and $x233 $x90)))
 (let (($x180 (and (not $x54) $x67)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x91 $x141)))
 (let (($x113 (not $x193)))
 (let (($x219 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x128 $x219)))
 (let (($x270 (and (not $x147) $x113)))
 (let (($x162 (and (and (and (and (and (and $x270 $x180) $x45) $x70) $x36) $x231) $x139)))
 (let (($x146 (and $x162 $x183)))
 (let (($x245 (= symbol.1 dst_symbol_addr.1)))
 (let (($x6 (and $x245 $x146)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x293 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x293)))
 (let (($x194 (or (bvugt input.memlabel-mem--symbol.1_begin ?x293) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x194) (or $x65 $x153)))))))
 (let (($x112 (and $x58 $x6)))
 (let (($x206 (= $x112 true)))
 (let (($x49 (and $x206 $x96)))
 (let (($x212 (and $x49 $x15)))
 (let (($x294 (and $x212 $x41)))
 (let (($x22 (and $x294 $x295)))
 (let (($x55 (and $x22 $x184)))
 (let (($x254 (and $x55 $x188)))
 (let (($x59 (and $x254 $x177)))
 (let (($x164 (and $x59 $x122)))
 (let (($x93 (and $x164 $x175)))
 (let (($x222 (and $x93 $x225)))
 (let (($x87 (and $x222 $x185)))
 (let (($x259 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x150 (and $x259 $x87)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x301 (and $x76 $x150)))
 (let (($x211 (forall ((input.ind-%var1997X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1997X)))
 (=> $x191 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1997X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var1996X (_ BitVec 32)) )(let (($x191 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1996X)))
 (= $x191 false)))
 ))
 (let (($x286 (and $x135 $x211)))
 (let (($x52 (and $x286 $x301)))
 (let (($x170 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x72 (and $x170 $x52)))
 (let ((?x18 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvadd symbol.1 ?x18)))
 (let (($x197 (and (bvule input.memlabel-mem--symbol.1_begin ?x53) (bvule (bvadd ?x53 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x200 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false $x197)))))
 (let (($x257 (=> (and $x40 (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x197)))))
 (let (($x302 (and $x257 $x72)))
 (let (($x120 (=> $x302 $x169)))
 (not $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x46 (forall ((input.ind-%var2027X (_ BitVec 32)) )(let ((?x271 (bvadd symbol.1 (bvmul input.ind-%var2027X (_ bv4 32)))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x271))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv2 32))) ?x31)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv3 32))) ?x80)))
 (let ((?x168 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2027X)))
 (let (($x154 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2027X)))
 (=> $x154 (= ?x168 ?x35)))))))))
 ))
 (let (($x37 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let (($x154 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2026X)))
 (= $x154 (and (bvule (_ bv0 32) input.ind-%var2026X) (bvult input.ind-%var2026X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x37 $x46)))
 (let (($x282 (= $x174 true)))
 (let ((?x194 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x194)))
 (let (($x119 (= ?x8 input.dst.llvm-%n)))
 (let (($x237 (= $x119 true)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x276)))
 (let ((?x165 (bvand symbol.1 (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x165)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x267)))
 (let ((?x156 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x228 (= input.memlabel-mem--symbol.1_end ?x156)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x230 (and $x239 $x228)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x142 $x230)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x302 (and $x52 $x72)))
 (let (($x17 (not $x302)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (and $x87 $x150)))
 (let (($x169 (and (not $x301) $x17)))
 (let (($x222 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x225 $x222)))
 (let (($x7 (not $x48)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x175 $x93)))
 (let (($x185 (and (not $x173) $x7)))
 (let (($x203 (and (and (and (and (and (and $x185 $x169) $x120) $x238) $x24) $x160) $x199)))
 (let (($x33 (and $x203 $x221)))
 (let (($x99 (= symbol.1 dst_symbol_addr.1)))
 (let (($x300 (and $x99 $x33)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x188 (or (bvugt input.memlabel-mem--symbol.1_begin ?x184) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x188) (or $x59 $x248)))))))
 (let (($x296 (and $x34 $x300)))
 (let (($x303 (= $x296 true)))
 (let (($x292 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (= $x292 true)))
 (let (($x240 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let ((?x271 (bvadd symbol.1 (bvmul input.ind-%var2007X (_ bv4 32)))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x271))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv2 32))) ?x31)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv3 32))) ?x80)))
 (let ((?x168 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2007X)))
 (let (($x154 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2007X)))
 (=> $x154 (= ?x168 ?x35)))))))))
 ))
 (let (($x208 (forall ((input.ind-%var2006X (_ BitVec 32)) )(let (($x298 (bvule (_ bv0 32) input.ind-%var2006X)))
 (let (($x154 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2006X)))
 (= $x154 (and $x298 (bvult input.ind-%var2006X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x274 (and $x208 $x240)))
 (let (($x192 (= $x274 true)))
 (let (($x147 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x263 (not $x147)))
 (let (($x163 (= $x263 true)))
 (let (($x233 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x90 (and true $x233)))
 (let (($x54 (=> $x263 $x90)))
 (let (($x137 (= $x54 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x245 (= $x114 true)))
 (let (($x27 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x152 (= $x27 true)))
 (let (($x153 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x153 true)))
 (let (($x256 (= ?x8 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (= $x256 true)))
 (let (($x293 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x273 (= $x293 true)))
 (let (($x172 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x284 (= $x172 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x269 (= $x75 true)))
 (let ((?x171 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x171)))
 (let (($x286 (= ?x32 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x286 true)))
 (let (($x259 (and $x261 $x269)))
 (let (($x98 (and $x259 $x284)))
 (let (($x57 (and $x98 $x273)))
 (let (($x20 (and $x57 $x65)))
 (let (($x64 (and $x20 $x103)))
 (let (($x58 (and $x64 $x152)))
 (let (($x128 (and $x58 $x245)))
 (let (($x56 (and $x128 $x137)))
 (let (($x190 (and $x56 $x163)))
 (let (($x68 (and $x190 $x192)))
 (let (($x235 (and $x68 $x13)))
 (let (($x255 (and $x235 $x303)))
 (let (($x86 (and $x255 $x237)))
 (let (($x14 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x265 (and $x14 $x86)))
 (let (($x51 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and $x51 $x265)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x170 $x19)))
 (let (($x200 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2017X)))
 (=> $x18 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2017X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var2016X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2016X)))
 (= $x18 false)))
 ))
 (let (($x257 (and $x149 $x200)))
 (let (($x189 (and $x257 $x133)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x196 $x189)))
 (let (($x215 (=> $x126 $x282)))
 (not $x215))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x46 (forall ((input.ind-%var2027X (_ BitVec 32)) )(let ((?x271 (bvadd symbol.1 (bvmul input.ind-%var2027X (_ bv4 32)))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x271))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv2 32))) ?x31)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv3 32))) ?x80)))
 (let ((?x168 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2027X)))
 (let (($x154 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2027X)))
 (=> $x154 (= ?x168 ?x35)))))))))
 ))
 (let (($x37 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let (($x154 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2026X)))
 (= $x154 (and (bvule (_ bv0 32) input.ind-%var2026X) (bvult input.ind-%var2026X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x37 $x46)))
 (let (($x282 (= $x174 true)))
 (let ((?x194 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x194)))
 (let (($x119 (= ?x8 input.dst.llvm-%n)))
 (let (($x237 (= $x119 true)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x276)))
 (let ((?x165 (bvand symbol.1 (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x165)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x267)))
 (let ((?x156 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x228 (= input.memlabel-mem--symbol.1_end ?x156)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x230 (and $x239 $x228)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x142 $x230)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x302 (and $x52 $x72)))
 (let (($x17 (not $x302)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (and $x87 $x150)))
 (let (($x169 (and (not $x301) $x17)))
 (let (($x222 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x225 $x222)))
 (let (($x7 (not $x48)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x175 $x93)))
 (let (($x185 (and (not $x173) $x7)))
 (let (($x203 (and (and (and (and (and (and $x185 $x169) $x120) $x238) $x24) $x160) $x199)))
 (let (($x33 (and $x203 $x221)))
 (let (($x99 (= symbol.1 dst_symbol_addr.1)))
 (let (($x300 (and $x99 $x33)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x188 (or (bvugt input.memlabel-mem--symbol.1_begin ?x184) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x188) (or $x59 $x248)))))))
 (let (($x296 (and $x34 $x300)))
 (let (($x303 (= $x296 true)))
 (let (($x292 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x13 (= $x292 true)))
 (let (($x240 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let ((?x271 (bvadd symbol.1 (bvmul input.ind-%var2007X (_ bv4 32)))))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x271))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv2 32))) ?x31)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x271 (_ bv3 32))) ?x80)))
 (let ((?x168 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2007X)))
 (let (($x154 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2007X)))
 (=> $x154 (= ?x168 ?x35)))))))))
 ))
 (let (($x208 (forall ((input.ind-%var2006X (_ BitVec 32)) )(let (($x298 (bvule (_ bv0 32) input.ind-%var2006X)))
 (let (($x154 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2006X)))
 (= $x154 (and $x298 (bvult input.ind-%var2006X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x274 (and $x208 $x240)))
 (let (($x192 (= $x274 true)))
 (let (($x147 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x263 (not $x147)))
 (let (($x163 (= $x263 true)))
 (let (($x233 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x90 (and true $x233)))
 (let (($x54 (=> $x263 $x90)))
 (let (($x137 (= $x54 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x245 (= $x114 true)))
 (let (($x27 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x152 (= $x27 true)))
 (let (($x153 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x103 (= $x153 true)))
 (let (($x256 (= ?x8 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x65 (= $x256 true)))
 (let (($x293 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x273 (= $x293 true)))
 (let (($x172 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x284 (= $x172 true)))
 (let (($x75 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x269 (= $x75 true)))
 (let ((?x171 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x171)))
 (let (($x286 (= ?x32 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x261 (= $x286 true)))
 (let (($x259 (and $x261 $x269)))
 (let (($x98 (and $x259 $x284)))
 (let (($x57 (and $x98 $x273)))
 (let (($x20 (and $x57 $x65)))
 (let (($x64 (and $x20 $x103)))
 (let (($x58 (and $x64 $x152)))
 (let (($x128 (and $x58 $x245)))
 (let (($x56 (and $x128 $x137)))
 (let (($x190 (and $x56 $x163)))
 (let (($x68 (and $x190 $x192)))
 (let (($x235 (and $x68 $x13)))
 (let (($x255 (and $x235 $x303)))
 (let (($x86 (and $x255 $x237)))
 (let (($x14 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x265 (and $x14 $x86)))
 (let (($x51 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x19 (and $x51 $x265)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x170 $x19)))
 (let (($x200 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2017X)))
 (=> $x18 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2017X) (_ bv0 32)))))
 ))
 (let (($x149 (forall ((input.ind-%var2016X (_ BitVec 32)) )(let (($x18 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2016X)))
 (= $x18 false)))
 ))
 (let (($x257 (and $x149 $x200)))
 (let (($x189 (and $x257 $x133)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x196 $x189)))
 (let (($x215 (=> $x126 $x282)))
 (not $x215))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791763/query
