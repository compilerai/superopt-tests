==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x81 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x76 (or (bvugt input.memlabel-mem--symbol.1_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x72 (or (bvugt input.memlabel-mem--arg.0_begin ?x69) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x85 (or false (or false (and (and (and true $x72) $x76) (or $x80 $x81))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x58 (= symbol.1 dst_symbol_addr.1)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x53 $x54)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= ?x49 (_ bv0 32))))
 (let ((?x45 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= ?x45 (_ bv0 32))))
 (let (($x51 (and $x47 $x50)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x37 (and $x35 $x36)))
 (let (($x38 (not $x37)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x34 (and $x32 $x33)))
 (let (($x40 (and (not $x34) $x38)))
 (let (($x27 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x26 $x27)))
 (let (($x29 (not $x28)))
 (let (($x24 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x23 $x24)))
 (let (($x31 (and (not $x25) $x29)))
 (let (($x41 (and $x31 $x40)))
 (let ((?x19 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv400 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.memlabel-mem--symbol.1_begin ?x7)))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x13)))
 (let (($x12 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x12 $x6)))
 (let (($x17 (and $x14 $x16)))
 (let (($x22 (and $x17 $x21)))
 (let (($x42 (and $x22 $x41)))
 (let (($x52 (and $x42 $x51)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (and $x59 $x87))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--symbol.1_end #b11001000000000000000000110010011)
(= input.memlabel-mem--symbol.1_begin #b11001000000000000000000000000100)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= dst_symbol_addr.1 #b11001000000000000000000000000100)
(= symbol.1 #b11001000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000001100000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000001100000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000001100000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x00800248)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x008003d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffffe4f)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun symbol.1 () (_ BitVec 32)
    #x00800248)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x00800248)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffe4c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32) (_ bv2147484047 32))
(define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun dst_symbol_addr.1 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun symbol.1 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147484048 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147484048 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147484051 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (= true false)))
 (let (($x134 (= $x133 true)))
 (let (($x126 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x112 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x112 false)))
 ))
 (let (($x127 (and $x116 $x126)))
 (let (($x128 (= $x127 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x102 (concat ?x99 (concat ?x95 ?x93)))))
 (let (($x104 (= ?x103 input.dst.llvm-%n)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x33 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (= $x33 true)))
 (let (($x42 (= $x40 true)))
 (let (($x89 (= $x42 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x52)))
 (let ((?x22 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x22)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x10 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (and $x54 $x10)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x26 $x34)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x53 (and $x30 $x81)))
 (let (($x61 (not $x53)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x64 $x60)))
 (let (($x49 (and (not $x7) $x61)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x55 $x74)))
 (let (($x9 (not $x65)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x25 $x45)))
 (let (($x82 (and (not $x18) $x9)))
 (let (($x77 (and (and (and (and (and (and $x82 $x49) $x73) $x71) $x38) $x32) $x87)))
 (let (($x79 (and $x77 $x68)))
 (let (($x13 (= symbol.1 dst_symbol_addr.1)))
 (let (($x57 (and $x13 $x79)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x41 (or (bvugt input.memlabel-mem--symbol.1_begin ?x67) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x41) (or $x72 $x31)))))))
 (let (($x17 (and $x66 $x57)))
 (let (($x6 (= $x17 true)))
 (let (($x50 (= $x6 true)))
 (let (($x48 (= $x50 true)))
 (let (($x90 (and $x48 $x89)))
 (let (($x107 (and $x90 $x106)))
 (let (($x129 (and $x107 $x128)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x39 $x129)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x131 (and $x16 $x130)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x43 $x131)))
 (let (($x135 (=> $x132 $x134)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (= true false)))
 (let (($x134 (= $x133 true)))
 (let (($x126 (forall ((input.ind-%var49X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var49X)))
 (=> $x112 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var49X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x112 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var48X)))
 (= $x112 false)))
 ))
 (let (($x127 (and $x116 $x126)))
 (let (($x128 (= $x127 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x102 (concat ?x99 (concat ?x95 ?x93)))))
 (let (($x104 (= ?x103 input.dst.llvm-%n)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let (($x33 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x40 (= $x33 true)))
 (let (($x42 (= $x40 true)))
 (let (($x89 (= $x42 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x52)))
 (let ((?x22 (bvand symbol.1 (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x22)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x10 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x34 (and $x54 $x10)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x26 $x34)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x53 (and $x30 $x81)))
 (let (($x61 (not $x53)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x7 (and $x64 $x60)))
 (let (($x49 (and (not $x7) $x61)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x55 $x74)))
 (let (($x9 (not $x65)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x25 $x45)))
 (let (($x82 (and (not $x18) $x9)))
 (let (($x77 (and (and (and (and (and (and $x82 $x49) $x73) $x71) $x38) $x32) $x87)))
 (let (($x79 (and $x77 $x68)))
 (let (($x13 (= symbol.1 dst_symbol_addr.1)))
 (let (($x57 (and $x13 $x79)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x41 (or (bvugt input.memlabel-mem--symbol.1_begin ?x67) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x41) (or $x72 $x31)))))))
 (let (($x17 (and $x66 $x57)))
 (let (($x6 (= $x17 true)))
 (let (($x50 (= $x6 true)))
 (let (($x48 (= $x50 true)))
 (let (($x90 (and $x48 $x89)))
 (let (($x107 (and $x90 $x106)))
 (let (($x129 (and $x107 $x128)))
 (let (($x39 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x130 (and $x39 $x129)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x131 (and $x16 $x130)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x43 $x131)))
 (let (($x135 (=> $x132 $x134)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8054400)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8054403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8054400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34120210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34120213)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xb4120203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34120210)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xb4120074)
  (define-fun symbol.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x59)))
 (let ((?x75 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x75)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x32 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x89 (= input.memlabel-mem--symbol.1_end ?x32)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (and $x86 $x89)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x101 $x68)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x88 (not $x36)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x71 $x42)))
 (let (($x79 (and (not $x64) $x88)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x31 (not $x56)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x73 $x74)))
 (let (($x97 (and (not $x65) $x31)))
 (let (($x84 (and (and (and (and (and (and $x97 $x79) $x51) $x83) $x54) $x40) $x37)))
 (let (($x81 (and $x84 $x41)))
 (let (($x48 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x48 $x81)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x30) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x72 $x55)))))))
 (let (($x121 (and $x66 $x91)))
 (let (($x119 (= $x121 true)))
 (let (($x108 (= $x119 true)))
 (let (($x133 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x111 false)))
 ))
 (let (($x128 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x134 (and $x128 $x133)))
 (let (($x135 (= $x134 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x102 (concat ?x22 (concat ?x34 ?x49)))))
 (let (($x94 (= input.dst.llvm-%n ?x85)))
 (let (($x96 (and (and (and $x66 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x91) $x94)))
 (let (($x100 (= $x96 true)))
 (let (($x103 (= $x100 true)))
 (let (($x104 (= $x103 true)))
 (let (($x136 (and $x104 $x135)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and $x29 $x136)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x35 $x8)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x58 $x92)))
 (let (($x110 (=> $x113 $x108)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x59)))
 (let ((?x75 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x75)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x32 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x89 (= input.memlabel-mem--symbol.1_end ?x32)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (and $x86 $x89)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x101 $x68)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x88 (not $x36)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x71 $x42)))
 (let (($x79 (and (not $x64) $x88)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x31 (not $x56)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x73 $x74)))
 (let (($x97 (and (not $x65) $x31)))
 (let (($x84 (and (and (and (and (and (and $x97 $x79) $x51) $x83) $x54) $x40) $x37)))
 (let (($x81 (and $x84 $x41)))
 (let (($x48 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x48 $x81)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x30) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x72 $x55)))))))
 (let (($x121 (and $x66 $x91)))
 (let (($x119 (= $x121 true)))
 (let (($x108 (= $x119 true)))
 (let (($x133 (forall ((input.ind-%var66X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var66X)))
 (= $x111 false)))
 ))
 (let (($x128 (forall ((input.ind-%var67X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var67X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var67X) (_ bv0 32)))))
 ))
 (let (($x134 (and $x128 $x133)))
 (let (($x135 (= $x134 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x102 (concat ?x22 (concat ?x34 ?x49)))))
 (let (($x94 (= input.dst.llvm-%n ?x85)))
 (let (($x96 (and (and (and $x66 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x91) $x94)))
 (let (($x100 (= $x96 true)))
 (let (($x103 (= $x100 true)))
 (let (($x104 (= $x103 true)))
 (let (($x136 (and $x104 $x135)))
 (let (($x29 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and $x29 $x136)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x92 (and $x35 $x8)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x113 (and $x58 $x92)))
 (let (($x110 (=> $x113 $x108)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x124 (= $x131 true)))
 (let (($x39 (forall ((input.ind-%var73X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var73X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var73X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var72X)))
 (= $x128 false)))
 ))
 (let (($x38 (and $x135 $x39)))
 (let (($x112 (= $x38 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x6 (concat ?x34 (concat ?x18 ?x14)))))
 (let (($x94 (= input.dst.llvm-%n ?x85)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x26)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x90)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x83 $x86)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x57 $x17)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x71 $x42)))
 (let (($x79 (and (not $x64) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x73 $x74)))
 (let (($x97 (and (not $x65) $x56)))
 (let (($x41 (and (and (and (and (and (and $x97 $x79) $x10) $x53) $x32) $x54) $x69)))
 (let (($x81 (and $x41 $x40)))
 (let (($x48 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x48 $x81)))
 (let (($x52 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x9 (or (bvugt input.memlabel-mem--symbol.1_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x9) (or $x7 $x27)))))))
 (let (($x103 (and (and (and $x95 $x52) $x91) $x94)))
 (let (($x104 (= $x103 true)))
 (let (($x107 (= $x104 true)))
 (let (($x111 (= $x107 true)))
 (let (($x120 (and $x111 $x112)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (and $x16 $x120)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x115 (and $x43 $x105)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x11 $x115)))
 (let (($x106 (=> $x130 $x124)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x124 (= $x131 true)))
 (let (($x39 (forall ((input.ind-%var73X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var73X)))
 (=> $x128 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var73X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x128 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var72X)))
 (= $x128 false)))
 ))
 (let (($x38 (and $x135 $x39)))
 (let (($x112 (= $x38 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x6 (concat ?x34 (concat ?x18 ?x14)))))
 (let (($x94 (= input.dst.llvm-%n ?x85)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x26)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x90)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x83 $x86)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x57 $x17)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x64 (and $x71 $x42)))
 (let (($x79 (and (not $x64) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x74 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x73 $x74)))
 (let (($x97 (and (not $x65) $x56)))
 (let (($x41 (and (and (and (and (and (and $x97 $x79) $x10) $x53) $x32) $x54) $x69)))
 (let (($x81 (and $x41 $x40)))
 (let (($x48 (= symbol.1 dst_symbol_addr.1)))
 (let (($x91 (and $x48 $x81)))
 (let (($x52 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x9 (or (bvugt input.memlabel-mem--symbol.1_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x9) (or $x7 $x27)))))))
 (let (($x103 (and (and (and $x95 $x52) $x91) $x94)))
 (let (($x104 (= $x103 true)))
 (let (($x107 (= $x104 true)))
 (let (($x111 (= $x107 true)))
 (let (($x120 (and $x111 $x112)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x105 (and $x16 $x120)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x115 (and $x43 $x105)))
 (let (($x11 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x11 $x115)))
 (let (($x106 (=> $x130 $x124)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1a75018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x1a74fffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x8)))
 (let (($x129 (= ?x108 input.dst.llvm-%n)))
 (let (($x117 (= $x129 true)))
 (let (($x87 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x114 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x114 false)))
 ))
 (let (($x132 (and $x120 $x87)))
 (let (($x121 (= $x132 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x14 (concat ?x12 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x54)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x89)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x82 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x37 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x101 (and $x37 $x82)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x53 $x101)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x81 (and (and (and (and (and (and $x71 $x44) $x10) $x51) $x86) $x84) $x68)))
 (let (($x91 (and $x81 $x59)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x9) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x25 $x66)))))))
 (let (($x111 (and (and (and $x99 $x63) $x100) $x103)))
 (let (($x127 (= $x111 true)))
 (let (($x128 (= $x127 true)))
 (let (($x134 (= $x128 true)))
 (let (($x92 (and $x134 $x121)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (and $x16 $x92)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x20 $x116)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x47 $x126)))
 (let (($x122 (=> $x133 $x117)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x8 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x8)))
 (let (($x129 (= ?x108 input.dst.llvm-%n)))
 (let (($x117 (= $x129 true)))
 (let (($x87 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var87X)))
 (=> $x114 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var87X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var86X (_ BitVec 32)) )(let (($x114 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var86X)))
 (= $x114 false)))
 ))
 (let (($x132 (and $x120 $x87)))
 (let (($x121 (= $x132 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x14 (concat ?x12 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x54)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x89)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x83 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x82 (= input.memlabel-mem--symbol.1_end ?x83)))
 (let (($x37 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x101 (and $x37 $x82)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x53 $x101)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x81 (and (and (and (and (and (and $x71 $x44) $x10) $x51) $x86) $x84) $x68)))
 (let (($x91 (and $x81 $x59)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x7 (or (bvugt input.memlabel-mem--symbol.1_begin ?x9) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x7) (or $x25 $x66)))))))
 (let (($x111 (and (and (and $x99 $x63) $x100) $x103)))
 (let (($x127 (= $x111 true)))
 (let (($x128 (= $x127 true)))
 (let (($x134 (= $x128 true)))
 (let (($x92 (and $x134 $x121)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x116 (and $x16 $x92)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x20 $x116)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x133 (and $x47 $x126)))
 (let (($x122 (=> $x133 $x117)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x113)))
 (let (($x106 (= ?x38 input.spec-%var-n-1)))
 (let (($x115 (= $x106 true)))
 (let (($x122 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x29 false)))
 ))
 (let (($x118 (and $x121 $x122)))
 (let (($x30 (= $x118 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x12 (concat ?x102 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x32)))
 (let ((?x26 (bvand symbol.1 (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x26)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x53 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x37 (= input.memlabel-mem--symbol.1_end ?x53)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x57 (and $x51 $x37)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x75 $x57)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x59 (and (and (and (and (and (and $x71 $x44) $x90) $x69) $x83) $x86) $x17)))
 (let (($x91 (and $x59 $x84)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x27 (or (bvugt input.memlabel-mem--symbol.1_begin ?x13) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x27) (or $x23 $x95)))))))
 (let (($x128 (and (and (and $x104 $x96) $x100) $x103)))
 (let (($x134 (= $x128 true)))
 (let (($x110 (= $x134 true)))
 (let (($x114 (= $x110 true)))
 (let (($x50 (and $x114 $x30)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and $x15 $x50)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x11 $x39)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x58 $x124)))
 (let (($x125 (=> $x130 $x115)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x113)))
 (let (($x106 (= ?x38 input.spec-%var-n-1)))
 (let (($x115 (= $x106 true)))
 (let (($x122 (forall ((input.ind-%var93X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var93X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var93X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var92X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var92X)))
 (= $x29 false)))
 ))
 (let (($x118 (and $x121 $x122)))
 (let (($x30 (= $x118 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x12 (concat ?x102 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x32)))
 (let ((?x26 (bvand symbol.1 (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x26)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x53 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x37 (= input.memlabel-mem--symbol.1_end ?x53)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x57 (and $x51 $x37)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x75 $x57)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x59 (and (and (and (and (and (and $x71 $x44) $x90) $x69) $x83) $x86) $x17)))
 (let (($x91 (and $x59 $x84)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x27 (or (bvugt input.memlabel-mem--symbol.1_begin ?x13) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x27) (or $x23 $x95)))))))
 (let (($x128 (and (and (and $x104 $x96) $x100) $x103)))
 (let (($x134 (= $x128 true)))
 (let (($x110 (= $x134 true)))
 (let (($x114 (= $x110 true)))
 (let (($x50 (and $x114 $x30)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x39 (and $x15 $x50)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x11 $x39)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x58 $x124)))
 (let (($x125 (=> $x130 $x115)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x87 (= $x120 true)))
 (let (($x8 (= $x87 true)))
 (let (($x125 (forall ((input.ind-%var99X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var99X)))
 (=> $x129 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var99X) (_ bv0 32)))))
 ))
 (let (($x30 (forall ((input.ind-%var98X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var98X)))
 (= $x129 false)))
 ))
 (let (($x136 (and $x30 $x125)))
 (let (($x24 (= $x136 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x102 (concat ?x14 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x101)))
 (let ((?x81 (bvand symbol.1 (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x75 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x75)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (and $x69 $x51)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x10 $x41)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x84 (and (and (and (and (and (and $x71 $x44) $x40) $x89) $x53) $x83) $x82)))
 (let (($x91 (and $x84 $x86)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x33 (or (bvugt input.memlabel-mem--symbol.1_begin ?x55) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x33) (or $x46 $x52)))))))
 (let (($x110 (and (and (and $x111 $x63) $x100) $x103)))
 (let (($x114 (= $x110 true)))
 (let (($x131 (= $x114 true)))
 (let (($x29 (= $x131 true)))
 (let (($x93 (and $x29 $x24)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and $x43 $x93)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x60 $x80)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x16 $x119)))
 (let (($x116 (=> $x126 $x8)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x87 (= $x120 true)))
 (let (($x8 (= $x87 true)))
 (let (($x125 (forall ((input.ind-%var99X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var99X)))
 (=> $x129 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var99X) (_ bv0 32)))))
 ))
 (let (($x30 (forall ((input.ind-%var98X (_ BitVec 32)) )(let (($x129 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var98X)))
 (= $x129 false)))
 ))
 (let (($x136 (and $x30 $x125)))
 (let (($x24 (= $x136 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x102 (concat ?x14 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x101)))
 (let ((?x81 (bvand symbol.1 (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x81)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x75 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x51 (= input.memlabel-mem--symbol.1_end ?x75)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (and $x69 $x51)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x10 $x41)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x84 (and (and (and (and (and (and $x71 $x44) $x40) $x89) $x53) $x83) $x82)))
 (let (($x91 (and $x84 $x86)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x33 (or (bvugt input.memlabel-mem--symbol.1_begin ?x55) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x33) (or $x46 $x52)))))))
 (let (($x110 (and (and (and $x111 $x63) $x100) $x103)))
 (let (($x114 (= $x110 true)))
 (let (($x131 (= $x114 true)))
 (let (($x29 (= $x131 true)))
 (let (($x93 (and $x29 $x24)))
 (let (($x43 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x80 (and $x43 $x93)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x60 $x80)))
 (let (($x16 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x16 $x119)))
 (let (($x116 (=> $x126 $x8)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x113 (= $x122 true)))
 (let (($x39 (= $x113 true)))
 (let (($x108 (forall ((input.ind-%var113X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var113X)))
 (=> $x106 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var113X) (_ bv0 32)))))
 ))
 (let (($x24 (forall ((input.ind-%var112X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var112X)))
 (= $x106 false)))
 ))
 (let (($x19 (and $x24 $x108)))
 (let (($x107 (= $x19 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x14 (concat ?x12 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x57)))
 (let ((?x59 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x59)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x10 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x69 (= input.memlabel-mem--symbol.1_end ?x10)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (and $x89 $x69)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x90 $x68)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x86 (and (and (and (and (and (and $x71 $x44) $x54) $x26) $x75) $x53) $x37)))
 (let (($x91 (and $x86 $x83)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x25) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x99 $x5)))))))
 (let (($x131 (and (and (and $x128 $x96) $x100) $x103)))
 (let (($x29 (= $x131 true)))
 (let (($x133 (= $x29 true)))
 (let (($x129 (= $x133 true)))
 (let (($x117 (and $x129 $x107)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (and $x20 $x117)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x67 $x135)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x15 $x124)))
 (let (($x38 (=> $x132 $x39)))
 (not $x38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x113 (= $x122 true)))
 (let (($x39 (= $x113 true)))
 (let (($x108 (forall ((input.ind-%var113X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var113X)))
 (=> $x106 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var113X) (_ bv0 32)))))
 ))
 (let (($x24 (forall ((input.ind-%var112X (_ BitVec 32)) )(let (($x106 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var112X)))
 (= $x106 false)))
 ))
 (let (($x19 (and $x24 $x108)))
 (let (($x107 (= $x19 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x14 (concat ?x12 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x57)))
 (let ((?x59 (bvand symbol.1 (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x59)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x10 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x69 (= input.memlabel-mem--symbol.1_end ?x10)))
 (let (($x89 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x68 (and $x89 $x69)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x90 $x68)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x86 (and (and (and (and (and (and $x71 $x44) $x54) $x26) $x75) $x53) $x37)))
 (let (($x91 (and $x86 $x83)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x25) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x99 $x5)))))))
 (let (($x131 (and (and (and $x128 $x96) $x100) $x103)))
 (let (($x29 (= $x131 true)))
 (let (($x133 (= $x29 true)))
 (let (($x129 (= $x133 true)))
 (let (($x117 (and $x129 $x107)))
 (let (($x20 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (and $x20 $x117)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x124 (and $x67 $x135)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x15 $x124)))
 (let (($x38 (=> $x132 $x39)))
 (not $x38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x30 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x125 (= $x30 true)))
 (let (($x120 (= $x125 true)))
 (let (($x92 (forall ((input.ind-%var127X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var127X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var127X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var126X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var126X)))
 (= $x8 false)))
 ))
 (let (($x72 (and $x107 $x92)))
 (let (($x127 (= $x72 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x12 (concat ?x102 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x41)))
 (let ((?x84 (bvand symbol.1 (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x84)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x90 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x89 (= input.memlabel-mem--symbol.1_end ?x90)))
 (let (($x26 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x26 $x89)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x40 $x17)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x83 (and (and (and (and (and (and $x71 $x44) $x32) $x81) $x10) $x75) $x51)))
 (let (($x91 (and $x83 $x53)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x95 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x95) (or $x104 $x78)))))))
 (let (($x133 (and (and (and $x110 $x63) $x100) $x103)))
 (let (($x129 (= $x133 true)))
 (let (($x130 (= $x129 true)))
 (let (($x106 (= $x130 true)))
 (let (($x115 (and $x106 $x127)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (and $x11 $x115)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x47 $x112)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x43 $x119)))
 (let (($x80 (=> $x118 $x120)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x30 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x125 (= $x30 true)))
 (let (($x120 (= $x125 true)))
 (let (($x92 (forall ((input.ind-%var127X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var127X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var127X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var126X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var126X)))
 (= $x8 false)))
 ))
 (let (($x72 (and $x107 $x92)))
 (let (($x127 (= $x72 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x12 (concat ?x102 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x41)))
 (let ((?x84 (bvand symbol.1 (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x84)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x90 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x89 (= input.memlabel-mem--symbol.1_end ?x90)))
 (let (($x26 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x26 $x89)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x40 $x17)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x83 (and (and (and (and (and (and $x71 $x44) $x32) $x81) $x10) $x75) $x51)))
 (let (($x91 (and $x83 $x53)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x95 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x95) (or $x104 $x78)))))))
 (let (($x133 (and (and (and $x110 $x63) $x100) $x103)))
 (let (($x129 (= $x133 true)))
 (let (($x130 (= $x129 true)))
 (let (($x106 (= $x130 true)))
 (let (($x115 (and $x106 $x127)))
 (let (($x11 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x112 (and $x11 $x115)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x119 (and $x47 $x112)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x118 (and $x43 $x119)))
 (let (($x80 (=> $x118 $x120)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var145X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x168 (concat ?x167 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var145X (_ bv4 32)))))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var145X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var145X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x145 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var145X)))
 (let (($x113 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var145X)))
 (=> $x113 (= ?x145 (concat ?x173 (concat ?x170 ?x168)))))))))))
 ))
 (let (($x141 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var144X)))
 (= $x113 (and (bvule (_ bv0 32) input.ind-%var144X) (bvult input.ind-%var144X (_ bv0 32))))))
 ))
 (let (($x178 (and $x141 $x177)))
 (let (($x108 (= true true)))
 (let (($x179 (and $x108 $x178)))
 (let (($x180 (= $x179 true)))
 (let (($x7 (forall ((input.ind-%var137X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var137X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var137X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var136X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var136X)))
 (= $x39 false)))
 ))
 (let (($x134 (and $x127 $x7)))
 (let (($x116 (= $x134 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x18 (concat ?x102 (concat ?x14 ?x85)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x68)))
 (let ((?x86 (bvand symbol.1 (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x86)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x40 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x26 (= input.memlabel-mem--symbol.1_end ?x40)))
 (let (($x81 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x82 (and $x81 $x26)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x54 $x82)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x53 (and (and (and (and (and (and $x71 $x44) $x101) $x59) $x90) $x10) $x69)))
 (let (($x91 (and $x53 $x75)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x46) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x111 $x9)))))))
 (let (($x130 (and (and (and $x131 $x96) $x100) $x103)))
 (let (($x106 (= $x130 true)))
 (let (($x126 (= $x106 true)))
 (let (($x8 (= $x126 true)))
 (let (($x121 (and $x8 $x116)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x60 $x121)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x136 (and $x58 $x124)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x43 $x136)))
 (let (($x181 (=> $x24 $x180)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x177 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var145X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x168 (concat ?x167 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var145X (_ bv4 32)))))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var145X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var145X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x145 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var145X)))
 (let (($x113 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var145X)))
 (=> $x113 (= ?x145 (concat ?x173 (concat ?x170 ?x168)))))))))))
 ))
 (let (($x141 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var144X)))
 (= $x113 (and (bvule (_ bv0 32) input.ind-%var144X) (bvult input.ind-%var144X (_ bv0 32))))))
 ))
 (let (($x178 (and $x141 $x177)))
 (let (($x108 (= true true)))
 (let (($x179 (and $x108 $x178)))
 (let (($x180 (= $x179 true)))
 (let (($x7 (forall ((input.ind-%var137X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var137X)))
 (=> $x39 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var137X) (_ bv0 32)))))
 ))
 (let (($x127 (forall ((input.ind-%var136X (_ BitVec 32)) )(let (($x39 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var136X)))
 (= $x39 false)))
 ))
 (let (($x134 (and $x127 $x7)))
 (let (($x116 (= $x134 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x18 (concat ?x102 (concat ?x14 ?x85)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x68)))
 (let ((?x86 (bvand symbol.1 (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x86)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x40 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x26 (= input.memlabel-mem--symbol.1_end ?x40)))
 (let (($x81 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x82 (and $x81 $x26)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x54 $x82)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x53 (and (and (and (and (and (and $x71 $x44) $x101) $x59) $x90) $x10) $x69)))
 (let (($x91 (and $x53 $x75)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x52 (or (bvugt input.memlabel-mem--symbol.1_begin ?x46) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x52) (or $x111 $x9)))))))
 (let (($x130 (and (and (and $x131 $x96) $x100) $x103)))
 (let (($x106 (= $x130 true)))
 (let (($x126 (= $x106 true)))
 (let (($x8 (= $x126 true)))
 (let (($x121 (and $x8 $x116)))
 (let (($x60 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x124 (and $x60 $x121)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x136 (and $x58 $x124)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x43 $x136)))
 (let (($x181 (=> $x24 $x180)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var145X!1 () (_ BitVec 32)
    #x19252a42)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x20000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x2000018f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x20000000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x8494a90a) #x40
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var145X!1 () (_ BitVec 32)
    #x00000080)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xe010814c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe02820a8)
  (define-fun input.ind-%var144X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe02820ab)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xe01082db)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe02820a8)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xe010814c)
  (define-fun symbol.1 () (_ BitVec 32)
    #xe010814c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x112 (forall ((input.ind-%var177X (_ BitVec 32)) )(let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var177X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x151 (concat ?x153 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var177X (_ bv4 32)))))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var177X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var177X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x11 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var177X)))
 (let (($x166 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var177X)))
 (=> $x166 (= ?x11 (concat ?x125 (concat ?x157 ?x151)))))))))))
 ))
 (let (($x179 (forall ((input.ind-%var176X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var176X)))
 (= $x166 (and (bvule (_ bv0 32) input.ind-%var176X) (bvult input.ind-%var176X input.dst.llvm-%n)))))
 ))
 (let (($x120 (and $x179 $x112)))
 (let (($x173 (= true true)))
 (let (($x161 (and $x173 $x120)))
 (let (($x143 (= $x161 true)))
 (let (($x140 (forall ((input.ind-%var171X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var171X)))
 (=> $x80 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var171X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var170X)))
 (= $x80 false)))
 ))
 (let (($x141 (and $x116 $x140)))
 (let (($x145 (= $x141 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x22 (concat ?x14 (concat ?x12 ?x70)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x17)))
 (let ((?x83 (bvand symbol.1 (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x83)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x54 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x81 (= input.memlabel-mem--symbol.1_end ?x54)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x37 (and $x59 $x81)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x32 $x37)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x75 (and (and (and (and (and (and $x71 $x44) $x57) $x84) $x40) $x90) $x89)))
 (let (($x91 (and $x75 $x10)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x5 (or (bvugt input.memlabel-mem--symbol.1_begin ?x99) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x5) (or $x128 $x13)))))))
 (let (($x126 (and (and (and $x133 $x63) $x100) $x103)))
 (let (($x8 (= $x126 true)))
 (let (($x132 (= $x8 true)))
 (let (($x39 (= $x132 true)))
 (let (($x148 (and $x39 $x145)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x67 $x148)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x16 $x163)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x35 $x164)))
 (let (($x162 (=> $x172 $x143)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x112 (forall ((input.ind-%var177X (_ BitVec 32)) )(let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var177X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x151 (concat ?x153 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var177X (_ bv4 32)))))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var177X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var177X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x11 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var177X)))
 (let (($x166 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var177X)))
 (=> $x166 (= ?x11 (concat ?x125 (concat ?x157 ?x151)))))))))))
 ))
 (let (($x179 (forall ((input.ind-%var176X (_ BitVec 32)) )(let (($x166 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var176X)))
 (= $x166 (and (bvule (_ bv0 32) input.ind-%var176X) (bvult input.ind-%var176X input.dst.llvm-%n)))))
 ))
 (let (($x120 (and $x179 $x112)))
 (let (($x173 (= true true)))
 (let (($x161 (and $x173 $x120)))
 (let (($x143 (= $x161 true)))
 (let (($x140 (forall ((input.ind-%var171X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var171X)))
 (=> $x80 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var171X) (_ bv0 32)))))
 ))
 (let (($x116 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x80 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var170X)))
 (= $x80 false)))
 ))
 (let (($x141 (and $x116 $x140)))
 (let (($x145 (= $x141 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x22 (concat ?x14 (concat ?x12 ?x70)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x17)))
 (let ((?x83 (bvand symbol.1 (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x83)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x54 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x81 (= input.memlabel-mem--symbol.1_end ?x54)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x37 (and $x59 $x81)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x32 $x37)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x75 (and (and (and (and (and (and $x71 $x44) $x57) $x84) $x40) $x90) $x89)))
 (let (($x91 (and $x75 $x10)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x5 (or (bvugt input.memlabel-mem--symbol.1_begin ?x99) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x5) (or $x128 $x13)))))))
 (let (($x126 (and (and (and $x133 $x63) $x100) $x103)))
 (let (($x8 (= $x126 true)))
 (let (($x132 (= $x8 true)))
 (let (($x39 (= $x132 true)))
 (let (($x148 (and $x39 $x145)))
 (let (($x67 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x163 (and $x67 $x148)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x16 $x163)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x35 $x164)))
 (let (($x162 (=> $x172 $x143)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var177X!1 () (_ BitVec 32)
    #x20000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var176X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var177X!1 () (_ BitVec 32)
    #x00000062)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffe6b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffe68) #x01
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (forall ((input.ind-%var205X (_ BitVec 32)) )(let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x115 (concat ?x30 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32)))))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x93 (concat ?x105 ?x115)))))))))
 ))
 (let (($x109 (forall ((input.ind-%var204X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var204X) (bvult input.ind-%var204X (_ bv0 32)))))
 ))
 (let (($x149 (and $x109 $x122)))
 (let (($x125 (= true true)))
 (let (($x7 (and $x125 $x149)))
 (let (($x113 (= $x7 true)))
 (let (($x178 (forall ((input.ind-%var199X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var199X)))
 (=> $x137 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var199X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var198X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var198X)))
 (= $x137 false)))
 ))
 (let (($x179 (and $x145 $x178)))
 (let (($x11 (= $x179 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x12 (concat ?x102 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x82)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x53)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x32 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x59 (= input.memlabel-mem--symbol.1_end ?x32)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (and $x84 $x59)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x101 $x51)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x10 (and (and (and (and (and (and $x71 $x44) $x41) $x86) $x54) $x40) $x26)))
 (let (($x91 (and $x10 $x90)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x110 $x55)))))))
 (let (($x132 (and (and (and $x130 $x96) $x100) $x103)))
 (let (($x39 (= $x132 true)))
 (let (($x118 (= $x39 true)))
 (let (($x80 (= $x118 true)))
 (let (($x38 (and $x80 $x11)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x47 $x38)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x155 (and $x15 $x159)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x43 $x155)))
 (let (($x170 (=> $x92 $x113)))
 (not $x170))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (forall ((input.ind-%var205X (_ BitVec 32)) )(let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x115 (concat ?x30 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32)))))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var205X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x93 (concat ?x105 ?x115)))))))))
 ))
 (let (($x109 (forall ((input.ind-%var204X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var204X) (bvult input.ind-%var204X (_ bv0 32)))))
 ))
 (let (($x149 (and $x109 $x122)))
 (let (($x125 (= true true)))
 (let (($x7 (and $x125 $x149)))
 (let (($x113 (= $x7 true)))
 (let (($x178 (forall ((input.ind-%var199X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var199X)))
 (=> $x137 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var199X) (_ bv0 32)))))
 ))
 (let (($x145 (forall ((input.ind-%var198X (_ BitVec 32)) )(let (($x137 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var198X)))
 (= $x137 false)))
 ))
 (let (($x179 (and $x145 $x178)))
 (let (($x11 (= $x179 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x12 (concat ?x102 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x82)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x53)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x32 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x59 (= input.memlabel-mem--symbol.1_end ?x32)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x51 (and $x84 $x59)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x101 $x51)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x10 (and (and (and (and (and (and $x71 $x44) $x41) $x86) $x54) $x40) $x26)))
 (let (($x91 (and $x10 $x90)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x110 $x55)))))))
 (let (($x132 (and (and (and $x130 $x96) $x100) $x103)))
 (let (($x39 (= $x132 true)))
 (let (($x118 (= $x39 true)))
 (let (($x80 (= $x118 true)))
 (let (($x38 (and $x80 $x11)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x47 $x38)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x155 (and $x15 $x159)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x43 $x155)))
 (let (($x170 (=> $x92 $x113)))
 (not $x170))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x156 (forall ((input.ind-%var217X (_ BitVec 32)) )(let ((?x60 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var217X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x33 (concat ?x60 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var217X (_ bv4 32)))))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var217X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var217X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x140 (concat ?x29 ?x33)))))))))
 ))
 (let (($x149 (forall ((input.ind-%var216X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var216X) (bvult input.ind-%var216X input.dst.llvm-%n))))
 ))
 (let (($x163 (and $x149 $x156)))
 (let (($x105 (= true true)))
 (let (($x176 (and $x105 $x163)))
 (let (($x182 (= $x176 true)))
 (let (($x109 (forall ((input.ind-%var211X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var211X)))
 (=> $x175 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var211X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var210X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var210X)))
 (= $x175 false)))
 ))
 (let (($x161 (and $x11 $x109)))
 (let (($x165 (= $x161 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x102 (concat ?x14 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x37)))
 (let ((?x75 (bvand symbol.1 (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x75)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x84 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x69 (and $x86 $x84)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x57 $x69)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x90 (and (and (and (and (and (and $x71 $x44) $x68) $x83) $x32) $x54) $x81)))
 (let (($x91 (and $x90 $x40)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x9 (or (bvugt input.memlabel-mem--symbol.1_begin ?x111) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x9) (or $x131 $x25)))))))
 (let (($x118 (and (and (and $x126 $x63) $x100) $x103)))
 (let (($x80 (= $x118 true)))
 (let (($x24 (= $x80 true)))
 (let (($x137 (= $x24 true)))
 (let (($x168 (and $x137 $x165)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x58 $x168)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x93 (and $x147 $x144)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x50 (and $x35 $x93)))
 (let (($x169 (=> $x50 $x182)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x156 (forall ((input.ind-%var217X (_ BitVec 32)) )(let ((?x60 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var217X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x33 (concat ?x60 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var217X (_ bv4 32)))))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var217X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var217X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x140 (concat ?x29 ?x33)))))))))
 ))
 (let (($x149 (forall ((input.ind-%var216X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var216X) (bvult input.ind-%var216X input.dst.llvm-%n))))
 ))
 (let (($x163 (and $x149 $x156)))
 (let (($x105 (= true true)))
 (let (($x176 (and $x105 $x163)))
 (let (($x182 (= $x176 true)))
 (let (($x109 (forall ((input.ind-%var211X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var211X)))
 (=> $x175 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var211X) (_ bv0 32)))))
 ))
 (let (($x11 (forall ((input.ind-%var210X (_ BitVec 32)) )(let (($x175 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var210X)))
 (= $x175 false)))
 ))
 (let (($x161 (and $x11 $x109)))
 (let (($x165 (= $x161 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x102 (concat ?x14 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x37)))
 (let ((?x75 (bvand symbol.1 (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x75)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x101 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x84 (= input.memlabel-mem--symbol.1_end ?x101)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x69 (and $x86 $x84)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x57 $x69)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x90 (and (and (and (and (and (and $x71 $x44) $x68) $x83) $x32) $x54) $x81)))
 (let (($x91 (and $x90 $x40)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x9 (or (bvugt input.memlabel-mem--symbol.1_begin ?x111) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x9) (or $x131 $x25)))))))
 (let (($x118 (and (and (and $x126 $x63) $x100) $x103)))
 (let (($x80 (= $x118 true)))
 (let (($x24 (= $x80 true)))
 (let (($x137 (= $x24 true)))
 (let (($x168 (and $x137 $x165)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x58 $x168)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x93 (and $x147 $x144)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x50 (and $x35 $x93)))
 (let (($x169 (=> $x50 $x182)))
 (not $x169))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.ind-%var216X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var216X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffc) #x01
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (= false true)))
 (let (($x108 (= $x29 true)))
 (let (($x149 (forall ((input.ind-%var231X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var231X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var231X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var230X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var230X)))
 (= $x135 false)))
 ))
 (let (($x170 (and $x165 $x149)))
 (let (($x27 (= $x170 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x14 (concat ?x12 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x51)))
 (let ((?x10 (bvand symbol.1 (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x10)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x57 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x57)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x89 (and $x83 $x86)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x41 $x89)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x40 (and (and (and (and (and (and $x71 $x44) $x17) $x53) $x101) $x32) $x59)))
 (let (($x91 (and $x40 $x54)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x13 (or (bvugt input.memlabel-mem--symbol.1_begin ?x128) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x13) (or $x133 $x23)))))))
 (let (($x24 (and (and (and $x132 $x96) $x100) $x103)))
 (let (($x137 (= $x24 true)))
 (let (($x172 (= $x137 true)))
 (let (($x175 (= $x172 true)))
 (let (($x121 (and $x175 $x27)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x16 $x121)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x140 (and $x114 $x136)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x43 $x140)))
 (let (($x60 (=> $x117 $x108)))
 (not $x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (= false true)))
 (let (($x108 (= $x29 true)))
 (let (($x149 (forall ((input.ind-%var231X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var231X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var231X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var230X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var230X)))
 (= $x135 false)))
 ))
 (let (($x170 (and $x165 $x149)))
 (let (($x27 (= $x170 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x14 (concat ?x12 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x51)))
 (let ((?x10 (bvand symbol.1 (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x10)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let ((?x57 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x86 (= input.memlabel-mem--symbol.1_end ?x57)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x89 (and $x83 $x86)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x41 $x89)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x40 (and (and (and (and (and (and $x71 $x44) $x17) $x53) $x101) $x32) $x59)))
 (let (($x91 (and $x40 $x54)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x13 (or (bvugt input.memlabel-mem--symbol.1_begin ?x128) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x13) (or $x133 $x23)))))))
 (let (($x24 (and (and (and $x132 $x96) $x100) $x103)))
 (let (($x137 (= $x24 true)))
 (let (($x172 (= $x137 true)))
 (let (($x175 (= $x172 true)))
 (let (($x121 (and $x175 $x27)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x136 (and $x16 $x121)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x140 (and $x114 $x136)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x43 $x140)))
 (let (($x60 (=> $x117 $x108)))
 (not $x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8054400)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8054403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8054400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34120210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34120213)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xb4120203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34120210)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xb4120074)
  (define-fun symbol.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x69)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x90)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x83 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x26 (and $x53 $x83)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x68 $x26)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x54 (and (and (and (and (and (and $x71 $x44) $x82) $x75) $x57) $x101) $x84)))
 (let (($x91 (and $x54 $x32)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x110) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x130 $x46)))))))
 (let (($x119 (and $x118 $x100)))
 (let (($x144 (= $x119 true)))
 (let (($x19 (= $x144 true)))
 (let (($x8 (forall ((input.ind-%var245X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var245X)))
 (=> $x107 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var245X) (_ bv0 32)))))
 ))
 (let (($x27 (forall ((input.ind-%var244X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var244X)))
 (= $x107 false)))
 ))
 (let (($x123 (and $x27 $x8)))
 (let (($x105 (= $x123 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x12 (concat ?x102 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let (($x172 (and (and (and $x118 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x100) $x103)))
 (let (($x175 (= $x172 true)))
 (let (($x92 (= $x175 true)))
 (let (($x135 (= $x92 true)))
 (let (($x93 (and $x135 $x105)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x179 (and $x15 $x93)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x120 $x179)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x109 (and $x35 $x11)))
 (let (($x7 (=> $x109 $x19)))
 (not $x7))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x69)))
 (let ((?x90 (bvand symbol.1 (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x90)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x83 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x26 (and $x53 $x83)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x68 $x26)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x54 (and (and (and (and (and (and $x71 $x44) $x82) $x75) $x57) $x101) $x84)))
 (let (($x91 (and $x54 $x32)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x55 (or (bvugt input.memlabel-mem--symbol.1_begin ?x110) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x55) (or $x130 $x46)))))))
 (let (($x119 (and $x118 $x100)))
 (let (($x144 (= $x119 true)))
 (let (($x19 (= $x144 true)))
 (let (($x8 (forall ((input.ind-%var245X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var245X)))
 (=> $x107 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var245X) (_ bv0 32)))))
 ))
 (let (($x27 (forall ((input.ind-%var244X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var244X)))
 (= $x107 false)))
 ))
 (let (($x123 (and $x27 $x8)))
 (let (($x105 (= $x123 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x12 (concat ?x102 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let (($x172 (and (and (and $x118 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x100) $x103)))
 (let (($x175 (= $x172 true)))
 (let (($x92 (= $x175 true)))
 (let (($x135 (= $x92 true)))
 (let (($x93 (and $x135 $x105)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x179 (and $x15 $x93)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x120 $x179)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x109 (and $x35 $x11)))
 (let (($x7 (=> $x109 $x19)))
 (not $x7))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x108 (= $x149 true)))
 (let (($x5 (forall ((input.ind-%var251X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var251X)))
 (=> $x87 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var251X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var250X)))
 (= $x87 false)))
 ))
 (let (($x39 (and $x105 $x5)))
 (let (($x122 (= $x39 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x102 (concat ?x14 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x89)))
 (let ((?x40 (bvand symbol.1 (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x40)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x68 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x53 (= input.memlabel-mem--symbol.1_end ?x68)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x75 $x53)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x17 $x81)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x32 (and (and (and (and (and (and $x71 $x44) $x37) $x10) $x41) $x57) $x86)))
 (let (($x91 (and $x32 $x101)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x25 (or (bvugt input.memlabel-mem--symbol.1_begin ?x131) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x25) (or $x126 $x99)))))))
 (let (($x92 (and (and (and $x24 $x96) $x100) $x103)))
 (let (($x135 (= $x92 true)))
 (let (($x50 (= $x135 true)))
 (let (($x107 (= $x50 true)))
 (let (($x29 (and $x107 $x122)))
 (let (($x147 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and $x147 $x29)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x161 (and $x113 $x140)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x165 (and $x43 $x161)))
 (let (($x136 (=> $x165 $x108)))
 (not $x136))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x108 (= $x149 true)))
 (let (($x5 (forall ((input.ind-%var251X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var251X)))
 (=> $x87 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var251X) (_ bv0 32)))))
 ))
 (let (($x105 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x87 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var250X)))
 (= $x87 false)))
 ))
 (let (($x39 (and $x105 $x5)))
 (let (($x122 (= $x39 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x102 (concat ?x14 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x89)))
 (let ((?x40 (bvand symbol.1 (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x40)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x68 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x53 (= input.memlabel-mem--symbol.1_end ?x68)))
 (let (($x75 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x75 $x53)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x17 $x81)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x32 (and (and (and (and (and (and $x71 $x44) $x37) $x10) $x41) $x57) $x86)))
 (let (($x91 (and $x32 $x101)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x25 (or (bvugt input.memlabel-mem--symbol.1_begin ?x131) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x25) (or $x126 $x99)))))))
 (let (($x92 (and (and (and $x24 $x96) $x100) $x103)))
 (let (($x135 (= $x92 true)))
 (let (($x50 (= $x135 true)))
 (let (($x107 (= $x50 true)))
 (let (($x29 (and $x107 $x122)))
 (let (($x147 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x140 (and $x147 $x29)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x161 (and $x113 $x140)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x165 (and $x43 $x161)))
 (let (($x136 (=> $x165 $x108)))
 (not $x136))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x1a75018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x1a74fffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x1a74fffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x04040404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x04)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x179)))
 (let (($x121 (= ?x19 input.dst.llvm-%n)))
 (let (($x168 (= $x121 true)))
 (let (($x80 (forall ((input.ind-%var265X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var265X)))
 (=> $x7 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var265X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var264X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var264X)))
 (= $x7 false)))
 ))
 (let (($x52 (and $x122 $x80)))
 (let (($x119 (= $x52 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x18 (concat ?x14 (concat ?x12 ?x85)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x26)))
 (let ((?x54 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x54)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x75 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (and $x10 $x75)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x82 $x59)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x101 (and (and (and (and (and (and $x71 $x44) $x51) $x90) $x68) $x41) $x83)))
 (let (($x91 (and $x101 $x57)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x133) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x132 $x104)))))))
 (let (($x50 (and (and (and $x172 $x63) $x100) $x103)))
 (let (($x107 (= $x50 true)))
 (let (($x117 (= $x107 true)))
 (let (($x87 (= $x117 true)))
 (let (($x11 (and $x87 $x119)))
 (let (($x114 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x114 $x11)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x27 (and $x58 $x170)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x8 (and $x35 $x27)))
 (let (($x167 (=> $x8 $x168)))
 (not $x167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x19 (bvneg ?x179)))
 (let (($x121 (= ?x19 input.dst.llvm-%n)))
 (let (($x168 (= $x121 true)))
 (let (($x80 (forall ((input.ind-%var265X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var265X)))
 (=> $x7 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var265X) (_ bv0 32)))))
 ))
 (let (($x122 (forall ((input.ind-%var264X (_ BitVec 32)) )(let (($x7 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var264X)))
 (= $x7 false)))
 ))
 (let (($x52 (and $x122 $x80)))
 (let (($x119 (= $x52 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x18 (concat ?x14 (concat ?x12 ?x85)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x26)))
 (let ((?x54 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x54)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x17 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x75 (= input.memlabel-mem--symbol.1_end ?x17)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (and $x10 $x75)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x82 $x59)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x101 (and (and (and (and (and (and $x71 $x44) $x51) $x90) $x68) $x41) $x83)))
 (let (($x91 (and $x101 $x57)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x133) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x132 $x104)))))))
 (let (($x50 (and (and (and $x172 $x63) $x100) $x103)))
 (let (($x107 (= $x50 true)))
 (let (($x117 (= $x107 true)))
 (let (($x87 (= $x117 true)))
 (let (($x11 (and $x87 $x119)))
 (let (($x114 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x170 (and $x114 $x11)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x27 (and $x58 $x170)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x8 (and $x35 $x27)))
 (let (($x167 (=> $x8 $x168)))
 (not $x167))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x5 (= $x105 true)))
 (let (($x108 (= $x5 true)))
 (let (($x167 (forall ((input.ind-%var271X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var271X)))
 (=> $x60 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var271X) (_ bv0 32)))))
 ))
 (let (($x119 (forall ((input.ind-%var270X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var270X)))
 (= $x60 false)))
 ))
 (let (($x166 (and $x119 $x167)))
 (let (($x9 (= $x166 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x22 (concat ?x12 (concat ?x102 ?x70)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x81)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x32)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x82 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x10 (= input.memlabel-mem--symbol.1_end ?x82)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x84 (and $x90 $x10)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x37 $x84)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x57 (and (and (and (and (and (and $x71 $x44) $x69) $x40) $x17) $x68) $x53)))
 (let (($x91 (and $x57 $x41)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x46 (or (bvugt input.memlabel-mem--symbol.1_begin ?x130) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x46) (or $x118 $x111)))))))
 (let (($x117 (and (and (and $x92 $x96) $x100) $x103)))
 (let (($x87 (= $x117 true)))
 (let (($x109 (= $x87 true)))
 (let (($x7 (= $x109 true)))
 (let (($x137 (and $x7 $x9)))
 (let (($x120 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and $x120 $x137)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x149 (and $x16 $x33)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x161 (and $x43 $x149)))
 (let (($x140 (=> $x161 $x108)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (bvule input.spec-%var-n-1 (_ bv4294967294 32))))
 (let (($x5 (= $x105 true)))
 (let (($x108 (= $x5 true)))
 (let (($x167 (forall ((input.ind-%var271X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var271X)))
 (=> $x60 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var271X) (_ bv0 32)))))
 ))
 (let (($x119 (forall ((input.ind-%var270X (_ BitVec 32)) )(let (($x60 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var270X)))
 (= $x60 false)))
 ))
 (let (($x166 (and $x119 $x167)))
 (let (($x9 (= $x166 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x22 (concat ?x12 (concat ?x102 ?x70)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x81)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x32)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x82 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x10 (= input.memlabel-mem--symbol.1_end ?x82)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x84 (and $x90 $x10)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x37 $x84)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x57 (and (and (and (and (and (and $x71 $x44) $x69) $x40) $x17) $x68) $x53)))
 (let (($x91 (and $x57 $x41)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x46 (or (bvugt input.memlabel-mem--symbol.1_begin ?x130) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x46) (or $x118 $x111)))))))
 (let (($x117 (and (and (and $x92 $x96) $x100) $x103)))
 (let (($x87 (= $x117 true)))
 (let (($x109 (= $x87 true)))
 (let (($x7 (= $x109 true)))
 (let (($x137 (and $x7 $x9)))
 (let (($x120 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x33 (and $x120 $x137)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x149 (and $x16 $x33)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x161 (and $x43 $x149)))
 (let (($x140 (=> $x161 $x108)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #xff)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x80 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x179 (= $x80 true)))
 (let (($x170 (= $x179 true)))
 (let (($x136 (forall ((input.ind-%var285X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var285X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var285X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var284X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var284X)))
 (= $x121 false)))
 ))
 (let (($x13 (and $x9 $x136)))
 (let (($x175 (= $x13 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x102 (concat ?x14 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x59)))
 (let ((?x101 (bvand symbol.1 (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x101)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x37 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x90 (= input.memlabel-mem--symbol.1_end ?x37)))
 (let (($x40 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x40 $x90)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x51 $x86)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x41 (and (and (and (and (and (and $x71 $x44) $x89) $x54) $x82) $x17) $x75)))
 (let (($x91 (and $x41 $x68)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x99 (or (bvugt input.memlabel-mem--symbol.1_begin ?x126) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x99) (or $x24 $x128)))))))
 (let (($x109 (and (and (and $x50 $x63) $x100) $x103)))
 (let (($x7 (= $x109 true)))
 (let (($x165 (= $x7 true)))
 (let (($x60 (= $x165 true)))
 (let (($x78 (and $x60 $x175)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x113 $x78)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x27 (and $x15 $x144)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x35 $x27)))
 (let (($x19 (=> $x39 $x170)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x80 (bvsge input.spec-%var-n-1 (_ bv4294967295 32))))
 (let (($x179 (= $x80 true)))
 (let (($x170 (= $x179 true)))
 (let (($x136 (forall ((input.ind-%var285X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var285X)))
 (=> $x121 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var285X) (_ bv0 32)))))
 ))
 (let (($x9 (forall ((input.ind-%var284X (_ BitVec 32)) )(let (($x121 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var284X)))
 (= $x121 false)))
 ))
 (let (($x13 (and $x9 $x136)))
 (let (($x175 (= $x13 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x85 (concat ?x102 (concat ?x14 ?x6)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x59)))
 (let ((?x101 (bvand symbol.1 (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x101)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x37 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x90 (= input.memlabel-mem--symbol.1_end ?x37)))
 (let (($x40 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (and $x40 $x90)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x51 $x86)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (and $x76 $x62)))
 (let (($x79 (not $x36)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x79)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x97 (not $x56)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x97)))
 (let (($x41 (and (and (and (and (and (and $x71 $x44) $x89) $x54) $x82) $x17) $x75)))
 (let (($x91 (and $x41 $x68)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x99 (or (bvugt input.memlabel-mem--symbol.1_begin ?x126) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x99) (or $x24 $x128)))))))
 (let (($x109 (and (and (and $x50 $x63) $x100) $x103)))
 (let (($x7 (= $x109 true)))
 (let (($x165 (= $x7 true)))
 (let (($x60 (= $x165 true)))
 (let (($x78 (and $x60 $x175)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x113 $x78)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x27 (and $x15 $x144)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x35 $x27)))
 (let (($x19 (=> $x39 $x170)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x167 (= $x119 true)))
 (let (($x105 (= $x167 true)))
 (let (($x29 (forall ((input.ind-%var299X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var299X)))
 (=> $x108 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var299X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var298X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var298X)))
 (= $x108 false)))
 ))
 (let (($x55 (and $x175 $x29)))
 (let (($x135 (= $x55 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x14 (concat ?x12 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x84)))
 (let ((?x57 (bvand symbol.1 (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x57)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x51 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x51)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x83 (and $x54 $x40)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x69 $x83)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x68 (and (and (and (and (and (and $x71 $x44) $x26) $x32) $x37) $x82) $x10)))
 (let (($x91 (and $x68 $x17)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x132) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x172 $x110)))))))
 (let (($x165 (and (and (and $x117 $x96) $x100) $x103)))
 (let (($x60 (= $x165 true)))
 (let (($x8 (= $x60 true)))
 (let (($x121 (= $x8 true)))
 (let (($x168 (and $x121 $x135)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x58 $x168)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x149 (and $x147 $x123)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x52 (and $x43 $x149)))
 (let (($x33 (=> $x52 $x105)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x167 (= $x119 true)))
 (let (($x105 (= $x167 true)))
 (let (($x29 (forall ((input.ind-%var299X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var299X)))
 (=> $x108 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var299X) (_ bv0 32)))))
 ))
 (let (($x175 (forall ((input.ind-%var298X (_ BitVec 32)) )(let (($x108 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var298X)))
 (= $x108 false)))
 ))
 (let (($x55 (and $x175 $x29)))
 (let (($x135 (= $x55 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x70 (concat ?x14 (concat ?x12 ?x49)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x84)))
 (let ((?x57 (bvand symbol.1 (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x57)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x51 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x51)))
 (let (($x54 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x83 (and $x54 $x40)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x69 $x83)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x36 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x36)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x61 $x45)))
 (let (($x56 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x56)))
 (let (($x68 (and (and (and (and (and (and $x71 $x44) $x26) $x32) $x37) $x82) $x10)))
 (let (($x91 (and $x68 $x17)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x132) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x172 $x110)))))))
 (let (($x165 (and (and (and $x117 $x96) $x100) $x103)))
 (let (($x60 (= $x165 true)))
 (let (($x8 (= $x60 true)))
 (let (($x121 (= $x8 true)))
 (let (($x168 (and $x121 $x135)))
 (let (($x58 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x123 (and $x58 $x168)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x149 (and $x147 $x123)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x52 (and $x43 $x149)))
 (let (($x33 (=> $x52 $x105)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (forall ((input.ind-%var311X (_ BitVec 32)) )(let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var311X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x72 (concat ?x160 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var311X (_ bv4 32)))))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var311X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var311X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x106 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var311X)))
 (let (($x179 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var311X)))
 (=> $x179 (= ?x106 (concat ?x134 (concat ?x146 ?x72)))))))))))
 ))
 (let (($x169 (forall ((input.ind-%var310X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var310X)))
 (= $x179 (and (bvule (_ bv0 32) input.ind-%var310X) (bvult input.ind-%var310X (_ bv0 32))))))
 ))
 (let (($x138 (and $x169 $x124)))
 (let (($x136 (= true true)))
 (let (($x150 (and $x136 $x138)))
 (let (($x181 (= $x150 true)))
 (let (($x25 (forall ((input.ind-%var305X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var305X)))
 (=> $x170 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var305X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var304X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var304X)))
 (= $x170 false)))
 ))
 (let (($x107 (and $x135 $x25)))
 (let (($x140 (= $x107 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x12 (concat ?x102 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x86)))
 (let ((?x41 (bvand symbol.1 (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x41)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x69 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x54 (= input.memlabel-mem--symbol.1_end ?x69)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x53 (and $x32 $x54)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x89 $x53)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x17 (and (and (and (and (and (and $x71 $x44) $x81) $x101) $x51) $x37) $x90)))
 (let (($x91 (and $x17 $x82)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x111 (or (bvugt input.memlabel-mem--symbol.1_begin ?x118) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x111) (or $x92 $x131)))))))
 (let (($x8 (and (and (and $x109 $x63) $x100) $x103)))
 (let (($x121 (= $x8 true)))
 (let (($x161 (= $x121 true)))
 (let (($x108 (= $x161 true)))
 (let (($x122 (and $x108 $x140)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and $x16 $x122)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x166 (and $x114 $x27)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x35 $x166)))
 (let (($x158 (=> $x9 $x181)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (forall ((input.ind-%var311X (_ BitVec 32)) )(let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var311X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x72 (concat ?x160 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var311X (_ bv4 32)))))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var311X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var311X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x106 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var311X)))
 (let (($x179 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var311X)))
 (=> $x179 (= ?x106 (concat ?x134 (concat ?x146 ?x72)))))))))))
 ))
 (let (($x169 (forall ((input.ind-%var310X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var310X)))
 (= $x179 (and (bvule (_ bv0 32) input.ind-%var310X) (bvult input.ind-%var310X (_ bv0 32))))))
 ))
 (let (($x138 (and $x169 $x124)))
 (let (($x136 (= true true)))
 (let (($x150 (and $x136 $x138)))
 (let (($x181 (= $x150 true)))
 (let (($x25 (forall ((input.ind-%var305X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var305X)))
 (=> $x170 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var305X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var304X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var304X)))
 (= $x170 false)))
 ))
 (let (($x107 (and $x135 $x25)))
 (let (($x140 (= $x107 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x6 (concat ?x12 (concat ?x102 ?x34)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x82 (= (_ bv0 32) ?x86)))
 (let ((?x41 (bvand symbol.1 (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x41)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x69 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x54 (= input.memlabel-mem--symbol.1_end ?x69)))
 (let (($x32 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x53 (and $x32 $x54)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x89 $x53)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x79 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x62)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x97 $x61)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x28)))
 (let (($x17 (and (and (and (and (and (and $x71 $x44) $x81) $x101) $x51) $x37) $x90)))
 (let (($x91 (and $x17 $x82)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x111 (or (bvugt input.memlabel-mem--symbol.1_begin ?x118) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x111) (or $x92 $x131)))))))
 (let (($x8 (and (and (and $x109 $x63) $x100) $x103)))
 (let (($x121 (= $x8 true)))
 (let (($x161 (= $x121 true)))
 (let (($x108 (= $x161 true)))
 (let (($x122 (and $x108 $x140)))
 (let (($x16 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x27 (and $x16 $x122)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x166 (and $x114 $x27)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x35 $x166)))
 (let (($x158 (=> $x9 $x181)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var311X!1 () (_ BitVec 32)
    #x19252a42)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x20000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x2000018f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x20000000)
  (define-fun symbol.1 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x8494a90a) #x40
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var310X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var311X!1 () (_ BitVec 32)
    #x00000080)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xe010814c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe02820a8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe02820ab)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xe01082db)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe02820a8)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xe010814c)
  (define-fun symbol.1 () (_ BitVec 32)
    #xe010814c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (forall ((input.ind-%var339X (_ BitVec 32)) )(let ((?x67 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var339X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x30 (concat ?x67 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var339X (_ bv4 32)))))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var339X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var339X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x58 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var339X)))
 (let (($x178 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var339X)))
 (=> $x178 (= ?x58 (concat ?x167 (concat ?x143 ?x30)))))))))))
 ))
 (let (($x150 (forall ((input.ind-%var338X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var338X)))
 (= $x178 (and (bvule (_ bv0 32) input.ind-%var338X) (bvult input.ind-%var338X input.dst.llvm-%n)))))
 ))
 (let (($x105 (and $x150 $x123)))
 (let (($x134 (= true true)))
 (let (($x139 (and $x134 $x105)))
 (let (($x47 (= $x139 true)))
 (let (($x182 (forall ((input.ind-%var333X (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var333X)))
 (=> $x33 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var333X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var332X (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var332X)))
 (= $x33 false)))
 ))
 (let (($x169 (and $x140 $x182)))
 (let (($x106 (= $x169 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x102 (concat ?x14 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x83)))
 (let ((?x68 (bvand symbol.1 (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x68)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x89 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x32 (= input.memlabel-mem--symbol.1_end ?x89)))
 (let (($x101 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (and $x101 $x32)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x26 $x75)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x82 (and (and (and (and (and (and $x71 $x44) $x59) $x57) $x69) $x51) $x40)))
 (let (($x91 (and $x82 $x37)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x128 (or (bvugt input.memlabel-mem--symbol.1_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x128) (or $x50 $x133)))))))
 (let (($x161 (and (and (and $x165 $x96) $x100) $x103)))
 (let (($x108 (= $x161 true)))
 (let (($x39 (= $x108 true)))
 (let (($x170 (= $x39 true)))
 (let (($x38 (and $x170 $x106)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and $x15 $x38)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x120 $x173)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x151 (and $x43 $x154)))
 (let (($x66 (=> $x151 $x47)))
 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (forall ((input.ind-%var339X (_ BitVec 32)) )(let ((?x67 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var339X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x30 (concat ?x67 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var339X (_ bv4 32)))))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var339X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var339X (_ bv4 32))) (_ bv3 32)))))
 (let ((?x58 (input.spec-%tmpvar-10.E0%0%d.1.1 input.ind-%var339X)))
 (let (($x178 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var339X)))
 (=> $x178 (= ?x58 (concat ?x167 (concat ?x143 ?x30)))))))))))
 ))
 (let (($x150 (forall ((input.ind-%var338X (_ BitVec 32)) )(let (($x178 (input.spec-%tmpvar-10.E0%0%d.0.1 input.ind-%var338X)))
 (= $x178 (and (bvule (_ bv0 32) input.ind-%var338X) (bvult input.ind-%var338X input.dst.llvm-%n)))))
 ))
 (let (($x105 (and $x150 $x123)))
 (let (($x134 (= true true)))
 (let (($x139 (and $x134 $x105)))
 (let (($x47 (= $x139 true)))
 (let (($x182 (forall ((input.ind-%var333X (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var333X)))
 (=> $x33 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var333X) (_ bv0 32)))))
 ))
 (let (($x140 (forall ((input.ind-%var332X (_ BitVec 32)) )(let (($x33 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var332X)))
 (= $x33 false)))
 ))
 (let (($x169 (and $x140 $x182)))
 (let (($x106 (= $x169 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x49 (concat ?x102 (concat ?x14 ?x18)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x83)))
 (let ((?x68 (bvand symbol.1 (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x68)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x89 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x32 (= input.memlabel-mem--symbol.1_end ?x89)))
 (let (($x101 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x75 (and $x101 $x32)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x26 $x75)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x36 $x79)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x76)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x56 $x97)))
 (let (($x45 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x45)))
 (let (($x82 (and (and (and (and (and (and $x71 $x44) $x59) $x57) $x69) $x51) $x40)))
 (let (($x91 (and $x82 $x37)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x128 (or (bvugt input.memlabel-mem--symbol.1_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x128) (or $x50 $x133)))))))
 (let (($x161 (and (and (and $x165 $x96) $x100) $x103)))
 (let (($x108 (= $x161 true)))
 (let (($x39 (= $x108 true)))
 (let (($x170 (= $x39 true)))
 (let (($x38 (and $x170 $x106)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x173 (and $x15 $x38)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x120 $x173)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x151 (and $x43 $x154)))
 (let (($x66 (=> $x151 $x47)))
 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var339X!1 () (_ BitVec 32)
    #x20000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    true)
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var338X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var339X!1 () (_ BitVec 32)
    #x00000062)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffe6b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffe68)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xfffffe70)
  (define-fun symbol.1 () (_ BitVec 32)
    #xfffffe70)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffe68) #x01
      #x00))
  (define-fun input.spec-%tmpvar-10.E0%0%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-10.E0%0%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x167 (= false true)))
 (let (($x141 (= $x167 true)))
 (let (($x138 (forall ((input.ind-%var361X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var361X)))
 (=> $x156 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var361X) (_ bv0 32)))))
 ))
 (let (($x106 (forall ((input.ind-%var360X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var360X)))
 (= $x156 false)))
 ))
 (let (($x150 (and $x106 $x138)))
 (let (($x58 (= $x150 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x14 (concat ?x12 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x53)))
 (let ((?x17 (bvand symbol.1 (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x17)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x26 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x26)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x10 (and $x57 $x101)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x81 $x10)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x37 (and (and (and (and (and (and $x71 $x44) $x84) $x41) $x89) $x69) $x54)))
 (let (($x91 (and $x37 $x51)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x110 (or (bvugt input.memlabel-mem--symbol.1_begin ?x172) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x110) (or $x117 $x130)))))))
 (let (($x39 (and (and (and $x8 $x63) $x100) $x103)))
 (let (($x170 (= $x39 true)))
 (let (($x52 (= $x170 true)))
 (let (($x33 (= $x52 true)))
 (let (($x19 (and $x33 $x58)))
 (let (($x147 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x147 $x19)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x145 (and $x113 $x164)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x35 $x145)))
 (let (($x143 (=> $x29 $x141)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x167 (= false true)))
 (let (($x141 (= $x167 true)))
 (let (($x138 (forall ((input.ind-%var361X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var361X)))
 (=> $x156 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var361X) (_ bv0 32)))))
 ))
 (let (($x106 (forall ((input.ind-%var360X (_ BitVec 32)) )(let (($x156 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var360X)))
 (= $x156 false)))
 ))
 (let (($x150 (and $x106 $x138)))
 (let (($x58 (= $x150 true)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x34 (concat ?x14 (concat ?x12 ?x22)))))
 (let (($x103 (= input.dst.llvm-%n ?x94)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x53)))
 (let ((?x17 (bvand symbol.1 (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x17)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x26 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x26)))
 (let (($x57 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x10 (and $x57 $x101)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x81 $x10)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x62 $x36)))
 (let (($x77 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x42 $x64)))
 (let (($x44 (and (not $x88) $x77)))
 (let (($x56 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x28 $x56)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x74 $x65)))
 (let (($x71 (and (not $x31) $x61)))
 (let (($x37 (and (and (and (and (and (and $x71 $x44) $x84) $x41) $x89) $x69) $x54)))
 (let (($x91 (and $x37 $x51)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x100 (and $x73 $x91)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x172 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x110 (or (bvugt input.memlabel-mem--symbol.1_begin ?x172) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x110) (or $x117 $x130)))))))
 (let (($x39 (and (and (and $x8 $x63) $x100) $x103)))
 (let (($x170 (= $x39 true)))
 (let (($x52 (= $x170 true)))
 (let (($x33 (= $x52 true)))
 (let (($x19 (and $x33 $x58)))
 (let (($x147 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x147 $x19)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x145 (and $x113 $x164)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x35 $x145)))
 (let (($x143 (=> $x29 $x141)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8054400)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8054403)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8054400)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe74)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe74)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34120210)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34120213)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xb4120203)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34120210)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xb4120074)
  (define-fun symbol.1 () (_ BitVec 32)
    #xb4120074)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (= $x124 false)))
 (let (($x80 (= $x175 true)))
 (let (($x162 (forall ((input.ind-%var375X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var375X)))
 (=> $x47 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var375X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var374X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var374X)))
 (= $x47 false)))
 ))
 (let (($x72 (and $x46 $x162)))
 (let (($x55 (= $x72 true)))
 (let (($x129 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x129 true)))
 (let (($x152 (= $x144 true)))
 (let ((?x173 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x173)))
 (let (($x181 (= ?x174 input.dst.llvm-%n)))
 (let (($x67 (= $x181 true)))
 (let (($x157 (= $x67 true)))
 (let ((?x150 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x58 (bvadd symbol.1 ?x150)))
 (let (($x99 (and (bvule input.memlabel-mem--symbol.1_begin ?x58) (bvule (bvadd ?x58 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule ?x58 (bvsub (bvadd ?x58 (_ bv4 32)) (_ bv1 32))) (or false (or false $x99)))))
 (let (($x164 (=> (and $x124 (bvule ?x58 (bvsub (bvadd ?x58 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x99)))))
 (let (($x145 (= $x164 true)))
 (let (($x107 (= $x145 true)))
 (let (($x140 (= $x107 true)))
 (let (($x156 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x156 true)))
 (let (($x106 (= $x169 true)))
 (let (($x151 (= $x106 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x170 (= $x39 true)))
 (let (($x52 (= $x170 true)))
 (let (($x33 (= $x52 true)))
 (let (($x22 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x70 (= $x22 true)))
 (let (($x18 (= $x70 true)))
 (let (($x94 (= $x18 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (= $x102 true)))
 (let (($x14 (= $x6 true)))
 (let (($x49 (= $x14 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x82)))
 (let ((?x10 (bvand symbol.1 (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x10)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x68 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x68 $x40)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x84 $x81)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x64 $x88)))
 (let (($x62 (not $x76)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x61 $x71)))
 (let (($x79 (and (not $x42) $x62)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x65 $x31)))
 (let (($x28 (not $x45)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x48 $x73)))
 (let (($x97 (and (not $x74) $x28)))
 (let (($x37 (and (and (and (and (and (and $x97 $x79) $x77) $x86) $x57) $x101) $x89)))
 (let (($x53 (and $x37 $x32)))
 (let (($x98 (= symbol.1 dst_symbol_addr.1)))
 (let (($x51 (and $x98 $x53)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x131 (or (bvugt input.memlabel-mem--symbol.1_begin ?x92) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x131) (or $x109 $x126)))))))
 (let (($x91 (and $x161 $x51)))
 (let (($x100 (= $x91 true)))
 (let (($x108 (= $x100 true)))
 (let (($x121 (= $x108 true)))
 (let (($x12 (and $x121 $x49)))
 (let (($x103 (and $x12 $x94)))
 (let (($x9 (and $x103 $x33)))
 (let (($x112 (and $x9 $x151)))
 (let (($x182 (and $x112 $x140)))
 (let (($x30 (and $x182 $x157)))
 (let (($x153 (and $x30 $x152)))
 (let (($x135 (and $x153 $x55)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (and $x113 $x135)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x35 $x119)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x13 (and $x43 $x137)))
 (let (($x11 (=> $x13 $x80)))
 (not $x11)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic UFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x124 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (= $x124 false)))
 (let (($x80 (= $x175 true)))
 (let (($x162 (forall ((input.ind-%var375X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var375X)))
 (=> $x47 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var375X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var374X (_ BitVec 32)) )(let (($x47 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var374X)))
 (= $x47 false)))
 ))
 (let (($x72 (and $x46 $x162)))
 (let (($x55 (= $x72 true)))
 (let (($x129 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x129 true)))
 (let (($x152 (= $x144 true)))
 (let ((?x173 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x173)))
 (let (($x181 (= ?x174 input.dst.llvm-%n)))
 (let (($x67 (= $x181 true)))
 (let (($x157 (= $x67 true)))
 (let ((?x150 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x58 (bvadd symbol.1 ?x150)))
 (let (($x99 (and (bvule input.memlabel-mem--symbol.1_begin ?x58) (bvule (bvadd ?x58 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule ?x58 (bvsub (bvadd ?x58 (_ bv4 32)) (_ bv1 32))) (or false (or false $x99)))))
 (let (($x164 (=> (and $x124 (bvule ?x58 (bvsub (bvadd ?x58 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x99)))))
 (let (($x145 (= $x164 true)))
 (let (($x107 (= $x145 true)))
 (let (($x140 (= $x107 true)))
 (let (($x156 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x156 true)))
 (let (($x106 (= $x169 true)))
 (let (($x151 (= $x106 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x170 (= $x39 true)))
 (let (($x52 (= $x170 true)))
 (let (($x33 (= $x52 true)))
 (let (($x22 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x70 (= $x22 true)))
 (let (($x18 (= $x70 true)))
 (let (($x94 (= $x18 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (= $x102 true)))
 (let (($x14 (= $x6 true)))
 (let (($x49 (= $x14 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x82)))
 (let ((?x10 (bvand symbol.1 (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x10)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x68 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x68 $x40)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x84 $x81)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x64 $x88)))
 (let (($x62 (not $x76)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x42 (and $x61 $x71)))
 (let (($x79 (and (not $x42) $x62)))
 (let (($x31 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x65 $x31)))
 (let (($x28 (not $x45)))
 (let (($x73 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x48 $x73)))
 (let (($x97 (and (not $x74) $x28)))
 (let (($x37 (and (and (and (and (and (and $x97 $x79) $x77) $x86) $x57) $x101) $x89)))
 (let (($x53 (and $x37 $x32)))
 (let (($x98 (= symbol.1 dst_symbol_addr.1)))
 (let (($x51 (and $x98 $x53)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x131 (or (bvugt input.memlabel-mem--symbol.1_begin ?x92) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x131) (or $x109 $x126)))))))
 (let (($x91 (and $x161 $x51)))
 (let (($x100 (= $x91 true)))
 (let (($x108 (= $x100 true)))
 (let (($x121 (= $x108 true)))
 (let (($x12 (and $x121 $x49)))
 (let (($x103 (and $x12 $x94)))
 (let (($x9 (and $x103 $x33)))
 (let (($x112 (and $x9 $x151)))
 (let (($x182 (and $x112 $x140)))
 (let (($x30 (and $x182 $x157)))
 (let (($x153 (and $x30 $x152)))
 (let (($x135 (and $x153 $x55)))
 (let (($x113 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x119 (and $x113 $x135)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x137 (and $x35 $x119)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x13 (and $x43 $x137)))
 (let (($x11 (=> $x13 $x80)))
 (not $x11)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffdfff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000018b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffdffc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x08f3be78)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00008003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x08f3c007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00008000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x08f3be78)
  (define-fun symbol.1 () (_ BitVec 32)
    #x08f3be78)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x10)))
 (let ((?x101 (bvand symbol.1 (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x101)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x68 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x68 $x40)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x84 $x81)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x76 $x62)))
 (let (($x75 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x75)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x45 $x28)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x61)))
 (let (($x91 (and (and (and (and (and (and $x42 $x69) $x44) $x83) $x57) $x26) $x54)))
 (let (($x100 (and $x91 $x89)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x133 (or (bvugt input.memlabel-mem--symbol.1_begin ?x50) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x133) (or $x165 $x132)))))))
 (let (($x174 (and $x98 $x108)))
 (let (($x181 (= $x174 true)))
 (let (($x67 (= $x181 true)))
 (let (($x164 (forall ((input.ind-%var388X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var388X)))
 (= $x124 false)))
 ))
 (let (($x171 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var389X)))
 (=> $x124 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var389X) (_ bv0 32)))))
 ))
 (let (($x145 (and $x171 $x164)))
 (let (($x107 (= $x145 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x94 (concat ?x22 (concat ?x6 ?x34)))))
 (let (($x39 (= input.dst.llvm-%n ?x103)))
 (let (($x33 (and (and (and $x98 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x108) $x39)))
 (let (($x9 (= $x33 true)))
 (let (($x156 (= $x9 true)))
 (let (($x169 (= $x156 true)))
 (let (($x140 (and $x169 $x107)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x125 $x140)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x178 (and $x15 $x182)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x20 $x178)))
 (let (($x157 (=> $x173 $x67)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x10)))
 (let ((?x101 (bvand symbol.1 (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x101)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x41 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x40 (= input.memlabel-mem--symbol.1_end ?x41)))
 (let (($x68 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x81 (and $x68 $x40)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x84 $x81)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (and $x76 $x62)))
 (let (($x75 (not $x79)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x75)))
 (let (($x28 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x45 $x28)))
 (let (($x61 (not $x97)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x61)))
 (let (($x91 (and (and (and (and (and (and $x42 $x69) $x44) $x83) $x57) $x26) $x54)))
 (let (($x100 (and $x91 $x89)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x133 (or (bvugt input.memlabel-mem--symbol.1_begin ?x50) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x133) (or $x165 $x132)))))))
 (let (($x174 (and $x98 $x108)))
 (let (($x181 (= $x174 true)))
 (let (($x67 (= $x181 true)))
 (let (($x164 (forall ((input.ind-%var388X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var388X)))
 (= $x124 false)))
 ))
 (let (($x171 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x124 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var389X)))
 (=> $x124 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var389X) (_ bv0 32)))))
 ))
 (let (($x145 (and $x171 $x164)))
 (let (($x107 (= $x145 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x94 (concat ?x22 (concat ?x6 ?x34)))))
 (let (($x39 (= input.dst.llvm-%n ?x103)))
 (let (($x33 (and (and (and $x98 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x108) $x39)))
 (let (($x9 (= $x33 true)))
 (let (($x156 (= $x9 true)))
 (let (($x169 (= $x156 true)))
 (let (($x140 (and $x169 $x107)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x182 (and $x125 $x140)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x178 (and $x15 $x182)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x173 (and $x20 $x178)))
 (let (($x157 (=> $x173 $x67)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x167 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x167)))
 (let (($x134 (= ?x151 input.dst.llvm-%n)))
 (let (($x7 (= $x134 true)))
 (let (($x111 (forall ((input.ind-%var395X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var395X)))
 (=> $x171 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var395X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var394X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var394X)))
 (= $x171 false)))
 ))
 (let (($x85 (and $x107 $x111)))
 (let (($x138 (= $x85 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x70 (concat ?x6 (concat ?x49 ?x18)))))
 (let (($x39 (= input.dst.llvm-%n ?x103)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x90)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x53)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x68 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (and $x83 $x68)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x86 $x59)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x79 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x79)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x71 $x45)))
 (let (($x97 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x97)))
 (let (($x89 (and (and (and (and (and (and $x42 $x69) $x37) $x82) $x41) $x57) $x17)))
 (let (($x100 (and $x89 $x26)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x130 (or (bvugt input.memlabel-mem--symbol.1_begin ?x117) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x130) (or $x8 $x118)))))))
 (let (($x156 (and (and (and $x170 $x96) $x108) $x39)))
 (let (($x169 (= $x156 true)))
 (let (($x112 (= $x169 true)))
 (let (($x124 (= $x112 true)))
 (let (($x29 (and $x124 $x138)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (and $x87 $x29)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x147 $x106)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x43 $x150)))
 (let (($x129 (=> $x60 $x7)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x167 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x167)))
 (let (($x134 (= ?x151 input.dst.llvm-%n)))
 (let (($x7 (= $x134 true)))
 (let (($x111 (forall ((input.ind-%var395X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var395X)))
 (=> $x171 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var395X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var394X (_ BitVec 32)) )(let (($x171 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var394X)))
 (= $x171 false)))
 ))
 (let (($x85 (and $x107 $x111)))
 (let (($x138 (= $x85 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x70 (concat ?x6 (concat ?x49 ?x18)))))
 (let (($x39 (= input.dst.llvm-%n ?x103)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x90)))
 (let ((?x53 (bvand symbol.1 (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x53)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x68 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x83 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x59 (and $x83 $x68)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x86 $x59)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x77 $x76)))
 (let (($x79 (not $x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x79)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x71 $x45)))
 (let (($x97 (not $x28)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x97)))
 (let (($x89 (and (and (and (and (and (and $x42 $x69) $x37) $x82) $x41) $x57) $x17)))
 (let (($x100 (and $x89 $x26)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x130 (or (bvugt input.memlabel-mem--symbol.1_begin ?x117) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x130) (or $x8 $x118)))))))
 (let (($x156 (and (and (and $x170 $x96) $x108) $x39)))
 (let (($x169 (= $x156 true)))
 (let (($x112 (= $x169 true)))
 (let (($x124 (= $x112 true)))
 (let (($x29 (and $x124 $x138)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x106 (and $x87 $x29)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x147 $x106)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x43 $x150)))
 (let (($x129 (=> $x60 $x7)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x141)))
 (let (($x181 (= ?x164 input.spec-%var-n-1)))
 (let (($x182 (= $x181 true)))
 (let (($x129 (forall ((input.ind-%var401X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var401X)))
 (=> $x157 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var401X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var400X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var400X)))
 (= $x157 false)))
 ))
 (let (($x144 (and $x138 $x129)))
 (let (($x128 (= $x144 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x34 (concat ?x49 (concat ?x22 ?x14)))))
 (let (($x39 (= input.dst.llvm-%n ?x103)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x81)))
 (let ((?x91 (bvand symbol.1 (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x91)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x86 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x83 (= input.memlabel-mem--symbol.1_end ?x86)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (and $x82 $x83)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x44 $x32)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x75 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x62)))
 (let (($x71 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x61 $x71)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x28)))
 (let (($x26 (and (and (and (and (and (and $x42 $x69) $x51) $x101) $x84) $x41) $x40)))
 (let (($x100 (and $x26 $x57)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x126 (or (bvugt input.memlabel-mem--symbol.1_begin ?x109) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x126) (or $x161 $x24)))))))
 (let (($x112 (and (and (and $x33 $x63) $x108) $x39)))
 (let (($x124 (= $x112 true)))
 (let (($x143 (= $x124 true)))
 (let (($x171 (= $x143 true)))
 (let (($x121 (and $x171 $x128)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x35 $x121)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x174 (and $x120 $x154)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x178 (and $x20 $x174)))
 (let (($x67 (=> $x178 $x182)))
 (not $x67))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x141)))
 (let (($x181 (= ?x164 input.spec-%var-n-1)))
 (let (($x182 (= $x181 true)))
 (let (($x129 (forall ((input.ind-%var401X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var401X)))
 (=> $x157 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var401X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var400X (_ BitVec 32)) )(let (($x157 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var400X)))
 (= $x157 false)))
 ))
 (let (($x144 (and $x138 $x129)))
 (let (($x128 (= $x144 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x34 (concat ?x49 (concat ?x22 ?x14)))))
 (let (($x39 (= input.dst.llvm-%n ?x103)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x81)))
 (let ((?x91 (bvand symbol.1 (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x91)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x86 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x83 (= input.memlabel-mem--symbol.1_end ?x86)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x32 (and $x82 $x83)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x44 $x32)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x75 $x77)))
 (let (($x62 (not $x76)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x62)))
 (let (($x71 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x61 $x71)))
 (let (($x28 (not $x45)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x28)))
 (let (($x26 (and (and (and (and (and (and $x42 $x69) $x51) $x101) $x84) $x41) $x40)))
 (let (($x100 (and $x26 $x57)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x126 (or (bvugt input.memlabel-mem--symbol.1_begin ?x109) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x126) (or $x161 $x24)))))))
 (let (($x112 (and (and (and $x33 $x63) $x108) $x39)))
 (let (($x124 (= $x112 true)))
 (let (($x143 (= $x124 true)))
 (let (($x171 (= $x143 true)))
 (let (($x121 (and $x171 $x128)))
 (let (($x35 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (and $x35 $x121)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x174 (and $x120 $x154)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x178 (and $x20 $x174)))
 (let (($x67 (=> $x178 $x182)))
 (not $x67))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x107 (= $x145 true)))
 (let (($x111 (= $x107 true)))
 (let (($x67 (forall ((input.ind-%var407X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var407X)))
 (=> $x134 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var407X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var406X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var406X)))
 (= $x134 false)))
 ))
 (let (($x99 (and $x128 $x67)))
 (let (($x110 (= $x99 true)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x18 (concat ?x22 (concat ?x6 ?x12)))))
 (let (($x39 (= input.dst.llvm-%n ?x103)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x59)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x89)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x44 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x82 (= input.memlabel-mem--symbol.1_end ?x44)))
 (let (($x101 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x54 (and $x101 $x82)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x37 $x54)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x79 $x75)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x76)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x97 $x61)))
 (let (($x45 (not $x71)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x45)))
 (let (($x57 (and (and (and (and (and (and $x42 $x69) $x10) $x53) $x86) $x84) $x68)))
 (let (($x100 (and $x57 $x41)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x132 (or (bvugt input.memlabel-mem--symbol.1_begin ?x165) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x132) (or $x98 $x172)))))))
 (let (($x143 (and (and (and $x156 $x96) $x108) $x39)))
 (let (($x171 (= $x143 true)))
 (let (($x173 (= $x171 true)))
 (let (($x157 (= $x173 true)))
 (let (($x52 (and $x157 $x110)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (and $x15 $x52)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x176 (and $x113 $x30)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x43 $x176)))
 (let (($x167 (=> $x150 $x111)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x145 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x107 (= $x145 true)))
 (let (($x111 (= $x107 true)))
 (let (($x67 (forall ((input.ind-%var407X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var407X)))
 (=> $x134 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var407X) (_ bv0 32)))))
 ))
 (let (($x128 (forall ((input.ind-%var406X (_ BitVec 32)) )(let (($x134 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var406X)))
 (= $x134 false)))
 ))
 (let (($x99 (and $x128 $x67)))
 (let (($x110 (= $x99 true)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x18 (concat ?x22 (concat ?x6 ?x12)))))
 (let (($x39 (= input.dst.llvm-%n ?x103)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x59)))
 (let ((?x89 (bvand symbol.1 (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x89)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x44 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x82 (= input.memlabel-mem--symbol.1_end ?x44)))
 (let (($x101 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x54 (and $x101 $x82)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x37 $x54)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x79 $x75)))
 (let (($x76 (not $x77)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x76)))
 (let (($x61 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x97 $x61)))
 (let (($x45 (not $x71)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x45)))
 (let (($x57 (and (and (and (and (and (and $x42 $x69) $x10) $x53) $x86) $x84) $x68)))
 (let (($x100 (and $x57 $x41)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x96 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x132 (or (bvugt input.memlabel-mem--symbol.1_begin ?x165) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x132) (or $x98 $x172)))))))
 (let (($x143 (and (and (and $x156 $x96) $x108) $x39)))
 (let (($x171 (= $x143 true)))
 (let (($x173 (= $x171 true)))
 (let (($x157 (= $x173 true)))
 (let (($x52 (and $x157 $x110)))
 (let (($x15 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x30 (and $x15 $x52)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x176 (and $x113 $x30)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x43 $x176)))
 (let (($x167 (=> $x150 $x111)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (forall ((input.ind-%var419X (_ BitVec 32)) )(let ((?x123 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var419X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x105 (concat ?x123 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var419X (_ bv4 32)))))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var419X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var419X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x38 (concat ?x122 ?x105)))))))))
 ))
 (let (($x47 (forall ((input.ind-%var418X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var418X) (bvult input.ind-%var418X (_ bv0 32)))))
 ))
 (let (($x155 (and $x47 $x93)))
 (let (($x129 (= true true)))
 (let (($x25 (and $x129 $x155)))
 (let (($x179 (= $x25 true)))
 (let (($x131 (forall ((input.ind-%var413X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var413X)))
 (=> $x181 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var413X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var412X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var412X)))
 (= $x181 false)))
 ))
 (let (($x9 (and $x110 $x131)))
 (let (($x7 (= $x9 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x14 (concat ?x6 (concat ?x49 ?x102)))))
 (let (($x39 (= input.dst.llvm-%n ?x103)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x32)))
 (let ((?x26 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x26)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x37 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x37)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x53 $x101)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x51 $x17)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (and $x62 $x79)))
 (let (($x77 (not $x75)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x77)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x28 $x97)))
 (let (($x71 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x71)))
 (let (($x41 (and (and (and (and (and (and $x42 $x69) $x90) $x91) $x44) $x86) $x83)))
 (let (($x100 (and $x41 $x84)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x118 (or (bvugt input.memlabel-mem--symbol.1_begin ?x8) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x118) (or $x170 $x92)))))))
 (let (($x173 (and (and (and $x112 $x63) $x108) $x39)))
 (let (($x157 (= $x173 true)))
 (let (($x60 (= $x157 true)))
 (let (($x134 (= $x60 true)))
 (let (($x58 (and $x134 $x7)))
 (let (($x147 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and $x147 $x58)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x125 $x174)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x138 (and $x20 $x85)))
 (let (($x146 (=> $x138 $x179)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (forall ((input.ind-%var419X (_ BitVec 32)) )(let ((?x123 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var419X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x105 (concat ?x123 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var419X (_ bv4 32)))))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var419X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var419X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x38 (concat ?x122 ?x105)))))))))
 ))
 (let (($x47 (forall ((input.ind-%var418X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var418X) (bvult input.ind-%var418X (_ bv0 32)))))
 ))
 (let (($x155 (and $x47 $x93)))
 (let (($x129 (= true true)))
 (let (($x25 (and $x129 $x155)))
 (let (($x179 (= $x25 true)))
 (let (($x131 (forall ((input.ind-%var413X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var413X)))
 (=> $x181 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var413X) (_ bv0 32)))))
 ))
 (let (($x110 (forall ((input.ind-%var412X (_ BitVec 32)) )(let (($x181 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var412X)))
 (= $x181 false)))
 ))
 (let (($x9 (and $x110 $x131)))
 (let (($x7 (= $x9 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x14 (concat ?x6 (concat ?x49 ?x102)))))
 (let (($x39 (= input.dst.llvm-%n ?x103)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x32)))
 (let ((?x26 (bvand symbol.1 (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x26)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let ((?x37 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x101 (= input.memlabel-mem--symbol.1_end ?x37)))
 (let (($x53 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (and $x53 $x101)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x51 $x17)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x75 (and $x62 $x79)))
 (let (($x77 (not $x75)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x88 (and $x36 $x64)))
 (let (($x69 (and (not $x88) $x77)))
 (let (($x97 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x28 $x97)))
 (let (($x71 (not $x61)))
 (let (($x65 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x56 $x65)))
 (let (($x42 (and (not $x31) $x71)))
 (let (($x41 (and (and (and (and (and (and $x42 $x69) $x90) $x91) $x44) $x86) $x83)))
 (let (($x100 (and $x41 $x84)))
 (let (($x74 (= symbol.1 dst_symbol_addr.1)))
 (let (($x108 (and $x74 $x100)))
 (let (($x63 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x118 (or (bvugt input.memlabel-mem--symbol.1_begin ?x8) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x118) (or $x170 $x92)))))))
 (let (($x173 (and (and (and $x112 $x63) $x108) $x39)))
 (let (($x157 (= $x173 true)))
 (let (($x60 (= $x157 true)))
 (let (($x134 (= $x60 true)))
 (let (($x58 (and $x134 $x7)))
 (let (($x147 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x174 (and $x147 $x58)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x125 $x174)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x138 (and $x20 $x85)))
 (let (($x146 (=> $x138 $x179)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x138 false)))
 (let (($x270 (= $x269 true)))
 (let (($x262 (forall ((input.ind-%var449X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var449X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var449X) (_ bv0 32)))))
 ))
 (let (($x256 (forall ((input.ind-%var448X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var448X)))
 (= $x67 false)))
 ))
 (let (($x263 (and $x256 $x262)))
 (let (($x264 (= $x263 true)))
 (let (($x249 (forall ((input.ind-%var443X (_ BitVec 32)) )(let ((?x236 (bvadd symbol.1 (bvmul input.ind-%var443X (_ bv4 32)))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x236))))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv2 32))) ?x240)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv3 32))) ?x243)))
 (let ((?x194 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var443X)))
 (let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var443X)))
 (=> $x186 (= ?x194 ?x246)))))))))
 ))
 (let (($x214 (forall ((input.ind-%var442X (_ BitVec 32)) )(let (($x212 (and (bvule (_ bv0 32) input.ind-%var442X) (bvult input.ind-%var442X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var442X)))
 (= $x186 $x212))))
 ))
 (let (($x250 (and $x214 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x200 (forall ((input.ind-%var437X (_ BitVec 32)) )(let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var437X)))
 (=> $x186 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var437X) (_ bv0 32)))))
 ))
 (let (($x190 (forall ((input.ind-%var436X (_ BitVec 32)) )(let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var436X)))
 (= $x186 false)))
 ))
 (let (($x201 (and $x190 $x200)))
 (let (($x202 (= $x201 true)))
 (let (($x158 (forall ((input.ind-%var429X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var429X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var429X) (_ bv0 32)))))
 ))
 (let (($x151 (forall ((input.ind-%var428X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var428X)))
 (= $x67 false)))
 ))
 (let (($x148 (and $x151 $x158)))
 (let (($x180 (= $x148 true)))
 (let ((?x130 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x130)))
 (let (($x137 (= ?x165 input.dst.llvm-%n)))
 (let (($x72 (= $x137 true)))
 (let (($x55 (= $x72 true)))
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x128 true)))
 (let (($x80 (= $x175 true)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x154 (= $x141 true)))
 (let (($x142 (= $x154 true)))
 (let (($x115 (= $x142 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x169 true)))
 (let (($x145 (= $x182 true)))
 (let (($x52 (= $x145 true)))
 (let (($x179 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x146 (= $x179 true)))
 (let (($x159 (= $x146 true)))
 (let (($x15 (= $x159 true)))
 (let (($x177 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (= $x177 true)))
 (let (($x93 (= $x95 true)))
 (let (($x155 (= $x93 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvadd symbol.1 ?x152)))
 (let (($x78 (and (bvule input.memlabel-mem--symbol.1_begin ?x140) (bvule (bvadd ?x140 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule ?x140 (bvsub (bvadd ?x140 (_ bv4 32)) (_ bv1 32))) (or false (or false $x78)))))
 (let (($x139 (=> (and $x138 (bvule ?x140 (bvsub (bvadd ?x140 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x78)))))
 (let (($x47 (= $x139 true)))
 (let (($x105 (= $x47 true)))
 (let (($x5 (= $x105 true)))
 (let (($x131 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x9 (= $x131 true)))
 (let (($x7 (= $x9 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x70)))
 (let ((?x49 (bvand symbol.1 (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x49)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x124 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x94 (= input.memlabel-mem--symbol.1_end ?x124)))
 (let (($x108 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x108 $x94)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x100 $x14)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (and $x82 $x54)))
 (let (($x59 (not $x86)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (and $x17 $x44)))
 (let (($x83 (and (not $x57) $x59)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x51)))
 (let (($x40 (not $x53)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x89 $x10)))
 (let (($x101 (and (not $x91) $x40)))
 (let (($x134 (and (and (and (and (and (and $x101 $x83) $x41) $x84) $x22) $x18) $x102)))
 (let (($x178 (and $x134 $x12)))
 (let (($x90 (= symbol.1 dst_symbol_addr.1)))
 (let (($x181 (and $x90 $x178)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x71 (or (bvugt input.memlabel-mem--symbol.1_begin ?x28) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x71) (or $x88 $x76)))))))
 (let (($x99 (and $x81 $x181)))
 (let (($x110 (= $x99 true)))
 (let (($x150 (= $x110 true)))
 (let (($x167 (= $x150 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x117 (= $x156 true)))
 (let (($x112 (= $x117 true)))
 (let (($x109 (= $x112 true)))
 (let (($x170 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x172 (= $x170 true)))
 (let (($x92 (= $x172 true)))
 (let (($x33 (= $x92 true)))
 (let (($x21 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x161 (= $x21 true)))
 (let (($x118 (= $x161 true)))
 (let (($x98 (= $x118 true)))
 (let (($x96 (= ?x165 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (= $x96 true)))
 (let (($x8 (= $x126 true)))
 (let (($x24 (and $x8 $x98)))
 (let (($x50 (and $x24 $x33)))
 (let (($x63 (and $x50 $x109)))
 (let (($x106 (and $x63 $x167)))
 (let (($x58 (and $x106 $x7)))
 (let (($x149 (and $x58 $x5)))
 (let (($x25 (and $x149 $x155)))
 (let (($x133 (and $x25 $x15)))
 (let (($x176 (and $x133 $x52)))
 (let (($x144 (and $x176 $x115)))
 (let (($x119 (and $x144 $x80)))
 (let (($x162 (and $x119 $x55)))
 (let (($x183 (and $x162 $x180)))
 (let (($x203 (and $x183 $x202)))
 (let (($x252 (and $x203 $x251)))
 (let (($x265 (and $x252 $x264)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x125 $x265)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x120 $x266)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x43 $x267)))
 (let (($x271 (=> $x268 $x270)))
 (not $x271)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x138 false)))
 (let (($x270 (= $x269 true)))
 (let (($x262 (forall ((input.ind-%var449X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var449X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var449X) (_ bv0 32)))))
 ))
 (let (($x256 (forall ((input.ind-%var448X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var448X)))
 (= $x67 false)))
 ))
 (let (($x263 (and $x256 $x262)))
 (let (($x264 (= $x263 true)))
 (let (($x249 (forall ((input.ind-%var443X (_ BitVec 32)) )(let ((?x236 (bvadd symbol.1 (bvmul input.ind-%var443X (_ bv4 32)))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x236))))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv2 32))) ?x240)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x236 (_ bv3 32))) ?x243)))
 (let ((?x194 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var443X)))
 (let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var443X)))
 (=> $x186 (= ?x194 ?x246)))))))))
 ))
 (let (($x214 (forall ((input.ind-%var442X (_ BitVec 32)) )(let (($x212 (and (bvule (_ bv0 32) input.ind-%var442X) (bvult input.ind-%var442X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var442X)))
 (= $x186 $x212))))
 ))
 (let (($x250 (and $x214 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x200 (forall ((input.ind-%var437X (_ BitVec 32)) )(let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var437X)))
 (=> $x186 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var437X) (_ bv0 32)))))
 ))
 (let (($x190 (forall ((input.ind-%var436X (_ BitVec 32)) )(let (($x186 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var436X)))
 (= $x186 false)))
 ))
 (let (($x201 (and $x190 $x200)))
 (let (($x202 (= $x201 true)))
 (let (($x158 (forall ((input.ind-%var429X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var429X)))
 (=> $x67 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var429X) (_ bv0 32)))))
 ))
 (let (($x151 (forall ((input.ind-%var428X (_ BitVec 32)) )(let (($x67 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var428X)))
 (= $x67 false)))
 ))
 (let (($x148 (and $x151 $x158)))
 (let (($x180 (= $x148 true)))
 (let ((?x130 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x165 (bvneg ?x130)))
 (let (($x137 (= ?x165 input.dst.llvm-%n)))
 (let (($x72 (= $x137 true)))
 (let (($x55 (= $x72 true)))
 (let (($x128 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x175 (= $x128 true)))
 (let (($x80 (= $x175 true)))
 (let (($x141 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x154 (= $x141 true)))
 (let (($x142 (= $x154 true)))
 (let (($x115 (= $x142 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x169 true)))
 (let (($x145 (= $x182 true)))
 (let (($x52 (= $x145 true)))
 (let (($x179 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x146 (= $x179 true)))
 (let (($x159 (= $x146 true)))
 (let (($x15 (= $x159 true)))
 (let (($x177 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (= $x177 true)))
 (let (($x93 (= $x95 true)))
 (let (($x155 (= $x93 true)))
 (let ((?x152 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvadd symbol.1 ?x152)))
 (let (($x78 (and (bvule input.memlabel-mem--symbol.1_begin ?x140) (bvule (bvadd ?x140 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule ?x140 (bvsub (bvadd ?x140 (_ bv4 32)) (_ bv1 32))) (or false (or false $x78)))))
 (let (($x139 (=> (and $x138 (bvule ?x140 (bvsub (bvadd ?x140 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x78)))))
 (let (($x47 (= $x139 true)))
 (let (($x105 (= $x47 true)))
 (let (($x5 (= $x105 true)))
 (let (($x131 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x9 (= $x131 true)))
 (let (($x7 (= $x9 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x70)))
 (let ((?x49 (bvand symbol.1 (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x49)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x124 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x94 (= input.memlabel-mem--symbol.1_end ?x124)))
 (let (($x108 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x14 (and $x108 $x94)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x100 $x14)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x86 (and $x82 $x54)))
 (let (($x59 (not $x86)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (and $x17 $x44)))
 (let (($x83 (and (not $x57) $x59)))
 (let (($x51 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x51)))
 (let (($x40 (not $x53)))
 (let (($x10 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x89 $x10)))
 (let (($x101 (and (not $x91) $x40)))
 (let (($x134 (and (and (and (and (and (and $x101 $x83) $x41) $x84) $x22) $x18) $x102)))
 (let (($x178 (and $x134 $x12)))
 (let (($x90 (= symbol.1 dst_symbol_addr.1)))
 (let (($x181 (and $x90 $x178)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x71 (or (bvugt input.memlabel-mem--symbol.1_begin ?x28) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x71) (or $x88 $x76)))))))
 (let (($x99 (and $x81 $x181)))
 (let (($x110 (= $x99 true)))
 (let (($x150 (= $x110 true)))
 (let (($x167 (= $x150 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x117 (= $x156 true)))
 (let (($x112 (= $x117 true)))
 (let (($x109 (= $x112 true)))
 (let (($x170 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x172 (= $x170 true)))
 (let (($x92 (= $x172 true)))
 (let (($x33 (= $x92 true)))
 (let (($x21 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x161 (= $x21 true)))
 (let (($x118 (= $x161 true)))
 (let (($x98 (= $x118 true)))
 (let (($x96 (= ?x165 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (= $x96 true)))
 (let (($x8 (= $x126 true)))
 (let (($x24 (and $x8 $x98)))
 (let (($x50 (and $x24 $x33)))
 (let (($x63 (and $x50 $x109)))
 (let (($x106 (and $x63 $x167)))
 (let (($x58 (and $x106 $x7)))
 (let (($x149 (and $x58 $x5)))
 (let (($x25 (and $x149 $x155)))
 (let (($x133 (and $x25 $x15)))
 (let (($x176 (and $x133 $x52)))
 (let (($x144 (and $x176 $x115)))
 (let (($x119 (and $x144 $x80)))
 (let (($x162 (and $x119 $x55)))
 (let (($x183 (and $x162 $x180)))
 (let (($x203 (and $x183 $x202)))
 (let (($x252 (and $x203 $x251)))
 (let (($x265 (and $x252 $x264)))
 (let (($x125 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and $x125 $x265)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x120 $x266)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x43 $x267)))
 (let (($x271 (=> $x268 $x270)))
 (not $x271)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffef8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa100fefc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa100feff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000087)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa100fefc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffef8)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffef8)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x7ffffefb (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffefa (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffef9 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffef8 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) a!1 #x00000000)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0bfffec0)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0bfffec3)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0bfffec0)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffe80)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffe80)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (let ((a!1 (concat (k!4 (bvadd #x7ffffe83 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffe82 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffe81 (bvmul #x00000004 x!0)))
                       (k!4 (bvadd #x7ffffe80 (bvmul #x00000004 x!0))))))
      (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) a!1 #x00000000)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (not $x35)))
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x293 (not $x292)))
 (let (($x295 (or $x293 $x294)))
 (let (($x296 (= $x295 true)))
 (let (($x297 (= $x296 true)))
 (let (($x284 (forall ((input.ind-%var569X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var569X)))
 (=> $x235 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var569X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var568X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var568X)))
 (= $x235 false)))
 ))
 (let (($x285 (and $x278 $x284)))
 (let (($x286 (= $x285 true)))
 (let (($x261 (forall ((input.ind-%var563X (_ BitVec 32)) )(let ((?x188 (bvadd symbol.1 (bvmul input.ind-%var563X (_ bv4 32)))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x188))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv2 32))) ?x209)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv3 32))) ?x233)))
 (let ((?x270 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var563X)))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var563X)))
 (=> $x262 (= ?x270 ?x234)))))))))
 ))
 (let (($x204 (forall ((input.ind-%var562X (_ BitVec 32)) )(let (($x215 (and (bvule (_ bv0 32) input.ind-%var562X) (bvult input.ind-%var562X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var562X)))
 (= $x262 $x215))))
 ))
 (let (($x16 (and $x204 $x261)))
 (let (($x273 (= $x16 true)))
 (let (($x187 (forall ((input.ind-%var557X (_ BitVec 32)) )(let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var557X)))
 (=> $x262 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var557X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var556X (_ BitVec 32)) )(let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var556X)))
 (= $x262 false)))
 ))
 (let (($x195 (and $x266 $x187)))
 (let (($x107 (= $x195 true)))
 (let (($x248 (forall ((input.ind-%var551X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var551X)))
 (=> $x235 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var551X) (_ bv0 32)))))
 ))
 (let (($x226 (forall ((input.ind-%var550X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var550X)))
 (= $x235 false)))
 ))
 (let (($x249 (and $x226 $x248)))
 (let (($x250 (= $x249 true)))
 (let ((?x201 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x201)))
 (let (($x203 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let ((?x148 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x148)))
 (let (($x194 (= ?x180 input.dst.llvm-%n)))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let (($x183 (= ?x180 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x186 (= $x183 true)))
 (let (($x189 (= $x186 true)))
 (let (($x29 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x151 (= $x29 true)))
 (let (($x19 (= $x151 true)))
 (let (($x163 (= $x19 true)))
 (let (($x72 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x55 (= $x72 true)))
 (let (($x162 (= $x55 true)))
 (let (($x11 (= $x162 true)))
 (let ((?x114 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvadd symbol.1 ?x114)))
 (let ((?x169 (bvsub ?x125 ?x114)))
 (let (($x176 (ite (bvsge ?x114 (_ bv0 32)) (bvuge ?x125 ?x169) (bvult ?x125 ?x169))))
 (let ((?x146 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x159 (bvmul (_ bv4 64) ?x146)))
 (let ((?x15 ((_ extract 63 32) ?x159)))
 (let (($x133 (= (_ bv0 32) ?x15)))
 (let (($x25 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x142 (and (and (and true $x25) $x133) $x176)))
 (let (($x149 (= (bvand ?x125 (_ bv4294967292 32)) ?x125)))
 (let (($x115 (and $x149 $x142)))
 (let (($x144 (= true $x115)))
 (let (($x128 (=> $x35 $x144)))
 (let (($x175 (= $x128 true)))
 (let (($x80 (= $x175 true)))
 (let (($x119 (= $x80 true)))
 (let (($x122 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (= $x122 true)))
 (let (($x23 (= $x136 true)))
 (let (($x139 (= $x23 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (= $x123 true)))
 (let (($x166 (= $x66 true)))
 (let (($x38 (= $x166 true)))
 (let (($x129 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x152 (= $x129 true)))
 (let (($x140 (= $x152 true)))
 (let (($x160 (= $x140 true)))
 (let (($x7 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x58 (= $x7 true)))
 (let (($x174 (= $x58 true)))
 (let (($x85 (= $x174 true)))
 (let (($x110 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x150 (= $x110 true)))
 (let (($x167 (= $x150 true)))
 (let (($x106 (= $x167 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x22)))
 (let ((?x94 (bvand symbol.1 (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x94)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x173 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x39 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (and $x39 $x173)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x41 $x100)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x26 (and $x44 $x57)))
 (let (($x82 (not $x26)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (and $x40 $x101)))
 (let (($x86 (and (not $x17) $x82)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x10 $x91)))
 (let (($x68 (not $x37)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x74 $x90)))
 (let (($x53 (and (not $x89) $x68)))
 (let (($x102 (and (and (and (and (and (and $x53 $x86) $x59) $x103) $x108) $x124) $x14)))
 (let (($x134 (and $x102 $x157)))
 (let (($x69 (= symbol.1 dst_symbol_addr.1)))
 (let (($x70 (and $x69 $x134)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x71 (or (bvugt input.memlabel-mem--symbol.1_begin ?x97) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x71) (or $x64 $x76)))))))
 (let (($x12 (and $x73 $x70)))
 (let (($x178 (= $x12 true)))
 (let (($x181 (= $x178 true)))
 (let (($x99 (= $x181 true)))
 (let (($x131 (and $x99 $x106)))
 (let (($x138 (and $x131 $x85)))
 (let (($x104 (and $x138 $x160)))
 (let (($x78 (and $x104 $x38)))
 (let (($x47 (and $x78 $x139)))
 (let (($x137 (and $x47 $x119)))
 (let (($x67 (and $x137 $x11)))
 (let (($x127 (and $x67 $x163)))
 (let (($x190 (and $x127 $x189)))
 (let (($x200 (and $x190 $x199)))
 (let (($x212 (and $x200 $x210)))
 (let (($x251 (and $x212 $x250)))
 (let (($x121 (and $x251 $x107)))
 (let (($x274 (and $x121 $x273)))
 (let (($x287 (and $x274 $x286)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x288 (and $x63 $x287)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x289 (and $x117 $x288)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x290 (and $x33 $x289)))
 (let (($x98 (and (bvule input.memlabel-mem--symbol.1_begin ?x125) (bvule (bvadd ?x125 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x92 (=> (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32))) (or false (or false $x98)))))
 (let (($x46 (=> (and $x35 (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x98)))))
 (let (($x291 (and $x46 $x290)))
 (let (($x298 (=> $x291 $x297)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x294 (not $x35)))
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x293 (not $x292)))
 (let (($x295 (or $x293 $x294)))
 (let (($x296 (= $x295 true)))
 (let (($x297 (= $x296 true)))
 (let (($x284 (forall ((input.ind-%var569X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var569X)))
 (=> $x235 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var569X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var568X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var568X)))
 (= $x235 false)))
 ))
 (let (($x285 (and $x278 $x284)))
 (let (($x286 (= $x285 true)))
 (let (($x261 (forall ((input.ind-%var563X (_ BitVec 32)) )(let ((?x188 (bvadd symbol.1 (bvmul input.ind-%var563X (_ bv4 32)))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x188))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv2 32))) ?x209)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x188 (_ bv3 32))) ?x233)))
 (let ((?x270 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var563X)))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var563X)))
 (=> $x262 (= ?x270 ?x234)))))))))
 ))
 (let (($x204 (forall ((input.ind-%var562X (_ BitVec 32)) )(let (($x215 (and (bvule (_ bv0 32) input.ind-%var562X) (bvult input.ind-%var562X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var562X)))
 (= $x262 $x215))))
 ))
 (let (($x16 (and $x204 $x261)))
 (let (($x273 (= $x16 true)))
 (let (($x187 (forall ((input.ind-%var557X (_ BitVec 32)) )(let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var557X)))
 (=> $x262 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var557X) (_ bv0 32)))))
 ))
 (let (($x266 (forall ((input.ind-%var556X (_ BitVec 32)) )(let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var556X)))
 (= $x262 false)))
 ))
 (let (($x195 (and $x266 $x187)))
 (let (($x107 (= $x195 true)))
 (let (($x248 (forall ((input.ind-%var551X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var551X)))
 (=> $x235 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var551X) (_ bv0 32)))))
 ))
 (let (($x226 (forall ((input.ind-%var550X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var550X)))
 (= $x235 false)))
 ))
 (let (($x249 (and $x226 $x248)))
 (let (($x250 (= $x249 true)))
 (let ((?x201 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x202 (bvneg ?x201)))
 (let (($x203 (= ?x202 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let ((?x148 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x180 (bvneg ?x148)))
 (let (($x194 (= ?x180 input.dst.llvm-%n)))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let (($x183 (= ?x180 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x186 (= $x183 true)))
 (let (($x189 (= $x186 true)))
 (let (($x29 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x151 (= $x29 true)))
 (let (($x19 (= $x151 true)))
 (let (($x163 (= $x19 true)))
 (let (($x72 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x55 (= $x72 true)))
 (let (($x162 (= $x55 true)))
 (let (($x11 (= $x162 true)))
 (let ((?x114 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvadd symbol.1 ?x114)))
 (let ((?x169 (bvsub ?x125 ?x114)))
 (let (($x176 (ite (bvsge ?x114 (_ bv0 32)) (bvuge ?x125 ?x169) (bvult ?x125 ?x169))))
 (let ((?x146 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x159 (bvmul (_ bv4 64) ?x146)))
 (let ((?x15 ((_ extract 63 32) ?x159)))
 (let (($x133 (= (_ bv0 32) ?x15)))
 (let (($x25 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x142 (and (and (and true $x25) $x133) $x176)))
 (let (($x149 (= (bvand ?x125 (_ bv4294967292 32)) ?x125)))
 (let (($x115 (and $x149 $x142)))
 (let (($x144 (= true $x115)))
 (let (($x128 (=> $x35 $x144)))
 (let (($x175 (= $x128 true)))
 (let (($x80 (= $x175 true)))
 (let (($x119 (= $x80 true)))
 (let (($x122 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (= $x122 true)))
 (let (($x23 (= $x136 true)))
 (let (($x139 (= $x23 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (= $x123 true)))
 (let (($x166 (= $x66 true)))
 (let (($x38 (= $x166 true)))
 (let (($x129 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x152 (= $x129 true)))
 (let (($x140 (= $x152 true)))
 (let (($x160 (= $x140 true)))
 (let (($x7 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x58 (= $x7 true)))
 (let (($x174 (= $x58 true)))
 (let (($x85 (= $x174 true)))
 (let (($x110 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x150 (= $x110 true)))
 (let (($x167 (= $x150 true)))
 (let (($x106 (= $x167 true)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x22)))
 (let ((?x94 (bvand symbol.1 (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x94)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x173 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x39 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (and $x39 $x173)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x41 $x100)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x26 (and $x44 $x57)))
 (let (($x82 (not $x26)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x17 (and $x40 $x101)))
 (let (($x86 (and (not $x17) $x82)))
 (let (($x91 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x10 $x91)))
 (let (($x68 (not $x37)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x74 $x90)))
 (let (($x53 (and (not $x89) $x68)))
 (let (($x102 (and (and (and (and (and (and $x53 $x86) $x59) $x103) $x108) $x124) $x14)))
 (let (($x134 (and $x102 $x157)))
 (let (($x69 (= symbol.1 dst_symbol_addr.1)))
 (let (($x70 (and $x69 $x134)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x71 (or (bvugt input.memlabel-mem--symbol.1_begin ?x97) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x71) (or $x64 $x76)))))))
 (let (($x12 (and $x73 $x70)))
 (let (($x178 (= $x12 true)))
 (let (($x181 (= $x178 true)))
 (let (($x99 (= $x181 true)))
 (let (($x131 (and $x99 $x106)))
 (let (($x138 (and $x131 $x85)))
 (let (($x104 (and $x138 $x160)))
 (let (($x78 (and $x104 $x38)))
 (let (($x47 (and $x78 $x139)))
 (let (($x137 (and $x47 $x119)))
 (let (($x67 (and $x137 $x11)))
 (let (($x127 (and $x67 $x163)))
 (let (($x190 (and $x127 $x189)))
 (let (($x200 (and $x190 $x199)))
 (let (($x212 (and $x200 $x210)))
 (let (($x251 (and $x212 $x250)))
 (let (($x121 (and $x251 $x107)))
 (let (($x274 (and $x121 $x273)))
 (let (($x287 (and $x274 $x286)))
 (let (($x63 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x288 (and $x63 $x287)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x289 (and $x117 $x288)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x290 (and $x33 $x289)))
 (let (($x98 (and (bvule input.memlabel-mem--symbol.1_begin ?x125) (bvule (bvadd ?x125 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x92 (=> (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32))) (or false (or false $x98)))))
 (let (($x46 (=> (and $x35 (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x98)))))
 (let (($x291 (and $x46 $x290)))
 (let (($x298 (=> $x291 $x297)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x302 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x257 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x300 (bvmul (_ bv4294967295 32) ?x257)))
 (let ((?x301 (bvneg ?x300)))
 (let (($x303 (= ?x301 ?x302)))
 (let (($x304 (= $x303 true)))
 (let (($x193 (forall ((input.ind-%var593X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var593X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var593X) (_ bv0 32)))))
 ))
 (let (($x275 (forall ((input.ind-%var592X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var592X)))
 (= $x262 false)))
 ))
 (let (($x268 (and $x275 $x193)))
 (let (($x143 (= $x268 true)))
 (let (($x259 (forall ((input.ind-%var587X (_ BitVec 32)) )(let ((?x30 (bvadd symbol.1 (bvmul input.ind-%var587X (_ bv4 32)))))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x30))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x30 (_ bv2 32))) ?x227)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x30 (_ bv3 32))) ?x229)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var587X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var587X)))
 (=> $x225 (= ?x234 ?x224)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var586X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var586X) (bvult input.ind-%var586X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var586X)))
 (= $x225 $x294))))
 ))
 (let (($x205 (and $x296 $x259)))
 (let (($x281 (= $x205 true)))
 (let (($x274 (forall ((input.ind-%var581X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var581X)))
 (=> $x225 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var581X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var580X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var580X)))
 (= $x225 false)))
 ))
 (let (($x278 (and $x196 $x274)))
 (let (($x284 (= $x278 true)))
 (let (($x204 (forall ((input.ind-%var575X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var575X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var575X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var574X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var574X)))
 (= $x262 false)))
 ))
 (let (($x221 (and $x153 $x204)))
 (let (($x254 (= $x221 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x245)))
 (let (($x239 (= ?x226 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x199 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x67 (bvsub ?x96 ?x87)))
 (let (($x163 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x67) (bvult ?x96 ?x67))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x55 (bvmul (_ bv4 64) ?x72)))
 (let ((?x162 ((_ extract 63 32) ?x55)))
 (let (($x11 (= (_ bv0 32) ?x162)))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x148 (and (and (and true $x119) $x11) $x163)))
 (let (($x115 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x180 (and $x115 $x148)))
 (let (($x183 (= true $x180)))
 (let (($x130 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (=> $x130 $x183)))
 (let (($x189 (= $x186 true)))
 (let (($x190 (= $x189 true)))
 (let (($x194 (= $x190 true)))
 (let (($x154 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x154 true)))
 (let (($x169 (= $x182 true)))
 (let (($x145 (= $x169 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x146 (= $x179 true)))
 (let (($x159 (= $x146 true)))
 (let (($x15 (= $x159 true)))
 (let (($x177 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x93 (= $x177 true)))
 (let (($x155 (= $x93 true)))
 (let (($x25 (= $x155 true)))
 (let (($x47 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x105 (= $x47 true)))
 (let (($x5 (= $x105 true)))
 (let (($x149 (= $x5 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x122 (= $x78 true)))
 (let (($x136 (= $x122 true)))
 (let (($x23 (= $x136 true)))
 (let (($x123 (= $x130 true)))
 (let (($x66 (= $x123 true)))
 (let (($x166 (= $x66 true)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x150)))
 (let ((?x99 (bvand symbol.1 (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x99)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x157 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x157)))
 (let (($x102 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x70 (and $x102 $x134)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x14 $x70)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x84 $x173)))
 (let (($x108 (not $x100)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (and $x41 $x39)))
 (let (($x171 (and (not $x32) $x108)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x34 $x59)))
 (let (($x83 (not $x6)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x26 $x82)))
 (let (($x18 (and (not $x86) $x83)))
 (let (($x174 (and (and (and (and (and (and $x18 $x171) $x124) $x94) $x12) $x181) $x110)))
 (let (($x85 (and $x174 $x167)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x138 (and $x73 $x85)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x51 (or (bvugt input.memlabel-mem--symbol.1_begin ?x74) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x51) (or $x68 $x53)))))))
 (let (($x129 (and $x57 $x138)))
 (let (($x152 (= $x129 true)))
 (let (($x140 (= $x152 true)))
 (let (($x160 (= $x140 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x104 (and $x79 $x160)))
 (let (($x38 (and $x104 $x166)))
 (let (($x139 (and $x38 $x23)))
 (let (($x95 (and $x139 $x149)))
 (let (($x141 (and $x95 $x25)))
 (let (($x133 (and $x141 $x15)))
 (let (($x52 (and $x133 $x145)))
 (let (($x198 (and $x52 $x194)))
 (let (($x203 (and $x198 $x202)))
 (let (($x235 (and $x203 $x218)))
 (let (($x248 (and $x235 $x247)))
 (let (($x188 (and $x248 $x254)))
 (let (($x285 (and $x188 $x284)))
 (let (($x244 (and $x285 $x281)))
 (let (($x208 (and $x244 $x143)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and (not $x97) $x208)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x253 (and $x28 $x207)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x282 (and $x109 $x253)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x280 (and $x156 $x282)))
 (let (($x92 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x92)))))
 (let (($x125 (=> (and $x130 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x92)))))
 (let (($x283 (and $x125 $x280)))
 (let (($x305 (=> $x283 $x304)))
 (not $x305))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x302 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x257 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x300 (bvmul (_ bv4294967295 32) ?x257)))
 (let ((?x301 (bvneg ?x300)))
 (let (($x303 (= ?x301 ?x302)))
 (let (($x304 (= $x303 true)))
 (let (($x193 (forall ((input.ind-%var593X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var593X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var593X) (_ bv0 32)))))
 ))
 (let (($x275 (forall ((input.ind-%var592X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var592X)))
 (= $x262 false)))
 ))
 (let (($x268 (and $x275 $x193)))
 (let (($x143 (= $x268 true)))
 (let (($x259 (forall ((input.ind-%var587X (_ BitVec 32)) )(let ((?x30 (bvadd symbol.1 (bvmul input.ind-%var587X (_ bv4 32)))))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x30))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x30 (_ bv2 32))) ?x227)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x30 (_ bv3 32))) ?x229)))
 (let ((?x234 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var587X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var587X)))
 (=> $x225 (= ?x234 ?x224)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var586X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var586X) (bvult input.ind-%var586X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var586X)))
 (= $x225 $x294))))
 ))
 (let (($x205 (and $x296 $x259)))
 (let (($x281 (= $x205 true)))
 (let (($x274 (forall ((input.ind-%var581X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var581X)))
 (=> $x225 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var581X) (_ bv0 32)))))
 ))
 (let (($x196 (forall ((input.ind-%var580X (_ BitVec 32)) )(let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var580X)))
 (= $x225 false)))
 ))
 (let (($x278 (and $x196 $x274)))
 (let (($x284 (= $x278 true)))
 (let (($x204 (forall ((input.ind-%var575X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var575X)))
 (=> $x262 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var575X) (_ bv0 32)))))
 ))
 (let (($x153 (forall ((input.ind-%var574X (_ BitVec 32)) )(let (($x262 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var574X)))
 (= $x262 false)))
 ))
 (let (($x221 (and $x153 $x204)))
 (let (($x254 (= $x221 true)))
 (let ((?x245 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x245)))
 (let (($x239 (= ?x226 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x211 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x199 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x200 (= $x199 true)))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x67 (bvsub ?x96 ?x87)))
 (let (($x163 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x67) (bvult ?x96 ?x67))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x55 (bvmul (_ bv4 64) ?x72)))
 (let ((?x162 ((_ extract 63 32) ?x55)))
 (let (($x11 (= (_ bv0 32) ?x162)))
 (let (($x119 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x148 (and (and (and true $x119) $x11) $x163)))
 (let (($x115 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x180 (and $x115 $x148)))
 (let (($x183 (= true $x180)))
 (let (($x130 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (=> $x130 $x183)))
 (let (($x189 (= $x186 true)))
 (let (($x190 (= $x189 true)))
 (let (($x194 (= $x190 true)))
 (let (($x154 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x154 true)))
 (let (($x169 (= $x182 true)))
 (let (($x145 (= $x169 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x146 (= $x179 true)))
 (let (($x159 (= $x146 true)))
 (let (($x15 (= $x159 true)))
 (let (($x177 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x93 (= $x177 true)))
 (let (($x155 (= $x93 true)))
 (let (($x25 (= $x155 true)))
 (let (($x47 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x105 (= $x47 true)))
 (let (($x5 (= $x105 true)))
 (let (($x149 (= $x5 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x122 (= $x78 true)))
 (let (($x136 (= $x122 true)))
 (let (($x23 (= $x136 true)))
 (let (($x123 (= $x130 true)))
 (let (($x66 (= $x123 true)))
 (let (($x166 (= $x66 true)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x150)))
 (let ((?x99 (bvand symbol.1 (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x99)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x157 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x157)))
 (let (($x102 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x70 (and $x102 $x134)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x14 $x70)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x84 $x173)))
 (let (($x108 (not $x100)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (and $x41 $x39)))
 (let (($x171 (and (not $x32) $x108)))
 (let (($x59 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x34 $x59)))
 (let (($x83 (not $x6)))
 (let (($x82 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x26 $x82)))
 (let (($x18 (and (not $x86) $x83)))
 (let (($x174 (and (and (and (and (and (and $x18 $x171) $x124) $x94) $x12) $x181) $x110)))
 (let (($x85 (and $x174 $x167)))
 (let (($x73 (= symbol.1 dst_symbol_addr.1)))
 (let (($x138 (and $x73 $x85)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x51 (or (bvugt input.memlabel-mem--symbol.1_begin ?x74) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x51) (or $x68 $x53)))))))
 (let (($x129 (and $x57 $x138)))
 (let (($x152 (= $x129 true)))
 (let (($x140 (= $x152 true)))
 (let (($x160 (= $x140 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x104 (and $x79 $x160)))
 (let (($x38 (and $x104 $x166)))
 (let (($x139 (and $x38 $x23)))
 (let (($x95 (and $x139 $x149)))
 (let (($x141 (and $x95 $x25)))
 (let (($x133 (and $x141 $x15)))
 (let (($x52 (and $x133 $x145)))
 (let (($x198 (and $x52 $x194)))
 (let (($x203 (and $x198 $x202)))
 (let (($x235 (and $x203 $x218)))
 (let (($x248 (and $x235 $x247)))
 (let (($x188 (and $x248 $x254)))
 (let (($x285 (and $x188 $x284)))
 (let (($x244 (and $x285 $x281)))
 (let (($x208 (and $x244 $x143)))
 (let (($x97 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and (not $x97) $x208)))
 (let (($x28 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x253 (and $x28 $x207)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x282 (and $x109 $x253)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x280 (and $x156 $x282)))
 (let (($x92 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x50 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x92)))))
 (let (($x125 (=> (and $x130 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x92)))))
 (let (($x283 (and $x125 $x280)))
 (let (($x305 (=> $x283 $x304)))
 (not $x305))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x252 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x240 (bvule ?x252 (_ bv3 32))))
 (let (($x298 (= $x240 true)))
 (let (($x256 (= $x298 true)))
 (let (($x290 (forall ((input.ind-%var617X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var617X)))
 (=> $x107 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var617X) (_ bv0 32)))))
 ))
 (let (($x269 (forall ((input.ind-%var616X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var616X)))
 (= $x107 false)))
 ))
 (let (($x168 (and $x269 $x290)))
 (let (($x191 (= $x168 true)))
 (let (($x214 (forall ((input.ind-%var611X (_ BitVec 32)) )(let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var611X)))
 (=> $x295 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var611X) (_ bv0 32)))))
 ))
 (let (($x286 (forall ((input.ind-%var610X (_ BitVec 32)) )(let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var610X)))
 (= $x295 false)))
 ))
 (let (($x238 (and $x286 $x214)))
 (let (($x267 (= $x238 true)))
 (let (($x48 (forall ((input.ind-%var605X (_ BitVec 32)) )(let ((?x301 (bvadd symbol.1 (bvmul input.ind-%var605X (_ bv4 32)))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x301))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv2 32))) ?x305)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv3 32))) ?x43)))
 (let ((?x229 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var605X)))
 (let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var605X)))
 (=> $x295 (= ?x229 ?x260)))))))))
 ))
 (let (($x13 (forall ((input.ind-%var604X (_ BitVec 32)) )(let (($x164 (and (bvule (_ bv0 32) input.ind-%var604X) (bvult input.ind-%var604X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var604X)))
 (= $x295 $x164))))
 ))
 (let (($x195 (and $x13 $x48)))
 (let (($x111 (= $x195 true)))
 (let (($x278 (forall ((input.ind-%var599X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var599X)))
 (=> $x107 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var599X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var598X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var598X)))
 (= $x107 false)))
 ))
 (let (($x284 (and $x221 $x278)))
 (let (($x285 (= $x284 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x239 (bvneg ?x226)))
 (let (($x246 (= ?x239 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x210 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let (($x200 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x189 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x190 (= $x189 true)))
 (let (($x194 (= $x190 true)))
 (let (($x198 (= $x194 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x137)))
 (let ((?x119 (bvand symbol.1 (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x119)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let ((?x142 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x115 (= input.memlabel-mem--symbol.1_end ?x142)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x128 (and $x52 $x115)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x145 $x128)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x146 (and $x141 $x179)))
 (let (($x159 (not $x146)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x93 $x155)))
 (let (($x133 (and (not $x25) $x159)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x47 $x105)))
 (let (($x149 (not $x5)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x136 $x23)))
 (let (($x177 (and (not $x139) $x149)))
 (let (($x67 (and (and (and (and (and (and $x177 $x133) $x154) $x169) $x144) $x80) $x127)))
 (let (($x151 (and $x67 $x72)))
 (let (($x99 (= symbol.1 dst_symbol_addr.1)))
 (let (($x19 (and $x99 $x151)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x138 (or (bvugt input.memlabel-mem--symbol.1_begin ?x150) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x138) (or $x160 $x104)))))))
 (let (($x163 (and $x122 $x19)))
 (let (($x148 (= $x163 true)))
 (let (($x180 (= $x148 true)))
 (let (($x183 (= $x180 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x70 (= $x134 true)))
 (let (($x12 (= $x70 true)))
 (let (($x7 (= $x12 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x84 (bvsub ?x96 ?x87)))
 (let (($x171 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x84) (bvult ?x96 ?x84))))
 (let ((?x41 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x39 (bvmul (_ bv4 64) ?x41)))
 (let ((?x32 ((_ extract 63 32) ?x39)))
 (let (($x60 (= (_ bv0 32) ?x32)))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x131 (and (and (and true $x83) $x60) $x171)))
 (let (($x86 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x49 (and $x86 $x131)))
 (let (($x94 (= true $x49)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x219 $x94)))
 (let (($x14 (= $x9 true)))
 (let (($x102 (= $x14 true)))
 (let (($x22 (= $x102 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x54 (= $x17 true)))
 (let (($x57 (= $x54 true)))
 (let (($x77 (= $x57 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x79)))
 (let (($x89 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x69 (= ?x65 input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x219 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x90 (and $x76 $x74)))
 (let (($x91 (and $x90 $x10)))
 (let (($x101 (and $x91 $x40)))
 (let (($x73 (and $x101 $x77)))
 (let (($x157 (and $x73 $x22)))
 (let (($x178 (and $x157 $x7)))
 (let (($x186 (and $x178 $x183)))
 (let (($x199 (and $x186 $x198)))
 (let (($x211 (and $x199 $x203)))
 (let (($x245 (and $x211 $x235)))
 (let (($x251 (and $x245 $x248)))
 (let (($x293 (and $x251 $x285)))
 (let (($x233 (and $x293 $x111)))
 (let (($x271 (and $x233 $x267)))
 (let (($x197 (and $x271 $x191)))
 (let (($x277 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and (not $x277) $x197)))
 (let (($x81 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and $x81 $x184)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x63 $x258)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x209 (and $x117 $x291)))
 (let (($x113 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x156 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x113)))))
 (let (($x21 (=> (and $x219 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x113)))))
 (let (($x261 (and $x21 $x209)))
 (let (($x243 (=> $x261 $x256)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x252 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x240 (bvule ?x252 (_ bv3 32))))
 (let (($x298 (= $x240 true)))
 (let (($x256 (= $x298 true)))
 (let (($x290 (forall ((input.ind-%var617X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var617X)))
 (=> $x107 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var617X) (_ bv0 32)))))
 ))
 (let (($x269 (forall ((input.ind-%var616X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var616X)))
 (= $x107 false)))
 ))
 (let (($x168 (and $x269 $x290)))
 (let (($x191 (= $x168 true)))
 (let (($x214 (forall ((input.ind-%var611X (_ BitVec 32)) )(let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var611X)))
 (=> $x295 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var611X) (_ bv0 32)))))
 ))
 (let (($x286 (forall ((input.ind-%var610X (_ BitVec 32)) )(let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var610X)))
 (= $x295 false)))
 ))
 (let (($x238 (and $x286 $x214)))
 (let (($x267 (= $x238 true)))
 (let (($x48 (forall ((input.ind-%var605X (_ BitVec 32)) )(let ((?x301 (bvadd symbol.1 (bvmul input.ind-%var605X (_ bv4 32)))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x301))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv2 32))) ?x305)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x301 (_ bv3 32))) ?x43)))
 (let ((?x229 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var605X)))
 (let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var605X)))
 (=> $x295 (= ?x229 ?x260)))))))))
 ))
 (let (($x13 (forall ((input.ind-%var604X (_ BitVec 32)) )(let (($x164 (and (bvule (_ bv0 32) input.ind-%var604X) (bvult input.ind-%var604X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x295 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var604X)))
 (= $x295 $x164))))
 ))
 (let (($x195 (and $x13 $x48)))
 (let (($x111 (= $x195 true)))
 (let (($x278 (forall ((input.ind-%var599X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var599X)))
 (=> $x107 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var599X) (_ bv0 32)))))
 ))
 (let (($x221 (forall ((input.ind-%var598X (_ BitVec 32)) )(let (($x107 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var598X)))
 (= $x107 false)))
 ))
 (let (($x284 (and $x221 $x278)))
 (let (($x285 (= $x284 true)))
 (let ((?x226 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x239 (bvneg ?x226)))
 (let (($x246 (= ?x239 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x210 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let (($x200 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x201 (= $x200 true)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x189 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x190 (= $x189 true)))
 (let (($x194 (= $x190 true)))
 (let (($x198 (= $x194 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x137)))
 (let ((?x119 (bvand symbol.1 (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x119)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let ((?x142 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x115 (= input.memlabel-mem--symbol.1_end ?x142)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x128 (and $x52 $x115)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x145 $x128)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x146 (and $x141 $x179)))
 (let (($x159 (not $x146)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x93 $x155)))
 (let (($x133 (and (not $x25) $x159)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x47 $x105)))
 (let (($x149 (not $x5)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x136 $x23)))
 (let (($x177 (and (not $x139) $x149)))
 (let (($x67 (and (and (and (and (and (and $x177 $x133) $x154) $x169) $x144) $x80) $x127)))
 (let (($x151 (and $x67 $x72)))
 (let (($x99 (= symbol.1 dst_symbol_addr.1)))
 (let (($x19 (and $x99 $x151)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x138 (or (bvugt input.memlabel-mem--symbol.1_begin ?x150) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x138) (or $x160 $x104)))))))
 (let (($x163 (and $x122 $x19)))
 (let (($x148 (= $x163 true)))
 (let (($x180 (= $x148 true)))
 (let (($x183 (= $x180 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x70 (= $x134 true)))
 (let (($x12 (= $x70 true)))
 (let (($x7 (= $x12 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x84 (bvsub ?x96 ?x87)))
 (let (($x171 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x84) (bvult ?x96 ?x84))))
 (let ((?x41 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x39 (bvmul (_ bv4 64) ?x41)))
 (let ((?x32 ((_ extract 63 32) ?x39)))
 (let (($x60 (= (_ bv0 32) ?x32)))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x131 (and (and (and true $x83) $x60) $x171)))
 (let (($x86 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x49 (and $x86 $x131)))
 (let (($x94 (= true $x49)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x219 $x94)))
 (let (($x14 (= $x9 true)))
 (let (($x102 (= $x14 true)))
 (let (($x22 (= $x102 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x54 (= $x17 true)))
 (let (($x57 (= $x54 true)))
 (let (($x77 (= $x57 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x79)))
 (let (($x89 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x69 (= ?x65 input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x219 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x90 (and $x76 $x74)))
 (let (($x91 (and $x90 $x10)))
 (let (($x101 (and $x91 $x40)))
 (let (($x73 (and $x101 $x77)))
 (let (($x157 (and $x73 $x22)))
 (let (($x178 (and $x157 $x7)))
 (let (($x186 (and $x178 $x183)))
 (let (($x199 (and $x186 $x198)))
 (let (($x211 (and $x199 $x203)))
 (let (($x245 (and $x211 $x235)))
 (let (($x251 (and $x245 $x248)))
 (let (($x293 (and $x251 $x285)))
 (let (($x233 (and $x293 $x111)))
 (let (($x271 (and $x233 $x267)))
 (let (($x197 (and $x271 $x191)))
 (let (($x277 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x184 (and (not $x277) $x197)))
 (let (($x81 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (and $x81 $x184)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x291 (and $x63 $x258)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x209 (and $x117 $x291)))
 (let (($x113 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x156 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x113)))))
 (let (($x21 (=> (and $x219 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x113)))))
 (let (($x261 (and $x21 $x209)))
 (let (($x243 (=> $x261 $x256)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x120 (bvsle ?x255 (_ bv3 32))))
 (let (($x185 (= $x120 true)))
 (let (($x242 (= $x185 true)))
 (let (($x263 (forall ((input.ind-%var641X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var641X)))
 (=> $x27 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var641X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var640X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var640X)))
 (= $x27 false)))
 ))
 (let (($x232 (and $x294 $x263)))
 (let (($x188 (= $x232 true)))
 (let (($x193 (forall ((input.ind-%var635X (_ BitVec 32)) )(let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var635X)))
 (=> $x306 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var635X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var634X (_ BitVec 32)) )(let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var634X)))
 (= $x306 false)))
 ))
 (let (($x207 (and $x205 $x193)))
 (let (($x280 (= $x207 true)))
 (let (($x231 (forall ((input.ind-%var629X (_ BitVec 32)) )(let ((?x298 (bvadd symbol.1 (bvmul input.ind-%var629X (_ bv4 32)))))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x298))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv2 32))) ?x35)))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv3 32))) ?x296)))
 (let ((?x299 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var629X)))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var629X)))
 (=> $x306 (= ?x299 ?x196)))))))))
 ))
 (let (($x48 (forall ((input.ind-%var628X (_ BitVec 32)) )(let (($x265 (and (bvule (_ bv0 32) input.ind-%var628X) (bvult input.ind-%var628X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var628X)))
 (= $x306 $x265))))
 ))
 (let (($x227 (and $x48 $x231)))
 (let (($x292 (= $x227 true)))
 (let (($x228 (forall ((input.ind-%var623X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var623X)))
 (=> $x27 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var623X) (_ bv0 32)))))
 ))
 (let (($x284 (forall ((input.ind-%var622X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var622X)))
 (= $x27 false)))
 ))
 (let (($x300 (and $x284 $x228)))
 (let (($x301 (= $x300 true)))
 (let ((?x239 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x239)))
 (let (($x247 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x212 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x201 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x190 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x194 (= $x190 true)))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x80)))
 (let ((?x158 (bvand symbol.1 (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x158)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x52 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x176 (= input.memlabel-mem--symbol.1_end ?x52)))
 (let (($x11 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (and $x11 $x176)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x169 $x142)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x146 (and $x141 $x179)))
 (let (($x159 (not $x146)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x155 $x25)))
 (let (($x55 (and (not $x15) $x159)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x47 $x105)))
 (let (($x149 (not $x5)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x23 $x139)))
 (let (($x93 (and (not $x95) $x149)))
 (let (($x151 (and (and (and (and (and (and $x93 $x55) $x154) $x182) $x115) $x144) $x175)))
 (let (($x19 (and $x151 $x29)))
 (let (($x78 (= symbol.1 dst_symbol_addr.1)))
 (let (($x163 (and $x78 $x19)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x152 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x152) (or $x123 $x66)))))))
 (let (($x148 (and $x136 $x163)))
 (let (($x180 (= $x148 true)))
 (let (($x183 (= $x180 true)))
 (let (($x186 (= $x183 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x70 (= $x134 true)))
 (let (($x12 (= $x70 true)))
 (let (($x7 (= $x12 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x60 (bvsub ?x96 ?x87)))
 (let (($x100 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x60) (bvult ?x96 ?x60))))
 (let ((?x18 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x41 (bvmul (_ bv4 64) ?x18)))
 (let ((?x39 ((_ extract 63 32) ?x41)))
 (let (($x32 (= (_ bv0 32) ?x39)))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x131 (and (and (and true $x83) $x32) $x100)))
 (let (($x86 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x49 (and $x86 $x131)))
 (let (($x94 (= true $x49)))
 (let (($x165 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x165 $x94)))
 (let (($x14 (= $x9 true)))
 (let (($x102 (= $x14 true)))
 (let (($x22 (= $x102 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x54 (= $x17 true)))
 (let (($x57 (= $x54 true)))
 (let (($x77 (= $x57 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x79)))
 (let (($x89 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x69 (= ?x65 input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x165 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x90 (and $x76 $x74)))
 (let (($x91 (and $x90 $x10)))
 (let (($x101 (and $x91 $x40)))
 (let (($x73 (and $x101 $x77)))
 (let (($x157 (and $x73 $x22)))
 (let (($x178 (and $x157 $x7)))
 (let (($x189 (and $x178 $x186)))
 (let (($x200 (and $x189 $x199)))
 (let (($x210 (and $x200 $x211)))
 (let (($x226 (and $x210 $x245)))
 (let (($x153 (and $x226 $x251)))
 (let (($x75 (and $x153 $x301)))
 (let (($x230 (and $x75 $x292)))
 (let (($x288 (and $x230 $x280)))
 (let (($x16 (and $x288 $x188)))
 (let (($x187 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (and (not $x187) $x16)))
 (let (($x97 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (and $x97 $x250)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x31 $x135)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x289 (and $x112 $x257)))
 (let (($x125 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x117 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x125)))))
 (let (($x161 (=> (and $x165 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x125)))))
 (let (($x237 (and $x161 $x289)))
 (let (($x287 (=> $x237 $x242)))
 (not $x287))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x120 (bvsle ?x255 (_ bv3 32))))
 (let (($x185 (= $x120 true)))
 (let (($x242 (= $x185 true)))
 (let (($x263 (forall ((input.ind-%var641X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var641X)))
 (=> $x27 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var641X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var640X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var640X)))
 (= $x27 false)))
 ))
 (let (($x232 (and $x294 $x263)))
 (let (($x188 (= $x232 true)))
 (let (($x193 (forall ((input.ind-%var635X (_ BitVec 32)) )(let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var635X)))
 (=> $x306 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var635X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var634X (_ BitVec 32)) )(let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var634X)))
 (= $x306 false)))
 ))
 (let (($x207 (and $x205 $x193)))
 (let (($x280 (= $x207 true)))
 (let (($x231 (forall ((input.ind-%var629X (_ BitVec 32)) )(let ((?x298 (bvadd symbol.1 (bvmul input.ind-%var629X (_ bv4 32)))))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x298))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv2 32))) ?x35)))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x298 (_ bv3 32))) ?x296)))
 (let ((?x299 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var629X)))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var629X)))
 (=> $x306 (= ?x299 ?x196)))))))))
 ))
 (let (($x48 (forall ((input.ind-%var628X (_ BitVec 32)) )(let (($x265 (and (bvule (_ bv0 32) input.ind-%var628X) (bvult input.ind-%var628X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var628X)))
 (= $x306 $x265))))
 ))
 (let (($x227 (and $x48 $x231)))
 (let (($x292 (= $x227 true)))
 (let (($x228 (forall ((input.ind-%var623X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var623X)))
 (=> $x27 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var623X) (_ bv0 32)))))
 ))
 (let (($x284 (forall ((input.ind-%var622X (_ BitVec 32)) )(let (($x27 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var622X)))
 (= $x27 false)))
 ))
 (let (($x300 (and $x284 $x228)))
 (let (($x301 (= $x300 true)))
 (let ((?x239 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x246 (bvneg ?x239)))
 (let (($x247 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x212 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x201 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x190 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x194 (= $x190 true)))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x80)))
 (let ((?x158 (bvand symbol.1 (_ bv3 32))))
 (let (($x175 (= (_ bv0 32) ?x158)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x52 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x176 (= input.memlabel-mem--symbol.1_end ?x52)))
 (let (($x11 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (and $x11 $x176)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x169 $x142)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x146 (and $x141 $x179)))
 (let (($x159 (not $x146)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x155 $x25)))
 (let (($x55 (and (not $x15) $x159)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x47 $x105)))
 (let (($x149 (not $x5)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x23 $x139)))
 (let (($x93 (and (not $x95) $x149)))
 (let (($x151 (and (and (and (and (and (and $x93 $x55) $x154) $x182) $x115) $x144) $x175)))
 (let (($x19 (and $x151 $x29)))
 (let (($x78 (= symbol.1 dst_symbol_addr.1)))
 (let (($x163 (and $x78 $x19)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x152 (or (bvugt input.memlabel-mem--symbol.1_begin ?x85) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x152) (or $x123 $x66)))))))
 (let (($x148 (and $x136 $x163)))
 (let (($x180 (= $x148 true)))
 (let (($x183 (= $x180 true)))
 (let (($x186 (= $x183 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x70 (= $x134 true)))
 (let (($x12 (= $x70 true)))
 (let (($x7 (= $x12 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x60 (bvsub ?x96 ?x87)))
 (let (($x100 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x60) (bvult ?x96 ?x60))))
 (let ((?x18 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x41 (bvmul (_ bv4 64) ?x18)))
 (let ((?x39 ((_ extract 63 32) ?x41)))
 (let (($x32 (= (_ bv0 32) ?x39)))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x131 (and (and (and true $x83) $x32) $x100)))
 (let (($x86 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x49 (and $x86 $x131)))
 (let (($x94 (= true $x49)))
 (let (($x165 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x165 $x94)))
 (let (($x14 (= $x9 true)))
 (let (($x102 (= $x14 true)))
 (let (($x22 (= $x102 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x54 (= $x17 true)))
 (let (($x57 (= $x54 true)))
 (let (($x77 (= $x57 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x79)))
 (let (($x89 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x69 (= ?x65 input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x165 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x90 (and $x76 $x74)))
 (let (($x91 (and $x90 $x10)))
 (let (($x101 (and $x91 $x40)))
 (let (($x73 (and $x101 $x77)))
 (let (($x157 (and $x73 $x22)))
 (let (($x178 (and $x157 $x7)))
 (let (($x189 (and $x178 $x186)))
 (let (($x200 (and $x189 $x199)))
 (let (($x210 (and $x200 $x211)))
 (let (($x226 (and $x210 $x245)))
 (let (($x153 (and $x226 $x251)))
 (let (($x75 (and $x153 $x301)))
 (let (($x230 (and $x75 $x292)))
 (let (($x288 (and $x230 $x280)))
 (let (($x16 (and $x288 $x188)))
 (let (($x187 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x250 (and (not $x187) $x16)))
 (let (($x97 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x135 (and $x97 $x250)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x31 $x135)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x289 (and $x112 $x257)))
 (let (($x125 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x117 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x125)))))
 (let (($x161 (=> (and $x165 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x125)))))
 (let (($x237 (and $x161 $x289)))
 (let (($x287 (=> $x237 $x242)))
 (not $x287))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x282 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x244 (bvsge ?x282 (_ bv0 32))))
 (let (($x249 (= $x244 true)))
 (let (($x234 (= $x249 true)))
 (let (($x266 (forall ((input.ind-%var665X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var665X)))
 (=> $x241 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var665X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var664X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var664X)))
 (= $x241 false)))
 ))
 (let (($x305 (and $x268 $x266)))
 (let (($x293 (= $x305 true)))
 (let (($x290 (forall ((input.ind-%var659X (_ BitVec 32)) )(let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var659X)))
 (=> $x132 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var659X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var658X (_ BitVec 32)) )(let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var658X)))
 (= $x132 false)))
 ))
 (let (($x184 (and $x238 $x290)))
 (let (($x209 (= $x184 true)))
 (let (($x195 (forall ((input.ind-%var653X (_ BitVec 32)) )(let ((?x185 (bvadd symbol.1 (bvmul input.ind-%var653X (_ bv4 32)))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x185))))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv2 32))) ?x130)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv3 32))) ?x20)))
 (let ((?x259 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var653X)))
 (let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var653X)))
 (=> $x132 (= ?x259 ?x223)))))))))
 ))
 (let (($x231 (forall ((input.ind-%var652X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var652X) (bvult input.ind-%var652X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var652X)))
 (= $x132 $x254))))
 ))
 (let (($x233 (and $x231 $x195)))
 (let (($x192 (= $x233 true)))
 (let (($x56 (forall ((input.ind-%var647X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var647X)))
 (=> $x241 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var647X) (_ bv0 32)))))
 ))
 (let (($x300 (forall ((input.ind-%var646X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var646X)))
 (= $x241 false)))
 ))
 (let (($x240 (and $x300 $x56)))
 (let (($x298 (= $x240 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x246)))
 (let (($x248 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x248 true)))
 (let (($x153 (= $x251 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let (($x202 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x194 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let (($x200 (= $x199 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x144)))
 (let ((?x137 (bvand symbol.1 (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x137)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x11 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x145 (= input.memlabel-mem--symbol.1_end ?x11)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (and $x67 $x145)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x182 $x52)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x146 (and $x141 $x179)))
 (let (($x159 (not $x146)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x25 $x15)))
 (let (($x119 (and (not $x133) $x159)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x47 $x105)))
 (let (($x149 (not $x5)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x139 $x95)))
 (let (($x155 (and (not $x177) $x149)))
 (let (($x19 (and (and (and (and (and (and $x155 $x119) $x154) $x162) $x176) $x115) $x128)))
 (let (($x163 (and $x19 $x72)))
 (let (($x99 (= symbol.1 dst_symbol_addr.1)))
 (let (($x148 (and $x99 $x163)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x140 (or (bvugt input.memlabel-mem--symbol.1_begin ?x129) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x140) (or $x166 $x38)))))))
 (let (($x180 (and $x23 $x148)))
 (let (($x183 (= $x180 true)))
 (let (($x186 (= $x183 true)))
 (let (($x189 (= $x186 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x70 (= $x134 true)))
 (let (($x12 (= $x70 true)))
 (let (($x7 (= $x12 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x32 (bvsub ?x96 ?x87)))
 (let (($x173 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x32) (bvult ?x96 ?x32))))
 (let ((?x106 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x18 (bvmul (_ bv4 64) ?x106)))
 (let ((?x41 ((_ extract 63 32) ?x18)))
 (let (($x39 (= (_ bv0 32) ?x41)))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x131 (and (and (and true $x83) $x39) $x173)))
 (let (($x86 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x49 (and $x86 $x131)))
 (let (($x94 (= true $x49)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x114 $x94)))
 (let (($x14 (= $x9 true)))
 (let (($x102 (= $x14 true)))
 (let (($x22 (= $x102 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x54 (= $x17 true)))
 (let (($x57 (= $x54 true)))
 (let (($x77 (= $x57 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x79)))
 (let (($x89 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x69 (= ?x65 input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x114 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x90 (and $x76 $x74)))
 (let (($x91 (and $x90 $x10)))
 (let (($x101 (and $x91 $x40)))
 (let (($x73 (and $x101 $x77)))
 (let (($x157 (and $x73 $x22)))
 (let (($x178 (and $x157 $x7)))
 (let (($x190 (and $x178 $x189)))
 (let (($x201 (and $x190 $x200)))
 (let (($x212 (and $x201 $x210)))
 (let (($x239 (and $x212 $x226)))
 (let (($x221 (and $x239 $x153)))
 (let (($x224 (and $x221 $x298)))
 (let (($x303 (and $x224 $x192)))
 (let (($x253 (and $x303 $x209)))
 (let (($x116 (and $x253 $x293)))
 (let (($x283 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x270 (and (not $x283) $x116)))
 (let (($x277 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x277 $x270)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x252 (and $x28 $x111)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x208 (and $x109 $x252)))
 (let (($x21 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x112 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x21)))))
 (let (($x98 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x21)))))
 (let (($x217 (and $x98 $x208)))
 (let (($x236 (=> $x217 $x234)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x282 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x244 (bvsge ?x282 (_ bv0 32))))
 (let (($x249 (= $x244 true)))
 (let (($x234 (= $x249 true)))
 (let (($x266 (forall ((input.ind-%var665X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var665X)))
 (=> $x241 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var665X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var664X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var664X)))
 (= $x241 false)))
 ))
 (let (($x305 (and $x268 $x266)))
 (let (($x293 (= $x305 true)))
 (let (($x290 (forall ((input.ind-%var659X (_ BitVec 32)) )(let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var659X)))
 (=> $x132 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var659X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var658X (_ BitVec 32)) )(let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var658X)))
 (= $x132 false)))
 ))
 (let (($x184 (and $x238 $x290)))
 (let (($x209 (= $x184 true)))
 (let (($x195 (forall ((input.ind-%var653X (_ BitVec 32)) )(let ((?x185 (bvadd symbol.1 (bvmul input.ind-%var653X (_ bv4 32)))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x185))))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv2 32))) ?x130)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x185 (_ bv3 32))) ?x20)))
 (let ((?x259 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var653X)))
 (let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var653X)))
 (=> $x132 (= ?x259 ?x223)))))))))
 ))
 (let (($x231 (forall ((input.ind-%var652X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var652X) (bvult input.ind-%var652X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x132 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var652X)))
 (= $x132 $x254))))
 ))
 (let (($x233 (and $x231 $x195)))
 (let (($x192 (= $x233 true)))
 (let (($x56 (forall ((input.ind-%var647X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var647X)))
 (=> $x241 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var647X) (_ bv0 32)))))
 ))
 (let (($x300 (forall ((input.ind-%var646X (_ BitVec 32)) )(let (($x241 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var646X)))
 (= $x241 false)))
 ))
 (let (($x240 (and $x300 $x56)))
 (let (($x298 (= $x240 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x246)))
 (let (($x248 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x251 (= $x248 true)))
 (let (($x153 (= $x251 true)))
 (let (($x218 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let (($x202 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x194 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x198 (= $x194 true)))
 (let (($x199 (= $x198 true)))
 (let (($x200 (= $x199 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x144)))
 (let ((?x137 (bvand symbol.1 (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x137)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x11 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x145 (= input.memlabel-mem--symbol.1_end ?x11)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (and $x67 $x145)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x182 $x52)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x146 (and $x141 $x179)))
 (let (($x159 (not $x146)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x133 (and $x25 $x15)))
 (let (($x119 (and (not $x133) $x159)))
 (let (($x105 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x47 $x105)))
 (let (($x149 (not $x5)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x139 $x95)))
 (let (($x155 (and (not $x177) $x149)))
 (let (($x19 (and (and (and (and (and (and $x155 $x119) $x154) $x162) $x176) $x115) $x128)))
 (let (($x163 (and $x19 $x72)))
 (let (($x99 (= symbol.1 dst_symbol_addr.1)))
 (let (($x148 (and $x99 $x163)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x140 (or (bvugt input.memlabel-mem--symbol.1_begin ?x129) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x140) (or $x166 $x38)))))))
 (let (($x180 (and $x23 $x148)))
 (let (($x183 (= $x180 true)))
 (let (($x186 (= $x183 true)))
 (let (($x189 (= $x186 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x70 (= $x134 true)))
 (let (($x12 (= $x70 true)))
 (let (($x7 (= $x12 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x32 (bvsub ?x96 ?x87)))
 (let (($x173 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x32) (bvult ?x96 ?x32))))
 (let ((?x106 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x18 (bvmul (_ bv4 64) ?x106)))
 (let ((?x41 ((_ extract 63 32) ?x18)))
 (let (($x39 (= (_ bv0 32) ?x41)))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x131 (and (and (and true $x83) $x39) $x173)))
 (let (($x86 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x49 (and $x86 $x131)))
 (let (($x94 (= true $x49)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x114 $x94)))
 (let (($x14 (= $x9 true)))
 (let (($x102 (= $x14 true)))
 (let (($x22 (= $x102 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x54 (= $x17 true)))
 (let (($x57 (= $x54 true)))
 (let (($x77 (= $x57 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x79)))
 (let (($x89 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x69 (= ?x65 input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x114 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x90 (and $x76 $x74)))
 (let (($x91 (and $x90 $x10)))
 (let (($x101 (and $x91 $x40)))
 (let (($x73 (and $x101 $x77)))
 (let (($x157 (and $x73 $x22)))
 (let (($x178 (and $x157 $x7)))
 (let (($x190 (and $x178 $x189)))
 (let (($x201 (and $x190 $x200)))
 (let (($x212 (and $x201 $x210)))
 (let (($x239 (and $x212 $x226)))
 (let (($x221 (and $x239 $x153)))
 (let (($x224 (and $x221 $x298)))
 (let (($x303 (and $x224 $x192)))
 (let (($x253 (and $x303 $x209)))
 (let (($x116 (and $x253 $x293)))
 (let (($x283 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x270 (and (not $x283) $x116)))
 (let (($x277 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x111 (and $x277 $x270)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x252 (and $x28 $x111)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x208 (and $x109 $x252)))
 (let (($x21 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x112 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x21)))))
 (let (($x98 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x21)))))
 (let (($x217 (and $x98 $x208)))
 (let (($x236 (=> $x217 $x234)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x271 (bvule ?x291 (_ bv3 32))))
 (let (($x262 (= $x271 true)))
 (let (($x164 (= $x262 true)))
 (let (($x297 (forall ((input.ind-%var689X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var689X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var689X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var688X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var688X)))
 (= $x260 false)))
 ))
 (let (($x35 (and $x168 $x297)))
 (let (($x75 (= $x35 true)))
 (let (($x263 (forall ((input.ind-%var683X (_ BitVec 32)) )(let ((?x243 (bvadd symbol.1 (bvmul input.ind-%var683X (_ bv4 32)))))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x193)))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x257)))
 (let ((?x285 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var683X)))
 (let (($x33 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var683X)))
 (=> $x33 (= ?x285 ?x288)))))))))
 ))
 (let (($x111 (forall ((input.ind-%var682X (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) input.ind-%var682X) (bvult input.ind-%var682X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x33 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var682X)))
 (= $x33 $x116))))
 ))
 (let (($x250 (and $x111 $x263)))
 (let (($x289 (= $x250 true)))
 (let (($x214 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x33 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var677X)))
 (=> $x33 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var677X) (_ bv0 32)))))
 ))
 (let (($x242 (forall ((input.ind-%var676X (_ BitVec 32)) )(let (($x33 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var676X)))
 (= $x33 false)))
 ))
 (let (($x238 (and $x242 $x214)))
 (let (($x269 (= $x238 true)))
 (let (($x275 (forall ((input.ind-%var671X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var671X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var671X) (_ bv0 32)))))
 ))
 (let (($x240 (forall ((input.ind-%var670X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var670X)))
 (= $x260 false)))
 ))
 (let (($x120 (and $x240 $x275)))
 (let (($x185 (= $x120 true)))
 (let ((?x247 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x247)))
 (let (($x251 (= ?x248 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x251 true)))
 (let (($x221 (= $x153 true)))
 (let (($x235 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let (($x239 (= $x226 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x183 (bvsub ?x96 ?x87)))
 (let (($x194 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x183) (bvult ?x96 ?x183))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x72)))
 (let ((?x148 ((_ extract 63 32) ?x163)))
 (let (($x180 (= (_ bv0 32) ?x148)))
 (let (($x19 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x200 (and (and (and true $x19) $x180) $x194)))
 (let (($x142 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x201 (and $x142 $x200)))
 (let (($x202 (= true $x201)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (=> $x114 $x202)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x67 true)))
 (let (($x11 (= $x169 true)))
 (let (($x145 (= $x11 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x175 true)))
 (let (($x162 (= $x127 true)))
 (let (($x151 (= $x162 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x159 (= $x146 true)))
 (let (($x119 (= $x159 true)))
 (let (($x158 (= $x119 true)))
 (let (($x133 (= $x114 true)))
 (let (($x55 (= $x133 true)))
 (let (($x141 (= $x55 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x174)))
 (let ((?x58 (bvand symbol.1 (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x58)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x123 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x104 (= input.memlabel-mem--symbol.1_end ?x123)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x166 (and $x160 $x104)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x152 $x166)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x134 $x70)))
 (let (($x7 (not $x12)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x102 $x22)))
 (let (($x85 (and (not $x157) $x7)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x173 $x131)))
 (let (($x94 (not $x49)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x32 $x124)))
 (let (($x14 (and (not $x60) $x94)))
 (let (($x93 (and (and (and (and (and (and $x14 $x85) $x138) $x129) $x66) $x122) $x136)))
 (let (($x47 (and $x93 $x23)))
 (let (($x77 (= symbol.1 dst_symbol_addr.1)))
 (let (($x105 (and $x77 $x47)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x103 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x103) (or $x84 $x108)))))))
 (let (($x5 (and $x171 $x105)))
 (let (($x149 (= $x5 true)))
 (let (($x155 (= $x149 true)))
 (let (($x25 (= $x155 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let (($x101 (= $x40 true)))
 (let (($x89 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x91 (= $x10 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x64)))
 (let (($x69 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x76 (= ?x88 input.dst.llvm-%n)))
 (let (($x62 (= $x76 true)))
 (let (($x79 (= $x62 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x65 (and $x42 $x79)))
 (let (($x90 (and $x65 $x74)))
 (let (($x68 (and $x90 $x91)))
 (let (($x17 (and $x68 $x101)))
 (let (($x15 (and $x17 $x25)))
 (let (($x179 (and $x15 $x141)))
 (let (($x154 (and $x179 $x158)))
 (let (($x182 (and $x154 $x151)))
 (let (($x52 (and $x182 $x145)))
 (let (($x218 (and $x52 $x212)))
 (let (($x246 (and $x218 $x239)))
 (let (($x284 (and $x246 $x221)))
 (let (($x286 (and $x284 $x185)))
 (let (($x267 (and $x286 $x269)))
 (let (($x258 (and $x267 $x289)))
 (let (($x121 (and $x258 $x75)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x204 (and (not $x261) $x121)))
 (let (($x187 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x292 (and $x187 $x204)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x255 (and $x81 $x292)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x63 $x255)))
 (let (($x161 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x109 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x161)))))
 (let (($x170 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x161)))))
 (let (($x274 (and $x170 $x197)))
 (let (($x216 (=> $x274 $x164)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x271 (bvule ?x291 (_ bv3 32))))
 (let (($x262 (= $x271 true)))
 (let (($x164 (= $x262 true)))
 (let (($x297 (forall ((input.ind-%var689X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var689X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var689X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var688X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var688X)))
 (= $x260 false)))
 ))
 (let (($x35 (and $x168 $x297)))
 (let (($x75 (= $x35 true)))
 (let (($x263 (forall ((input.ind-%var683X (_ BitVec 32)) )(let ((?x243 (bvadd symbol.1 (bvmul input.ind-%var683X (_ bv4 32)))))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x243))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv2 32))) ?x193)))
 (let ((?x288 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x243 (_ bv3 32))) ?x257)))
 (let ((?x285 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var683X)))
 (let (($x33 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var683X)))
 (=> $x33 (= ?x285 ?x288)))))))))
 ))
 (let (($x111 (forall ((input.ind-%var682X (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) input.ind-%var682X) (bvult input.ind-%var682X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x33 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var682X)))
 (= $x33 $x116))))
 ))
 (let (($x250 (and $x111 $x263)))
 (let (($x289 (= $x250 true)))
 (let (($x214 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x33 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var677X)))
 (=> $x33 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var677X) (_ bv0 32)))))
 ))
 (let (($x242 (forall ((input.ind-%var676X (_ BitVec 32)) )(let (($x33 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var676X)))
 (= $x33 false)))
 ))
 (let (($x238 (and $x242 $x214)))
 (let (($x269 (= $x238 true)))
 (let (($x275 (forall ((input.ind-%var671X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var671X)))
 (=> $x260 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var671X) (_ bv0 32)))))
 ))
 (let (($x240 (forall ((input.ind-%var670X (_ BitVec 32)) )(let (($x260 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var670X)))
 (= $x260 false)))
 ))
 (let (($x120 (and $x240 $x275)))
 (let (($x185 (= $x120 true)))
 (let ((?x247 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x247)))
 (let (($x251 (= ?x248 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x251 true)))
 (let (($x221 (= $x153 true)))
 (let (($x235 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let (($x239 (= $x226 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x183 (bvsub ?x96 ?x87)))
 (let (($x194 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x183) (bvult ?x96 ?x183))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x72)))
 (let ((?x148 ((_ extract 63 32) ?x163)))
 (let (($x180 (= (_ bv0 32) ?x148)))
 (let (($x19 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x200 (and (and (and true $x19) $x180) $x194)))
 (let (($x142 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x201 (and $x142 $x200)))
 (let (($x202 (= true $x201)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (=> $x114 $x202)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (= $x67 true)))
 (let (($x11 (= $x169 true)))
 (let (($x145 (= $x11 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x175 true)))
 (let (($x162 (= $x127 true)))
 (let (($x151 (= $x162 true)))
 (let (($x146 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x159 (= $x146 true)))
 (let (($x119 (= $x159 true)))
 (let (($x158 (= $x119 true)))
 (let (($x133 (= $x114 true)))
 (let (($x55 (= $x133 true)))
 (let (($x141 (= $x55 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x174)))
 (let ((?x58 (bvand symbol.1 (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x58)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x123 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x104 (= input.memlabel-mem--symbol.1_end ?x123)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x166 (and $x160 $x104)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x152 $x166)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x134 $x70)))
 (let (($x7 (not $x12)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x102 $x22)))
 (let (($x85 (and (not $x157) $x7)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x173 $x131)))
 (let (($x94 (not $x49)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x32 $x124)))
 (let (($x14 (and (not $x60) $x94)))
 (let (($x93 (and (and (and (and (and (and $x14 $x85) $x138) $x129) $x66) $x122) $x136)))
 (let (($x47 (and $x93 $x23)))
 (let (($x77 (= symbol.1 dst_symbol_addr.1)))
 (let (($x105 (and $x77 $x47)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x103 (or (bvugt input.memlabel-mem--symbol.1_begin ?x82) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x103) (or $x84 $x108)))))))
 (let (($x5 (and $x171 $x105)))
 (let (($x149 (= $x5 true)))
 (let (($x155 (= $x149 true)))
 (let (($x25 (= $x155 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let (($x101 (= $x40 true)))
 (let (($x89 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x91 (= $x10 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x64)))
 (let (($x69 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x76 (= ?x88 input.dst.llvm-%n)))
 (let (($x62 (= $x76 true)))
 (let (($x79 (= $x62 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x65 (and $x42 $x79)))
 (let (($x90 (and $x65 $x74)))
 (let (($x68 (and $x90 $x91)))
 (let (($x17 (and $x68 $x101)))
 (let (($x15 (and $x17 $x25)))
 (let (($x179 (and $x15 $x141)))
 (let (($x154 (and $x179 $x158)))
 (let (($x182 (and $x154 $x151)))
 (let (($x52 (and $x182 $x145)))
 (let (($x218 (and $x52 $x212)))
 (let (($x246 (and $x218 $x239)))
 (let (($x284 (and $x246 $x221)))
 (let (($x286 (and $x284 $x185)))
 (let (($x267 (and $x286 $x269)))
 (let (($x258 (and $x267 $x289)))
 (let (($x121 (and $x258 $x75)))
 (let (($x261 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x204 (and (not $x261) $x121)))
 (let (($x187 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x292 (and $x187 $x204)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x255 (and $x81 $x292)))
 (let (($x63 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x63 $x255)))
 (let (($x161 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x109 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x161)))))
 (let (($x170 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x161)))))
 (let (($x274 (and $x170 $x197)))
 (let (($x216 (=> $x274 $x164)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x208 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x230 (bvsle ?x208 (_ bv3 32))))
 (let (($x107 (= $x230 true)))
 (let (($x265 (= $x107 true)))
 (let (($x220 (forall ((input.ind-%var713X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var713X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var713X) (_ bv0 32)))))
 ))
 (let (($x304 (forall ((input.ind-%var712X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var712X)))
 (= $x196 false)))
 ))
 (let (($x287 (and $x304 $x220)))
 (let (($x224 (= $x287 true)))
 (let (($x205 (forall ((input.ind-%var707X (_ BitVec 32)) )(let ((?x217 (bvadd symbol.1 (bvmul input.ind-%var707X (_ bv4 32)))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x217))))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv2 32))) ?x209)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv3 32))) ?x232)))
 (let ((?x207 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var707X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var707X)))
 (=> $x270 (= ?x207 ?x43)))))))))
 ))
 (let (($x292 (forall ((input.ind-%var706X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var706X) (bvult input.ind-%var706X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var706X)))
 (= $x270 $x121))))
 ))
 (let (($x206 (and $x292 $x205)))
 (let (($x219 (= $x206 true)))
 (let (($x257 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var701X)))
 (=> $x270 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var700X)))
 (= $x270 false)))
 ))
 (let (($x288 (and $x243 $x257)))
 (let (($x294 (= $x288 true)))
 (let (($x238 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var695X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var695X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var694X)))
 (= $x196 false)))
 ))
 (let (($x269 (and $x120 $x238)))
 (let (($x267 (= $x269 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x248)))
 (let (($x153 (= ?x251 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x221 (= $x153 true)))
 (let (($x284 (= $x221 true)))
 (let (($x245 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x226 (= $x245 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x199 (bvsub ?x96 ?x87)))
 (let (($x190 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x199) (bvult ?x96 ?x199))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x72)))
 (let ((?x148 ((_ extract 63 32) ?x163)))
 (let (($x180 (= (_ bv0 32) ?x148)))
 (let (($x198 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x201 (and (and (and true $x198) $x180) $x190)))
 (let (($x29 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x202 (and $x29 $x201)))
 (let (($x203 (= true $x202)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (=> $x114 $x203)))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x169 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x11 (= $x169 true)))
 (let (($x145 (= $x11 true)))
 (let (($x52 (= $x145 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x162 (= $x127 true)))
 (let (($x151 (= $x162 true)))
 (let (($x182 (= $x151 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x119 (= $x159 true)))
 (let (($x158 (= $x119 true)))
 (let (($x154 (= $x158 true)))
 (let (($x55 (= $x114 true)))
 (let (($x141 (= $x55 true)))
 (let (($x179 (= $x141 true)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x122)))
 (let ((?x95 (bvand symbol.1 (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x95)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let ((?x160 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x140 (= input.memlabel-mem--symbol.1_end ?x160)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x123 (and $x139 $x140)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x129 $x123)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x134 $x70)))
 (let (($x7 (not $x12)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x178 (and $x22 $x157)))
 (let (($x167 (and (not $x178) $x7)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x173 $x131)))
 (let (($x94 (not $x49)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x124 $x60)))
 (let (($x102 (and (not $x9) $x94)))
 (let (($x47 (and (and (and (and (and (and $x102 $x167) $x138) $x78) $x104) $x66) $x38)))
 (let (($x105 (and $x47 $x177)))
 (let (($x100 (= symbol.1 dst_symbol_addr.1)))
 (let (($x5 (and $x100 $x105)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x34) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x106 $x18)))))))
 (let (($x149 (and $x32 $x5)))
 (let (($x155 (= $x149 true)))
 (let (($x25 (= $x155 true)))
 (let (($x15 (= $x25 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let (($x101 (= $x40 true)))
 (let (($x89 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x91 (= $x10 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x64)))
 (let (($x69 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x76 (= ?x88 input.dst.llvm-%n)))
 (let (($x62 (= $x76 true)))
 (let (($x79 (= $x62 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x65 (and $x42 $x79)))
 (let (($x90 (and $x65 $x74)))
 (let (($x68 (and $x90 $x91)))
 (let (($x17 (and $x68 $x101)))
 (let (($x133 (and $x17 $x15)))
 (let (($x146 (and $x133 $x179)))
 (let (($x175 (and $x146 $x154)))
 (let (($x67 (and $x175 $x182)))
 (let (($x176 (and $x67 $x52)))
 (let (($x235 (and $x176 $x218)))
 (let (($x247 (and $x235 $x246)))
 (let (($x300 (and $x247 $x284)))
 (let (($x293 (and $x300 $x267)))
 (let (($x280 (and $x293 $x294)))
 (let (($x236 (and $x280 $x219)))
 (let (($x225 (and $x236 $x224)))
 (let (($x237 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and (not $x237) $x225)))
 (let (($x283 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and $x283 $x266)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x97 $x20)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x227 (and $x31 $x233)))
 (let (($x98 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x63 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x98)))))
 (let (($x46 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x98)))))
 (let (($x229 (and $x46 $x227)))
 (let (($x143 (=> $x229 $x265)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x208 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x230 (bvsle ?x208 (_ bv3 32))))
 (let (($x107 (= $x230 true)))
 (let (($x265 (= $x107 true)))
 (let (($x220 (forall ((input.ind-%var713X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var713X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var713X) (_ bv0 32)))))
 ))
 (let (($x304 (forall ((input.ind-%var712X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var712X)))
 (= $x196 false)))
 ))
 (let (($x287 (and $x304 $x220)))
 (let (($x224 (= $x287 true)))
 (let (($x205 (forall ((input.ind-%var707X (_ BitVec 32)) )(let ((?x217 (bvadd symbol.1 (bvmul input.ind-%var707X (_ bv4 32)))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x217))))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv2 32))) ?x209)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x217 (_ bv3 32))) ?x232)))
 (let ((?x207 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var707X)))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var707X)))
 (=> $x270 (= ?x207 ?x43)))))))))
 ))
 (let (($x292 (forall ((input.ind-%var706X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var706X) (bvult input.ind-%var706X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var706X)))
 (= $x270 $x121))))
 ))
 (let (($x206 (and $x292 $x205)))
 (let (($x219 (= $x206 true)))
 (let (($x257 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var701X)))
 (=> $x270 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var701X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var700X (_ BitVec 32)) )(let (($x270 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var700X)))
 (= $x270 false)))
 ))
 (let (($x288 (and $x243 $x257)))
 (let (($x294 (= $x288 true)))
 (let (($x238 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var695X)))
 (=> $x196 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var695X) (_ bv0 32)))))
 ))
 (let (($x120 (forall ((input.ind-%var694X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var694X)))
 (= $x196 false)))
 ))
 (let (($x269 (and $x120 $x238)))
 (let (($x267 (= $x269 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x248)))
 (let (($x153 (= ?x251 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x221 (= $x153 true)))
 (let (($x284 (= $x221 true)))
 (let (($x245 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x226 (= $x245 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x199 (bvsub ?x96 ?x87)))
 (let (($x190 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x199) (bvult ?x96 ?x199))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x72)))
 (let ((?x148 ((_ extract 63 32) ?x163)))
 (let (($x180 (= (_ bv0 32) ?x148)))
 (let (($x198 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x201 (and (and (and true $x198) $x180) $x190)))
 (let (($x29 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x202 (and $x29 $x201)))
 (let (($x203 (= true $x202)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (=> $x114 $x203)))
 (let (($x210 (= $x211 true)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x169 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x11 (= $x169 true)))
 (let (($x145 (= $x11 true)))
 (let (($x52 (= $x145 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x162 (= $x127 true)))
 (let (($x151 (= $x162 true)))
 (let (($x182 (= $x151 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x119 (= $x159 true)))
 (let (($x158 (= $x119 true)))
 (let (($x154 (= $x158 true)))
 (let (($x55 (= $x114 true)))
 (let (($x141 (= $x55 true)))
 (let (($x179 (= $x141 true)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x122)))
 (let ((?x95 (bvand symbol.1 (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x95)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let ((?x160 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x140 (= input.memlabel-mem--symbol.1_end ?x160)))
 (let (($x139 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x123 (and $x139 $x140)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x129 $x123)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x134 $x70)))
 (let (($x7 (not $x12)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x178 (and $x22 $x157)))
 (let (($x167 (and (not $x178) $x7)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x173 $x131)))
 (let (($x94 (not $x49)))
 (let (($x60 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x124 $x60)))
 (let (($x102 (and (not $x9) $x94)))
 (let (($x47 (and (and (and (and (and (and $x102 $x167) $x138) $x78) $x104) $x66) $x38)))
 (let (($x105 (and $x47 $x177)))
 (let (($x100 (= symbol.1 dst_symbol_addr.1)))
 (let (($x5 (and $x100 $x105)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x34) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x106 $x18)))))))
 (let (($x149 (and $x32 $x5)))
 (let (($x155 (= $x149 true)))
 (let (($x25 (= $x155 true)))
 (let (($x15 (= $x25 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let (($x101 (= $x40 true)))
 (let (($x89 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x91 (= $x10 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x64)))
 (let (($x69 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x76 (= ?x88 input.dst.llvm-%n)))
 (let (($x62 (= $x76 true)))
 (let (($x79 (= $x62 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x65 (and $x42 $x79)))
 (let (($x90 (and $x65 $x74)))
 (let (($x68 (and $x90 $x91)))
 (let (($x17 (and $x68 $x101)))
 (let (($x133 (and $x17 $x15)))
 (let (($x146 (and $x133 $x179)))
 (let (($x175 (and $x146 $x154)))
 (let (($x67 (and $x175 $x182)))
 (let (($x176 (and $x67 $x52)))
 (let (($x235 (and $x176 $x218)))
 (let (($x247 (and $x235 $x246)))
 (let (($x300 (and $x247 $x284)))
 (let (($x293 (and $x300 $x267)))
 (let (($x280 (and $x293 $x294)))
 (let (($x236 (and $x280 $x219)))
 (let (($x225 (and $x236 $x224)))
 (let (($x237 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x266 (and (not $x237) $x225)))
 (let (($x283 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and $x283 $x266)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x97 $x20)))
 (let (($x31 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x227 (and $x31 $x233)))
 (let (($x98 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x63 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x98)))))
 (let (($x46 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x98)))))
 (let (($x229 (and $x46 $x227)))
 (let (($x143 (=> $x229 $x265)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x223 (bvsge ?x197 (_ bv0 32))))
 (let (($x268 (= $x223 true)))
 (let (($x254 (= $x268 true)))
 (let (($x13 (forall ((input.ind-%var737X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var737X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var737X) (_ bv0 32)))))
 ))
 (let (($x184 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var736X)))
 (= $x276 false)))
 ))
 (let (($x282 (and $x184 $x13)))
 (let (($x286 (= $x282 true)))
 (let (($x295 (forall ((input.ind-%var731X (_ BitVec 32)) )(let ((?x274 (bvadd symbol.1 (bvmul input.ind-%var731X (_ bv4 32)))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x274))))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv2 32))) ?x289)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv3 32))) ?x116)))
 (let ((?x253 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var731X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var731X)))
 (=> $x204 (= ?x253 ?x296)))))))))
 ))
 (let (($x20 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x225 (and (bvule (_ bv0 32) input.ind-%var730X) (bvult input.ind-%var730X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var730X)))
 (= $x204 $x225))))
 ))
 (let (($x30 (and $x20 $x295)))
 (let (($x213 (= $x30 true)))
 (let (($x232 (forall ((input.ind-%var725X (_ BitVec 32)) )(let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var725X)))
 (=> $x204 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var725X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var724X (_ BitVec 32)) )(let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var724X)))
 (= $x204 false)))
 ))
 (let (($x43 (and $x217 $x232)))
 (let (($x301 (= $x43 true)))
 (let (($x288 (forall ((input.ind-%var719X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var719X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var719X) (_ bv0 32)))))
 ))
 (let (($x269 (forall ((input.ind-%var718X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var718X)))
 (= $x276 false)))
 ))
 (let (($x294 (and $x269 $x288)))
 (let (($x280 (= $x294 true)))
 (let ((?x251 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x251)))
 (let (($x221 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x226 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x200 (bvsub ?x96 ?x87)))
 (let (($x189 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x200) (bvult ?x96 ?x200))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x72)))
 (let ((?x148 ((_ extract 63 32) ?x163)))
 (let (($x180 (= (_ bv0 32) ?x148)))
 (let (($x194 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x202 (and (and (and true $x194) $x180) $x189)))
 (let (($x137 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x203 (and $x137 $x202)))
 (let (($x211 (= true $x203)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (=> $x114 $x211)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let (($x11 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x11 true)))
 (let (($x52 (= $x145 true)))
 (let (($x176 (= $x52 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x151 (= $x162 true)))
 (let (($x182 (= $x151 true)))
 (let (($x67 (= $x182 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x158 (= $x119 true)))
 (let (($x154 (= $x158 true)))
 (let (($x175 (= $x154 true)))
 (let (($x141 (= $x114 true)))
 (let (($x179 (= $x141 true)))
 (let (($x146 (= $x179 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x66)))
 (let ((?x174 (bvand symbol.1 (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x174)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x139 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x152 (= input.memlabel-mem--symbol.1_end ?x139)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x160 (and $x93 $x152)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x78 $x160)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x134 $x70)))
 (let (($x7 (not $x12)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (and $x157 $x178)))
 (let (($x58 (and (not $x85) $x7)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x173 $x131)))
 (let (($x94 (not $x49)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x60 $x9)))
 (let (($x22 (and (not $x14) $x94)))
 (let (($x105 (and (and (and (and (and (and $x22 $x58) $x138) $x99) $x140) $x104) $x166)))
 (let (($x5 (and $x105 $x23)))
 (let (($x77 (= symbol.1 dst_symbol_addr.1)))
 (let (($x149 (and $x77 $x5)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x83 (or (bvugt input.memlabel-mem--symbol.1_begin ?x59) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x83) (or $x41 $x39)))))))
 (let (($x155 (and $x124 $x149)))
 (let (($x25 (= $x155 true)))
 (let (($x15 (= $x25 true)))
 (let (($x133 (= $x15 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let (($x101 (= $x40 true)))
 (let (($x89 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x91 (= $x10 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x64)))
 (let (($x69 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x76 (= ?x88 input.dst.llvm-%n)))
 (let (($x62 (= $x76 true)))
 (let (($x79 (= $x62 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x65 (and $x42 $x79)))
 (let (($x90 (and $x65 $x74)))
 (let (($x68 (and $x90 $x91)))
 (let (($x17 (and $x68 $x101)))
 (let (($x55 (and $x17 $x133)))
 (let (($x159 (and $x55 $x146)))
 (let (($x127 (and $x159 $x175)))
 (let (($x169 (and $x127 $x67)))
 (let (($x80 (and $x169 $x176)))
 (let (($x245 (and $x80 $x235)))
 (let (($x248 (and $x245 $x247)))
 (let (($x240 (and $x248 $x300)))
 (let (($x75 (and $x240 $x280)))
 (let (($x181 (and $x75 $x301)))
 (let (($x216 (and $x181 $x213)))
 (let (($x192 (and $x216 $x286)))
 (let (($x195 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (and (not $x195) $x192)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (and $x261 $x297)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x278 (and $x277 $x16)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x28 $x278)))
 (let (($x170 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x31 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x170)))))
 (let (($x50 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x170)))))
 (let (($x306 (and $x50 $x130)))
 (let (($x191 (=> $x306 $x254)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x223 (bvsge ?x197 (_ bv0 32))))
 (let (($x268 (= $x223 true)))
 (let (($x254 (= $x268 true)))
 (let (($x13 (forall ((input.ind-%var737X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var737X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var737X) (_ bv0 32)))))
 ))
 (let (($x184 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var736X)))
 (= $x276 false)))
 ))
 (let (($x282 (and $x184 $x13)))
 (let (($x286 (= $x282 true)))
 (let (($x295 (forall ((input.ind-%var731X (_ BitVec 32)) )(let ((?x274 (bvadd symbol.1 (bvmul input.ind-%var731X (_ bv4 32)))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x274))))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv2 32))) ?x289)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x274 (_ bv3 32))) ?x116)))
 (let ((?x253 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var731X)))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var731X)))
 (=> $x204 (= ?x253 ?x296)))))))))
 ))
 (let (($x20 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x225 (and (bvule (_ bv0 32) input.ind-%var730X) (bvult input.ind-%var730X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var730X)))
 (= $x204 $x225))))
 ))
 (let (($x30 (and $x20 $x295)))
 (let (($x213 (= $x30 true)))
 (let (($x232 (forall ((input.ind-%var725X (_ BitVec 32)) )(let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var725X)))
 (=> $x204 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var725X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var724X (_ BitVec 32)) )(let (($x204 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var724X)))
 (= $x204 false)))
 ))
 (let (($x43 (and $x217 $x232)))
 (let (($x301 (= $x43 true)))
 (let (($x288 (forall ((input.ind-%var719X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var719X)))
 (=> $x276 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var719X) (_ bv0 32)))))
 ))
 (let (($x269 (forall ((input.ind-%var718X (_ BitVec 32)) )(let (($x276 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var718X)))
 (= $x276 false)))
 ))
 (let (($x294 (and $x269 $x288)))
 (let (($x280 (= $x294 true)))
 (let ((?x251 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x251)))
 (let (($x221 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x226 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x200 (bvsub ?x96 ?x87)))
 (let (($x189 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x200) (bvult ?x96 ?x200))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x163 (bvmul (_ bv4 64) ?x72)))
 (let ((?x148 ((_ extract 63 32) ?x163)))
 (let (($x180 (= (_ bv0 32) ?x148)))
 (let (($x194 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x202 (and (and (and true $x194) $x180) $x189)))
 (let (($x137 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x203 (and $x137 $x202)))
 (let (($x211 (= true $x203)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (=> $x114 $x211)))
 (let (($x212 (= $x210 true)))
 (let (($x218 (= $x212 true)))
 (let (($x235 (= $x218 true)))
 (let (($x11 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x11 true)))
 (let (($x52 (= $x145 true)))
 (let (($x176 (= $x52 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x151 (= $x162 true)))
 (let (($x182 (= $x151 true)))
 (let (($x67 (= $x182 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x158 (= $x119 true)))
 (let (($x154 (= $x158 true)))
 (let (($x175 (= $x154 true)))
 (let (($x141 (= $x114 true)))
 (let (($x179 (= $x141 true)))
 (let (($x146 (= $x179 true)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x66)))
 (let ((?x174 (bvand symbol.1 (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x174)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x139 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x152 (= input.memlabel-mem--symbol.1_end ?x139)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x160 (and $x93 $x152)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x78 $x160)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x12 (and $x134 $x70)))
 (let (($x7 (not $x12)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (and $x157 $x178)))
 (let (($x58 (and (not $x85) $x7)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x173 $x131)))
 (let (($x94 (not $x49)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x60 $x9)))
 (let (($x22 (and (not $x14) $x94)))
 (let (($x105 (and (and (and (and (and (and $x22 $x58) $x138) $x99) $x140) $x104) $x166)))
 (let (($x5 (and $x105 $x23)))
 (let (($x77 (= symbol.1 dst_symbol_addr.1)))
 (let (($x149 (and $x77 $x5)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x83 (or (bvugt input.memlabel-mem--symbol.1_begin ?x59) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x83) (or $x41 $x39)))))))
 (let (($x155 (and $x124 $x149)))
 (let (($x25 (= $x155 true)))
 (let (($x15 (= $x25 true)))
 (let (($x133 (= $x15 true)))
 (let (($x37 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x53 (= $x37 true)))
 (let (($x40 (= $x53 true)))
 (let (($x101 (= $x40 true)))
 (let (($x89 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x91 (= $x10 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x64)))
 (let (($x69 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x76 (= ?x88 input.dst.llvm-%n)))
 (let (($x62 (= $x76 true)))
 (let (($x79 (= $x62 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x65 (and $x42 $x79)))
 (let (($x90 (and $x65 $x74)))
 (let (($x68 (and $x90 $x91)))
 (let (($x17 (and $x68 $x101)))
 (let (($x55 (and $x17 $x133)))
 (let (($x159 (and $x55 $x146)))
 (let (($x127 (and $x159 $x175)))
 (let (($x169 (and $x127 $x67)))
 (let (($x80 (and $x169 $x176)))
 (let (($x245 (and $x80 $x235)))
 (let (($x248 (and $x245 $x247)))
 (let (($x240 (and $x248 $x300)))
 (let (($x75 (and $x240 $x280)))
 (let (($x181 (and $x75 $x301)))
 (let (($x216 (and $x181 $x213)))
 (let (($x192 (and $x216 $x286)))
 (let (($x195 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (and (not $x195) $x192)))
 (let (($x261 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (and $x261 $x297)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x278 (and $x277 $x16)))
 (let (($x28 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x28 $x278)))
 (let (($x170 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x31 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x170)))))
 (let (($x50 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x170)))))
 (let (($x306 (and $x50 $x130)))
 (let (($x191 (=> $x306 $x254)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x227 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (bvule ?x227 input.dst.llvm-%n)))
 (let (($x168 (= $x150 true)))
 (let (($x285 (= $x168 true)))
 (let (($x48 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var761X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var761X) (_ bv0 32)))))
 ))
 (let (($x250 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var760X)))
 (= $x215 false)))
 ))
 (let (($x291 (and $x250 $x48)))
 (let (($x293 (= $x291 true)))
 (let (($x135 (forall ((input.ind-%var755X (_ BitVec 32)) )(let ((?x229 (bvadd symbol.1 (bvmul input.ind-%var755X (_ bv4 32)))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x229))))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv2 32))) ?x219)))
 (let ((?x242 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv3 32))) ?x121)))
 (let ((?x258 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var755X)))
 (let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var755X)))
 (=> $x266 (= ?x258 ?x242)))))))))
 ))
 (let (($x16 (forall ((input.ind-%var754X (_ BitVec 32)) )(let (($x192 (and (bvule (_ bv0 32) input.ind-%var754X) (bvult input.ind-%var754X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var754X)))
 (= $x266 $x192))))
 ))
 (let (($x302 (and $x16 $x135)))
 (let (($x147 (= $x302 true)))
 (let (($x116 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var749X)))
 (=> $x266 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x274 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var748X)))
 (= $x266 false)))
 ))
 (let (($x296 (and $x274 $x116)))
 (let (($x298 (= $x296 true)))
 (let (($x43 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var743X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var743X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var742X)))
 (= $x215 false)))
 ))
 (let (($x301 (and $x294 $x43)))
 (let (($x181 (= $x301 true)))
 (let ((?x153 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x221 (bvneg ?x153)))
 (let (($x284 (= ?x221 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x64)))
 (let (($x246 (= ?x88 input.dst.llvm-%n)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x218 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x72 (bvsub ?x96 ?x87)))
 (let (($x201 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x72) (bvult ?x96 ?x72))))
 (let ((?x198 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x194 (bvmul (_ bv4 64) ?x198)))
 (let ((?x190 ((_ extract 63 32) ?x194)))
 (let (($x144 (= (_ bv0 32) ?x190)))
 (let (($x115 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x199 (and (and (and true $x115) $x144) $x201)))
 (let (($x80 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x183 (and $x80 $x199)))
 (let (($x189 (= true $x183)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (=> $x114 $x189)))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x182 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x67 (= $x182 true)))
 (let (($x169 (= $x67 true)))
 (let (($x11 (= $x169 true)))
 (let (($x154 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (= $x154 true)))
 (let (($x127 (= $x175 true)))
 (let (($x162 (= $x127 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x146 (= $x179 true)))
 (let (($x159 (= $x146 true)))
 (let (($x119 (= $x159 true)))
 (let (($x15 (= $x114 true)))
 (let (($x133 (= $x15 true)))
 (let (($x55 (= $x133 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x160)))
 (let ((?x139 (bvand symbol.1 (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x139)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x136 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x99 (= input.memlabel-mem--symbol.1_end ?x136)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (and $x138 $x99)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x95 $x47)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (and $x157 $x178)))
 (let (($x167 (not $x85)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (and $x49 $x94)))
 (let (($x70 (and (not $x22) $x167)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x60 $x9)))
 (let (($x102 (not $x14)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x124 $x86)))
 (let (($x131 (and (not $x77) $x102)))
 (let (($x166 (and (and (and (and (and (and $x131 $x70) $x12) $x58) $x78) $x129) $x152)))
 (let (($x105 (and $x166 $x140)))
 (let (($x101 (= symbol.1 dst_symbol_addr.1)))
 (let (($x66 (and $x101 $x105)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x103) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x108 $x41)))))))
 (let (($x23 (and $x26 $x66)))
 (let (($x5 (= $x23 true)))
 (let (($x149 (= $x5 true)))
 (let (($x155 (= $x149 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x10 (= $x51 true)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x69 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x90 (= $x74 true)))
 (let (($x76 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (= $x76 true)))
 (let (($x79 (= $x62 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x65 (and $x42 $x79)))
 (let (($x89 (and $x65 $x90)))
 (let (($x37 (and $x89 $x68)))
 (let (($x25 (and $x37 $x155)))
 (let (($x141 (and $x25 $x55)))
 (let (($x158 (and $x141 $x119)))
 (let (($x151 (and $x158 $x162)))
 (let (($x145 (and $x151 $x11)))
 (let (($x212 (and $x145 $x210)))
 (let (($x239 (and $x212 $x226)))
 (let (($x251 (and $x239 $x248)))
 (let (($x120 (and $x251 $x240)))
 (let (($x224 (and $x120 $x181)))
 (let (($x110 (and $x224 $x298)))
 (let (($x143 (and $x110 $x147)))
 (let (($x264 (and $x143 $x293)))
 (let (($x27 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x220 (and (not $x27) $x264)))
 (let (($x237 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x237 $x220)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x290 (and $x187 $x234)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x188 (and $x81 $x290)))
 (let (($x46 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x28 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x46)))))
 (let (($x156 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x46)))))
 (let (($x132 (and $x156 $x188)))
 (let (($x126 (=> $x132 $x285)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x227 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (bvule ?x227 input.dst.llvm-%n)))
 (let (($x168 (= $x150 true)))
 (let (($x285 (= $x168 true)))
 (let (($x48 (forall ((input.ind-%var761X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var761X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var761X) (_ bv0 32)))))
 ))
 (let (($x250 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var760X)))
 (= $x215 false)))
 ))
 (let (($x291 (and $x250 $x48)))
 (let (($x293 (= $x291 true)))
 (let (($x135 (forall ((input.ind-%var755X (_ BitVec 32)) )(let ((?x229 (bvadd symbol.1 (bvmul input.ind-%var755X (_ bv4 32)))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x229))))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv2 32))) ?x219)))
 (let ((?x242 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv3 32))) ?x121)))
 (let ((?x258 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var755X)))
 (let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var755X)))
 (=> $x266 (= ?x258 ?x242)))))))))
 ))
 (let (($x16 (forall ((input.ind-%var754X (_ BitVec 32)) )(let (($x192 (and (bvule (_ bv0 32) input.ind-%var754X) (bvult input.ind-%var754X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var754X)))
 (= $x266 $x192))))
 ))
 (let (($x302 (and $x16 $x135)))
 (let (($x147 (= $x302 true)))
 (let (($x116 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var749X)))
 (=> $x266 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x274 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x266 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var748X)))
 (= $x266 false)))
 ))
 (let (($x296 (and $x274 $x116)))
 (let (($x298 (= $x296 true)))
 (let (($x43 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var743X)))
 (=> $x215 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var743X) (_ bv0 32)))))
 ))
 (let (($x294 (forall ((input.ind-%var742X (_ BitVec 32)) )(let (($x215 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var742X)))
 (= $x215 false)))
 ))
 (let (($x301 (and $x294 $x43)))
 (let (($x181 (= $x301 true)))
 (let ((?x153 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x221 (bvneg ?x153)))
 (let (($x284 (= ?x221 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let ((?x64 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x64)))
 (let (($x246 (= ?x88 input.dst.llvm-%n)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x218 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x235 (= $x218 true)))
 (let (($x245 (= $x235 true)))
 (let (($x226 (= $x245 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x72 (bvsub ?x96 ?x87)))
 (let (($x201 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x72) (bvult ?x96 ?x72))))
 (let ((?x198 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x194 (bvmul (_ bv4 64) ?x198)))
 (let ((?x190 ((_ extract 63 32) ?x194)))
 (let (($x144 (= (_ bv0 32) ?x190)))
 (let (($x115 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x199 (and (and (and true $x115) $x144) $x201)))
 (let (($x80 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x183 (and $x80 $x199)))
 (let (($x189 (= true $x183)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (=> $x114 $x189)))
 (let (($x203 (= $x202 true)))
 (let (($x211 (= $x203 true)))
 (let (($x210 (= $x211 true)))
 (let (($x182 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x67 (= $x182 true)))
 (let (($x169 (= $x67 true)))
 (let (($x11 (= $x169 true)))
 (let (($x154 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (= $x154 true)))
 (let (($x127 (= $x175 true)))
 (let (($x162 (= $x127 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x146 (= $x179 true)))
 (let (($x159 (= $x146 true)))
 (let (($x119 (= $x159 true)))
 (let (($x15 (= $x114 true)))
 (let (($x133 (= $x15 true)))
 (let (($x55 (= $x133 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x160)))
 (let ((?x139 (bvand symbol.1 (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x139)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x136 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x99 (= input.memlabel-mem--symbol.1_end ?x136)))
 (let (($x138 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (and $x138 $x99)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x95 $x47)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (and $x157 $x178)))
 (let (($x167 (not $x85)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x22 (and $x49 $x94)))
 (let (($x70 (and (not $x22) $x167)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x60 $x9)))
 (let (($x102 (not $x14)))
 (let (($x86 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x124 $x86)))
 (let (($x131 (and (not $x77) $x102)))
 (let (($x166 (and (and (and (and (and (and $x131 $x70) $x12) $x58) $x78) $x129) $x152)))
 (let (($x105 (and $x166 $x140)))
 (let (($x101 (= symbol.1 dst_symbol_addr.1)))
 (let (($x66 (and $x101 $x105)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x103) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x108 $x41)))))))
 (let (($x23 (and $x26 $x66)))
 (let (($x5 (= $x23 true)))
 (let (($x149 (= $x5 true)))
 (let (($x155 (= $x149 true)))
 (let (($x51 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x10 (= $x51 true)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x69 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x90 (= $x74 true)))
 (let (($x76 (= ?x88 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (= $x76 true)))
 (let (($x79 (= $x62 true)))
 (let (($x45 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x65 (and $x42 $x79)))
 (let (($x89 (and $x65 $x90)))
 (let (($x37 (and $x89 $x68)))
 (let (($x25 (and $x37 $x155)))
 (let (($x141 (and $x25 $x55)))
 (let (($x158 (and $x141 $x119)))
 (let (($x151 (and $x158 $x162)))
 (let (($x145 (and $x151 $x11)))
 (let (($x212 (and $x145 $x210)))
 (let (($x239 (and $x212 $x226)))
 (let (($x251 (and $x239 $x248)))
 (let (($x120 (and $x251 $x240)))
 (let (($x224 (and $x120 $x181)))
 (let (($x110 (and $x224 $x298)))
 (let (($x143 (and $x110 $x147)))
 (let (($x264 (and $x143 $x293)))
 (let (($x27 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x220 (and (not $x27) $x264)))
 (let (($x237 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x237 $x220)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x290 (and $x187 $x234)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x188 (and $x81 $x290)))
 (let (($x46 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x28 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x46)))))
 (let (($x156 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x46)))))
 (let (($x132 (and $x156 $x188)))
 (let (($x126 (=> $x132 $x285)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x356 (forall ((input.ind-%var797X (_ BitVec 32)) )(let ((?x306 (bvadd symbol.1 (bvmul input.ind-%var797X (_ bv4 32)))))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x46 (bvadd ?x96 (_ bv3 32))))
 (let ((?x323 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x96 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x326 (store ?x323 (bvadd ?x96 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (store ?x326 (bvadd ?x96 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x331 (store ?x329 ?x46 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x350 (concat (select ?x331 (bvadd ?x306 (_ bv2 32))) (concat (select ?x331 (bvadd ?x306 (_ bv1 32))) (select ?x331 ?x306)))))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var797X)))
 (let (($x311 (= input.ind-%var797X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x354 (= (ite $x311 input.spec-%var-i-0.L3%6%bbentry ?x236) (concat (select ?x331 (bvadd ?x306 (_ bv3 32))) ?x350))))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var797X)))
 (let (($x312 (or $x297 $x311)))
 (=> $x312 $x354))))))))))))))))
 ))
 (let (($x314 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x293 (bvule (_ bv0 32) input.ind-%var796X)))
 (let (($x310 (and $x293 (bvult input.ind-%var796X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x311 (= input.ind-%var796X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var796X)))
 (let (($x312 (or $x297 $x311)))
 (= $x312 $x310)))))))
 ))
 (let (($x357 (and $x314 $x356)))
 (let (($x130 (= true true)))
 (let (($x358 (and $x130 $x357)))
 (let (($x359 (= $x358 true)))
 (let (($x231 (forall ((input.ind-%var789X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var789X)))
 (=> $x252 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var789X) (_ bv0 32)))))
 ))
 (let (($x206 (forall ((input.ind-%var788X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var788X)))
 (= $x252 false)))
 ))
 (let (($x208 (and $x206 $x231)))
 (let (($x75 (= $x208 true)))
 (let (($x273 (forall ((input.ind-%var783X (_ BitVec 32)) )(let ((?x306 (bvadd symbol.1 (bvmul input.ind-%var783X (_ bv4 32)))))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x306))))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv2 32))) ?x213)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv3 32))) ?x225)))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var783X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var783X)))
 (=> $x297 (= ?x236 ?x243)))))))))
 ))
 (let (($x234 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x293 (bvule (_ bv0 32) input.ind-%var782X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var782X)))
 (= $x297 (and $x293 (bvult input.ind-%var782X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x256 (and $x234 $x273)))
 (let (($x281 (= $x256 true)))
 (let (($x121 (forall ((input.ind-%var777X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var777X)))
 (=> $x297 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var777X) (_ bv0 32)))))
 ))
 (let (($x229 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var776X)))
 (= $x297 false)))
 ))
 (let (($x242 (and $x229 $x121)))
 (let (($x185 (= $x242 true)))
 (let (($x296 (forall ((input.ind-%var771X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var771X)))
 (=> $x252 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var771X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var770X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var770X)))
 (= $x252 false)))
 ))
 (let (($x298 (and $x301 $x296)))
 (let (($x110 (= $x298 true)))
 (let ((?x221 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x284 (bvneg ?x221)))
 (let (($x300 (= ?x284 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x300 true)))
 (let (($x120 (= $x240 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let ((?x183 (bvand symbol.1 (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x183)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let ((?x163 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x72 (= input.memlabel-mem--symbol.1_end ?x163)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (and $x144 $x72)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x190 $x148)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x137 (and $x29 $x142)))
 (let (($x128 (not $x137)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (and $x52 $x176)))
 (let (($x186 (and (not $x80) $x128)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x151 $x182)))
 (let (($x169 (not $x67)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x175 $x127)))
 (let (($x145 (and (not $x162) $x169)))
 (let (($x245 (and (and (and (and (and (and $x145 $x186) $x19) $x194) $x180) $x199) $x189)))
 (let (($x226 (and $x245 $x203)))
 (let (($x140 (= symbol.1 dst_symbol_addr.1)))
 (let (($x239 (and $x140 $x226)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x155 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x155) (or $x55 $x141)))))))
 (let (($x246 (and $x154 $x239)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x93 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x129 (= $x93 true)))
 (let (($x174 (= $x129 true)))
 (let (($x139 (= $x174 true)))
 (let (($x136 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x99 (= $x136 true)))
 (let (($x47 (= $x99 true)))
 (let (($x78 (= $x47 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x134 (bvsub ?x96 ?x87)))
 (let (($x167 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x134) (bvult ?x96 ?x134))))
 (let ((?x131 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x49 (bvmul (_ bv4 64) ?x131)))
 (let ((?x94 ((_ extract 63 32) ?x49)))
 (let (($x22 (= (_ bv0 32) ?x94)))
 (let (($x14 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x12 (and (and (and true $x14) $x22) $x167)))
 (let (($x86 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x123 (and $x86 $x12)))
 (let (($x7 (= true $x123)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (=> $x230 $x7)))
 (let (($x104 (= $x58 true)))
 (let (($x95 (= $x104 true)))
 (let (($x138 (= $x95 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x39 true)))
 (let (($x57 (= $x171 true)))
 (let (($x26 (= $x57 true)))
 (let (($x83 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x83 true)))
 (let (($x106 (= $x108 true)))
 (let (($x41 (= $x106 true)))
 (let (($x103 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x100 (= $x103 true)))
 (let (($x59 (= $x100 true)))
 (let (($x6 (= $x59 true)))
 (let (($x68 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x37 (= $x68 true)))
 (let (($x17 (= $x37 true)))
 (let (($x34 (= $x17 true)))
 (let (($x90 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x89 (= $x90 true)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x65 (= $x230 true)))
 (let (($x69 (= $x65 true)))
 (let (($x44 (= $x69 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x74 (and $x79 $x44)))
 (let (($x91 (and $x74 $x10)))
 (let (($x32 (and $x91 $x34)))
 (let (($x84 (and $x32 $x6)))
 (let (($x18 (and $x84 $x41)))
 (let (($x40 (and $x18 $x26)))
 (let (($x38 (and $x40 $x138)))
 (let (($x177 (and $x38 $x78)))
 (let (($x152 (and $x177 $x139)))
 (let (($x153 (and $x152 $x251)))
 (let (($x269 (and $x153 $x120)))
 (let (($x286 (and $x269 $x110)))
 (let (($x111 (and $x286 $x185)))
 (let (($x191 (and $x111 $x281)))
 (let (($x241 (and $x191 $x75)))
 (let (($x228 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and (not $x228) $x241)))
 (let (($x195 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x195 $x13)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x263 (and $x283 $x164)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x97 $x263)))
 (let (($x50 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x50)))))
 (let (($x117 (=> (and $x230 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x50)))))
 (let (($x33 (and $x117 $x249)))
 (let (($x360 (=> $x33 $x359)))
 (not $x360))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x356 (forall ((input.ind-%var797X (_ BitVec 32)) )(let ((?x306 (bvadd symbol.1 (bvmul input.ind-%var797X (_ bv4 32)))))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x46 (bvadd ?x96 (_ bv3 32))))
 (let ((?x323 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x96 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x326 (store ?x323 (bvadd ?x96 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x329 (store ?x326 (bvadd ?x96 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x331 (store ?x329 ?x46 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x350 (concat (select ?x331 (bvadd ?x306 (_ bv2 32))) (concat (select ?x331 (bvadd ?x306 (_ bv1 32))) (select ?x331 ?x306)))))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var797X)))
 (let (($x311 (= input.ind-%var797X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x354 (= (ite $x311 input.spec-%var-i-0.L3%6%bbentry ?x236) (concat (select ?x331 (bvadd ?x306 (_ bv3 32))) ?x350))))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var797X)))
 (let (($x312 (or $x297 $x311)))
 (=> $x312 $x354))))))))))))))))
 ))
 (let (($x314 (forall ((input.ind-%var796X (_ BitVec 32)) )(let (($x293 (bvule (_ bv0 32) input.ind-%var796X)))
 (let (($x310 (and $x293 (bvult input.ind-%var796X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x311 (= input.ind-%var796X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var796X)))
 (let (($x312 (or $x297 $x311)))
 (= $x312 $x310)))))))
 ))
 (let (($x357 (and $x314 $x356)))
 (let (($x130 (= true true)))
 (let (($x358 (and $x130 $x357)))
 (let (($x359 (= $x358 true)))
 (let (($x231 (forall ((input.ind-%var789X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var789X)))
 (=> $x252 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var789X) (_ bv0 32)))))
 ))
 (let (($x206 (forall ((input.ind-%var788X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var788X)))
 (= $x252 false)))
 ))
 (let (($x208 (and $x206 $x231)))
 (let (($x75 (= $x208 true)))
 (let (($x273 (forall ((input.ind-%var783X (_ BitVec 32)) )(let ((?x306 (bvadd symbol.1 (bvmul input.ind-%var783X (_ bv4 32)))))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x306))))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv2 32))) ?x213)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x306 (_ bv3 32))) ?x225)))
 (let ((?x236 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var783X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var783X)))
 (=> $x297 (= ?x236 ?x243)))))))))
 ))
 (let (($x234 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x293 (bvule (_ bv0 32) input.ind-%var782X)))
 (let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var782X)))
 (= $x297 (and $x293 (bvult input.ind-%var782X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x256 (and $x234 $x273)))
 (let (($x281 (= $x256 true)))
 (let (($x121 (forall ((input.ind-%var777X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var777X)))
 (=> $x297 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var777X) (_ bv0 32)))))
 ))
 (let (($x229 (forall ((input.ind-%var776X (_ BitVec 32)) )(let (($x297 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var776X)))
 (= $x297 false)))
 ))
 (let (($x242 (and $x229 $x121)))
 (let (($x185 (= $x242 true)))
 (let (($x296 (forall ((input.ind-%var771X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var771X)))
 (=> $x252 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var771X) (_ bv0 32)))))
 ))
 (let (($x301 (forall ((input.ind-%var770X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var770X)))
 (= $x252 false)))
 ))
 (let (($x298 (and $x301 $x296)))
 (let (($x110 (= $x298 true)))
 (let ((?x221 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x284 (bvneg ?x221)))
 (let (($x300 (= ?x284 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x300 true)))
 (let (($x120 (= $x240 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let ((?x183 (bvand symbol.1 (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x183)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let ((?x163 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x72 (= input.memlabel-mem--symbol.1_end ?x163)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (and $x144 $x72)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x190 $x148)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x137 (and $x29 $x142)))
 (let (($x128 (not $x137)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (and $x52 $x176)))
 (let (($x186 (and (not $x80) $x128)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x151 $x182)))
 (let (($x169 (not $x67)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x175 $x127)))
 (let (($x145 (and (not $x162) $x169)))
 (let (($x245 (and (and (and (and (and (and $x145 $x186) $x19) $x194) $x180) $x199) $x189)))
 (let (($x226 (and $x245 $x203)))
 (let (($x140 (= symbol.1 dst_symbol_addr.1)))
 (let (($x239 (and $x140 $x226)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x155 (or (bvugt input.memlabel-mem--symbol.1_begin ?x23) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x155) (or $x55 $x141)))))))
 (let (($x246 (and $x154 $x239)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x93 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x129 (= $x93 true)))
 (let (($x174 (= $x129 true)))
 (let (($x139 (= $x174 true)))
 (let (($x136 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x99 (= $x136 true)))
 (let (($x47 (= $x99 true)))
 (let (($x78 (= $x47 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x134 (bvsub ?x96 ?x87)))
 (let (($x167 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x134) (bvult ?x96 ?x134))))
 (let ((?x131 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x49 (bvmul (_ bv4 64) ?x131)))
 (let ((?x94 ((_ extract 63 32) ?x49)))
 (let (($x22 (= (_ bv0 32) ?x94)))
 (let (($x14 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x12 (and (and (and true $x14) $x22) $x167)))
 (let (($x86 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x123 (and $x86 $x12)))
 (let (($x7 (= true $x123)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (=> $x230 $x7)))
 (let (($x104 (= $x58 true)))
 (let (($x95 (= $x104 true)))
 (let (($x138 (= $x95 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x39 true)))
 (let (($x57 (= $x171 true)))
 (let (($x26 (= $x57 true)))
 (let (($x83 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x108 (= $x83 true)))
 (let (($x106 (= $x108 true)))
 (let (($x41 (= $x106 true)))
 (let (($x103 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x100 (= $x103 true)))
 (let (($x59 (= $x100 true)))
 (let (($x6 (= $x59 true)))
 (let (($x68 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x37 (= $x68 true)))
 (let (($x17 (= $x37 true)))
 (let (($x34 (= $x17 true)))
 (let (($x90 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x89 (= $x90 true)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x65 (= $x230 true)))
 (let (($x69 (= $x65 true)))
 (let (($x44 (= $x69 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x74 (and $x79 $x44)))
 (let (($x91 (and $x74 $x10)))
 (let (($x32 (and $x91 $x34)))
 (let (($x84 (and $x32 $x6)))
 (let (($x18 (and $x84 $x41)))
 (let (($x40 (and $x18 $x26)))
 (let (($x38 (and $x40 $x138)))
 (let (($x177 (and $x38 $x78)))
 (let (($x152 (and $x177 $x139)))
 (let (($x153 (and $x152 $x251)))
 (let (($x269 (and $x153 $x120)))
 (let (($x286 (and $x269 $x110)))
 (let (($x111 (and $x286 $x185)))
 (let (($x191 (and $x111 $x281)))
 (let (($x241 (and $x191 $x75)))
 (let (($x228 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and (not $x228) $x241)))
 (let (($x195 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and $x195 $x13)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x263 (and $x283 $x164)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x97 $x263)))
 (let (($x50 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x81 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x50)))))
 (let (($x117 (=> (and $x230 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x50)))))
 (let (($x33 (and $x117 $x249)))
 (let (($x360 (=> $x33 $x359)))
 (not $x360))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x303 (forall ((input.ind-%var829X (_ BitVec 32)) )(let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var829X)))
 (let (($x20 (= input.ind-%var829X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var829X)))
 (let (($x305 (or $x220 $x20)))
 (=> $x305 (= (ite $x20 input.spec-%var-i-0.L3%6%bbentry ?x225) (_ bv0 32))))))))
 ))
 (let (($x244 (forall ((input.ind-%var828X (_ BitVec 32)) )(let (($x20 (= input.ind-%var828X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var828X)))
 (let (($x305 (or $x220 $x20)))
 (= $x305 false)))))
 ))
 (let (($x279 (and $x244 $x303)))
 (let (($x282 (= true true)))
 (let (($x332 (and $x282 $x279)))
 (let (($x307 (= $x332 true)))
 (let (($x266 (forall ((input.ind-%var821X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var821X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var821X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var820X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var820X)))
 (= $x255 false)))
 ))
 (let (($x107 (and $x16 $x266)))
 (let (($x82 (= $x107 true)))
 (let (($x358 (forall ((input.ind-%var815X (_ BitVec 32)) )(let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var815X)))
 (=> $x220 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var815X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var814X (_ BitVec 32)) )(let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var814X)))
 (= $x220 false)))
 ))
 (let (($x359 (and $x346 $x358)))
 (let (($x360 (= $x359 true)))
 (let (($x328 (forall ((input.ind-%var809X (_ BitVec 32)) )(let ((?x312 (bvadd symbol.1 (bvmul input.ind-%var809X (_ bv4 32)))))
 (let ((?x313 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x312))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv2 32))) ?x313)))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv3 32))) ?x322)))
 (let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var809X)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var809X)))
 (=> $x220 (= ?x225 ?x325)))))))))
 ))
 (let (($x238 (forall ((input.ind-%var808X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var808X) (bvult input.ind-%var808X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var808X)))
 (= $x220 $x216))))
 ))
 (let (($x327 (and $x238 $x328)))
 (let (($x329 (= $x327 true)))
 (let (($x242 (forall ((input.ind-%var803X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var803X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var803X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var802X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var802X)))
 (= $x255 false)))
 ))
 (let (($x185 (and $x298 $x242)))
 (let (($x111 (= $x185 true)))
 (let ((?x284 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x284)))
 (let (($x240 (= ?x300 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x240 true)))
 (let (($x269 (= $x120 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x153 (= $x251 true)))
 (let (($x202 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x199 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x235 (= $x199 true)))
 (let (($x183 (= $x235 true)))
 (let (($x189 (= $x183 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x211)))
 (let ((?x128 (bvand symbol.1 (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x128)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x176 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x80 (= input.memlabel-mem--symbol.1_end ?x176)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x115 (and $x145 $x80)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x169 $x115)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x175 (and $x160 $x140)))
 (let (($x127 (not $x175)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x154 (and $x159 $x119)))
 (let (($x11 (and (not $x154) $x127)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x15 $x55)))
 (let (($x141 (not $x133)))
 (let (($x155 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x149 $x155)))
 (let (($x146 (and (not $x25) $x141)))
 (let (($x144 (and (and (and (and (and (and $x146 $x11) $x151) $x67) $x29) $x137) $x186)))
 (let (($x200 (and $x144 $x19)))
 (let (($x95 (= symbol.1 dst_symbol_addr.1)))
 (let (($x163 (and $x95 $x200)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x136) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x174 $x139)))))))
 (let (($x72 (and $x5 $x163)))
 (let (($x148 (= $x72 true)))
 (let (($x180 (= $x148 true)))
 (let (($x218 (= $x180 true)))
 (let (($x85 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x167 (= $x85 true)))
 (let (($x12 (= $x167 true)))
 (let (($x123 (= $x12 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x173 (bvsub ?x96 ?x87)))
 (let (($x14 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x173) (bvult ?x96 ?x173))))
 (let ((?x40 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x40)))
 (let ((?x124 ((_ extract 63 32) ?x101)))
 (let (($x86 (= (_ bv0 32) ?x124)))
 (let (($x57 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x131 (and (and (and true $x57) $x86) $x14)))
 (let (($x106 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x49 (and $x106 $x131)))
 (let (($x94 (= true $x49)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (=> $x114 $x94)))
 (let (($x122 (= $x22 true)))
 (let (($x157 (= $x122 true)))
 (let (($x134 (= $x157 true)))
 (let (($x103 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (= $x103 true)))
 (let (($x59 (= $x100 true)))
 (let (($x6 (= $x59 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x17 (= $x37 true)))
 (let (($x34 (= $x17 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x79)))
 (let (($x89 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x69 (= ?x65 input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x114 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x90 (and $x76 $x74)))
 (let (($x91 (and $x90 $x10)))
 (let (($x32 (and $x91 $x34)))
 (let (($x84 (and $x32 $x6)))
 (let (($x178 (and $x84 $x134)))
 (let (($x7 (and $x178 $x123)))
 (let (($x201 (and $x7 $x218)))
 (let (($x245 (and $x201 $x189)))
 (let (($x246 (and $x245 $x239)))
 (let (($x221 (and $x246 $x153)))
 (let (($x294 (and $x221 $x269)))
 (let (($x293 (and $x294 $x111)))
 (let (($x330 (and $x293 $x329)))
 (let (($x361 (and $x330 $x360)))
 (let (($x290 (and $x361 $x82)))
 (let (($x56 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x56) $x290)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x288 (and $x27 $x215)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x135 (and $x261 $x288)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x147 (and $x277 $x135)))
 (let (($x156 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x97 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x156)))))
 (let (($x112 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x156)))))
 (let (($x143 (and $x112 $x147)))
 (let (($x333 (=> $x143 $x307)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x303 (forall ((input.ind-%var829X (_ BitVec 32)) )(let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var829X)))
 (let (($x20 (= input.ind-%var829X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var829X)))
 (let (($x305 (or $x220 $x20)))
 (=> $x305 (= (ite $x20 input.spec-%var-i-0.L3%6%bbentry ?x225) (_ bv0 32))))))))
 ))
 (let (($x244 (forall ((input.ind-%var828X (_ BitVec 32)) )(let (($x20 (= input.ind-%var828X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var828X)))
 (let (($x305 (or $x220 $x20)))
 (= $x305 false)))))
 ))
 (let (($x279 (and $x244 $x303)))
 (let (($x282 (= true true)))
 (let (($x332 (and $x282 $x279)))
 (let (($x307 (= $x332 true)))
 (let (($x266 (forall ((input.ind-%var821X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var821X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var821X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var820X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var820X)))
 (= $x255 false)))
 ))
 (let (($x107 (and $x16 $x266)))
 (let (($x82 (= $x107 true)))
 (let (($x358 (forall ((input.ind-%var815X (_ BitVec 32)) )(let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var815X)))
 (=> $x220 (= (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var815X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var814X (_ BitVec 32)) )(let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var814X)))
 (= $x220 false)))
 ))
 (let (($x359 (and $x346 $x358)))
 (let (($x360 (= $x359 true)))
 (let (($x328 (forall ((input.ind-%var809X (_ BitVec 32)) )(let ((?x312 (bvadd symbol.1 (bvmul input.ind-%var809X (_ bv4 32)))))
 (let ((?x313 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x312))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv2 32))) ?x313)))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x312 (_ bv3 32))) ?x322)))
 (let ((?x225 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var809X)))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var809X)))
 (=> $x220 (= ?x225 ?x325)))))))))
 ))
 (let (($x238 (forall ((input.ind-%var808X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var808X) (bvult input.ind-%var808X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x220 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var808X)))
 (= $x220 $x216))))
 ))
 (let (($x327 (and $x238 $x328)))
 (let (($x329 (= $x327 true)))
 (let (($x242 (forall ((input.ind-%var803X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var803X)))
 (=> $x255 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var803X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var802X (_ BitVec 32)) )(let (($x255 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var802X)))
 (= $x255 false)))
 ))
 (let (($x185 (and $x298 $x242)))
 (let (($x111 (= $x185 true)))
 (let ((?x284 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x284)))
 (let (($x240 (= ?x300 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (= $x240 true)))
 (let (($x269 (= $x120 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x153 (= $x251 true)))
 (let (($x202 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x199 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x235 (= $x199 true)))
 (let (($x183 (= $x235 true)))
 (let (($x189 (= $x183 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x211)))
 (let ((?x128 (bvand symbol.1 (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x128)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x176 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x80 (= input.memlabel-mem--symbol.1_end ?x176)))
 (let (($x145 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x115 (and $x145 $x80)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x169 $x115)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x175 (and $x160 $x140)))
 (let (($x127 (not $x175)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x154 (and $x159 $x119)))
 (let (($x11 (and (not $x154) $x127)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x15 $x55)))
 (let (($x141 (not $x133)))
 (let (($x155 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x149 $x155)))
 (let (($x146 (and (not $x25) $x141)))
 (let (($x144 (and (and (and (and (and (and $x146 $x11) $x151) $x67) $x29) $x137) $x186)))
 (let (($x200 (and $x144 $x19)))
 (let (($x95 (= symbol.1 dst_symbol_addr.1)))
 (let (($x163 (and $x95 $x200)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x78 (or (bvugt input.memlabel-mem--symbol.1_begin ?x136) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x78) (or $x174 $x139)))))))
 (let (($x72 (and $x5 $x163)))
 (let (($x148 (= $x72 true)))
 (let (($x180 (= $x148 true)))
 (let (($x218 (= $x180 true)))
 (let (($x85 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x167 (= $x85 true)))
 (let (($x12 (= $x167 true)))
 (let (($x123 (= $x12 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x173 (bvsub ?x96 ?x87)))
 (let (($x14 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x173) (bvult ?x96 ?x173))))
 (let ((?x40 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x40)))
 (let ((?x124 ((_ extract 63 32) ?x101)))
 (let (($x86 (= (_ bv0 32) ?x124)))
 (let (($x57 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x131 (and (and (and true $x57) $x86) $x14)))
 (let (($x106 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x49 (and $x106 $x131)))
 (let (($x94 (= true $x49)))
 (let (($x114 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (=> $x114 $x94)))
 (let (($x122 (= $x22 true)))
 (let (($x157 (= $x122 true)))
 (let (($x134 (= $x157 true)))
 (let (($x103 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (= $x103 true)))
 (let (($x59 (= $x100 true)))
 (let (($x6 (= $x59 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x17 (= $x37 true)))
 (let (($x34 (= $x17 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x79)))
 (let (($x89 (= ?x65 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x69 (= ?x65 input.dst.llvm-%n)))
 (let (($x44 (= $x69 true)))
 (let (($x74 (= $x44 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x114 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x90 (and $x76 $x74)))
 (let (($x91 (and $x90 $x10)))
 (let (($x32 (and $x91 $x34)))
 (let (($x84 (and $x32 $x6)))
 (let (($x178 (and $x84 $x134)))
 (let (($x7 (and $x178 $x123)))
 (let (($x201 (and $x7 $x218)))
 (let (($x245 (and $x201 $x189)))
 (let (($x246 (and $x245 $x239)))
 (let (($x221 (and $x246 $x153)))
 (let (($x294 (and $x221 $x269)))
 (let (($x293 (and $x294 $x111)))
 (let (($x330 (and $x293 $x329)))
 (let (($x361 (and $x330 $x360)))
 (let (($x290 (and $x361 $x82)))
 (let (($x56 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x56) $x290)))
 (let (($x27 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x288 (and $x27 $x215)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x135 (and $x261 $x288)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x147 (and $x277 $x135)))
 (let (($x156 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x97 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x156)))))
 (let (($x112 (=> (and $x114 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x156)))))
 (let (($x143 (and $x112 $x147)))
 (let (($x333 (=> $x143 $x307)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.ind-%var828X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x6d40e084)
  (define-fun input.ind-%var829X!1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4cc080c0)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4cc080c3)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x6d40e213)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4cc080c0)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x6d40e084)
  (define-fun symbol.1 () (_ BitVec 32)
    #x6d40e084)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000100) #x00100000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #x6d40e087 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x6d40e086 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x6d40e085 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x6d40e084 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) #x00000000 a!1)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x305c0284)
  (define-fun input.ind-%var829X!1 () (_ BitVec 32)
    #x00000100)
  (define-fun input.ind-%var828X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xa45c0000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x305c0287)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa45c018f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x305c0284)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xa45c0000)
  (define-fun symbol.1 () (_ BitVec 32)
    #xa45c0000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000100) #x00400000
      (let ((a!1 (concat (k!4 (bvadd #xa45c0003 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #xa45c0002 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #xa45c0001 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #xa45c0000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m-0.L3%6%bbentry.0.1 x!0) #x00000000 a!1))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x13 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x206 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x281 (bvmul (_ bv4294967295 32) ?x206)))
 (let ((?x231 (bvneg ?x281)))
 (let (($x249 (= ?x231 ?x13)))
 (let (($x348 (= $x249 true)))
 (let (($x278 (forall ((input.ind-%var882X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var882X)))
 (= $x233 false)))
 ))
 (let (($x295 (forall ((input.ind-%var883X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var883X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var883X) (_ bv0 32)))))
 ))
 (let (($x252 (and $x295 $x278)))
 (let (($x43 (= $x252 true)))
 (let (($x113 (forall ((input.ind-%var876X (_ BitVec 32)) )(let (($x341 (and (bvule (_ bv0 32) input.ind-%var876X) (bvult input.ind-%var876X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x314 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var876X)))
 (= $x314 $x341))))
 ))
 (let (($x244 (forall ((input.ind-%var877X (_ BitVec 32)) )(let ((?x266 (bvadd symbol.1 (bvmul input.ind-%var877X (_ bv4 32)))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x266))))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv2 32))) ?x215)))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv3 32))) ?x147)))
 (let ((?x310 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var877X)))
 (let (($x314 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var877X)))
 (=> $x314 (= ?x310 ?x20)))))))))
 ))
 (let (($x58 (and $x244 $x113)))
 (let (($x234 (= $x58 true)))
 (let (($x267 (forall ((input.ind-%var871X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var871X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var871X) (_ bv0 32)))))
 ))
 (let (($x185 (forall ((input.ind-%var870X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var870X)))
 (= $x233 false)))
 ))
 (let (($x311 (and $x185 $x267)))
 (let (($x312 (= $x311 true)))
 (let ((?x300 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x240 (bvneg ?x300)))
 (let (($x120 (= ?x240 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (= $x120 true)))
 (let (($x294 (= $x269 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x251 (= $x248 true)))
 (let (($x153 (= $x251 true)))
 (let (($x221 (= $x153 true)))
 (let (($x203 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x211 (bvsub ?x96 ?x87)))
 (let (($x72 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x211) (bvult ?x96 ?x211))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvmul (_ bv4 64) ?x190)))
 (let ((?x186 ((_ extract 63 32) ?x128)))
 (let (($x144 (= (_ bv0 32) ?x186)))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x218 (and (and (and true $x142) $x144) $x72)))
 (let (($x176 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x201 (and $x176 $x218)))
 (let (($x199 (= true $x201)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x235 (=> $x230 $x199)))
 (let (($x183 (= $x235 true)))
 (let (($x189 (= $x183 true)))
 (let (($x245 (= $x189 true)))
 (let (($x198 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x198 true)))
 (let (($x67 (= $x182 true)))
 (let (($x194 (= $x67 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x175 true)))
 (let (($x11 (= $x127 true)))
 (let (($x210 (= $x11 true)))
 (let (($x119 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x154 (= $x119 true)))
 (let (($x162 (= $x154 true)))
 (let (($x160 (= $x162 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x133 (= $x55 true)))
 (let (($x141 (= $x133 true)))
 (let (($x146 (= $x141 true)))
 (let (($x149 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x155 (= $x149 true)))
 (let (($x25 (= $x155 true)))
 (let (($x179 (= $x25 true)))
 (let (($x158 (= $x230 true)))
 (let (($x5 (= $x158 true)))
 (let (($x104 (= $x5 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x138)))
 (let ((?x123 (bvand symbol.1 (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x123)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x157 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x157)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x178 (and $x22 $x134)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x94 $x178)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x86 $x102)))
 (let (($x173 (not $x77)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x124 (and $x40 $x101)))
 (let (($x9 (and (not $x124) $x173)))
 (let (($x39 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x41 $x39)))
 (let (($x57 (not $x171)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x108 $x106)))
 (let (($x26 (and (not $x18) $x57)))
 (let (($x177 (and (and (and (and (and (and $x26 $x9) $x14) $x49) $x85) $x12) $x7)))
 (let (($x93 (and $x177 $x38)))
 (let (($x44 (= symbol.1 dst_symbol_addr.1)))
 (let (($x174 (and $x44 $x93)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x91 (or (bvugt input.memlabel-mem--symbol.1_begin ?x89) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x91) (or $x34 $x32)))))))
 (let (($x129 (and $x83 $x174)))
 (let (($x139 (= $x129 true)))
 (let (($x152 (= $x139 true)))
 (let (($x105 (= $x152 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x66 (and $x79 $x105)))
 (let (($x95 (and $x66 $x104)))
 (let (($x15 (and $x95 $x179)))
 (let (($x159 (and $x15 $x146)))
 (let (($x140 (and $x159 $x160)))
 (let (($x151 (and $x140 $x210)))
 (let (($x169 (and $x151 $x194)))
 (let (($x202 (and $x169 $x245)))
 (let (($x247 (and $x202 $x246)))
 (let (($x284 (and $x247 $x221)))
 (let (($x301 (and $x284 $x294)))
 (let (($x321 (and $x301 $x312)))
 (let (($x243 (and $x321 $x234)))
 (let (($x273 (and $x243 $x43)))
 (let (($x132 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and (not $x132) $x273)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (and $x228 $x164)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x237 $x263)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x241 (and $x187 $x75)))
 (let (($x117 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x277 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x117)))))
 (let (($x109 (=> (and $x230 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x117)))))
 (let (($x191 (and $x109 $x241)))
 (let (($x352 (=> $x191 $x348)))
 (not $x352)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x13 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x206 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x281 (bvmul (_ bv4294967295 32) ?x206)))
 (let ((?x231 (bvneg ?x281)))
 (let (($x249 (= ?x231 ?x13)))
 (let (($x348 (= $x249 true)))
 (let (($x278 (forall ((input.ind-%var882X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var882X)))
 (= $x233 false)))
 ))
 (let (($x295 (forall ((input.ind-%var883X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var883X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var883X) (_ bv0 32)))))
 ))
 (let (($x252 (and $x295 $x278)))
 (let (($x43 (= $x252 true)))
 (let (($x113 (forall ((input.ind-%var876X (_ BitVec 32)) )(let (($x341 (and (bvule (_ bv0 32) input.ind-%var876X) (bvult input.ind-%var876X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x314 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var876X)))
 (= $x314 $x341))))
 ))
 (let (($x244 (forall ((input.ind-%var877X (_ BitVec 32)) )(let ((?x266 (bvadd symbol.1 (bvmul input.ind-%var877X (_ bv4 32)))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x266))))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv2 32))) ?x215)))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x266 (_ bv3 32))) ?x147)))
 (let ((?x310 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var877X)))
 (let (($x314 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var877X)))
 (=> $x314 (= ?x310 ?x20)))))))))
 ))
 (let (($x58 (and $x244 $x113)))
 (let (($x234 (= $x58 true)))
 (let (($x267 (forall ((input.ind-%var871X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var871X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var871X) (_ bv0 32)))))
 ))
 (let (($x185 (forall ((input.ind-%var870X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var870X)))
 (= $x233 false)))
 ))
 (let (($x311 (and $x185 $x267)))
 (let (($x312 (= $x311 true)))
 (let ((?x300 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x240 (bvneg ?x300)))
 (let (($x120 (= ?x240 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x269 (= $x120 true)))
 (let (($x294 (= $x269 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x251 (= $x248 true)))
 (let (($x153 (= $x251 true)))
 (let (($x221 (= $x153 true)))
 (let (($x203 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x211 (bvsub ?x96 ?x87)))
 (let (($x72 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x211) (bvult ?x96 ?x211))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvmul (_ bv4 64) ?x190)))
 (let ((?x186 ((_ extract 63 32) ?x128)))
 (let (($x144 (= (_ bv0 32) ?x186)))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x218 (and (and (and true $x142) $x144) $x72)))
 (let (($x176 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x201 (and $x176 $x218)))
 (let (($x199 (= true $x201)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x235 (=> $x230 $x199)))
 (let (($x183 (= $x235 true)))
 (let (($x189 (= $x183 true)))
 (let (($x245 (= $x189 true)))
 (let (($x198 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x198 true)))
 (let (($x67 (= $x182 true)))
 (let (($x194 (= $x67 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x175 true)))
 (let (($x11 (= $x127 true)))
 (let (($x210 (= $x11 true)))
 (let (($x119 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x154 (= $x119 true)))
 (let (($x162 (= $x154 true)))
 (let (($x160 (= $x162 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x133 (= $x55 true)))
 (let (($x141 (= $x133 true)))
 (let (($x146 (= $x141 true)))
 (let (($x149 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x155 (= $x149 true)))
 (let (($x25 (= $x155 true)))
 (let (($x179 (= $x25 true)))
 (let (($x158 (= $x230 true)))
 (let (($x5 (= $x158 true)))
 (let (($x104 (= $x5 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x138)))
 (let ((?x123 (bvand symbol.1 (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x123)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x157 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x157)))
 (let (($x22 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x178 (and $x22 $x134)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x94 $x178)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x77 (and $x86 $x102)))
 (let (($x173 (not $x77)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x124 (and $x40 $x101)))
 (let (($x9 (and (not $x124) $x173)))
 (let (($x39 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x41 $x39)))
 (let (($x57 (not $x171)))
 (let (($x106 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x108 $x106)))
 (let (($x26 (and (not $x18) $x57)))
 (let (($x177 (and (and (and (and (and (and $x26 $x9) $x14) $x49) $x85) $x12) $x7)))
 (let (($x93 (and $x177 $x38)))
 (let (($x44 (= symbol.1 dst_symbol_addr.1)))
 (let (($x174 (and $x44 $x93)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x91 (or (bvugt input.memlabel-mem--symbol.1_begin ?x89) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x91) (or $x34 $x32)))))))
 (let (($x129 (and $x83 $x174)))
 (let (($x139 (= $x129 true)))
 (let (($x152 (= $x139 true)))
 (let (($x105 (= $x152 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x66 (and $x79 $x105)))
 (let (($x95 (and $x66 $x104)))
 (let (($x15 (and $x95 $x179)))
 (let (($x159 (and $x15 $x146)))
 (let (($x140 (and $x159 $x160)))
 (let (($x151 (and $x140 $x210)))
 (let (($x169 (and $x151 $x194)))
 (let (($x202 (and $x169 $x245)))
 (let (($x247 (and $x202 $x246)))
 (let (($x284 (and $x247 $x221)))
 (let (($x301 (and $x284 $x294)))
 (let (($x321 (and $x301 $x312)))
 (let (($x243 (and $x321 $x234)))
 (let (($x273 (and $x243 $x43)))
 (let (($x132 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and (not $x132) $x273)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x263 (and $x228 $x164)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x237 $x263)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x241 (and $x187 $x75)))
 (let (($x117 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x277 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x117)))))
 (let (($x109 (=> (and $x230 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x117)))))
 (let (($x191 (and $x109 $x241)))
 (let (($x352 (=> $x191 $x348)))
 (not $x352)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x227 (bvule ?x360 (_ bv3 32))))
 (let (($x208 (= $x227 true)))
 (let (($x361 (= $x208 true)))
 (let (($x359 (forall ((input.ind-%var901X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var901X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var901X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var900X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var900X)))
 (= $x53 false)))
 ))
 (let (($x35 (and $x346 $x359)))
 (let (($x121 (= $x35 true)))
 (let (($x255 (forall ((input.ind-%var895X (_ BitVec 32)) )(let ((?x65 (bvadd symbol.1 (bvmul input.ind-%var895X (_ bv4 32)))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x65))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv2 32))) ?x254)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv3 32))) ?x220)))
 (let ((?x295 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var895X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var895X)))
 (=> $x215 (= ?x295 ?x302)))))))))
 ))
 (let (($x113 (forall ((input.ind-%var894X (_ BitVec 32)) )(let (($x341 (and (bvule (_ bv0 32) input.ind-%var894X) (bvult input.ind-%var894X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var894X)))
 (= $x215 $x341))))
 ))
 (let (($x296 (and $x113 $x255)))
 (let (($x325 (= $x296 true)))
 (let (($x330 (forall ((input.ind-%var889X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var889X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var889X) (_ bv0 32)))))
 ))
 (let (($x311 (forall ((input.ind-%var888X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var888X)))
 (= $x53 false)))
 ))
 (let (($x288 (and $x311 $x330)))
 (let (($x135 (= $x288 true)))
 (let ((?x240 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x240)))
 (let (($x269 (= ?x120 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x251 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x153 (= $x251 true)))
 (let (($x221 (= $x153 true)))
 (let (($x284 (= $x221 true)))
 (let (($x226 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x183 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x189 (= $x183 true)))
 (let (($x245 (= $x189 true)))
 (let (($x202 (= $x245 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x137)))
 (let ((?x142 (bvand symbol.1 (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x142)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x52 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x176 (= input.memlabel-mem--symbol.1_end ?x52)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x115 (and $x169 $x176)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x194 $x115)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (and $x140 $x175)))
 (let (($x11 (not $x127)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (and $x154 $x162)))
 (let (($x151 (and (not $x160) $x11)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x55 $x133)))
 (let (($x146 (not $x141)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x25 $x179)))
 (let (($x119 (and (not $x15) $x146)))
 (let (($x211 (and (and (and (and (and (and $x119 $x151) $x198) $x67) $x80) $x212) $x148)))
 (let (($x200 (and $x211 $x190)))
 (let (($x123 (= symbol.1 dst_symbol_addr.1)))
 (let (($x163 (and $x123 $x200)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x174 (or (bvugt input.memlabel-mem--symbol.1_begin ?x138) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x174) (or $x105 $x66)))))))
 (let (($x72 (and $x155 $x163)))
 (let (($x218 (= $x72 true)))
 (let (($x201 (= $x218 true)))
 (let (($x199 (= $x201 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x178 (= $x134 true)))
 (let (($x85 (= $x178 true)))
 (let (($x47 (= $x85 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x86 (bvsub ?x96 ?x87)))
 (let (($x9 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x86) (bvult ?x96 ?x86))))
 (let ((?x40 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x40)))
 (let ((?x124 ((_ extract 63 32) ?x101)))
 (let (($x60 (= (_ bv0 32) ?x124)))
 (let (($x57 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x136 (and (and (and true $x57) $x60) $x9)))
 (let (($x18 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x131 (and $x18 $x136)))
 (let (($x49 (= true $x131)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (=> $x322 $x49)))
 (let (($x94 (= $x99 true)))
 (let (($x22 (= $x94 true)))
 (let (($x122 (= $x22 true)))
 (let (($x59 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (= $x59 true)))
 (let (($x83 (= $x6 true)))
 (let (($x69 (= $x83 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (= $x34 true)))
 (let (($x32 (= $x17 true)))
 (let (($x103 (= $x32 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x79)))
 (let (($x10 (= ?x74 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x90 (= ?x74 input.dst.llvm-%n)))
 (let (($x84 (= $x90 true)))
 (let (($x89 (= $x84 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x322 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x51 (and $x76 $x89)))
 (let (($x37 (and $x51 $x68)))
 (let (($x100 (and $x37 $x103)))
 (let (($x44 (and $x100 $x69)))
 (let (($x157 (and $x44 $x122)))
 (let (($x167 (and $x157 $x47)))
 (let (($x235 (and $x167 $x199)))
 (let (($x203 (and $x235 $x202)))
 (let (($x248 (and $x203 $x247)))
 (let (($x300 (and $x248 $x284)))
 (let (($x298 (and $x300 $x301)))
 (let (($x82 (and $x298 $x135)))
 (let (($x324 (and $x82 $x325)))
 (let (($x216 (and $x324 $x121)))
 (let (($x256 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x279 (and (not $x256) $x216)))
 (let (($x56 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x291 (and $x56 $x279)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x332 (and $x195 $x291)))
 (let (($x283 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x293 (and $x283 $x332)))
 (let (($x112 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x187 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x112)))))
 (let (($x63 (=> (and $x322 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x112)))))
 (let (($x287 (and $x63 $x293)))
 (let (($x110 (=> $x287 $x361)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x227 (bvule ?x360 (_ bv3 32))))
 (let (($x208 (= $x227 true)))
 (let (($x361 (= $x208 true)))
 (let (($x359 (forall ((input.ind-%var901X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var901X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var901X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var900X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var900X)))
 (= $x53 false)))
 ))
 (let (($x35 (and $x346 $x359)))
 (let (($x121 (= $x35 true)))
 (let (($x255 (forall ((input.ind-%var895X (_ BitVec 32)) )(let ((?x65 (bvadd symbol.1 (bvmul input.ind-%var895X (_ bv4 32)))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x65))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv2 32))) ?x254)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x65 (_ bv3 32))) ?x220)))
 (let ((?x295 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var895X)))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var895X)))
 (=> $x215 (= ?x295 ?x302)))))))))
 ))
 (let (($x113 (forall ((input.ind-%var894X (_ BitVec 32)) )(let (($x341 (and (bvule (_ bv0 32) input.ind-%var894X) (bvult input.ind-%var894X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x215 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var894X)))
 (= $x215 $x341))))
 ))
 (let (($x296 (and $x113 $x255)))
 (let (($x325 (= $x296 true)))
 (let (($x330 (forall ((input.ind-%var889X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var889X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var889X) (_ bv0 32)))))
 ))
 (let (($x311 (forall ((input.ind-%var888X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var888X)))
 (= $x53 false)))
 ))
 (let (($x288 (and $x311 $x330)))
 (let (($x135 (= $x288 true)))
 (let ((?x240 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x240)))
 (let (($x269 (= ?x120 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x251 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x153 (= $x251 true)))
 (let (($x221 (= $x153 true)))
 (let (($x284 (= $x221 true)))
 (let (($x226 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x183 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x189 (= $x183 true)))
 (let (($x245 (= $x189 true)))
 (let (($x202 (= $x245 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x137)))
 (let ((?x142 (bvand symbol.1 (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x142)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x52 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x176 (= input.memlabel-mem--symbol.1_end ?x52)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x115 (and $x169 $x176)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x194 $x115)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (and $x140 $x175)))
 (let (($x11 (not $x127)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (and $x154 $x162)))
 (let (($x151 (and (not $x160) $x11)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x55 $x133)))
 (let (($x146 (not $x141)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x25 $x179)))
 (let (($x119 (and (not $x15) $x146)))
 (let (($x211 (and (and (and (and (and (and $x119 $x151) $x198) $x67) $x80) $x212) $x148)))
 (let (($x200 (and $x211 $x190)))
 (let (($x123 (= symbol.1 dst_symbol_addr.1)))
 (let (($x163 (and $x123 $x200)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x174 (or (bvugt input.memlabel-mem--symbol.1_begin ?x138) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x174) (or $x105 $x66)))))))
 (let (($x72 (and $x155 $x163)))
 (let (($x218 (= $x72 true)))
 (let (($x201 (= $x218 true)))
 (let (($x199 (= $x201 true)))
 (let (($x134 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x178 (= $x134 true)))
 (let (($x85 (= $x178 true)))
 (let (($x47 (= $x85 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x86 (bvsub ?x96 ?x87)))
 (let (($x9 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x86) (bvult ?x96 ?x86))))
 (let ((?x40 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x40)))
 (let ((?x124 ((_ extract 63 32) ?x101)))
 (let (($x60 (= (_ bv0 32) ?x124)))
 (let (($x57 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x136 (and (and (and true $x57) $x60) $x9)))
 (let (($x18 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x131 (and $x18 $x136)))
 (let (($x49 (= true $x131)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (=> $x322 $x49)))
 (let (($x94 (= $x99 true)))
 (let (($x22 (= $x94 true)))
 (let (($x122 (= $x22 true)))
 (let (($x59 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (= $x59 true)))
 (let (($x83 (= $x6 true)))
 (let (($x69 (= $x83 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x17 (= $x34 true)))
 (let (($x32 (= $x17 true)))
 (let (($x103 (= $x32 true)))
 (let ((?x79 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x79)))
 (let (($x10 (= ?x74 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x90 (= ?x74 input.dst.llvm-%n)))
 (let (($x84 (= $x90 true)))
 (let (($x89 (= $x84 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x322 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x51 (and $x76 $x89)))
 (let (($x37 (and $x51 $x68)))
 (let (($x100 (and $x37 $x103)))
 (let (($x44 (and $x100 $x69)))
 (let (($x157 (and $x44 $x122)))
 (let (($x167 (and $x157 $x47)))
 (let (($x235 (and $x167 $x199)))
 (let (($x203 (and $x235 $x202)))
 (let (($x248 (and $x203 $x247)))
 (let (($x300 (and $x248 $x284)))
 (let (($x298 (and $x300 $x301)))
 (let (($x82 (and $x298 $x135)))
 (let (($x324 (and $x82 $x325)))
 (let (($x216 (and $x324 $x121)))
 (let (($x256 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x279 (and (not $x256) $x216)))
 (let (($x56 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x291 (and $x56 $x279)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x332 (and $x195 $x291)))
 (let (($x283 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x293 (and $x283 $x332)))
 (let (($x112 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x187 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x112)))))
 (let (($x63 (=> (and $x322 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x112)))))
 (let (($x287 (and $x63 $x293)))
 (let (($x110 (=> $x287 $x361)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x13c00efc)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000002)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x0ffffff8)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x13c00eff)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x10000187)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x13c00efc)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x0ffffff8)
  (define-fun symbol.1 () (_ BitVec 32)
    #x0ffffff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x0ffffffb (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x0ffffffa (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x0ffffff9 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x0ffffff8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) false
      (not (bvule #x00000003 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x855f8020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3d598da8)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3d598dab)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x855f81af)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3d598da8)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x855f8020)
  (define-fun symbol.1 () (_ BitVec 32)
    #x855f8020)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #x855f8023 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x855f8022 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x855f8021 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x855f8020 (bvmul #x00000004 x!0))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000003 x!0)
         (ite (bvule #x00000004 x!0) #x00000004 #x00000003)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x114 (bvule ?x234 (_ bv4 32))))
 (let (($x329 (= $x114 true)))
 (let (($x327 (= $x329 true)))
 (let (($x16 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var955X)))
 (=> $x310 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var955X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var954X)))
 (= $x310 false)))
 ))
 (let (($x107 (and $x263 $x16)))
 (let (($x299 (= $x107 true)))
 (let (($x164 (forall ((input.ind-%var949X (_ BitVec 32)) )(let ((?x278 (bvadd symbol.1 (bvmul input.ind-%var949X (_ bv4 32)))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x278))))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv2 32))) ?x314)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv3 32))) ?x290)))
 (let ((?x346 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var949X)))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var949X)))
 (=> $x289 (= ?x346 ?x233)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var948X (_ BitVec 32)) )(let (($x8 (and (bvule (_ bv0 32) input.ind-%var948X) (bvult input.ind-%var948X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var948X)))
 (= $x289 $x8))))
 ))
 (let (($x249 (and $x255 $x164)))
 (let (($x348 (= $x249 true)))
 (let (($x252 (forall ((input.ind-%var943X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var943X)))
 (=> $x310 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var943X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var942X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var942X)))
 (= $x310 false)))
 ))
 (let (($x125 (and $x288 $x252)))
 (let (($x65 (= $x125 true)))
 (let ((?x120 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x120)))
 (let (($x294 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x153 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x221 (= $x153 true)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x239 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x189 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x245 (= $x189 true)))
 (let (($x202 (= $x245 true)))
 (let (($x203 (= $x202 true)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x212)))
 (let ((?x180 (bvand symbol.1 (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x180)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x169 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x145 (= input.memlabel-mem--symbol.1_end ?x169)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (and $x144 $x145)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x67 $x52)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (and $x140 $x175)))
 (let (($x11 (not $x127)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x162 $x160)))
 (let (($x128 (and (not $x210) $x11)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x55 $x133)))
 (let (($x146 (not $x141)))
 (let (($x15 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x179 $x15)))
 (let (($x154 (and (not $x159) $x146)))
 (let (($x200 (and (and (and (and (and (and $x154 $x128) $x198) $x182) $x176) $x80) $x29)))
 (let (($x163 (and $x200 $x19)))
 (let (($x149 (= symbol.1 dst_symbol_addr.1)))
 (let (($x72 (and $x149 $x163)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x139 (or (bvugt input.memlabel-mem--symbol.1_begin ?x93) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x139) (or $x158 $x5)))))))
 (let (($x218 (and $x25 $x72)))
 (let (($x201 (= $x218 true)))
 (let (($x199 (= $x201 true)))
 (let (($x235 (= $x199 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x173 (bvsub ?x96 ?x87)))
 (let (($x49 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x173) (bvult ?x96 ?x173))))
 (let ((?x14 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvmul (_ bv4 64) ?x14)))
 (let ((?x86 ((_ extract 63 32) ?x102)))
 (let (($x77 (= (_ bv0 32) ?x86)))
 (let (($x124 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x22 (and (and (and true $x124) $x77) $x49)))
 (let (($x57 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x122 (and $x57 $x22)))
 (let (($x157 (= true $x122)))
 (let (($x165 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (=> $x165 $x157)))
 (let (($x178 (= $x134 true)))
 (let (($x85 (= $x178 true)))
 (let (($x47 (= $x85 true)))
 (let (($x108 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x106 (= $x108 true)))
 (let (($x18 (= $x106 true)))
 (let (($x41 (= $x18 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (= $x59 true)))
 (let (($x83 (= $x6 true)))
 (let (($x69 (= $x83 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x51)))
 (let (($x17 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (= $x17 true)))
 (let (($x103 (= $x32 true)))
 (let (($x91 (= ?x10 input.dst.llvm-%n)))
 (let (($x68 (= $x91 true)))
 (let (($x37 (= $x68 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x79 (= $x62 true)))
 (let (($x74 (= $x79 true)))
 (let (($x90 (= $x74 true)))
 (let (($x42 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x165 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x84 (and $x76 $x90)))
 (let (($x34 (and $x84 $x37)))
 (let (($x100 (and $x34 $x103)))
 (let (($x44 (and $x100 $x69)))
 (let (($x70 (and $x44 $x41)))
 (let (($x167 (and $x70 $x47)))
 (let (($x183 (and $x167 $x235)))
 (let (($x226 (and $x183 $x203)))
 (let (($x251 (and $x226 $x248)))
 (let (($x240 (and $x251 $x300)))
 (let (($x185 (and $x240 $x298)))
 (let (($x323 (and $x185 $x65)))
 (let (($x281 (and $x323 $x348)))
 (let (($x357 (and $x281 $x299)))
 (let (($x250 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and (not $x250) $x357)))
 (let (($x132 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x321 (and $x132 $x244)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x266 (and $x27 $x321)))
 (let (($x261 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x274 (and $x261 $x266)))
 (let (($x109 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x283 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x109)))))
 (let (($x31 (=> (and $x165 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x109)))))
 (let (($x347 (and $x31 $x274)))
 (let (($x356 (=> $x347 $x327)))
 (not $x356)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x114 (bvule ?x234 (_ bv4 32))))
 (let (($x329 (= $x114 true)))
 (let (($x327 (= $x329 true)))
 (let (($x16 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var955X)))
 (=> $x310 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var955X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var954X)))
 (= $x310 false)))
 ))
 (let (($x107 (and $x263 $x16)))
 (let (($x299 (= $x107 true)))
 (let (($x164 (forall ((input.ind-%var949X (_ BitVec 32)) )(let ((?x278 (bvadd symbol.1 (bvmul input.ind-%var949X (_ bv4 32)))))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x278))))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv2 32))) ?x314)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x278 (_ bv3 32))) ?x290)))
 (let ((?x346 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var949X)))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var949X)))
 (=> $x289 (= ?x346 ?x233)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var948X (_ BitVec 32)) )(let (($x8 (and (bvule (_ bv0 32) input.ind-%var948X) (bvult input.ind-%var948X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x289 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var948X)))
 (= $x289 $x8))))
 ))
 (let (($x249 (and $x255 $x164)))
 (let (($x348 (= $x249 true)))
 (let (($x252 (forall ((input.ind-%var943X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var943X)))
 (=> $x310 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var943X) (_ bv0 32)))))
 ))
 (let (($x288 (forall ((input.ind-%var942X (_ BitVec 32)) )(let (($x310 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var942X)))
 (= $x310 false)))
 ))
 (let (($x125 (and $x288 $x252)))
 (let (($x65 (= $x125 true)))
 (let ((?x120 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x120)))
 (let (($x294 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x153 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x221 (= $x153 true)))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x239 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x246 (= $x239 true)))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x189 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x245 (= $x189 true)))
 (let (($x202 (= $x245 true)))
 (let (($x203 (= $x202 true)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x212)))
 (let ((?x180 (bvand symbol.1 (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x180)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x169 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x145 (= input.memlabel-mem--symbol.1_end ?x169)))
 (let (($x144 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x52 (and $x144 $x145)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x67 $x52)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (and $x140 $x175)))
 (let (($x11 (not $x127)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x162 $x160)))
 (let (($x128 (and (not $x210) $x11)))
 (let (($x133 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x55 $x133)))
 (let (($x146 (not $x141)))
 (let (($x15 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x179 $x15)))
 (let (($x154 (and (not $x159) $x146)))
 (let (($x200 (and (and (and (and (and (and $x154 $x128) $x198) $x182) $x176) $x80) $x29)))
 (let (($x163 (and $x200 $x19)))
 (let (($x149 (= symbol.1 dst_symbol_addr.1)))
 (let (($x72 (and $x149 $x163)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x139 (or (bvugt input.memlabel-mem--symbol.1_begin ?x93) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x139) (or $x158 $x5)))))))
 (let (($x218 (and $x25 $x72)))
 (let (($x201 (= $x218 true)))
 (let (($x199 (= $x201 true)))
 (let (($x235 (= $x199 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x173 (bvsub ?x96 ?x87)))
 (let (($x49 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x173) (bvult ?x96 ?x173))))
 (let ((?x14 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvmul (_ bv4 64) ?x14)))
 (let ((?x86 ((_ extract 63 32) ?x102)))
 (let (($x77 (= (_ bv0 32) ?x86)))
 (let (($x124 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x22 (and (and (and true $x124) $x77) $x49)))
 (let (($x57 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x122 (and $x57 $x22)))
 (let (($x157 (= true $x122)))
 (let (($x165 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (=> $x165 $x157)))
 (let (($x178 (= $x134 true)))
 (let (($x85 (= $x178 true)))
 (let (($x47 (= $x85 true)))
 (let (($x108 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x106 (= $x108 true)))
 (let (($x18 (= $x106 true)))
 (let (($x41 (= $x18 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x6 (= $x59 true)))
 (let (($x83 (= $x6 true)))
 (let (($x69 (= $x83 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x10 (bvneg ?x51)))
 (let (($x17 (= ?x10 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x32 (= $x17 true)))
 (let (($x103 (= $x32 true)))
 (let (($x91 (= ?x10 input.dst.llvm-%n)))
 (let (($x68 (= $x91 true)))
 (let (($x37 (= $x68 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x79 (= $x62 true)))
 (let (($x74 (= $x79 true)))
 (let (($x90 (= $x74 true)))
 (let (($x42 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x45 (= $x165 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x76 (and $x71 $x88)))
 (let (($x84 (and $x76 $x90)))
 (let (($x34 (and $x84 $x37)))
 (let (($x100 (and $x34 $x103)))
 (let (($x44 (and $x100 $x69)))
 (let (($x70 (and $x44 $x41)))
 (let (($x167 (and $x70 $x47)))
 (let (($x183 (and $x167 $x235)))
 (let (($x226 (and $x183 $x203)))
 (let (($x251 (and $x226 $x248)))
 (let (($x240 (and $x251 $x300)))
 (let (($x185 (and $x240 $x298)))
 (let (($x323 (and $x185 $x65)))
 (let (($x281 (and $x323 $x348)))
 (let (($x357 (and $x281 $x299)))
 (let (($x250 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and (not $x250) $x357)))
 (let (($x132 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x321 (and $x132 $x244)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x266 (and $x27 $x321)))
 (let (($x261 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x274 (and $x261 $x266)))
 (let (($x109 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x283 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x109)))))
 (let (($x31 (=> (and $x165 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x109)))))
 (let (($x347 (and $x31 $x274)))
 (let (($x356 (=> $x347 $x327)))
 (not $x356)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x00020001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x800000d4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000038)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000003b)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x80000263)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000038)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x800000d4)
  (define-fun symbol.1 () (_ BitVec 32)
    #x800000d4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00020001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x00020001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #x800000d7 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x800000d6 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x800000d5 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #x800000d4 (bvmul #x00000004 x!0))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xde200000)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x80000001)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xde200003)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #x8000017f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xde200000)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #x7ffffff0)
  (define-fun symbol.1 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) false
      (not (bvule #x00000004 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x12 (bvsle ?x325 (_ bv399 32))))
 (let (($x326 (= $x12 true)))
 (let (($x13 (= $x326 true)))
 (let (($x206 (forall ((input.ind-%var1019X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1019X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1019X) (_ bv0 32)))))
 ))
 (let (($x291 (forall ((input.ind-%var1018X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1018X)))
 (= $x307 false)))
 ))
 (let (($x353 (and $x291 $x206)))
 (let (($x341 (= $x353 true)))
 (let (($x279 (forall ((input.ind-%var1013X (_ BitVec 32)) )(let ((?x359 (bvadd symbol.1 (bvmul input.ind-%var1013X (_ bv4 32)))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x359))))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv2 32))) ?x215)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv3 32))) ?x309)))
 (let ((?x263 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1013X)))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1013X)))
 (=> $x58 (= ?x263 ?x53)))))))))
 ))
 (let (($x164 (forall ((input.ind-%var1012X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var1012X) (bvult input.ind-%var1012X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1012X)))
 (= $x58 $x242))))
 ))
 (let (($x110 (and $x164 $x279)))
 (let (($x229 (= $x110 true)))
 (let (($x35 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (= $x307 false)))
 ))
 (let (($x220 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1007X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1007X) (_ bv0 32)))))
 ))
 (let (($x147 (and $x220 $x35)))
 (let (($x278 (= $x147 true)))
 (let ((?x269 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x294 (bvneg ?x269)))
 (let (($x301 (= ?x294 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x301 true)))
 (let (($x185 (= $x298 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let (($x246 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x245 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x202 (= $x245 true)))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x80)))
 (let ((?x137 (bvand symbol.1 (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x137)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x144 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x194 (= input.memlabel-mem--symbol.1_end ?x144)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x169 (and $x67 $x194)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x211 $x169)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x11 (and $x175 $x127)))
 (let (($x128 (not $x11)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x210 $x151)))
 (let (($x198 (and (not $x140) $x128)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x133 $x141)))
 (let (($x154 (not $x146)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x159 $x119)))
 (let (($x160 (and (not $x55) $x154)))
 (let (($x163 (and (and (and (and (and (and $x160 $x198) $x148) $x182) $x145) $x176) $x115)))
 (let (($x72 (and $x163 $x190)))
 (let (($x93 (= symbol.1 dst_symbol_addr.1)))
 (let (($x218 (and $x93 $x72)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x158 (or (bvugt input.memlabel-mem--symbol.1_begin ?x139) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x158) (or $x95 $x155)))))))
 (let (($x201 (and $x15 $x218)))
 (let (($x199 (= $x201 true)))
 (let (($x235 (= $x199 true)))
 (let (($x183 (= $x235 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x94 (bvsub ?x96 ?x87)))
 (let (($x131 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x94) (bvult ?x96 ?x94))))
 (let ((?x14 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvmul (_ bv4 64) ?x14)))
 (let ((?x86 ((_ extract 63 32) ?x102)))
 (let (($x77 (= (_ bv0 32) ?x86)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x122 (and (and (and true $x99) $x77) $x131)))
 (let (($x26 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x157 (and $x26 $x122)))
 (let (($x134 (= true $x157)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (=> $x230 $x134)))
 (let (($x85 (= $x178 true)))
 (let (($x47 (= $x85 true)))
 (let (($x167 (= $x47 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x106 true)))
 (let (($x41 (= $x18 true)))
 (let (($x70 (= $x41 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (= $x6 true)))
 (let (($x69 (= $x83 true)))
 (let (($x44 (= $x69 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x10)))
 (let (($x32 (= ?x91 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x68 (= ?x91 input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x74 (= $x79 true)))
 (let (($x90 (= $x74 true)))
 (let (($x84 (= $x90 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x230 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x89 (and $x62 $x84)))
 (let (($x17 (and $x89 $x34)))
 (let (($x59 (and $x17 $x100)))
 (let (($x108 (and $x59 $x44)))
 (let (($x39 (and $x108 $x70)))
 (let (($x138 (and $x39 $x167)))
 (let (($x189 (and $x138 $x183)))
 (let (($x239 (and $x189 $x226)))
 (let (($x153 (and $x239 $x251)))
 (let (($x120 (and $x153 $x240)))
 (let (($x311 (and $x120 $x185)))
 (let (($x20 (and $x311 $x278)))
 (let (($x227 (and $x20 $x229)))
 (let (($x231 (and $x227 $x341)))
 (let (($x358 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x254 (and (not $x358) $x231)))
 (let (($x256 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x256 $x254)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x222 (and $x228 $x82)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x237 $x222)))
 (let (($x63 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x261 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x63)))))
 (let (($x28 (=> (and $x230 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x63)))))
 (let (($x241 (and $x28 $x21)))
 (let (($x225 (=> $x241 $x13)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x12 (bvsle ?x325 (_ bv399 32))))
 (let (($x326 (= $x12 true)))
 (let (($x13 (= $x326 true)))
 (let (($x206 (forall ((input.ind-%var1019X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1019X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1019X) (_ bv0 32)))))
 ))
 (let (($x291 (forall ((input.ind-%var1018X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1018X)))
 (= $x307 false)))
 ))
 (let (($x353 (and $x291 $x206)))
 (let (($x341 (= $x353 true)))
 (let (($x279 (forall ((input.ind-%var1013X (_ BitVec 32)) )(let ((?x359 (bvadd symbol.1 (bvmul input.ind-%var1013X (_ bv4 32)))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x359))))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv2 32))) ?x215)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv3 32))) ?x309)))
 (let ((?x263 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1013X)))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1013X)))
 (=> $x58 (= ?x263 ?x53)))))))))
 ))
 (let (($x164 (forall ((input.ind-%var1012X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var1012X) (bvult input.ind-%var1012X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x58 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1012X)))
 (= $x58 $x242))))
 ))
 (let (($x110 (and $x164 $x279)))
 (let (($x229 (= $x110 true)))
 (let (($x35 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1006X)))
 (= $x307 false)))
 ))
 (let (($x220 (forall ((input.ind-%var1007X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1007X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1007X) (_ bv0 32)))))
 ))
 (let (($x147 (and $x220 $x35)))
 (let (($x278 (= $x147 true)))
 (let ((?x269 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x294 (bvneg ?x269)))
 (let (($x301 (= ?x294 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x301 true)))
 (let (($x185 (= $x298 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x284 (= $x221 true)))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let (($x246 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x247 (= $x246 true)))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x245 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x202 (= $x245 true)))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x80)))
 (let ((?x137 (bvand symbol.1 (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x137)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x144 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x194 (= input.memlabel-mem--symbol.1_end ?x144)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x169 (and $x67 $x194)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x211 $x169)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x11 (and $x175 $x127)))
 (let (($x128 (not $x11)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x210 $x151)))
 (let (($x198 (and (not $x140) $x128)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x133 $x141)))
 (let (($x154 (not $x146)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x159 $x119)))
 (let (($x160 (and (not $x55) $x154)))
 (let (($x163 (and (and (and (and (and (and $x160 $x198) $x148) $x182) $x145) $x176) $x115)))
 (let (($x72 (and $x163 $x190)))
 (let (($x93 (= symbol.1 dst_symbol_addr.1)))
 (let (($x218 (and $x93 $x72)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x158 (or (bvugt input.memlabel-mem--symbol.1_begin ?x139) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x158) (or $x95 $x155)))))))
 (let (($x201 (and $x15 $x218)))
 (let (($x199 (= $x201 true)))
 (let (($x235 (= $x199 true)))
 (let (($x183 (= $x235 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x94 (bvsub ?x96 ?x87)))
 (let (($x131 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x94) (bvult ?x96 ?x94))))
 (let ((?x14 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvmul (_ bv4 64) ?x14)))
 (let ((?x86 ((_ extract 63 32) ?x102)))
 (let (($x77 (= (_ bv0 32) ?x86)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x122 (and (and (and true $x99) $x77) $x131)))
 (let (($x26 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x157 (and $x26 $x122)))
 (let (($x134 (= true $x157)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (=> $x230 $x134)))
 (let (($x85 (= $x178 true)))
 (let (($x47 (= $x85 true)))
 (let (($x167 (= $x47 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x106 true)))
 (let (($x41 (= $x18 true)))
 (let (($x70 (= $x41 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (= $x6 true)))
 (let (($x69 (= $x83 true)))
 (let (($x44 (= $x69 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x10)))
 (let (($x32 (= ?x91 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x68 (= ?x91 input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x74 (= $x79 true)))
 (let (($x90 (= $x74 true)))
 (let (($x84 (= $x90 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x230 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x89 (and $x62 $x84)))
 (let (($x17 (and $x89 $x34)))
 (let (($x59 (and $x17 $x100)))
 (let (($x108 (and $x59 $x44)))
 (let (($x39 (and $x108 $x70)))
 (let (($x138 (and $x39 $x167)))
 (let (($x189 (and $x138 $x183)))
 (let (($x239 (and $x189 $x226)))
 (let (($x153 (and $x239 $x251)))
 (let (($x120 (and $x153 $x240)))
 (let (($x311 (and $x120 $x185)))
 (let (($x20 (and $x311 $x278)))
 (let (($x227 (and $x20 $x229)))
 (let (($x231 (and $x227 $x341)))
 (let (($x358 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x254 (and (not $x358) $x231)))
 (let (($x256 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x256 $x254)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x222 (and $x228 $x82)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x237 $x222)))
 (let (($x63 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x261 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x63)))))
 (let (($x28 (=> (and $x230 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x63)))))
 (let (($x241 (and $x28 $x21)))
 (let (($x225 (=> $x241 $x13)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x348 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x7 (bvule ?x348 (_ bv399 32))))
 (let (($x352 (= $x7 true)))
 (let (($x361 (= $x352 true)))
 (let (($x360 (forall ((input.ind-%var1037X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1037X)))
 (=> $x302 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1037X) (_ bv0 32)))))
 ))
 (let (($x321 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1036X)))
 (= $x302 false)))
 ))
 (let (($x238 (and $x321 $x360)))
 (let (($x65 (= $x238 true)))
 (let (($x244 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let ((?x16 (bvadd symbol.1 (bvmul input.ind-%var1031X (_ bv4 32)))))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x16))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv2 32))) ?x295)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv3 32))) ?x305)))
 (let ((?x291 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1031X)))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1031X)))
 (=> $x296 (= ?x291 ?x8)))))))))
 ))
 (let (($x279 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x267 (and (bvule (_ bv0 32) input.ind-%var1030X) (bvult input.ind-%var1030X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1030X)))
 (= $x296 $x267))))
 ))
 (let (($x356 (and $x279 $x244)))
 (let (($x213 (= $x356 true)))
 (let (($x107 (forall ((input.ind-%var1025X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1025X)))
 (=> $x302 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1025X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var1024X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1024X)))
 (= $x302 false)))
 ))
 (let (($x111 (and $x147 $x107)))
 (let (($x359 (= $x111 true)))
 (let ((?x294 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x294)))
 (let (($x298 (= ?x301 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x298 true)))
 (let (($x311 (= $x185 true)))
 (let (($x284 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let (($x120 (= $x240 true)))
 (let (($x247 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x153 (= $x251 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x176)))
 (let ((?x212 (bvand symbol.1 (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x212)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x211 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x67 (= input.memlabel-mem--symbol.1_end ?x211)))
 (let (($x200 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (and $x200 $x67)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x182 $x144)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x11 (and $x175 $x127)))
 (let (($x128 (not $x11)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (and $x151 $x140)))
 (let (($x180 (and (not $x142) $x128)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x133 $x141)))
 (let (($x154 (not $x146)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x119 $x55)))
 (let (($x210 (and (not $x162) $x154)))
 (let (($x72 (and (and (and (and (and (and $x210 $x180) $x148) $x186) $x194) $x145) $x52)))
 (let (($x218 (and $x72 $x19)))
 (let (($x179 (= symbol.1 dst_symbol_addr.1)))
 (let (($x201 (and $x179 $x218)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x5 (or (bvugt input.memlabel-mem--symbol.1_begin ?x152) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x5) (or $x78 $x25)))))))
 (let (($x199 (and $x159 $x201)))
 (let (($x235 (= $x199 true)))
 (let (($x183 (= $x235 true)))
 (let (($x189 (= $x183 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x77 (bvsub ?x96 ?x87)))
 (let (($x173 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x77) (bvult ?x96 ?x77))))
 (let ((?x60 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvmul (_ bv4 64) ?x60)))
 (let ((?x102 ((_ extract 63 32) ?x14)))
 (let (($x86 (= (_ bv0 32) ?x102)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x122 (and (and (and true $x99) $x86) $x173)))
 (let (($x26 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x157 (and $x26 $x122)))
 (let (($x134 (= true $x157)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (=> $x322 $x134)))
 (let (($x85 (= $x178 true)))
 (let (($x47 (= $x85 true)))
 (let (($x167 (= $x47 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x106 true)))
 (let (($x41 (= $x18 true)))
 (let (($x70 (= $x41 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (= $x6 true)))
 (let (($x69 (= $x83 true)))
 (let (($x44 (= $x69 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x10)))
 (let (($x32 (= ?x91 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x68 (= ?x91 input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x74 (= $x79 true)))
 (let (($x90 (= $x74 true)))
 (let (($x84 (= $x90 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x322 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x89 (and $x62 $x84)))
 (let (($x17 (and $x89 $x34)))
 (let (($x59 (and $x17 $x100)))
 (let (($x108 (and $x59 $x44)))
 (let (($x39 (and $x108 $x70)))
 (let (($x138 (and $x39 $x167)))
 (let (($x245 (and $x138 $x189)))
 (let (($x246 (and $x245 $x239)))
 (let (($x221 (and $x246 $x153)))
 (let (($x269 (and $x221 $x120)))
 (let (($x288 (and $x269 $x311)))
 (let (($x272 (and $x288 $x359)))
 (let (($x114 (and $x272 $x213)))
 (let (($x208 (and $x114 $x65)))
 (let (($x75 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x314 (and (not $x75) $x208)))
 (let (($x250 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x330 (and $x250 $x314)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x323 (and $x56 $x330)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x161 (and $x195 $x323)))
 (let (($x31 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x237 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x31)))))
 (let (($x81 (=> (and $x322 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x31)))))
 (let (($x293 (and $x81 $x161)))
 (let (($x282 (=> $x293 $x361)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x348 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x7 (bvule ?x348 (_ bv399 32))))
 (let (($x352 (= $x7 true)))
 (let (($x361 (= $x352 true)))
 (let (($x360 (forall ((input.ind-%var1037X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1037X)))
 (=> $x302 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1037X) (_ bv0 32)))))
 ))
 (let (($x321 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1036X)))
 (= $x302 false)))
 ))
 (let (($x238 (and $x321 $x360)))
 (let (($x65 (= $x238 true)))
 (let (($x244 (forall ((input.ind-%var1031X (_ BitVec 32)) )(let ((?x16 (bvadd symbol.1 (bvmul input.ind-%var1031X (_ bv4 32)))))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x16))))
 (let ((?x305 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv2 32))) ?x295)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x16 (_ bv3 32))) ?x305)))
 (let ((?x291 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1031X)))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1031X)))
 (=> $x296 (= ?x291 ?x8)))))))))
 ))
 (let (($x279 (forall ((input.ind-%var1030X (_ BitVec 32)) )(let (($x267 (and (bvule (_ bv0 32) input.ind-%var1030X) (bvult input.ind-%var1030X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1030X)))
 (= $x296 $x267))))
 ))
 (let (($x356 (and $x279 $x244)))
 (let (($x213 (= $x356 true)))
 (let (($x107 (forall ((input.ind-%var1025X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1025X)))
 (=> $x302 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1025X) (_ bv0 32)))))
 ))
 (let (($x147 (forall ((input.ind-%var1024X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1024X)))
 (= $x302 false)))
 ))
 (let (($x111 (and $x147 $x107)))
 (let (($x359 (= $x111 true)))
 (let ((?x294 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x301 (bvneg ?x294)))
 (let (($x298 (= ?x301 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x298 true)))
 (let (($x311 (= $x185 true)))
 (let (($x284 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x300 (= $x284 true)))
 (let (($x240 (= $x300 true)))
 (let (($x120 (= $x240 true)))
 (let (($x247 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x248 (= $x247 true)))
 (let (($x251 (= $x248 true)))
 (let (($x153 (= $x251 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x203 (= $x202 true)))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x176)))
 (let ((?x212 (bvand symbol.1 (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x212)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x211 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x67 (= input.memlabel-mem--symbol.1_end ?x211)))
 (let (($x200 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x144 (and $x200 $x67)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x182 $x144)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x11 (and $x175 $x127)))
 (let (($x128 (not $x11)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x142 (and $x151 $x140)))
 (let (($x180 (and (not $x142) $x128)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x133 $x141)))
 (let (($x154 (not $x146)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x119 $x55)))
 (let (($x210 (and (not $x162) $x154)))
 (let (($x72 (and (and (and (and (and (and $x210 $x180) $x148) $x186) $x194) $x145) $x52)))
 (let (($x218 (and $x72 $x19)))
 (let (($x179 (= symbol.1 dst_symbol_addr.1)))
 (let (($x201 (and $x179 $x218)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x5 (or (bvugt input.memlabel-mem--symbol.1_begin ?x152) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x5) (or $x78 $x25)))))))
 (let (($x199 (and $x159 $x201)))
 (let (($x235 (= $x199 true)))
 (let (($x183 (= $x235 true)))
 (let (($x189 (= $x183 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x77 (bvsub ?x96 ?x87)))
 (let (($x173 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x77) (bvult ?x96 ?x77))))
 (let ((?x60 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvmul (_ bv4 64) ?x60)))
 (let ((?x102 ((_ extract 63 32) ?x14)))
 (let (($x86 (= (_ bv0 32) ?x102)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x122 (and (and (and true $x99) $x86) $x173)))
 (let (($x26 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x157 (and $x26 $x122)))
 (let (($x134 (= true $x157)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (=> $x322 $x134)))
 (let (($x85 (= $x178 true)))
 (let (($x47 (= $x85 true)))
 (let (($x167 (= $x47 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x106 true)))
 (let (($x41 (= $x18 true)))
 (let (($x70 (= $x41 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (= $x6 true)))
 (let (($x69 (= $x83 true)))
 (let (($x44 (= $x69 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x10)))
 (let (($x32 (= ?x91 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x68 (= ?x91 input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x74 (= $x79 true)))
 (let (($x90 (= $x74 true)))
 (let (($x84 (= $x90 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x322 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x89 (and $x62 $x84)))
 (let (($x17 (and $x89 $x34)))
 (let (($x59 (and $x17 $x100)))
 (let (($x108 (and $x59 $x44)))
 (let (($x39 (and $x108 $x70)))
 (let (($x138 (and $x39 $x167)))
 (let (($x245 (and $x138 $x189)))
 (let (($x246 (and $x245 $x239)))
 (let (($x221 (and $x246 $x153)))
 (let (($x269 (and $x221 $x120)))
 (let (($x288 (and $x269 $x311)))
 (let (($x272 (and $x288 $x359)))
 (let (($x114 (and $x272 $x213)))
 (let (($x208 (and $x114 $x65)))
 (let (($x75 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x314 (and (not $x75) $x208)))
 (let (($x250 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x330 (and $x250 $x314)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x323 (and $x56 $x330)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x161 (and $x195 $x323)))
 (let (($x31 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x237 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x31)))))
 (let (($x81 (=> (and $x322 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x31)))))
 (let (($x293 (and $x81 $x161)))
 (let (($x282 (=> $x293 $x361)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x38 (bvsge ?x229 (_ bv0 32))))
 (let (($x292 (= $x38 true)))
 (let (($x327 (= $x292 true)))
 (let (($x242 (forall ((input.ind-%var1055X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1055X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1055X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var1054X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1054X)))
 (= $x233 false)))
 ))
 (let (($x234 (and $x82 $x242)))
 (let (($x143 (= $x234 true)))
 (let (($x254 (forall ((input.ind-%var1049X (_ BitVec 32)) )(let ((?x206 (bvadd symbol.1 (bvmul input.ind-%var1049X (_ bv4 32)))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x206))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv2 32))) ?x58)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv3 32))) ?x219)))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1049X)))
 (let (($x249 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1049X)))
 (=> $x249 (= ?x321 ?x307)))))))))
 ))
 (let (($x244 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let (($x303 (and (bvule (_ bv0 32) input.ind-%var1048X) (bvult input.ind-%var1048X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x249 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1048X)))
 (= $x249 $x303))))
 ))
 (let (($x225 (and $x244 $x254)))
 (let (($x328 (= $x225 true)))
 (let (($x353 (forall ((input.ind-%var1043X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1043X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1043X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var1042X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1042X)))
 (= $x233 false)))
 ))
 (let (($x243 (and $x111 $x353)))
 (let (($x16 (= $x243 true)))
 (let ((?x301 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x301)))
 (let (($x185 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x311 (= $x185 true)))
 (let (($x288 (= $x311 true)))
 (let (($x300 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x240 (= $x300 true)))
 (let (($x120 (= $x240 true)))
 (let (($x269 (= $x120 true)))
 (let (($x248 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x251 (= $x248 true)))
 (let (($x153 (= $x251 true)))
 (let (($x221 (= $x153 true)))
 (let (($x203 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x145)))
 (let ((?x80 (bvand symbol.1 (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x80)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x182 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x200 (= input.memlabel-mem--symbol.1_end ?x182)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x211 (and $x163 $x200)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x186 $x211)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x11 (and $x175 $x127)))
 (let (($x128 (not $x11)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x198 (and $x140 $x142)))
 (let (($x137 (and (not $x198) $x128)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x133 $x141)))
 (let (($x154 (not $x146)))
 (let (($x162 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x55 $x162)))
 (let (($x151 (and (not $x160) $x154)))
 (let (($x218 (and (and (and (and (and (and $x151 $x137) $x148) $x29) $x67) $x194) $x169)))
 (let (($x201 (and $x218 $x190)))
 (let (($x93 (= symbol.1 dst_symbol_addr.1)))
 (let (($x199 (and $x93 $x201)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x66) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x177 $x149)))))))
 (let (($x235 (and $x119 $x199)))
 (let (($x183 (= $x235 true)))
 (let (($x189 (= $x183 true)))
 (let (($x245 (= $x189 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x86 (bvsub ?x96 ?x87)))
 (let (($x9 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x86) (bvult ?x96 ?x86))))
 (let ((?x49 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x60 (bvmul (_ bv4 64) ?x49)))
 (let ((?x14 ((_ extract 63 32) ?x60)))
 (let (($x102 (= (_ bv0 32) ?x14)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x122 (and (and (and true $x99) $x102) $x9)))
 (let (($x26 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x157 (and $x26 $x122)))
 (let (($x134 (= true $x157)))
 (let (($x341 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (=> $x341 $x134)))
 (let (($x85 (= $x178 true)))
 (let (($x47 (= $x85 true)))
 (let (($x167 (= $x47 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x106 true)))
 (let (($x41 (= $x18 true)))
 (let (($x70 (= $x41 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (= $x6 true)))
 (let (($x69 (= $x83 true)))
 (let (($x44 (= $x69 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x10)))
 (let (($x32 (= ?x91 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x68 (= ?x91 input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x74 (= $x79 true)))
 (let (($x90 (= $x74 true)))
 (let (($x84 (= $x90 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x341 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x89 (and $x62 $x84)))
 (let (($x17 (and $x89 $x34)))
 (let (($x59 (and $x17 $x100)))
 (let (($x108 (and $x59 $x44)))
 (let (($x39 (and $x108 $x70)))
 (let (($x138 (and $x39 $x167)))
 (let (($x202 (and $x138 $x245)))
 (let (($x247 (and $x202 $x246)))
 (let (($x284 (and $x247 $x221)))
 (let (($x294 (and $x284 $x269)))
 (let (($x289 (and $x294 $x288)))
 (let (($x313 (and $x289 $x16)))
 (let (($x12 (and $x313 $x328)))
 (let (($x329 (and $x12 $x143)))
 (let (($x332 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x332) $x329)))
 (let (($x358 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and $x358 $x215)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x273 (and $x132 $x20)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x27 $x273)))
 (let (($x28 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x195 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x97 (=> (and $x341 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x28)))))
 (let (($x274 (and $x97 $x98)))
 (let (($x255 (=> $x274 $x327)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x38 (bvsge ?x229 (_ bv0 32))))
 (let (($x292 (= $x38 true)))
 (let (($x327 (= $x292 true)))
 (let (($x242 (forall ((input.ind-%var1055X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1055X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1055X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var1054X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1054X)))
 (= $x233 false)))
 ))
 (let (($x234 (and $x82 $x242)))
 (let (($x143 (= $x234 true)))
 (let (($x254 (forall ((input.ind-%var1049X (_ BitVec 32)) )(let ((?x206 (bvadd symbol.1 (bvmul input.ind-%var1049X (_ bv4 32)))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x206))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv2 32))) ?x58)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x206 (_ bv3 32))) ?x219)))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1049X)))
 (let (($x249 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1049X)))
 (=> $x249 (= ?x321 ?x307)))))))))
 ))
 (let (($x244 (forall ((input.ind-%var1048X (_ BitVec 32)) )(let (($x303 (and (bvule (_ bv0 32) input.ind-%var1048X) (bvult input.ind-%var1048X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x249 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1048X)))
 (= $x249 $x303))))
 ))
 (let (($x225 (and $x244 $x254)))
 (let (($x328 (= $x225 true)))
 (let (($x353 (forall ((input.ind-%var1043X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1043X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1043X) (_ bv0 32)))))
 ))
 (let (($x111 (forall ((input.ind-%var1042X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1042X)))
 (= $x233 false)))
 ))
 (let (($x243 (and $x111 $x353)))
 (let (($x16 (= $x243 true)))
 (let ((?x301 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x298 (bvneg ?x301)))
 (let (($x185 (= ?x298 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x311 (= $x185 true)))
 (let (($x288 (= $x311 true)))
 (let (($x300 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x240 (= $x300 true)))
 (let (($x120 (= $x240 true)))
 (let (($x269 (= $x120 true)))
 (let (($x248 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x251 (= $x248 true)))
 (let (($x153 (= $x251 true)))
 (let (($x221 (= $x153 true)))
 (let (($x203 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x226 (= $x203 true)))
 (let (($x239 (= $x226 true)))
 (let (($x246 (= $x239 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x145)))
 (let ((?x80 (bvand symbol.1 (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x80)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x182 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x200 (= input.memlabel-mem--symbol.1_end ?x182)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x211 (and $x163 $x200)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x186 $x211)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x11 (and $x175 $x127)))
 (let (($x128 (not $x11)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x198 (and $x140 $x142)))
 (let (($x137 (and (not $x198) $x128)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x133 $x141)))
 (let (($x154 (not $x146)))
 (let (($x162 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x55 $x162)))
 (let (($x151 (and (not $x160) $x154)))
 (let (($x218 (and (and (and (and (and (and $x151 $x137) $x148) $x29) $x67) $x194) $x169)))
 (let (($x201 (and $x218 $x190)))
 (let (($x93 (= symbol.1 dst_symbol_addr.1)))
 (let (($x199 (and $x93 $x201)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x104 (or (bvugt input.memlabel-mem--symbol.1_begin ?x66) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x104) (or $x177 $x149)))))))
 (let (($x235 (and $x119 $x199)))
 (let (($x183 (= $x235 true)))
 (let (($x189 (= $x183 true)))
 (let (($x245 (= $x189 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x86 (bvsub ?x96 ?x87)))
 (let (($x9 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x86) (bvult ?x96 ?x86))))
 (let ((?x49 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x60 (bvmul (_ bv4 64) ?x49)))
 (let ((?x14 ((_ extract 63 32) ?x60)))
 (let (($x102 (= (_ bv0 32) ?x14)))
 (let (($x99 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x122 (and (and (and true $x99) $x102) $x9)))
 (let (($x26 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x157 (and $x26 $x122)))
 (let (($x134 (= true $x157)))
 (let (($x341 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (=> $x341 $x134)))
 (let (($x85 (= $x178 true)))
 (let (($x47 (= $x85 true)))
 (let (($x167 (= $x47 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x18 (= $x106 true)))
 (let (($x41 (= $x18 true)))
 (let (($x70 (= $x41 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x83 (= $x6 true)))
 (let (($x69 (= $x83 true)))
 (let (($x44 (= $x69 true)))
 (let ((?x10 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x91 (bvneg ?x10)))
 (let (($x32 (= ?x91 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x68 (= ?x91 input.dst.llvm-%n)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x74 (= $x79 true)))
 (let (($x90 (= $x74 true)))
 (let (($x84 (= $x90 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x341 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x89 (and $x62 $x84)))
 (let (($x17 (and $x89 $x34)))
 (let (($x59 (and $x17 $x100)))
 (let (($x108 (and $x59 $x44)))
 (let (($x39 (and $x108 $x70)))
 (let (($x138 (and $x39 $x167)))
 (let (($x202 (and $x138 $x245)))
 (let (($x247 (and $x202 $x246)))
 (let (($x284 (and $x247 $x221)))
 (let (($x294 (and $x284 $x269)))
 (let (($x289 (and $x294 $x288)))
 (let (($x313 (and $x289 $x16)))
 (let (($x12 (and $x313 $x328)))
 (let (($x329 (and $x12 $x143)))
 (let (($x332 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x215 (and (not $x332) $x329)))
 (let (($x358 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x20 (and $x358 $x215)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x273 (and $x132 $x20)))
 (let (($x27 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x27 $x273)))
 (let (($x28 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x195 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x28)))))
 (let (($x97 (=> (and $x341 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x28)))))
 (let (($x274 (and $x97 $x98)))
 (let (($x255 (=> $x274 $x327)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x174 (bvule ?x213 (_ bv399 32))))
 (let (($x223 (= $x174 true)))
 (let (($x13 (= $x223 true)))
 (let (($x267 (forall ((input.ind-%var1073X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1073X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1073X) (_ bv0 32)))))
 ))
 (let (($x330 (forall ((input.ind-%var1072X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1072X)))
 (= $x53 false)))
 ))
 (let (($x325 (and $x330 $x267)))
 (let (($x113 (= $x325 true)))
 (let (($x314 (forall ((input.ind-%var1067X (_ BitVec 32)) )(let ((?x360 (bvadd symbol.1 (bvmul input.ind-%var1067X (_ bv4 32)))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x360))))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv2 32))) ?x296)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv3 32))) ?x312)))
 (let ((?x82 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1067X)))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1067X)))
 (=> $x110 (= ?x82 ?x302)))))))))
 ))
 (let (($x254 (forall ((input.ind-%var1066X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var1066X) (bvult input.ind-%var1066X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1066X)))
 (= $x110 $x252))))
 ))
 (let (($x282 (and $x254 $x314)))
 (let (($x191 (= $x282 true)))
 (let (($x238 (forall ((input.ind-%var1061X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1061X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1061X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var1060X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1060X)))
 (= $x53 false)))
 ))
 (let (($x324 (and $x243 $x238)))
 (let (($x206 (= $x324 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x298)))
 (let (($x311 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x226 (bvsub ?x96 ?x87)))
 (let (($x248 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x226) (bvult ?x96 ?x226))))
 (let ((?x189 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x189)))
 (let ((?x202 ((_ extract 63 32) ?x245)))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let (($x235 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x221 (and (and (and true $x235) $x203) $x248)))
 (let (($x218 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x284 (and $x218 $x221)))
 (let (($x300 (= true $x284)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (=> $x230 $x300)))
 (let (($x120 (= $x240 true)))
 (let (($x269 (= $x120 true)))
 (let (($x294 (= $x269 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x67 true)))
 (let (($x144 (= $x176 true)))
 (let (($x194 (= $x144 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x186 true)))
 (let (($x182 (= $x163 true)))
 (let (($x200 (= $x182 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x52 (= $x148 true)))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x11 (= $x127 true)))
 (let (($x128 (= $x11 true)))
 (let (($x137 (= $x128 true)))
 (let (($x142 (= $x230 true)))
 (let (($x198 (= $x142 true)))
 (let (($x180 (= $x198 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x159)))
 (let ((?x15 (bvand symbol.1 (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x15)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x78 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (and $x95 $x78)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x5 $x155)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x178 $x85)))
 (let (($x167 (not $x47)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x122 $x157)))
 (let (($x152 (and (not $x134) $x167)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x173 $x131)))
 (let (($x22 (not $x86)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x60 $x14)))
 (let (($x9 (and (not $x102) $x22)))
 (let (($x160 (and (and (and (and (and (and $x9 $x152) $x158) $x66) $x177) $x149) $x123)))
 (let (($x210 (and $x160 $x129)))
 (let (($x44 (= symbol.1 dst_symbol_addr.1)))
 (let (($x133 (and $x44 $x210)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x39 (or (bvugt input.memlabel-mem--symbol.1_begin ?x18) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x39) (or $x40 $x23)))))))
 (let (($x141 (and $x49 $x133)))
 (let (($x146 (= $x141 true)))
 (let (($x154 (= $x146 true)))
 (let (($x151 (= $x154 true)))
 (let (($x32 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x59 (= $x100 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x90)))
 (let (($x68 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x89 (= ?x84 input.dst.llvm-%n)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x91 (and $x79 $x10)))
 (let (($x17 (and $x91 $x34)))
 (let (($x6 (and $x17 $x59)))
 (let (($x140 (and $x6 $x151)))
 (let (($x175 (and $x140 $x180)))
 (let (($x212 (and $x175 $x137)))
 (let (($x72 (and $x212 $x29)))
 (let (($x211 (and $x72 $x200)))
 (let (($x19 (and $x211 $x194)))
 (let (($x301 (and $x19 $x294)))
 (let (($x147 (and $x301 $x289)))
 (let (($x333 (and $x147 $x206)))
 (let (($x7 (and $x333 $x191)))
 (let (($x326 (and $x7 $x113)))
 (let (($x266 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (and (not $x266) $x326)))
 (let (($x75 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (and $x75 $x295)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x216 (and $x256 $x272)))
 (let (($x228 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x170 (and $x228 $x216)))
 (let (($x81 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x27 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x81)))))
 (let (($x277 (=> (and $x230 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x81)))))
 (let (($x21 (and $x277 $x170)))
 (let (($x346 (=> $x21 $x13)))
 (not $x346)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x174 (bvule ?x213 (_ bv399 32))))
 (let (($x223 (= $x174 true)))
 (let (($x13 (= $x223 true)))
 (let (($x267 (forall ((input.ind-%var1073X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1073X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1073X) (_ bv0 32)))))
 ))
 (let (($x330 (forall ((input.ind-%var1072X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1072X)))
 (= $x53 false)))
 ))
 (let (($x325 (and $x330 $x267)))
 (let (($x113 (= $x325 true)))
 (let (($x314 (forall ((input.ind-%var1067X (_ BitVec 32)) )(let ((?x360 (bvadd symbol.1 (bvmul input.ind-%var1067X (_ bv4 32)))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x360))))
 (let ((?x312 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv2 32))) ?x296)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv3 32))) ?x312)))
 (let ((?x82 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1067X)))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1067X)))
 (=> $x110 (= ?x82 ?x302)))))))))
 ))
 (let (($x254 (forall ((input.ind-%var1066X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var1066X) (bvult input.ind-%var1066X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x110 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1066X)))
 (= $x110 $x252))))
 ))
 (let (($x282 (and $x254 $x314)))
 (let (($x191 (= $x282 true)))
 (let (($x238 (forall ((input.ind-%var1061X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1061X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1061X) (_ bv0 32)))))
 ))
 (let (($x243 (forall ((input.ind-%var1060X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1060X)))
 (= $x53 false)))
 ))
 (let (($x324 (and $x243 $x238)))
 (let (($x206 (= $x324 true)))
 (let ((?x298 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x298)))
 (let (($x311 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x226 (bvsub ?x96 ?x87)))
 (let (($x248 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x226) (bvult ?x96 ?x226))))
 (let ((?x189 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x189)))
 (let ((?x202 ((_ extract 63 32) ?x245)))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let (($x235 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x221 (and (and (and true $x235) $x203) $x248)))
 (let (($x218 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x284 (and $x218 $x221)))
 (let (($x300 (= true $x284)))
 (let (($x230 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x240 (=> $x230 $x300)))
 (let (($x120 (= $x240 true)))
 (let (($x269 (= $x120 true)))
 (let (($x294 (= $x269 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x67 true)))
 (let (($x144 (= $x176 true)))
 (let (($x194 (= $x144 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x186 true)))
 (let (($x182 (= $x163 true)))
 (let (($x200 (= $x182 true)))
 (let (($x148 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x52 (= $x148 true)))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x11 (= $x127 true)))
 (let (($x128 (= $x11 true)))
 (let (($x137 (= $x128 true)))
 (let (($x142 (= $x230 true)))
 (let (($x198 (= $x142 true)))
 (let (($x180 (= $x198 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x159)))
 (let ((?x15 (bvand symbol.1 (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x15)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x78 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (and $x95 $x78)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x5 $x155)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x178 $x85)))
 (let (($x167 (not $x47)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x122 $x157)))
 (let (($x152 (and (not $x134) $x167)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x173 $x131)))
 (let (($x22 (not $x86)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x60 $x14)))
 (let (($x9 (and (not $x102) $x22)))
 (let (($x160 (and (and (and (and (and (and $x9 $x152) $x158) $x66) $x177) $x149) $x123)))
 (let (($x210 (and $x160 $x129)))
 (let (($x44 (= symbol.1 dst_symbol_addr.1)))
 (let (($x133 (and $x44 $x210)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x39 (or (bvugt input.memlabel-mem--symbol.1_begin ?x18) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x39) (or $x40 $x23)))))))
 (let (($x141 (and $x49 $x133)))
 (let (($x146 (= $x141 true)))
 (let (($x154 (= $x146 true)))
 (let (($x151 (= $x154 true)))
 (let (($x32 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x59 (= $x100 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x90)))
 (let (($x68 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x89 (= ?x84 input.dst.llvm-%n)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x91 (and $x79 $x10)))
 (let (($x17 (and $x91 $x34)))
 (let (($x6 (and $x17 $x59)))
 (let (($x140 (and $x6 $x151)))
 (let (($x175 (and $x140 $x180)))
 (let (($x212 (and $x175 $x137)))
 (let (($x72 (and $x212 $x29)))
 (let (($x211 (and $x72 $x200)))
 (let (($x19 (and $x211 $x194)))
 (let (($x301 (and $x19 $x294)))
 (let (($x147 (and $x301 $x289)))
 (let (($x333 (and $x147 $x206)))
 (let (($x7 (and $x333 $x191)))
 (let (($x326 (and $x7 $x113)))
 (let (($x266 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x295 (and (not $x266) $x326)))
 (let (($x75 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x272 (and $x75 $x295)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x216 (and $x256 $x272)))
 (let (($x228 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x170 (and $x228 $x216)))
 (let (($x81 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x27 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x81)))))
 (let (($x277 (=> (and $x230 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x81)))))
 (let (($x21 (and $x277 $x170)))
 (let (($x346 (=> $x21 $x13)))
 (not $x346)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x139 (bvsle ?x328 (_ bv399 32))))
 (let (($x43 (= $x139 true)))
 (let (($x361 (= $x43 true)))
 (let (($x303 (forall ((input.ind-%var1091X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1091X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1091X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var1090X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1090X)))
 (= $x8 false)))
 ))
 (let (($x348 (and $x20 $x303)))
 (let (($x220 (= $x348 true)))
 (let (($x215 (forall ((input.ind-%var1085X (_ BitVec 32)) )(let ((?x242 (bvadd symbol.1 (bvmul input.ind-%var1085X (_ bv4 32)))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x242))))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv2 32))) ?x249)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv3 32))) ?x135)))
 (let ((?x330 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1085X)))
 (let (($x356 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1085X)))
 (=> $x356 (= ?x330 ?x233)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var1084X (_ BitVec 32)) )(let (($x35 (and (bvule (_ bv0 32) input.ind-%var1084X) (bvult input.ind-%var1084X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x356 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1084X)))
 (= $x356 $x35))))
 ))
 (let (($x255 (and $x314 $x215)))
 (let (($x287 (= $x255 true)))
 (let (($x234 (forall ((input.ind-%var1079X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1079X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1079X) (_ bv0 32)))))
 ))
 (let (($x324 (forall ((input.ind-%var1078X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1078X)))
 (= $x8 false)))
 ))
 (let (($x281 (and $x324 $x234)))
 (let (($x360 (= $x281 true)))
 (let ((?x185 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x311 (bvneg ?x185)))
 (let (($x288 (= ?x311 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x288 true)))
 (let (($x147 (= $x289 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x153 (bvsub ?x96 ?x87)))
 (let (($x247 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x153) (bvult ?x96 ?x153))))
 (let ((?x189 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x189)))
 (let ((?x202 ((_ extract 63 32) ?x245)))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let (($x251 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x284 (and (and (and true $x251) $x203) $x247)))
 (let (($x190 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x300 (and $x190 $x284)))
 (let (($x240 (= true $x300)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (=> $x322 $x240)))
 (let (($x269 (= $x120 true)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x176 true)))
 (let (($x194 (= $x144 true)))
 (let (($x19 (= $x194 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (= $x163 true)))
 (let (($x200 (= $x182 true)))
 (let (($x211 (= $x200 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x72 (= $x29 true)))
 (let (($x11 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x128 (= $x11 true)))
 (let (($x137 (= $x128 true)))
 (let (($x212 (= $x137 true)))
 (let (($x198 (= $x322 true)))
 (let (($x180 (= $x198 true)))
 (let (($x175 (= $x180 true)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x149)))
 (let ((?x55 (bvand symbol.1 (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x55)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x5 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x95 (= input.memlabel-mem--symbol.1_end ?x5)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x93 $x95)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x66 $x104)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x178 $x85)))
 (let (($x167 (not $x47)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x157 $x134)))
 (let (($x119 (and (not $x138) $x167)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x173 $x131)))
 (let (($x22 (not $x86)))
 (let (($x102 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x14 $x102)))
 (let (($x122 (and (not $x77) $x22)))
 (let (($x210 (and (and (and (and (and (and $x122 $x119) $x158) $x179) $x78) $x177) $x25)))
 (let (($x133 (and $x210 $x162)))
 (let (($x136 (= symbol.1 dst_symbol_addr.1)))
 (let (($x141 (and $x136 $x133)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x57 (or (bvugt input.memlabel-mem--symbol.1_begin ?x70) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x57) (or $x101 $x124)))))))
 (let (($x146 (and $x60 $x141)))
 (let (($x154 (= $x146 true)))
 (let (($x151 (= $x154 true)))
 (let (($x140 (= $x151 true)))
 (let (($x32 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x59 (= $x100 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x90)))
 (let (($x68 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x89 (= ?x84 input.dst.llvm-%n)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x91 (and $x79 $x10)))
 (let (($x17 (and $x91 $x34)))
 (let (($x6 (and $x17 $x59)))
 (let (($x142 (and $x6 $x140)))
 (let (($x127 (and $x142 $x175)))
 (let (($x148 (and $x127 $x212)))
 (let (($x186 (and $x148 $x72)))
 (let (($x67 (and $x186 $x211)))
 (let (($x80 (and $x67 $x19)))
 (let (($x298 (and $x80 $x301)))
 (let (($x111 (and $x298 $x147)))
 (let (($x125 (and $x111 $x360)))
 (let (($x38 (and $x125 $x287)))
 (let (($x352 (and $x38 $x220)))
 (let (($x222 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and (not $x222) $x352)))
 (let (($x332 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x313 (and $x332 $x58)))
 (let (($x250 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x357 (and $x250 $x313)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x46 (and $x56 $x357)))
 (let (($x97 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x228 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x97)))))
 (let (($x187 (=> (and $x322 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x97)))))
 (let (($x161 (and $x187 $x46)))
 (let (($x263 (=> $x161 $x361)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x139 (bvsle ?x328 (_ bv399 32))))
 (let (($x43 (= $x139 true)))
 (let (($x361 (= $x43 true)))
 (let (($x303 (forall ((input.ind-%var1091X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1091X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1091X) (_ bv0 32)))))
 ))
 (let (($x20 (forall ((input.ind-%var1090X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1090X)))
 (= $x8 false)))
 ))
 (let (($x348 (and $x20 $x303)))
 (let (($x220 (= $x348 true)))
 (let (($x215 (forall ((input.ind-%var1085X (_ BitVec 32)) )(let ((?x242 (bvadd symbol.1 (bvmul input.ind-%var1085X (_ bv4 32)))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x242))))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv2 32))) ?x249)))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv3 32))) ?x135)))
 (let ((?x330 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1085X)))
 (let (($x356 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1085X)))
 (=> $x356 (= ?x330 ?x233)))))))))
 ))
 (let (($x314 (forall ((input.ind-%var1084X (_ BitVec 32)) )(let (($x35 (and (bvule (_ bv0 32) input.ind-%var1084X) (bvult input.ind-%var1084X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x356 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1084X)))
 (= $x356 $x35))))
 ))
 (let (($x255 (and $x314 $x215)))
 (let (($x287 (= $x255 true)))
 (let (($x234 (forall ((input.ind-%var1079X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1079X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1079X) (_ bv0 32)))))
 ))
 (let (($x324 (forall ((input.ind-%var1078X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1078X)))
 (= $x8 false)))
 ))
 (let (($x281 (and $x324 $x234)))
 (let (($x360 (= $x281 true)))
 (let ((?x185 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x311 (bvneg ?x185)))
 (let (($x288 (= ?x311 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x288 true)))
 (let (($x147 (= $x289 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x153 (bvsub ?x96 ?x87)))
 (let (($x247 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x153) (bvult ?x96 ?x153))))
 (let ((?x189 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x189)))
 (let ((?x202 ((_ extract 63 32) ?x245)))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let (($x251 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x284 (and (and (and true $x251) $x203) $x247)))
 (let (($x190 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x300 (and $x190 $x284)))
 (let (($x240 (= true $x300)))
 (let (($x322 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (=> $x322 $x240)))
 (let (($x269 (= $x120 true)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x176 true)))
 (let (($x194 (= $x144 true)))
 (let (($x19 (= $x194 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (= $x163 true)))
 (let (($x200 (= $x182 true)))
 (let (($x211 (= $x200 true)))
 (let (($x52 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x72 (= $x29 true)))
 (let (($x11 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x128 (= $x11 true)))
 (let (($x137 (= $x128 true)))
 (let (($x212 (= $x137 true)))
 (let (($x198 (= $x322 true)))
 (let (($x180 (= $x198 true)))
 (let (($x175 (= $x180 true)))
 (let ((?x149 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x149)))
 (let ((?x55 (bvand symbol.1 (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x55)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x5 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x95 (= input.memlabel-mem--symbol.1_end ?x5)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x93 $x95)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x66 $x104)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x178 $x85)))
 (let (($x167 (not $x47)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (and $x157 $x134)))
 (let (($x119 (and (not $x138) $x167)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x173 $x131)))
 (let (($x22 (not $x86)))
 (let (($x102 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x14 $x102)))
 (let (($x122 (and (not $x77) $x22)))
 (let (($x210 (and (and (and (and (and (and $x122 $x119) $x158) $x179) $x78) $x177) $x25)))
 (let (($x133 (and $x210 $x162)))
 (let (($x136 (= symbol.1 dst_symbol_addr.1)))
 (let (($x141 (and $x136 $x133)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x57 (or (bvugt input.memlabel-mem--symbol.1_begin ?x70) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x57) (or $x101 $x124)))))))
 (let (($x146 (and $x60 $x141)))
 (let (($x154 (= $x146 true)))
 (let (($x151 (= $x154 true)))
 (let (($x140 (= $x151 true)))
 (let (($x32 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x59 (= $x100 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x90)))
 (let (($x68 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x89 (= ?x84 input.dst.llvm-%n)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x91 (and $x79 $x10)))
 (let (($x17 (and $x91 $x34)))
 (let (($x6 (and $x17 $x59)))
 (let (($x142 (and $x6 $x140)))
 (let (($x127 (and $x142 $x175)))
 (let (($x148 (and $x127 $x212)))
 (let (($x186 (and $x148 $x72)))
 (let (($x67 (and $x186 $x211)))
 (let (($x80 (and $x67 $x19)))
 (let (($x298 (and $x80 $x301)))
 (let (($x111 (and $x298 $x147)))
 (let (($x125 (and $x111 $x360)))
 (let (($x38 (and $x125 $x287)))
 (let (($x352 (and $x38 $x220)))
 (let (($x222 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x58 (and (not $x222) $x352)))
 (let (($x332 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x313 (and $x332 $x58)))
 (let (($x250 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x357 (and $x250 $x313)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x46 (and $x56 $x357)))
 (let (($x97 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x228 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x97)))))
 (let (($x187 (=> (and $x322 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x97)))))
 (let (($x161 (and $x187 $x46)))
 (let (($x263 (=> $x161 $x361)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x83 (bvsge ?x191 (_ bv0 32))))
 (let (($x121 (= $x83 true)))
 (let (($x327 (= $x121 true)))
 (let (($x252 (forall ((input.ind-%var1109X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1109X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1109X) (_ bv0 32)))))
 ))
 (let (($x272 (forall ((input.ind-%var1108X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1108X)))
 (= $x307 false)))
 ))
 (let (($x229 (and $x272 $x252)))
 (let (($x164 (= $x229 true)))
 (let (($x295 (forall ((input.ind-%var1103X (_ BitVec 32)) )(let ((?x267 (bvadd symbol.1 (bvmul input.ind-%var1103X (_ bv4 32)))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x110)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x310)))
 (let ((?x20 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1103X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1103X)))
 (=> $x225 (= ?x20 ?x53)))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1102X (_ BitVec 32)) )(let (($x107 (and (bvule (_ bv0 32) input.ind-%var1102X) (bvult input.ind-%var1102X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1102X)))
 (= $x225 $x107))))
 ))
 (let (($x346 (and $x215 $x295)))
 (let (($x347 (= $x346 true)))
 (let (($x325 (forall ((input.ind-%var1097X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1097X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1097X) (_ bv0 32)))))
 ))
 (let (($x281 (forall ((input.ind-%var1096X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1096X)))
 (= $x307 false)))
 ))
 (let (($x227 (and $x281 $x325)))
 (let (($x242 (= $x227 true)))
 (let ((?x311 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x288 (bvneg ?x311)))
 (let (($x289 (= ?x288 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x289 true)))
 (let (($x111 (= $x147 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x221 (bvsub ?x96 ?x87)))
 (let (($x246 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x221) (bvult ?x96 ?x221))))
 (let ((?x189 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x189)))
 (let ((?x202 ((_ extract 63 32) ?x245)))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x300 (and (and (and true $x248) $x203) $x246)))
 (let (($x201 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x240 (and $x201 $x300)))
 (let (($x120 (= true $x240)))
 (let (($x113 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (=> $x113 $x120)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x194 (= $x144 true)))
 (let (($x19 (= $x194 true)))
 (let (($x80 (= $x19 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x182 true)))
 (let (($x211 (= $x200 true)))
 (let (($x67 (= $x211 true)))
 (let (($x115 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x29 (= $x115 true)))
 (let (($x72 (= $x29 true)))
 (let (($x186 (= $x72 true)))
 (let (($x128 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x137 (= $x128 true)))
 (let (($x212 (= $x137 true)))
 (let (($x148 (= $x212 true)))
 (let (($x180 (= $x113 true)))
 (let (($x175 (= $x180 true)))
 (let (($x127 (= $x175 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x177)))
 (let ((?x159 (bvand symbol.1 (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x159)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x66 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x93 (= input.memlabel-mem--symbol.1_end ?x66)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x5 (and $x160 $x93)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x179 $x5)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x178 $x85)))
 (let (($x167 (not $x47)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (and $x134 $x138)))
 (let (($x15 (and (not $x152) $x167)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x173 $x131)))
 (let (($x22 (not $x86)))
 (let (($x77 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x102 $x77)))
 (let (($x157 (and (not $x9) $x22)))
 (let (($x133 (and (and (and (and (and (and $x157 $x15) $x158) $x105) $x95) $x78) $x155)))
 (let (($x141 (and $x133 $x129)))
 (let (($x44 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x44 $x141)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x26 (or (bvugt input.memlabel-mem--symbol.1_begin ?x171) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x26) (or $x99 $x94)))))))
 (let (($x154 (and $x14 $x146)))
 (let (($x151 (= $x154 true)))
 (let (($x140 (= $x151 true)))
 (let (($x142 (= $x140 true)))
 (let (($x32 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x59 (= $x100 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x90)))
 (let (($x68 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x89 (= ?x84 input.dst.llvm-%n)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x91 (and $x79 $x10)))
 (let (($x17 (and $x91 $x34)))
 (let (($x6 (and $x17 $x59)))
 (let (($x198 (and $x6 $x142)))
 (let (($x11 (and $x198 $x127)))
 (let (($x52 (and $x11 $x148)))
 (let (($x163 (and $x52 $x186)))
 (let (($x176 (and $x163 $x67)))
 (let (($x169 (and $x176 $x80)))
 (let (($x185 (and $x169 $x298)))
 (let (($x243 (and $x185 $x111)))
 (let (($x290 (and $x243 $x242)))
 (let (($x174 (and $x290 $x347)))
 (let (($x292 (and $x174 $x164)))
 (let (($x323 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x296 (and (not $x323) $x292)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x333 (and $x266 $x296)))
 (let (($x358 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x231 (and $x358 $x333)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x50 (and $x132 $x231)))
 (let (($x277 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x56 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x277)))))
 (let (($x283 (=> (and $x113 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x277)))))
 (let (($x98 (and $x283 $x50)))
 (let (($x291 (=> $x98 $x327)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x83 (bvsge ?x191 (_ bv0 32))))
 (let (($x121 (= $x83 true)))
 (let (($x327 (= $x121 true)))
 (let (($x252 (forall ((input.ind-%var1109X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1109X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1109X) (_ bv0 32)))))
 ))
 (let (($x272 (forall ((input.ind-%var1108X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1108X)))
 (= $x307 false)))
 ))
 (let (($x229 (and $x272 $x252)))
 (let (($x164 (= $x229 true)))
 (let (($x295 (forall ((input.ind-%var1103X (_ BitVec 32)) )(let ((?x267 (bvadd symbol.1 (bvmul input.ind-%var1103X (_ bv4 32)))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x267))))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv2 32))) ?x110)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x267 (_ bv3 32))) ?x310)))
 (let ((?x20 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1103X)))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1103X)))
 (=> $x225 (= ?x20 ?x53)))))))))
 ))
 (let (($x215 (forall ((input.ind-%var1102X (_ BitVec 32)) )(let (($x107 (and (bvule (_ bv0 32) input.ind-%var1102X) (bvult input.ind-%var1102X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x225 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1102X)))
 (= $x225 $x107))))
 ))
 (let (($x346 (and $x215 $x295)))
 (let (($x347 (= $x346 true)))
 (let (($x325 (forall ((input.ind-%var1097X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1097X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1097X) (_ bv0 32)))))
 ))
 (let (($x281 (forall ((input.ind-%var1096X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1096X)))
 (= $x307 false)))
 ))
 (let (($x227 (and $x281 $x325)))
 (let (($x242 (= $x227 true)))
 (let ((?x311 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x288 (bvneg ?x311)))
 (let (($x289 (= ?x288 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x289 true)))
 (let (($x111 (= $x147 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x221 (bvsub ?x96 ?x87)))
 (let (($x246 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x221) (bvult ?x96 ?x221))))
 (let ((?x189 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x245 (bvmul (_ bv4 64) ?x189)))
 (let ((?x202 ((_ extract 63 32) ?x245)))
 (let (($x203 (= (_ bv0 32) ?x202)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x300 (and (and (and true $x248) $x203) $x246)))
 (let (($x201 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x240 (and $x201 $x300)))
 (let (($x120 (= true $x240)))
 (let (($x113 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (=> $x113 $x120)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x144 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x194 (= $x144 true)))
 (let (($x19 (= $x194 true)))
 (let (($x80 (= $x19 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x182 true)))
 (let (($x211 (= $x200 true)))
 (let (($x67 (= $x211 true)))
 (let (($x115 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x29 (= $x115 true)))
 (let (($x72 (= $x29 true)))
 (let (($x186 (= $x72 true)))
 (let (($x128 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x137 (= $x128 true)))
 (let (($x212 (= $x137 true)))
 (let (($x148 (= $x212 true)))
 (let (($x180 (= $x113 true)))
 (let (($x175 (= $x180 true)))
 (let (($x127 (= $x175 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x177)))
 (let ((?x159 (bvand symbol.1 (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x159)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x66 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x93 (= input.memlabel-mem--symbol.1_end ?x66)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x5 (and $x160 $x93)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x179 $x5)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x47 (and $x178 $x85)))
 (let (($x167 (not $x47)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (and $x134 $x138)))
 (let (($x15 (and (not $x152) $x167)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x173 $x131)))
 (let (($x22 (not $x86)))
 (let (($x77 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x102 $x77)))
 (let (($x157 (and (not $x9) $x22)))
 (let (($x133 (and (and (and (and (and (and $x157 $x15) $x158) $x105) $x95) $x78) $x155)))
 (let (($x141 (and $x133 $x129)))
 (let (($x44 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x44 $x141)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x26 (or (bvugt input.memlabel-mem--symbol.1_begin ?x171) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x26) (or $x99 $x94)))))))
 (let (($x154 (and $x14 $x146)))
 (let (($x151 (= $x154 true)))
 (let (($x140 (= $x151 true)))
 (let (($x142 (= $x140 true)))
 (let (($x32 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x103 (= $x32 true)))
 (let (($x100 (= $x103 true)))
 (let (($x59 (= $x100 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x90)))
 (let (($x68 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x89 (= ?x84 input.dst.llvm-%n)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x91 (and $x79 $x10)))
 (let (($x17 (and $x91 $x34)))
 (let (($x6 (and $x17 $x59)))
 (let (($x198 (and $x6 $x142)))
 (let (($x11 (and $x198 $x127)))
 (let (($x52 (and $x11 $x148)))
 (let (($x163 (and $x52 $x186)))
 (let (($x176 (and $x163 $x67)))
 (let (($x169 (and $x176 $x80)))
 (let (($x185 (and $x169 $x298)))
 (let (($x243 (and $x185 $x111)))
 (let (($x290 (and $x243 $x242)))
 (let (($x174 (and $x290 $x347)))
 (let (($x292 (and $x174 $x164)))
 (let (($x323 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x296 (and (not $x323) $x292)))
 (let (($x266 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x333 (and $x266 $x296)))
 (let (($x358 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x231 (and $x358 $x333)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x50 (and $x132 $x231)))
 (let (($x277 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x56 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x277)))))
 (let (($x283 (=> (and $x113 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x277)))))
 (let (($x98 (and $x283 $x50)))
 (let (($x291 (=> $x98 $x327)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x287 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (bvule ?x287 input.dst.llvm-%n)))
 (let (($x299 (= $x108 true)))
 (let (($x13 (= $x299 true)))
 (let (($x35 (forall ((input.ind-%var1127X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1127X)))
 (=> $x302 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1127X) (_ bv0 32)))))
 ))
 (let (($x313 (forall ((input.ind-%var1126X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1126X)))
 (= $x302 false)))
 ))
 (let (($x213 (and $x313 $x35)))
 (let (($x279 (= $x213 true)))
 (let (($x58 (forall ((input.ind-%var1121X (_ BitVec 32)) )(let ((?x303 (bvadd symbol.1 (bvmul input.ind-%var1121X (_ bv4 32)))))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x303))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x303 (_ bv2 32))) ?x356)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x303 (_ bv3 32))) ?x278)))
 (let ((?x272 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1121X)))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1121X)))
 (=> $x282 (= ?x272 ?x8)))))))))
 ))
 (let (($x295 (forall ((input.ind-%var1120X (_ BitVec 32)) )(let (($x353 (and (bvule (_ bv0 32) input.ind-%var1120X) (bvult input.ind-%var1120X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1120X)))
 (= $x282 $x353))))
 ))
 (let (($x263 (and $x295 $x58)))
 (let (($x241 (= $x263 true)))
 (let (($x348 (forall ((input.ind-%var1115X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1115X)))
 (=> $x302 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1115X) (_ bv0 32)))))
 ))
 (let (($x227 (forall ((input.ind-%var1114X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1114X)))
 (= $x302 false)))
 ))
 (let (($x114 (and $x227 $x348)))
 (let (($x267 (= $x114 true)))
 (let ((?x288 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x288)))
 (let (($x147 (= ?x289 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x147 true)))
 (let (($x243 (= $x111 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x90)))
 (let (($x301 (= ?x84 input.dst.llvm-%n)))
 (let (($x298 (= $x301 true)))
 (let (($x185 (= $x298 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x189 (bvsub ?x96 ?x87)))
 (let (($x284 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x189) (bvult ?x96 ?x189))))
 (let ((?x251 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x248 (bvmul (_ bv4 64) ?x251)))
 (let ((?x247 ((_ extract 63 32) ?x248)))
 (let (($x183 (= (_ bv0 32) ?x247)))
 (let (($x145 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x153 (and (and (and true $x145) $x183) $x284)))
 (let (($x169 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x226 (and $x169 $x153)))
 (let (($x246 (= true $x226)))
 (let (($x220 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x300 (=> $x220 $x246)))
 (let (($x240 (= $x300 true)))
 (let (($x120 (= $x240 true)))
 (let (($x269 (= $x120 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x67 (= $x211 true)))
 (let (($x176 (= $x67 true)))
 (let (($x144 (= $x176 true)))
 (let (($x72 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x72 true)))
 (let (($x163 (= $x186 true)))
 (let (($x182 (= $x163 true)))
 (let (($x212 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x148 (= $x212 true)))
 (let (($x52 (= $x148 true)))
 (let (($x115 (= $x52 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x127 (= $x175 true)))
 (let (($x11 (= $x127 true)))
 (let (($x128 (= $x11 true)))
 (let (($x140 (= $x220 true)))
 (let (($x142 (= $x140 true)))
 (let (($x198 (= $x142 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x5)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x66)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x25 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x123 (= input.memlabel-mem--symbol.1_end ?x25)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x105 (and $x158 $x123)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x55 $x105)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (and $x134 $x138)))
 (let (($x119 (not $x152)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x86 $x22)))
 (let (($x85 (and (not $x157) $x119)))
 (let (($x77 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x102 $x77)))
 (let (($x122 (not $x9)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x14 $x41)))
 (let (($x131 (and (not $x44) $x122)))
 (let (($x155 (and (and (and (and (and (and $x131 $x85) $x47) $x15) $x210) $x160) $x93)))
 (let (($x133 (and $x155 $x95)))
 (let (($x59 (= symbol.1 dst_symbol_addr.1)))
 (let (($x177 (and $x59 $x133)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x57 (or (bvugt input.memlabel-mem--symbol.1_begin ?x39) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x57) (or $x23 $x99)))))))
 (let (($x129 (and $x106 $x177)))
 (let (($x141 (= $x129 true)))
 (let (($x146 (= $x141 true)))
 (let (($x154 (= $x146 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x17 (= $x34 true)))
 (let (($x89 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x91 (and $x79 $x10)))
 (let (($x32 (and $x91 $x17)))
 (let (($x151 (and $x32 $x154)))
 (let (($x180 (and $x151 $x198)))
 (let (($x137 (and $x180 $x128)))
 (let (($x29 (and $x137 $x115)))
 (let (($x200 (and $x29 $x182)))
 (let (($x194 (and $x200 $x144)))
 (let (($x294 (and $x194 $x269)))
 (let (($x311 (and $x294 $x185)))
 (let (($x324 (and $x311 $x243)))
 (let (($x309 (and $x324 $x267)))
 (let (($x139 (and $x309 $x241)))
 (let (($x223 (and $x139 $x279)))
 (let (($x273 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and (not $x273) $x223)))
 (let (($x222 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x222 $x249)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x75 $x125)))
 (let (($x256 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x256 $x208)))
 (let (($x187 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x187)))))
 (let (($x261 (=> (and $x220 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x187)))))
 (let (($x170 (and $x261 $x156)))
 (let (($x321 (=> $x170 $x13)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x287 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x108 (bvule ?x287 input.dst.llvm-%n)))
 (let (($x299 (= $x108 true)))
 (let (($x13 (= $x299 true)))
 (let (($x35 (forall ((input.ind-%var1127X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1127X)))
 (=> $x302 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1127X) (_ bv0 32)))))
 ))
 (let (($x313 (forall ((input.ind-%var1126X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1126X)))
 (= $x302 false)))
 ))
 (let (($x213 (and $x313 $x35)))
 (let (($x279 (= $x213 true)))
 (let (($x58 (forall ((input.ind-%var1121X (_ BitVec 32)) )(let ((?x303 (bvadd symbol.1 (bvmul input.ind-%var1121X (_ bv4 32)))))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x303))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x303 (_ bv2 32))) ?x356)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x303 (_ bv3 32))) ?x278)))
 (let ((?x272 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1121X)))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1121X)))
 (=> $x282 (= ?x272 ?x8)))))))))
 ))
 (let (($x295 (forall ((input.ind-%var1120X (_ BitVec 32)) )(let (($x353 (and (bvule (_ bv0 32) input.ind-%var1120X) (bvult input.ind-%var1120X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1120X)))
 (= $x282 $x353))))
 ))
 (let (($x263 (and $x295 $x58)))
 (let (($x241 (= $x263 true)))
 (let (($x348 (forall ((input.ind-%var1115X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1115X)))
 (=> $x302 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1115X) (_ bv0 32)))))
 ))
 (let (($x227 (forall ((input.ind-%var1114X (_ BitVec 32)) )(let (($x302 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1114X)))
 (= $x302 false)))
 ))
 (let (($x114 (and $x227 $x348)))
 (let (($x267 (= $x114 true)))
 (let ((?x288 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x288)))
 (let (($x147 (= ?x289 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x147 true)))
 (let (($x243 (= $x111 true)))
 (let ((?x90 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x90)))
 (let (($x301 (= ?x84 input.dst.llvm-%n)))
 (let (($x298 (= $x301 true)))
 (let (($x185 (= $x298 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x189 (bvsub ?x96 ?x87)))
 (let (($x284 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x189) (bvult ?x96 ?x189))))
 (let ((?x251 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x248 (bvmul (_ bv4 64) ?x251)))
 (let ((?x247 ((_ extract 63 32) ?x248)))
 (let (($x183 (= (_ bv0 32) ?x247)))
 (let (($x145 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x153 (and (and (and true $x145) $x183) $x284)))
 (let (($x169 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x226 (and $x169 $x153)))
 (let (($x246 (= true $x226)))
 (let (($x220 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x300 (=> $x220 $x246)))
 (let (($x240 (= $x300 true)))
 (let (($x120 (= $x240 true)))
 (let (($x269 (= $x120 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x67 (= $x211 true)))
 (let (($x176 (= $x67 true)))
 (let (($x144 (= $x176 true)))
 (let (($x72 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x72 true)))
 (let (($x163 (= $x186 true)))
 (let (($x182 (= $x163 true)))
 (let (($x212 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x148 (= $x212 true)))
 (let (($x52 (= $x148 true)))
 (let (($x115 (= $x52 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x127 (= $x175 true)))
 (let (($x11 (= $x127 true)))
 (let (($x128 (= $x11 true)))
 (let (($x140 (= $x220 true)))
 (let (($x142 (= $x140 true)))
 (let (($x198 (= $x142 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x5)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x66)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x25 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x123 (= input.memlabel-mem--symbol.1_end ?x25)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x105 (and $x158 $x123)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x55 $x105)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (and $x134 $x138)))
 (let (($x119 (not $x152)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x86 $x22)))
 (let (($x85 (and (not $x157) $x119)))
 (let (($x77 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x102 $x77)))
 (let (($x122 (not $x9)))
 (let (($x41 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x14 $x41)))
 (let (($x131 (and (not $x44) $x122)))
 (let (($x155 (and (and (and (and (and (and $x131 $x85) $x47) $x15) $x210) $x160) $x93)))
 (let (($x133 (and $x155 $x95)))
 (let (($x59 (= symbol.1 dst_symbol_addr.1)))
 (let (($x177 (and $x59 $x133)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x57 (or (bvugt input.memlabel-mem--symbol.1_begin ?x39) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x57) (or $x23 $x99)))))))
 (let (($x129 (and $x106 $x177)))
 (let (($x141 (= $x129 true)))
 (let (($x146 (= $x141 true)))
 (let (($x154 (= $x146 true)))
 (let (($x68 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x17 (= $x34 true)))
 (let (($x89 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x51 (= $x89 true)))
 (let (($x10 (= $x51 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x91 (and $x79 $x10)))
 (let (($x32 (and $x91 $x17)))
 (let (($x151 (and $x32 $x154)))
 (let (($x180 (and $x151 $x198)))
 (let (($x137 (and $x180 $x128)))
 (let (($x29 (and $x137 $x115)))
 (let (($x200 (and $x29 $x182)))
 (let (($x194 (and $x200 $x144)))
 (let (($x294 (and $x194 $x269)))
 (let (($x311 (and $x294 $x185)))
 (let (($x324 (and $x311 $x243)))
 (let (($x309 (and $x324 $x267)))
 (let (($x139 (and $x309 $x241)))
 (let (($x223 (and $x139 $x279)))
 (let (($x273 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x249 (and (not $x273) $x223)))
 (let (($x222 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x125 (and $x222 $x249)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x75 $x125)))
 (let (($x256 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x256 $x208)))
 (let (($x187 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x132 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x187)))))
 (let (($x261 (=> (and $x220 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x187)))))
 (let (($x170 (and $x261 $x156)))
 (let (($x321 (=> $x170 $x13)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x260 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let ((?x252 (bvadd symbol.1 (bvmul input.ind-%var1153X (_ bv4 32)))))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x187 (bvadd ?x96 (_ bv3 32))))
 (let ((?x276 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x96 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x166 (store ?x276 (bvadd ?x96 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x257 (store ?x166 (bvadd ?x96 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x209 (store ?x257 ?x187 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x343 (concat (select ?x209 (bvadd ?x252 (_ bv2 32))) (concat (select ?x209 (bvadd ?x252 (_ bv1 32))) (select ?x209 ?x252)))))
 (let ((?x313 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1153X)))
 (let (($x331 (= input.ind-%var1153X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x207 (= (ite $x331 input.spec-%var-i-0.L3%6%bbentry ?x313) (concat (select ?x209 (bvadd ?x252 (_ bv3 32))) ?x343))))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1153X)))
 (let (($x351 (or $x255 $x331)))
 (=> $x351 $x207))))))))))))))))
 ))
 (let (($x92 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x8 (bvule (_ bv0 32) input.ind-%var1152X)))
 (let (($x116 (and $x8 (bvult input.ind-%var1152X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x331 (= input.ind-%var1152X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1152X)))
 (let (($x351 (or $x255 $x331)))
 (= $x351 $x116)))))))
 ))
 (let (($x275 (and $x92 $x260)))
 (let (($x347 (= true true)))
 (let (($x48 (and $x347 $x275)))
 (let (($x265 (= $x48 true)))
 (let (($x107 (forall ((input.ind-%var1145X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1145X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1145X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1144X)))
 (= $x233 false)))
 ))
 (let (($x328 (and $x333 $x107)))
 (let (($x244 (= $x328 true)))
 (let (($x296 (forall ((input.ind-%var1139X (_ BitVec 32)) )(let ((?x252 (bvadd symbol.1 (bvmul input.ind-%var1139X (_ bv4 32)))))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x252))))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv2 32))) ?x225)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv3 32))) ?x359)))
 (let ((?x313 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1139X)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1139X)))
 (=> $x255 (= ?x313 ?x307)))))))))
 ))
 (let (($x58 (forall ((input.ind-%var1138X (_ BitVec 32)) )(let (($x8 (bvule (_ bv0 32) input.ind-%var1138X)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1138X)))
 (= $x255 (and $x8 (bvult input.ind-%var1138X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x291 (and $x58 $x296)))
 (let (($x293 (= $x291 true)))
 (let (($x229 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1133X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1133X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1132X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1132X)))
 (= $x233 false)))
 ))
 (let (($x12 (and $x114 $x229)))
 (let (($x303 (= $x12 true)))
 (let ((?x289 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x289)))
 (let (($x111 (= ?x147 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x243 (= $x111 true)))
 (let (($x324 (= $x243 true)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x203)))
 (let ((?x189 (bvand symbol.1 (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x189)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x245 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x251 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x248 (= input.memlabel-mem--symbol.1_end ?x251)))
 (let (($x235 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x247 (and $x235 $x248)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x239 $x247)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (and $x194 $x19)))
 (let (($x169 (not $x80)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x67 $x176)))
 (let (($x218 (and (not $x144) $x169)))
 (let (($x186 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x72 $x186)))
 (let (($x182 (not $x163)))
 (let (($x115 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x52 $x115)))
 (let (($x211 (and (not $x29) $x182)))
 (let (($x120 (and (and (and (and (and (and $x211 $x218) $x201) $x145) $x183) $x245) $x202)))
 (let (($x269 (and $x120 $x284)))
 (let (($x133 (= symbol.1 dst_symbol_addr.1)))
 (let (($x294 (and $x133 $x269)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x151 (or (bvugt input.memlabel-mem--symbol.1_begin ?x141) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x151) (or $x180 $x175)))))))
 (let (($x301 (and $x148 $x294)))
 (let (($x298 (= $x301 true)))
 (let (($x185 (= $x298 true)))
 (let (($x311 (= $x185 true)))
 (let (($x160 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x159 (= $x160 true)))
 (let (($x66 (= $x159 true)))
 (let (($x93 (= $x66 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x85 (bvsub ?x96 ?x87)))
 (let (($x167 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x85) (bvult ?x96 ?x85))))
 (let ((?x134 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x138 (bvmul (_ bv4 64) ?x134)))
 (let ((?x152 ((_ extract 63 32) ?x138)))
 (let (($x119 (= (_ bv0 32) ?x152)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x55 (and (and (and true $x157) $x119) $x167)))
 (let (($x9 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x158 (and $x9 $x55)))
 (let (($x25 (= true $x158)))
 (let (($x164 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x123 (=> $x164 $x25)))
 (let (($x105 (= $x123 true)))
 (let (($x210 (= $x105 true)))
 (let (($x162 (= $x210 true)))
 (let (($x59 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x14 (= $x59 true)))
 (let (($x41 (= $x14 true)))
 (let (($x44 (= $x41 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (= $x94 true)))
 (let (($x69 (= $x49 true)))
 (let (($x106 (= $x69 true)))
 (let (($x26 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x23 (= $x26 true)))
 (let (($x101 (= $x23 true)))
 (let (($x99 (= $x101 true)))
 (let (($x39 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x136 (= $x39 true)))
 (let (($x171 (= $x136 true)))
 (let (($x57 (= $x171 true)))
 (let (($x17 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x32 (= $x17 true)))
 (let (($x6 (= $x32 true)))
 (let (($x70 (= $x6 true)))
 (let (($x10 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x37 (= $x68 true)))
 (let (($x74 (= $x164 true)))
 (let (($x90 (= $x74 true)))
 (let (($x84 (= $x90 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x89 (and $x79 $x84)))
 (let (($x34 (and $x89 $x37)))
 (let (($x60 (and $x34 $x70)))
 (let (($x40 (and $x60 $x57)))
 (let (($x124 (and $x40 $x99)))
 (let (($x100 (and $x124 $x106)))
 (let (($x173 (and $x100 $x44)))
 (let (($x179 (and $x173 $x162)))
 (let (($x155 (and $x179 $x93)))
 (let (($x288 (and $x155 $x311)))
 (let (($x281 (and $x288 $x324)))
 (let (($x305 (and $x281 $x303)))
 (let (($x83 (and $x305 $x293)))
 (let (($x43 (and $x83 $x244)))
 (let (($x216 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and (not $x216) $x43)))
 (let (($x323 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x323 $x110)))
 (let (($x332 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x329 (and $x332 $x290)))
 (let (($x250 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x250 $x329)))
 (let (($x283 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x256 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x283)))))
 (let (($x237 (=> (and $x164 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x283)))))
 (let (($x46 (and $x237 $x117)))
 (let (($x205 (=> $x46 $x265)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x260 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let ((?x252 (bvadd symbol.1 (bvmul input.ind-%var1153X (_ bv4 32)))))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x187 (bvadd ?x96 (_ bv3 32))))
 (let ((?x276 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x96 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x166 (store ?x276 (bvadd ?x96 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x257 (store ?x166 (bvadd ?x96 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x209 (store ?x257 ?x187 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x343 (concat (select ?x209 (bvadd ?x252 (_ bv2 32))) (concat (select ?x209 (bvadd ?x252 (_ bv1 32))) (select ?x209 ?x252)))))
 (let ((?x313 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1153X)))
 (let (($x331 (= input.ind-%var1153X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x207 (= (ite $x331 input.spec-%var-i-0.L3%6%bbentry ?x313) (concat (select ?x209 (bvadd ?x252 (_ bv3 32))) ?x343))))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1153X)))
 (let (($x351 (or $x255 $x331)))
 (=> $x351 $x207))))))))))))))))
 ))
 (let (($x92 (forall ((input.ind-%var1152X (_ BitVec 32)) )(let (($x8 (bvule (_ bv0 32) input.ind-%var1152X)))
 (let (($x116 (and $x8 (bvult input.ind-%var1152X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x331 (= input.ind-%var1152X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1152X)))
 (let (($x351 (or $x255 $x331)))
 (= $x351 $x116)))))))
 ))
 (let (($x275 (and $x92 $x260)))
 (let (($x347 (= true true)))
 (let (($x48 (and $x347 $x275)))
 (let (($x265 (= $x48 true)))
 (let (($x107 (forall ((input.ind-%var1145X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1145X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1145X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1144X)))
 (= $x233 false)))
 ))
 (let (($x328 (and $x333 $x107)))
 (let (($x244 (= $x328 true)))
 (let (($x296 (forall ((input.ind-%var1139X (_ BitVec 32)) )(let ((?x252 (bvadd symbol.1 (bvmul input.ind-%var1139X (_ bv4 32)))))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x252))))
 (let ((?x359 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv2 32))) ?x225)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x252 (_ bv3 32))) ?x359)))
 (let ((?x313 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1139X)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1139X)))
 (=> $x255 (= ?x313 ?x307)))))))))
 ))
 (let (($x58 (forall ((input.ind-%var1138X (_ BitVec 32)) )(let (($x8 (bvule (_ bv0 32) input.ind-%var1138X)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1138X)))
 (= $x255 (and $x8 (bvult input.ind-%var1138X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x291 (and $x58 $x296)))
 (let (($x293 (= $x291 true)))
 (let (($x229 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1133X)))
 (=> $x233 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1133X) (_ bv0 32)))))
 ))
 (let (($x114 (forall ((input.ind-%var1132X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1132X)))
 (= $x233 false)))
 ))
 (let (($x12 (and $x114 $x229)))
 (let (($x303 (= $x12 true)))
 (let ((?x289 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x147 (bvneg ?x289)))
 (let (($x111 (= ?x147 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x243 (= $x111 true)))
 (let (($x324 (= $x243 true)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x203)))
 (let ((?x189 (bvand symbol.1 (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x189)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x245 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x251 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x248 (= input.memlabel-mem--symbol.1_end ?x251)))
 (let (($x235 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x247 (and $x235 $x248)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x239 $x247)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x80 (and $x194 $x19)))
 (let (($x169 (not $x80)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x67 $x176)))
 (let (($x218 (and (not $x144) $x169)))
 (let (($x186 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x72 $x186)))
 (let (($x182 (not $x163)))
 (let (($x115 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x52 $x115)))
 (let (($x211 (and (not $x29) $x182)))
 (let (($x120 (and (and (and (and (and (and $x211 $x218) $x201) $x145) $x183) $x245) $x202)))
 (let (($x269 (and $x120 $x284)))
 (let (($x133 (= symbol.1 dst_symbol_addr.1)))
 (let (($x294 (and $x133 $x269)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x151 (or (bvugt input.memlabel-mem--symbol.1_begin ?x141) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x151) (or $x180 $x175)))))))
 (let (($x301 (and $x148 $x294)))
 (let (($x298 (= $x301 true)))
 (let (($x185 (= $x298 true)))
 (let (($x311 (= $x185 true)))
 (let (($x160 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x159 (= $x160 true)))
 (let (($x66 (= $x159 true)))
 (let (($x93 (= $x66 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x85 (bvsub ?x96 ?x87)))
 (let (($x167 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x85) (bvult ?x96 ?x85))))
 (let ((?x134 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x138 (bvmul (_ bv4 64) ?x134)))
 (let ((?x152 ((_ extract 63 32) ?x138)))
 (let (($x119 (= (_ bv0 32) ?x152)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x55 (and (and (and true $x157) $x119) $x167)))
 (let (($x9 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x158 (and $x9 $x55)))
 (let (($x25 (= true $x158)))
 (let (($x164 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x123 (=> $x164 $x25)))
 (let (($x105 (= $x123 true)))
 (let (($x210 (= $x105 true)))
 (let (($x162 (= $x210 true)))
 (let (($x59 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x14 (= $x59 true)))
 (let (($x41 (= $x14 true)))
 (let (($x44 (= $x41 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (= $x94 true)))
 (let (($x69 (= $x49 true)))
 (let (($x106 (= $x69 true)))
 (let (($x26 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x23 (= $x26 true)))
 (let (($x101 (= $x23 true)))
 (let (($x99 (= $x101 true)))
 (let (($x39 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x136 (= $x39 true)))
 (let (($x171 (= $x136 true)))
 (let (($x57 (= $x171 true)))
 (let (($x17 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x32 (= $x17 true)))
 (let (($x6 (= $x32 true)))
 (let (($x70 (= $x6 true)))
 (let (($x10 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x37 (= $x68 true)))
 (let (($x74 (= $x164 true)))
 (let (($x90 (= $x74 true)))
 (let (($x84 (= $x90 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x89 (and $x79 $x84)))
 (let (($x34 (and $x89 $x37)))
 (let (($x60 (and $x34 $x70)))
 (let (($x40 (and $x60 $x57)))
 (let (($x124 (and $x40 $x99)))
 (let (($x100 (and $x124 $x106)))
 (let (($x173 (and $x100 $x44)))
 (let (($x179 (and $x173 $x162)))
 (let (($x155 (and $x179 $x93)))
 (let (($x288 (and $x155 $x311)))
 (let (($x281 (and $x288 $x324)))
 (let (($x305 (and $x281 $x303)))
 (let (($x83 (and $x305 $x293)))
 (let (($x43 (and $x83 $x244)))
 (let (($x216 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x110 (and (not $x216) $x43)))
 (let (($x323 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x290 (and $x323 $x110)))
 (let (($x332 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x329 (and $x332 $x290)))
 (let (($x250 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x250 $x329)))
 (let (($x283 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x256 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x283)))))
 (let (($x237 (=> (and $x164 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x283)))))
 (let (($x46 (and $x237 $x117)))
 (let (($x205 (=> $x46 $x265)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x16 (bvmul (_ bv4294967295 32) ?x139)))
 (let ((?x312 (bvneg ?x16)))
 (let (($x302 (= ?x312 ?x360)))
 (let (($x325 (= $x302 true)))
 (let (($x109 (forall ((input.ind-%var1171X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1171X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1171X) (_ bv0 32)))))
 ))
 (let (($x275 (forall ((input.ind-%var1170X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1170X)))
 (= $x53 false)))
 ))
 (let (($x5 (and $x275 $x109)))
 (let (($x38 (= $x5 true)))
 (let (($x336 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let ((?x33 (bvadd symbol.1 (bvmul input.ind-%var1165X (_ bv4 32)))))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x33))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv2 32))) ?x166)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv3 32))) ?x257)))
 (let ((?x333 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1165X)))
 (let (($x346 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (=> $x346 (= ?x333 ?x232)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var1164X) (bvult input.ind-%var1164X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x346 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (= $x346 $x234))))
 ))
 (let (($x337 (and $x296 $x336)))
 (let (($x343 (= $x337 true)))
 (let (($x213 (forall ((input.ind-%var1159X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1159X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1159X) (_ bv0 32)))))
 ))
 (let (($x12 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1158X)))
 (= $x53 false)))
 ))
 (let (($x7 (and $x12 $x213)))
 (let (($x252 (= $x7 true)))
 (let ((?x147 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x147)))
 (let (($x243 (= ?x111 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x298 true)))
 (let (($x311 (= $x185 true)))
 (let (($x288 (= $x311 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x248 (bvsub ?x96 ?x87)))
 (let (($x221 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x248) (bvult ?x96 ?x248))))
 (let ((?x246 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x239 (bvmul (_ bv4 64) ?x246)))
 (let ((?x235 ((_ extract 63 32) ?x239)))
 (let (($x251 (= (_ bv0 32) ?x235)))
 (let (($x199 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x189 (and (and (and true $x199) $x251) $x221)))
 (let (($x169 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x202 (and $x169 $x189)))
 (let (($x120 (= true $x202)))
 (let (($x279 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (=> $x279 $x120)))
 (let (($x284 (= $x203 true)))
 (let (($x269 (= $x284 true)))
 (let (($x294 (= $x269 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x67 true)))
 (let (($x144 (= $x176 true)))
 (let (($x190 (= $x144 true)))
 (let (($x72 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x72 true)))
 (let (($x163 (= $x186 true)))
 (let (($x182 (= $x163 true)))
 (let (($x133 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x52 (= $x133 true)))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x11 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x128 (= $x11 true)))
 (let (($x137 (= $x128 true)))
 (let (($x148 (= $x137 true)))
 (let (($x142 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x180 (= $x142 true)))
 (let (($x198 (= $x180 true)))
 (let (($x175 (= $x198 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x141 true)))
 (let (($x154 (= $x146 true)))
 (let (($x151 (= $x154 true)))
 (let (($x155 (= $x279 true)))
 (let (($x177 (= $x155 true)))
 (let (($x129 (= $x177 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x47)))
 (let ((?x149 (bvand symbol.1 (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x149)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x178 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x178)))
 (let (($x157 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (and $x157 $x134)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x22 $x138)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x41 $x44)))
 (let (($x102 (not $x173)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x100 $x59)))
 (let (($x9 (and (not $x14) $x102)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x99 $x124)))
 (let (($x49 (not $x94)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x26 $x23)))
 (let (($x106 (and (not $x101) $x49)))
 (let (($x105 (and (and (and (and (and (and $x106 $x9) $x131) $x86) $x152) $x78) $x85)))
 (let (($x210 (and $x105 $x104)))
 (let (($x84 (= symbol.1 dst_symbol_addr.1)))
 (let (($x162 (and $x84 $x210)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x37 (or (bvugt input.memlabel-mem--symbol.1_begin ?x10) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x37) (or $x6 $x70)))))))
 (let (($x179 (and $x40 $x162)))
 (let (($x160 (= $x179 true)))
 (let (($x159 (= $x160 true)))
 (let (($x66 (= $x159 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x93 (and $x79 $x66)))
 (let (($x212 (and $x93 $x129)))
 (let (($x140 (and $x212 $x151)))
 (let (($x127 (and $x140 $x175)))
 (let (($x95 (and $x127 $x148)))
 (let (($x200 (and $x95 $x29)))
 (let (($x211 (and $x200 $x182)))
 (let (($x194 (and $x211 $x190)))
 (let (($x301 (and $x194 $x294)))
 (let (($x289 (and $x301 $x288)))
 (let (($x227 (and $x289 $x281)))
 (let (($x219 (and $x227 $x252)))
 (let (($x258 (and $x219 $x343)))
 (let (($x35 (and $x258 $x38)))
 (let (($x357 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x310 (and (not $x357) $x35)))
 (let (($x273 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x98 (and $x273 $x310)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x266 $x98)))
 (let (($x358 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x282 (and $x358 $x267)))
 (let (($x261 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x250 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x261)))))
 (let (($x195 (=> (and $x279 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x261)))))
 (let (($x263 (and $x195 $x282)))
 (let (($x223 (=> $x263 $x325)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x16 (bvmul (_ bv4294967295 32) ?x139)))
 (let ((?x312 (bvneg ?x16)))
 (let (($x302 (= ?x312 ?x360)))
 (let (($x325 (= $x302 true)))
 (let (($x109 (forall ((input.ind-%var1171X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1171X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1171X) (_ bv0 32)))))
 ))
 (let (($x275 (forall ((input.ind-%var1170X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1170X)))
 (= $x53 false)))
 ))
 (let (($x5 (and $x275 $x109)))
 (let (($x38 (= $x5 true)))
 (let (($x336 (forall ((input.ind-%var1165X (_ BitVec 32)) )(let ((?x33 (bvadd symbol.1 (bvmul input.ind-%var1165X (_ bv4 32)))))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x33))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv2 32))) ?x166)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x33 (_ bv3 32))) ?x257)))
 (let ((?x333 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1165X)))
 (let (($x346 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1165X)))
 (=> $x346 (= ?x333 ?x232)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let (($x234 (and (bvule (_ bv0 32) input.ind-%var1164X) (bvult input.ind-%var1164X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x346 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1164X)))
 (= $x346 $x234))))
 ))
 (let (($x337 (and $x296 $x336)))
 (let (($x343 (= $x337 true)))
 (let (($x213 (forall ((input.ind-%var1159X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1159X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1159X) (_ bv0 32)))))
 ))
 (let (($x12 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1158X)))
 (= $x53 false)))
 ))
 (let (($x7 (and $x12 $x213)))
 (let (($x252 (= $x7 true)))
 (let ((?x147 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x111 (bvneg ?x147)))
 (let (($x243 (= ?x111 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x298 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x298 true)))
 (let (($x311 (= $x185 true)))
 (let (($x288 (= $x311 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x248 (bvsub ?x96 ?x87)))
 (let (($x221 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x248) (bvult ?x96 ?x248))))
 (let ((?x246 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x239 (bvmul (_ bv4 64) ?x246)))
 (let ((?x235 ((_ extract 63 32) ?x239)))
 (let (($x251 (= (_ bv0 32) ?x235)))
 (let (($x199 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x189 (and (and (and true $x199) $x251) $x221)))
 (let (($x169 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x202 (and $x169 $x189)))
 (let (($x120 (= true $x202)))
 (let (($x279 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (=> $x279 $x120)))
 (let (($x284 (= $x203 true)))
 (let (($x269 (= $x284 true)))
 (let (($x294 (= $x269 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x67 true)))
 (let (($x144 (= $x176 true)))
 (let (($x190 (= $x144 true)))
 (let (($x72 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x72 true)))
 (let (($x163 (= $x186 true)))
 (let (($x182 (= $x163 true)))
 (let (($x133 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x52 (= $x133 true)))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x11 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x128 (= $x11 true)))
 (let (($x137 (= $x128 true)))
 (let (($x148 (= $x137 true)))
 (let (($x142 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x180 (= $x142 true)))
 (let (($x198 (= $x180 true)))
 (let (($x175 (= $x198 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x146 (= $x141 true)))
 (let (($x154 (= $x146 true)))
 (let (($x151 (= $x154 true)))
 (let (($x155 (= $x279 true)))
 (let (($x177 (= $x155 true)))
 (let (($x129 (= $x177 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x104 (= (_ bv0 32) ?x47)))
 (let ((?x149 (bvand symbol.1 (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x149)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let ((?x178 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x134 (= input.memlabel-mem--symbol.1_end ?x178)))
 (let (($x157 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (and $x157 $x134)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x22 $x138)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x41 $x44)))
 (let (($x102 (not $x173)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x100 $x59)))
 (let (($x9 (and (not $x14) $x102)))
 (let (($x124 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x99 $x124)))
 (let (($x49 (not $x94)))
 (let (($x23 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x26 $x23)))
 (let (($x106 (and (not $x101) $x49)))
 (let (($x105 (and (and (and (and (and (and $x106 $x9) $x131) $x86) $x152) $x78) $x85)))
 (let (($x210 (and $x105 $x104)))
 (let (($x84 (= symbol.1 dst_symbol_addr.1)))
 (let (($x162 (and $x84 $x210)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x37 (or (bvugt input.memlabel-mem--symbol.1_begin ?x10) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x37) (or $x6 $x70)))))))
 (let (($x179 (and $x40 $x162)))
 (let (($x160 (= $x179 true)))
 (let (($x159 (= $x160 true)))
 (let (($x66 (= $x159 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x93 (and $x79 $x66)))
 (let (($x212 (and $x93 $x129)))
 (let (($x140 (and $x212 $x151)))
 (let (($x127 (and $x140 $x175)))
 (let (($x95 (and $x127 $x148)))
 (let (($x200 (and $x95 $x29)))
 (let (($x211 (and $x200 $x182)))
 (let (($x194 (and $x211 $x190)))
 (let (($x301 (and $x194 $x294)))
 (let (($x289 (and $x301 $x288)))
 (let (($x227 (and $x289 $x281)))
 (let (($x219 (and $x227 $x252)))
 (let (($x258 (and $x219 $x343)))
 (let (($x35 (and $x258 $x38)))
 (let (($x357 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x310 (and (not $x357) $x35)))
 (let (($x273 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x98 (and $x273 $x310)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x267 (and $x266 $x98)))
 (let (($x358 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x282 (and $x358 $x267)))
 (let (($x261 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x250 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x261)))))
 (let (($x195 (=> (and $x279 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x261)))))
 (let (($x263 (and $x195 $x282)))
 (let (($x223 (=> $x263 $x325)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x260 (bvsle ?x92 (_ bv399 32))))
 (let (($x293 (= $x260 true)))
 (let (($x197 (= $x293 true)))
 (let (($x205 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1189X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1189X) (_ bv0 32)))))
 ))
 (let (($x329 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1188X)))
 (= $x8 false)))
 ))
 (let (($x272 (and $x329 $x205)))
 (let (($x238 (= $x272 true)))
 (let (($x348 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let ((?x74 (bvadd symbol.1 (bvmul input.ind-%var1183X (_ bv4 32)))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x74))))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv2 32))) ?x278)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv3 32))) ?x291)))
 (let ((?x275 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1183X)))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1183X)))
 (=> $x355 (= ?x275 ?x135)))))))))
 ))
 (let (($x336 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x340 (and (bvule (_ bv0 32) input.ind-%var1182X) (bvult input.ind-%var1182X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1182X)))
 (= $x355 $x340))))
 ))
 (let (($x43 (and $x336 $x348)))
 (let (($x110 (= $x43 true)))
 (let (($x328 (forall ((input.ind-%var1177X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1177X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1177X) (_ bv0 32)))))
 ))
 (let (($x7 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1176X)))
 (= $x8 false)))
 ))
 (let (($x349 (and $x7 $x328)))
 (let (($x33 (= $x349 true)))
 (let ((?x111 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x111)))
 (let (($x324 (= ?x243 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x185 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x311 (= $x185 true)))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let (($x284 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x269 (= $x284 true)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x221 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x189 (= $x221 true)))
 (let (($x202 (= $x189 true)))
 (let (($x120 (= $x202 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x218)))
 (let ((?x169 (bvand symbol.1 (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x169)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x176 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x144 (= input.memlabel-mem--symbol.1_end ?x176)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x190 (and $x67 $x144)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x211 $x190)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x95 (and $x137 $x148)))
 (let (($x72 (and (not $x95) $x29)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x180 $x198)))
 (let (($x127 (not $x175)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x151 $x140)))
 (let (($x128 (and (not $x142) $x127)))
 (let (($x239 (and (and (and (and (and (and $x128 $x72) $x186) $x182) $x194) $x80) $x153)))
 (let (($x235 (and $x239 $x201)))
 (let (($x85 (= symbol.1 dst_symbol_addr.1)))
 (let (($x251 (and $x85 $x235)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x179 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x179) (or $x93 $x155)))))))
 (let (($x240 (and $x154 $x251)))
 (let (($x247 (= $x240 true)))
 (let (($x248 (= $x247 true)))
 (let (($x183 (= $x248 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x131 (bvsub ?x96 ?x87)))
 (let (($x158 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x131) (bvult ?x96 ?x131))))
 (let ((?x173 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvmul (_ bv4 64) ?x173)))
 (let ((?x9 ((_ extract 63 32) ?x102)))
 (let (($x167 (= (_ bv0 32) ?x9)))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x15 (and (and (and true $x41) $x167) $x158)))
 (let (($x106 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x178 (and $x106 $x15)))
 (let (($x134 (= true $x178)))
 (let (($x244 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (=> $x244 $x134)))
 (let (($x152 (= $x138 true)))
 (let (($x25 (= $x152 true)))
 (let (($x119 (= $x25 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x23 true)))
 (let (($x69 (= $x101 true)))
 (let (($x99 (= $x69 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x171 true)))
 (let (($x90 (= $x40 true)))
 (let (($x84 (= $x90 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x68)))
 (let (($x70 (= ?x37 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x34 (= ?x37 input.dst.llvm-%n)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x89 (= $x79 true)))
 (let (($x51 (= $x89 true)))
 (let (($x57 (= $x51 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x244 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x10 (and $x62 $x57)))
 (let (($x32 (and $x10 $x6)))
 (let (($x136 (and $x32 $x39)))
 (let (($x26 (and $x136 $x84)))
 (let (($x124 (and $x26 $x99)))
 (let (($x78 (and $x124 $x119)))
 (let (($x300 (and $x78 $x183)))
 (let (($x203 (and $x300 $x120)))
 (let (($x298 (and $x203 $x301)))
 (let (($x147 (and $x298 $x289)))
 (let (($x114 (and $x147 $x227)))
 (let (($x168 (and $x114 $x33)))
 (let (($x306 (and $x168 $x110)))
 (let (($x287 (and $x306 $x238)))
 (let (($x215 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and (not $x215) $x287)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (and $x216 $x207)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x225 (and $x222 $x224)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x305 (and $x75 $x225)))
 (let (($x237 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x358 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x237)))))
 (let (($x27 (=> (and $x244 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x237)))))
 (let (($x352 (and $x27 $x305)))
 (let (($x262 (=> $x352 $x197)))
 (not $x262)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x260 (bvsle ?x92 (_ bv399 32))))
 (let (($x293 (= $x260 true)))
 (let (($x197 (= $x293 true)))
 (let (($x205 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1189X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1189X) (_ bv0 32)))))
 ))
 (let (($x329 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1188X)))
 (= $x8 false)))
 ))
 (let (($x272 (and $x329 $x205)))
 (let (($x238 (= $x272 true)))
 (let (($x348 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let ((?x74 (bvadd symbol.1 (bvmul input.ind-%var1183X (_ bv4 32)))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x74))))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv2 32))) ?x278)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv3 32))) ?x291)))
 (let ((?x275 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1183X)))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1183X)))
 (=> $x355 (= ?x275 ?x135)))))))))
 ))
 (let (($x336 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x340 (and (bvule (_ bv0 32) input.ind-%var1182X) (bvult input.ind-%var1182X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x355 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1182X)))
 (= $x355 $x340))))
 ))
 (let (($x43 (and $x336 $x348)))
 (let (($x110 (= $x43 true)))
 (let (($x328 (forall ((input.ind-%var1177X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1177X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1177X) (_ bv0 32)))))
 ))
 (let (($x7 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1176X)))
 (= $x8 false)))
 ))
 (let (($x349 (and $x7 $x328)))
 (let (($x33 (= $x349 true)))
 (let ((?x111 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x111)))
 (let (($x324 (= ?x243 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x185 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x311 (= $x185 true)))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let (($x284 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x269 (= $x284 true)))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x221 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x189 (= $x221 true)))
 (let (($x202 (= $x189 true)))
 (let (($x120 (= $x202 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x218)))
 (let ((?x169 (bvand symbol.1 (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x169)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x176 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x144 (= input.memlabel-mem--symbol.1_end ?x176)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x190 (and $x67 $x144)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x211 $x190)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x95 (and $x137 $x148)))
 (let (($x72 (and (not $x95) $x29)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x180 $x198)))
 (let (($x127 (not $x175)))
 (let (($x140 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x151 $x140)))
 (let (($x128 (and (not $x142) $x127)))
 (let (($x239 (and (and (and (and (and (and $x128 $x72) $x186) $x182) $x194) $x80) $x153)))
 (let (($x235 (and $x239 $x201)))
 (let (($x85 (= symbol.1 dst_symbol_addr.1)))
 (let (($x251 (and $x85 $x235)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x179 (or (bvugt input.memlabel-mem--symbol.1_begin ?x104) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x179) (or $x93 $x155)))))))
 (let (($x240 (and $x154 $x251)))
 (let (($x247 (= $x240 true)))
 (let (($x248 (= $x247 true)))
 (let (($x183 (= $x248 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x131 (bvsub ?x96 ?x87)))
 (let (($x158 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x131) (bvult ?x96 ?x131))))
 (let ((?x173 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x102 (bvmul (_ bv4 64) ?x173)))
 (let ((?x9 ((_ extract 63 32) ?x102)))
 (let (($x167 (= (_ bv0 32) ?x9)))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x15 (and (and (and true $x41) $x167) $x158)))
 (let (($x106 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x178 (and $x106 $x15)))
 (let (($x134 (= true $x178)))
 (let (($x244 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (=> $x244 $x134)))
 (let (($x152 (= $x138 true)))
 (let (($x25 (= $x152 true)))
 (let (($x119 (= $x25 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x23 true)))
 (let (($x69 (= $x101 true)))
 (let (($x99 (= $x69 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x171 true)))
 (let (($x90 (= $x40 true)))
 (let (($x84 (= $x90 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x68)))
 (let (($x70 (= ?x37 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x34 (= ?x37 input.dst.llvm-%n)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x89 (= $x79 true)))
 (let (($x51 (= $x89 true)))
 (let (($x57 (= $x51 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x244 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x10 (and $x62 $x57)))
 (let (($x32 (and $x10 $x6)))
 (let (($x136 (and $x32 $x39)))
 (let (($x26 (and $x136 $x84)))
 (let (($x124 (and $x26 $x99)))
 (let (($x78 (and $x124 $x119)))
 (let (($x300 (and $x78 $x183)))
 (let (($x203 (and $x300 $x120)))
 (let (($x298 (and $x203 $x301)))
 (let (($x147 (and $x298 $x289)))
 (let (($x114 (and $x147 $x227)))
 (let (($x168 (and $x114 $x33)))
 (let (($x306 (and $x168 $x110)))
 (let (($x287 (and $x306 $x238)))
 (let (($x215 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and (not $x215) $x287)))
 (let (($x216 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x224 (and $x216 $x207)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x225 (and $x222 $x224)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x305 (and $x75 $x225)))
 (let (($x237 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x358 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x237)))))
 (let (($x27 (=> (and $x244 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x237)))))
 (let (($x352 (and $x27 $x305)))
 (let (($x262 (=> $x352 $x197)))
 (not $x262)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x343 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x322 (bvule ?x343 (_ bv399 32))))
 (let (($x297 (= $x322 true)))
 (let (($x290 (= $x297 true)))
 (let (($x234 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1207X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1207X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1206X)))
 (= $x307 false)))
 ))
 (let (($x347 (and $x98 $x234)))
 (let (($x276 (= $x347 true)))
 (let (($x310 (forall ((input.ind-%var1201X (_ BitVec 32)) )(let ((?x109 (bvadd symbol.1 (bvmul input.ind-%var1201X (_ bv4 32)))))
 (let ((?x346 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x109))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv2 32))) ?x346)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv3 32))) ?x209)))
 (let ((?x329 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1201X)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1201X)))
 (=> $x303 (= ?x329 ?x53)))))))))
 ))
 (let (($x348 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var1200X) (bvult input.ind-%var1200X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1200X)))
 (= $x303 $x242))))
 ))
 (let (($x302 (and $x348 $x310)))
 (let (($x325 (= $x302 true)))
 (let (($x5 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1195X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x307 false)))
 ))
 (let (($x63 (and $x349 $x5)))
 (let (($x74 (= $x63 true)))
 (let ((?x243 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x324 (bvneg ?x243)))
 (let (($x281 (= ?x324 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (= $x281 true)))
 (let (($x114 (= $x227 true)))
 (let (($x311 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let (($x147 (= $x289 true)))
 (let (($x269 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x189 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x202 (= $x189 true)))
 (let (($x120 (= $x202 true)))
 (let (($x203 (= $x120 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x80)))
 (let ((?x145 (bvand symbol.1 (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x145)))
 (let ((?x190 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x190)))
 (let ((?x211 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x67 (= input.memlabel-mem--symbol.1_end ?x211)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x176 (and $x245 $x67)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x182 $x176)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (and $x148 $x95)))
 (let (($x226 (and (not $x200) $x29)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x180 $x198)))
 (let (($x127 (not $x175)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x140 $x142)))
 (let (($x137 (and (not $x11) $x127)))
 (let (($x235 (and (and (and (and (and (and $x137 $x226) $x186) $x163) $x144) $x194) $x19)))
 (let (($x251 (and $x235 $x246)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x240 (and $x146 $x251)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x159 (or (bvugt input.memlabel-mem--symbol.1_begin ?x162) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x159) (or $x177 $x129)))))))
 (let (($x247 (and $x151 $x240)))
 (let (($x248 (= $x247 true)))
 (let (($x183 (= $x248 true)))
 (let (($x300 (= $x183 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x167 (bvsub ?x96 ?x87)))
 (let (($x122 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x167) (bvult ?x96 ?x167))))
 (let ((?x44 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x44)))
 (let ((?x102 ((_ extract 63 32) ?x173)))
 (let (($x9 (= (_ bv0 32) ?x102)))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x15 (and (and (and true $x41) $x9) $x122)))
 (let (($x106 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x178 (and $x106 $x15)))
 (let (($x134 (= true $x178)))
 (let (($x38 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (=> $x38 $x134)))
 (let (($x152 (= $x138 true)))
 (let (($x25 (= $x152 true)))
 (let (($x119 (= $x25 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x23 true)))
 (let (($x69 (= $x101 true)))
 (let (($x99 (= $x69 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x171 true)))
 (let (($x90 (= $x40 true)))
 (let (($x84 (= $x90 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x68)))
 (let (($x70 (= ?x37 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x34 (= ?x37 input.dst.llvm-%n)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x89 (= $x79 true)))
 (let (($x51 (= $x89 true)))
 (let (($x57 (= $x51 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x38 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x10 (and $x62 $x57)))
 (let (($x32 (and $x10 $x6)))
 (let (($x136 (and $x32 $x39)))
 (let (($x26 (and $x136 $x84)))
 (let (($x124 (and $x26 $x99)))
 (let (($x78 (and $x124 $x119)))
 (let (($x221 (and $x78 $x300)))
 (let (($x284 (and $x221 $x203)))
 (let (($x185 (and $x284 $x298)))
 (let (($x111 (and $x185 $x147)))
 (let (($x12 (and $x111 $x114)))
 (let (($x83 (and $x12 $x74)))
 (let (($x16 (and $x83 $x325)))
 (let (($x116 (and $x16 $x276)))
 (let (($x314 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and (not $x314) $x116)))
 (let (($x357 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x219 (and $x357 $x166)))
 (let (($x323 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x323 $x219)))
 (let (($x332 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x332 $x292)))
 (let (($x195 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x75 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x195)))))
 (let (($x228 (=> (and $x38 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x195)))))
 (let (($x351 (and $x228 $x249)))
 (let (($x271 (=> $x351 $x290)))
 (not $x271)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x343 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x322 (bvule ?x343 (_ bv399 32))))
 (let (($x297 (= $x322 true)))
 (let (($x290 (= $x297 true)))
 (let (($x234 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1207X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1207X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1206X)))
 (= $x307 false)))
 ))
 (let (($x347 (and $x98 $x234)))
 (let (($x276 (= $x347 true)))
 (let (($x310 (forall ((input.ind-%var1201X (_ BitVec 32)) )(let ((?x109 (bvadd symbol.1 (bvmul input.ind-%var1201X (_ bv4 32)))))
 (let ((?x346 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x109))))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv2 32))) ?x346)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x109 (_ bv3 32))) ?x209)))
 (let ((?x329 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1201X)))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1201X)))
 (=> $x303 (= ?x329 ?x53)))))))))
 ))
 (let (($x348 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var1200X) (bvult input.ind-%var1200X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x303 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1200X)))
 (= $x303 $x242))))
 ))
 (let (($x302 (and $x348 $x310)))
 (let (($x325 (= $x302 true)))
 (let (($x5 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1195X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1195X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1194X)))
 (= $x307 false)))
 ))
 (let (($x63 (and $x349 $x5)))
 (let (($x74 (= $x63 true)))
 (let ((?x243 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x324 (bvneg ?x243)))
 (let (($x281 (= ?x324 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (= $x281 true)))
 (let (($x114 (= $x227 true)))
 (let (($x311 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x288 (= $x311 true)))
 (let (($x289 (= $x288 true)))
 (let (($x147 (= $x289 true)))
 (let (($x269 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x294 (= $x269 true)))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x189 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x202 (= $x189 true)))
 (let (($x120 (= $x202 true)))
 (let (($x203 (= $x120 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x80)))
 (let ((?x145 (bvand symbol.1 (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x145)))
 (let ((?x190 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x190)))
 (let ((?x211 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x67 (= input.memlabel-mem--symbol.1_end ?x211)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x176 (and $x245 $x67)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x182 $x176)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (and $x148 $x95)))
 (let (($x226 (and (not $x200) $x29)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x180 $x198)))
 (let (($x127 (not $x175)))
 (let (($x142 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x140 $x142)))
 (let (($x137 (and (not $x11) $x127)))
 (let (($x235 (and (and (and (and (and (and $x137 $x226) $x186) $x163) $x144) $x194) $x19)))
 (let (($x251 (and $x235 $x246)))
 (let (($x146 (= symbol.1 dst_symbol_addr.1)))
 (let (($x240 (and $x146 $x251)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x159 (or (bvugt input.memlabel-mem--symbol.1_begin ?x162) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x159) (or $x177 $x129)))))))
 (let (($x247 (and $x151 $x240)))
 (let (($x248 (= $x247 true)))
 (let (($x183 (= $x248 true)))
 (let (($x300 (= $x183 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x167 (bvsub ?x96 ?x87)))
 (let (($x122 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x167) (bvult ?x96 ?x167))))
 (let ((?x44 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x173 (bvmul (_ bv4 64) ?x44)))
 (let ((?x102 ((_ extract 63 32) ?x173)))
 (let (($x9 (= (_ bv0 32) ?x102)))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x15 (and (and (and true $x41) $x9) $x122)))
 (let (($x106 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x178 (and $x106 $x15)))
 (let (($x134 (= true $x178)))
 (let (($x38 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (=> $x38 $x134)))
 (let (($x152 (= $x138 true)))
 (let (($x25 (= $x152 true)))
 (let (($x119 (= $x25 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x23 true)))
 (let (($x69 (= $x101 true)))
 (let (($x99 (= $x69 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x171 true)))
 (let (($x90 (= $x40 true)))
 (let (($x84 (= $x90 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x68)))
 (let (($x70 (= ?x37 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x34 (= ?x37 input.dst.llvm-%n)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x89 (= $x79 true)))
 (let (($x51 (= $x89 true)))
 (let (($x57 (= $x51 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x38 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x10 (and $x62 $x57)))
 (let (($x32 (and $x10 $x6)))
 (let (($x136 (and $x32 $x39)))
 (let (($x26 (and $x136 $x84)))
 (let (($x124 (and $x26 $x99)))
 (let (($x78 (and $x124 $x119)))
 (let (($x221 (and $x78 $x300)))
 (let (($x284 (and $x221 $x203)))
 (let (($x185 (and $x284 $x298)))
 (let (($x111 (and $x185 $x147)))
 (let (($x12 (and $x111 $x114)))
 (let (($x83 (and $x12 $x74)))
 (let (($x16 (and $x83 $x325)))
 (let (($x116 (and $x16 $x276)))
 (let (($x314 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and (not $x314) $x116)))
 (let (($x357 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x219 (and $x357 $x166)))
 (let (($x323 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x292 (and $x323 $x219)))
 (let (($x332 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x249 (and $x332 $x292)))
 (let (($x195 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x75 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x195)))))
 (let (($x228 (=> (and $x38 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x195)))))
 (let (($x351 (and $x228 $x249)))
 (let (($x271 (=> $x351 $x290)))
 (not $x271)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x123 (bvsge ?x110 (_ bv0 32))))
 (let (($x46 (= $x123 true)))
 (let (($x360 (= $x46 true)))
 (let (($x340 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1225X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x232 false)))
 ))
 (let (($x139 (and $x224 $x340)))
 (let (($x174 (= $x139 true)))
 (let (($x207 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let ((?x205 (bvadd symbol.1 (bvmul input.ind-%var1219X (_ bv4 32)))))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x205))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv2 32))) ?x355)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv3 32))) ?x206)))
 (let ((?x98 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1219X)))
 (let (($x337 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1219X)))
 (=> $x337 (= ?x98 ?x8)))))))))
 ))
 (let (($x310 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var1218X) (bvult input.ind-%var1218X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x337 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1218X)))
 (= $x337 $x229))))
 ))
 (let (($x262 (and $x310 $x207)))
 (let (($x265 (= $x262 true)))
 (let (($x272 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1213X) (_ bv0 32)))))
 ))
 (let (($x63 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1212X)))
 (= $x232 false)))
 ))
 (let (($x350 (and $x63 $x272)))
 (let (($x109 (= $x350 true)))
 (let ((?x324 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x324)))
 (let (($x227 (= ?x281 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x227 true)))
 (let (($x12 (= $x114 true)))
 (let (($x288 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x289 (= $x288 true)))
 (let (($x147 (= $x289 true)))
 (let (($x111 (= $x147 true)))
 (let (($x294 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x185 (= $x298 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x120 (= $x202 true)))
 (let (($x203 (= $x120 true)))
 (let (($x284 (= $x203 true)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x194)))
 (let ((?x218 (bvand symbol.1 (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x218)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x182 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x245 (= input.memlabel-mem--symbol.1_end ?x182)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x211 (and $x239 $x245)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x163 $x211)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x72 (and $x95 $x200)))
 (let (($x169 (and (not $x72) $x29)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x180 $x198)))
 (let (($x127 (not $x175)))
 (let (($x11 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x142 $x11)))
 (let (($x148 (and (not $x128) $x127)))
 (let (($x251 (and (and (and (and (and (and $x148 $x169) $x186) $x199) $x67) $x144) $x190)))
 (let (($x240 (and $x251 $x201)))
 (let (($x85 (= symbol.1 dst_symbol_addr.1)))
 (let (($x247 (and $x85 $x240)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x160) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x212 $x141)))))))
 (let (($x248 (and $x140 $x247)))
 (let (($x183 (= $x248 true)))
 (let (($x300 (= $x183 true)))
 (let (($x221 (= $x300 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x9 (bvsub ?x96 ?x87)))
 (let (($x55 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x9) (bvult ?x96 ?x9))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x22)))
 (let ((?x173 ((_ extract 63 32) ?x44)))
 (let (($x102 (= (_ bv0 32) ?x173)))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x15 (and (and (and true $x41) $x102) $x55)))
 (let (($x106 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x178 (and $x106 $x15)))
 (let (($x134 (= true $x178)))
 (let (($x238 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (=> $x238 $x134)))
 (let (($x152 (= $x138 true)))
 (let (($x25 (= $x152 true)))
 (let (($x119 (= $x25 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x23 true)))
 (let (($x69 (= $x101 true)))
 (let (($x99 (= $x69 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x171 true)))
 (let (($x90 (= $x40 true)))
 (let (($x84 (= $x90 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x68)))
 (let (($x70 (= ?x37 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x34 (= ?x37 input.dst.llvm-%n)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x89 (= $x79 true)))
 (let (($x51 (= $x89 true)))
 (let (($x57 (= $x51 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x238 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x10 (and $x62 $x57)))
 (let (($x32 (and $x10 $x6)))
 (let (($x136 (and $x32 $x39)))
 (let (($x26 (and $x136 $x84)))
 (let (($x124 (and $x26 $x99)))
 (let (($x78 (and $x124 $x119)))
 (let (($x189 (and $x78 $x221)))
 (let (($x269 (and $x189 $x284)))
 (let (($x311 (and $x269 $x185)))
 (let (($x243 (and $x311 $x111)))
 (let (($x7 (and $x243 $x12)))
 (let (($x354 (and $x7 $x109)))
 (let (($x260 (and $x354 $x265)))
 (let (($x312 (and $x260 $x174)))
 (let (($x331 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (and (not $x331) $x312)))
 (let (($x215 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x215 $x278)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x334 (and $x273 $x168)))
 (let (($x266 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x31 (and $x266 $x334)))
 (let (($x27 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x332 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x27)))))
 (let (($x56 (=> (and $x238 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x27)))))
 (let (($x282 (and $x56 $x31)))
 (let (($x313 (=> $x282 $x360)))
 (not $x313)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x123 (bvsge ?x110 (_ bv0 32))))
 (let (($x46 (= $x123 true)))
 (let (($x360 (= $x46 true)))
 (let (($x340 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1225X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1225X) (_ bv0 32)))))
 ))
 (let (($x224 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1224X)))
 (= $x232 false)))
 ))
 (let (($x139 (and $x224 $x340)))
 (let (($x174 (= $x139 true)))
 (let (($x207 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let ((?x205 (bvadd symbol.1 (bvmul input.ind-%var1219X (_ bv4 32)))))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x205))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv2 32))) ?x355)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x205 (_ bv3 32))) ?x206)))
 (let ((?x98 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1219X)))
 (let (($x337 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1219X)))
 (=> $x337 (= ?x98 ?x8)))))))))
 ))
 (let (($x310 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var1218X) (bvult input.ind-%var1218X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x337 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1218X)))
 (= $x337 $x229))))
 ))
 (let (($x262 (and $x310 $x207)))
 (let (($x265 (= $x262 true)))
 (let (($x272 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1213X) (_ bv0 32)))))
 ))
 (let (($x63 (forall ((input.ind-%var1212X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1212X)))
 (= $x232 false)))
 ))
 (let (($x350 (and $x63 $x272)))
 (let (($x109 (= $x350 true)))
 (let ((?x324 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x281 (bvneg ?x324)))
 (let (($x227 (= ?x281 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x227 true)))
 (let (($x12 (= $x114 true)))
 (let (($x288 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x289 (= $x288 true)))
 (let (($x147 (= $x289 true)))
 (let (($x111 (= $x147 true)))
 (let (($x294 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x294 true)))
 (let (($x298 (= $x301 true)))
 (let (($x185 (= $x298 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x120 (= $x202 true)))
 (let (($x203 (= $x120 true)))
 (let (($x284 (= $x203 true)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x194)))
 (let ((?x218 (bvand symbol.1 (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x218)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x182 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x245 (= input.memlabel-mem--symbol.1_end ?x182)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x211 (and $x239 $x245)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x163 $x211)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x72 (and $x95 $x200)))
 (let (($x169 (and (not $x72) $x29)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x180 $x198)))
 (let (($x127 (not $x175)))
 (let (($x11 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x142 $x11)))
 (let (($x148 (and (not $x128) $x127)))
 (let (($x251 (and (and (and (and (and (and $x148 $x169) $x186) $x199) $x67) $x144) $x190)))
 (let (($x240 (and $x251 $x201)))
 (let (($x85 (= symbol.1 dst_symbol_addr.1)))
 (let (($x247 (and $x85 $x240)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x160) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x212 $x141)))))))
 (let (($x248 (and $x140 $x247)))
 (let (($x183 (= $x248 true)))
 (let (($x300 (= $x183 true)))
 (let (($x221 (= $x300 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x9 (bvsub ?x96 ?x87)))
 (let (($x55 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x9) (bvult ?x96 ?x9))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x22)))
 (let ((?x173 ((_ extract 63 32) ?x44)))
 (let (($x102 (= (_ bv0 32) ?x173)))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x15 (and (and (and true $x41) $x102) $x55)))
 (let (($x106 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x178 (and $x106 $x15)))
 (let (($x134 (= true $x178)))
 (let (($x238 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (=> $x238 $x134)))
 (let (($x152 (= $x138 true)))
 (let (($x25 (= $x152 true)))
 (let (($x119 (= $x25 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x23 true)))
 (let (($x69 (= $x101 true)))
 (let (($x99 (= $x69 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (= $x171 true)))
 (let (($x90 (= $x40 true)))
 (let (($x84 (= $x90 true)))
 (let ((?x68 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x68)))
 (let (($x70 (= ?x37 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x34 (= ?x37 input.dst.llvm-%n)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x79 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x89 (= $x79 true)))
 (let (($x51 (= $x89 true)))
 (let (($x57 (= $x51 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x45 (= $x238 true)))
 (let (($x61 (= $x45 true)))
 (let (($x71 (= $x61 true)))
 (let (($x62 (and $x71 $x76)))
 (let (($x10 (and $x62 $x57)))
 (let (($x32 (and $x10 $x6)))
 (let (($x136 (and $x32 $x39)))
 (let (($x26 (and $x136 $x84)))
 (let (($x124 (and $x26 $x99)))
 (let (($x78 (and $x124 $x119)))
 (let (($x189 (and $x78 $x221)))
 (let (($x269 (and $x189 $x284)))
 (let (($x311 (and $x269 $x185)))
 (let (($x243 (and $x311 $x111)))
 (let (($x7 (and $x243 $x12)))
 (let (($x354 (and $x7 $x109)))
 (let (($x260 (and $x354 $x265)))
 (let (($x312 (and $x260 $x174)))
 (let (($x331 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (and (not $x331) $x312)))
 (let (($x215 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x168 (and $x215 $x278)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x334 (and $x273 $x168)))
 (let (($x266 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x31 (and $x266 $x334)))
 (let (($x27 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x332 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x27)))))
 (let (($x56 (=> (and $x238 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x27)))))
 (let (($x282 (and $x56 $x31)))
 (let (($x313 (=> $x282 $x360)))
 (not $x313)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (bvule ?x325 (_ bv399 32))))
 (let (($x223 (= $x105 true)))
 (let (($x197 (= $x223 true)))
 (let (($x242 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1243X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1243X) (_ bv0 32)))))
 ))
 (let (($x219 (forall ((input.ind-%var1242X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1242X)))
 (= $x135 false)))
 ))
 (let (($x92 (and $x219 $x242)))
 (let (($x58 (= $x92 true)))
 (let (($x166 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let ((?x234 (bvadd symbol.1 (bvmul input.ind-%var1237X (_ bv4 32)))))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x234))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv2 32))) ?x303)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv3 32))) ?x130)))
 (let ((?x224 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1237X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1237X)))
 (=> $x43 (= ?x224 ?x307)))))))))
 ))
 (let (($x207 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x213 (and (bvule (_ bv0 32) input.ind-%var1236X) (bvult input.ind-%var1236X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1236X)))
 (= $x43 $x213))))
 ))
 (let (($x271 (and $x207 $x166)))
 (let (($x48 (= $x271 true)))
 (let (($x347 (forall ((input.ind-%var1231X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1231X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1231X) (_ bv0 32)))))
 ))
 (let (($x350 (forall ((input.ind-%var1230X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1230X)))
 (= $x135 false)))
 ))
 (let (($x255 (and $x350 $x347)))
 (let (($x205 (= $x255 true)))
 (let ((?x281 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x227 (bvneg ?x281)))
 (let (($x114 (= ?x227 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x114 true)))
 (let (($x7 (= $x12 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x120 (bvsub ?x96 ?x87)))
 (let (($x294 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x120) (bvult ?x96 ?x120))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x300)))
 (let ((?x189 ((_ extract 63 32) ?x221)))
 (let (($x202 (= (_ bv0 32) ?x189)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x185 (and (and (and true $x248) $x202) $x294)))
 (let (($x251 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x311 (and $x251 $x185)))
 (let (($x288 (= true $x311)))
 (let (($x276 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x289 (=> $x276 $x288)))
 (let (($x147 (= $x289 true)))
 (let (($x111 (= $x147 true)))
 (let (($x243 (= $x111 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (= $x67 true)))
 (let (($x176 (= $x80 true)))
 (let (($x144 (= $x176 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x239 (= $x163 true)))
 (let (($x182 (= $x239 true)))
 (let (($x245 (= $x182 true)))
 (let (($x186 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x19 (= $x186 true)))
 (let (($x153 (= $x19 true)))
 (let (($x199 (= $x153 true)))
 (let (($x52 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x169 (= $x29 true)))
 (let (($x200 (= $x276 true)))
 (let (($x72 (= $x200 true)))
 (let (($x226 (= $x72 true)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x151)))
 (let ((?x154 (bvand symbol.1 (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x154)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x66 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x177 (= input.memlabel-mem--symbol.1_end ?x66)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (and $x93 $x177)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x159 $x155)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x138 $x152)))
 (let (($x119 (not $x25)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x15 $x178)))
 (let (($x162 (and (not $x134) $x119)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x122 $x158)))
 (let (($x157 (not $x9)))
 (let (($x173 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x44 $x173)))
 (let (($x55 (and (not $x102) $x157)))
 (let (($x128 (and (and (and (and (and (and $x55 $x162) $x179) $x160) $x212) $x141) $x149)))
 (let (($x137 (and $x128 $x47)))
 (let (($x84 (= symbol.1 dst_symbol_addr.1)))
 (let (($x180 (and $x84 $x137)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x124 (or (bvugt input.memlabel-mem--symbol.1_begin ?x101) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x124) (or $x59 $x100)))))))
 (let (($x198 (and $x22 $x180)))
 (let (($x175 (= $x198 true)))
 (let (($x127 (= $x175 true)))
 (let (($x148 (= $x127 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x136 (= $x39 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x51)))
 (let (($x34 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x10 (= ?x57 input.dst.llvm-%n)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x37 (and $x79 $x68)))
 (let (($x32 (and $x37 $x6)))
 (let (($x171 (and $x32 $x136)))
 (let (($x95 (and $x171 $x148)))
 (let (($x133 (and $x95 $x226)))
 (let (($x145 (and $x133 $x169)))
 (let (($x235 (and $x145 $x199)))
 (let (($x211 (and $x235 $x245)))
 (let (($x246 (and $x211 $x144)))
 (let (($x324 (and $x246 $x243)))
 (let (($x349 (and $x324 $x7)))
 (let (($x107 (and $x349 $x205)))
 (let (($x322 (and $x107 $x48)))
 (let (($x293 (and $x322 $x58)))
 (let (($x267 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x346 (and (not $x267) $x293)))
 (let (($x314 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (and $x314 $x346)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x216 $x83)))
 (let (($x222 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x28 (and $x222 $x233)))
 (let (($x228 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x266 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x228)))))
 (let (($x132 (=> (and $x276 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x228)))))
 (let (($x305 (and $x132 $x28)))
 (let (($x333 (=> $x305 $x197)))
 (not $x333)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x105 (bvule ?x325 (_ bv399 32))))
 (let (($x223 (= $x105 true)))
 (let (($x197 (= $x223 true)))
 (let (($x242 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1243X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1243X) (_ bv0 32)))))
 ))
 (let (($x219 (forall ((input.ind-%var1242X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1242X)))
 (= $x135 false)))
 ))
 (let (($x92 (and $x219 $x242)))
 (let (($x58 (= $x92 true)))
 (let (($x166 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let ((?x234 (bvadd symbol.1 (bvmul input.ind-%var1237X (_ bv4 32)))))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x234))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv2 32))) ?x303)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x234 (_ bv3 32))) ?x130)))
 (let ((?x224 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1237X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1237X)))
 (=> $x43 (= ?x224 ?x307)))))))))
 ))
 (let (($x207 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x213 (and (bvule (_ bv0 32) input.ind-%var1236X) (bvult input.ind-%var1236X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1236X)))
 (= $x43 $x213))))
 ))
 (let (($x271 (and $x207 $x166)))
 (let (($x48 (= $x271 true)))
 (let (($x347 (forall ((input.ind-%var1231X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1231X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1231X) (_ bv0 32)))))
 ))
 (let (($x350 (forall ((input.ind-%var1230X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1230X)))
 (= $x135 false)))
 ))
 (let (($x255 (and $x350 $x347)))
 (let (($x205 (= $x255 true)))
 (let ((?x281 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x227 (bvneg ?x281)))
 (let (($x114 (= ?x227 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x114 true)))
 (let (($x7 (= $x12 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x120 (bvsub ?x96 ?x87)))
 (let (($x294 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x120) (bvult ?x96 ?x120))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x300)))
 (let ((?x189 ((_ extract 63 32) ?x221)))
 (let (($x202 (= (_ bv0 32) ?x189)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x185 (and (and (and true $x248) $x202) $x294)))
 (let (($x251 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x311 (and $x251 $x185)))
 (let (($x288 (= true $x311)))
 (let (($x276 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x289 (=> $x276 $x288)))
 (let (($x147 (= $x289 true)))
 (let (($x111 (= $x147 true)))
 (let (($x243 (= $x111 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (= $x67 true)))
 (let (($x176 (= $x80 true)))
 (let (($x144 (= $x176 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x239 (= $x163 true)))
 (let (($x182 (= $x239 true)))
 (let (($x245 (= $x182 true)))
 (let (($x186 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x19 (= $x186 true)))
 (let (($x153 (= $x19 true)))
 (let (($x199 (= $x153 true)))
 (let (($x52 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x169 (= $x29 true)))
 (let (($x200 (= $x276 true)))
 (let (($x72 (= $x200 true)))
 (let (($x226 (= $x72 true)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x151)))
 (let ((?x154 (bvand symbol.1 (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x154)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x66 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x177 (= input.memlabel-mem--symbol.1_end ?x66)))
 (let (($x93 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (and $x93 $x177)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x159 $x155)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x138 $x152)))
 (let (($x119 (not $x25)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x134 (and $x15 $x178)))
 (let (($x162 (and (not $x134) $x119)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x122 $x158)))
 (let (($x157 (not $x9)))
 (let (($x173 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x44 $x173)))
 (let (($x55 (and (not $x102) $x157)))
 (let (($x128 (and (and (and (and (and (and $x55 $x162) $x179) $x160) $x212) $x141) $x149)))
 (let (($x137 (and $x128 $x47)))
 (let (($x84 (= symbol.1 dst_symbol_addr.1)))
 (let (($x180 (and $x84 $x137)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x124 (or (bvugt input.memlabel-mem--symbol.1_begin ?x101) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x124) (or $x59 $x100)))))))
 (let (($x198 (and $x22 $x180)))
 (let (($x175 (= $x198 true)))
 (let (($x127 (= $x175 true)))
 (let (($x148 (= $x127 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x136 (= $x39 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x51)))
 (let (($x34 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x10 (= ?x57 input.dst.llvm-%n)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x37 (and $x79 $x68)))
 (let (($x32 (and $x37 $x6)))
 (let (($x171 (and $x32 $x136)))
 (let (($x95 (and $x171 $x148)))
 (let (($x133 (and $x95 $x226)))
 (let (($x145 (and $x133 $x169)))
 (let (($x235 (and $x145 $x199)))
 (let (($x211 (and $x235 $x245)))
 (let (($x246 (and $x211 $x144)))
 (let (($x324 (and $x246 $x243)))
 (let (($x349 (and $x324 $x7)))
 (let (($x107 (and $x349 $x205)))
 (let (($x322 (and $x107 $x48)))
 (let (($x293 (and $x322 $x58)))
 (let (($x267 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x346 (and (not $x267) $x293)))
 (let (($x314 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x83 (and $x314 $x346)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x233 (and $x216 $x83)))
 (let (($x222 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x28 (and $x222 $x233)))
 (let (($x228 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x266 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x228)))))
 (let (($x132 (=> (and $x276 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x228)))))
 (let (($x305 (and $x132 $x28)))
 (let (($x333 (=> $x305 $x197)))
 (not $x333)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (bvsle ?x265 (_ bv399 32))))
 (let (($x113 (= $x104 true)))
 (let (($x290 (= $x113 true)))
 (let (($x229 (forall ((input.ind-%var1261X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1261X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1261X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var1260X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1260X)))
 (= $x53 false)))
 ))
 (let (($x343 (and $x168 $x229)))
 (let (($x296 (= $x343 true)))
 (let (($x278 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let ((?x340 (bvadd symbol.1 (bvmul input.ind-%var1255X (_ bv4 32)))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x340))))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv2 32))) ?x337)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv3 32))) ?x295)))
 (let ((?x219 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1255X)))
 (let (($x302 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1255X)))
 (=> $x302 (= ?x219 ?x232)))))))))
 ))
 (let (($x166 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) input.ind-%var1254X) (bvult input.ind-%var1254X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x302 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1254X)))
 (= $x302 $x328))))
 ))
 (let (($x313 (and $x166 $x278)))
 (let (($x117 (= $x313 true)))
 (let (($x139 (forall ((input.ind-%var1249X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1249X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1249X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var1248X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1248X)))
 (= $x53 false)))
 ))
 (let (($x258 (and $x255 $x139)))
 (let (($x234 (= $x258 true)))
 (let ((?x227 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x227)))
 (let (($x12 (= ?x114 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x7 (= $x12 true)))
 (let (($x349 (= $x7 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x298 (bvsub ?x96 ?x87)))
 (let (($x269 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x298) (bvult ?x96 ?x298))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x300)))
 (let ((?x189 ((_ extract 63 32) ?x221)))
 (let (($x202 (= (_ bv0 32) ?x189)))
 (let (($x301 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x311 (and (and (and true $x301) $x202) $x269)))
 (let (($x201 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x288 (and $x201 $x311)))
 (let (($x289 (= true $x288)))
 (let (($x174 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (=> $x174 $x289)))
 (let (($x111 (= $x147 true)))
 (let (($x243 (= $x111 true)))
 (let (($x324 (= $x243 true)))
 (let (($x80 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x80 true)))
 (let (($x144 (= $x176 true)))
 (let (($x246 (= $x144 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (= $x239 true)))
 (let (($x245 (= $x182 true)))
 (let (($x211 (= $x245 true)))
 (let (($x19 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x153 (= $x19 true)))
 (let (($x199 (= $x153 true)))
 (let (($x235 (= $x199 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x29 (= $x115 true)))
 (let (($x169 (= $x29 true)))
 (let (($x145 (= $x169 true)))
 (let (($x72 (= $x174 true)))
 (let (($x226 (= $x72 true)))
 (let (($x133 (= $x226 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x141)))
 (let ((?x142 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x142)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x159 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x93 (= input.memlabel-mem--symbol.1_end ?x159)))
 (let (($x85 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x66 (and $x85 $x93)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x160 $x66)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x138 $x152)))
 (let (($x119 (not $x25)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (and $x178 $x134)))
 (let (($x140 (and (not $x78) $x119)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x122 $x158)))
 (let (($x157 (not $x9)))
 (let (($x102 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x173 $x102)))
 (let (($x15 (and (not $x167) $x157)))
 (let (($x137 (and (and (and (and (and (and $x15 $x140) $x179) $x146) $x177) $x212) $x129)))
 (let (($x180 (and $x137 $x11)))
 (let (($x86 (= symbol.1 dst_symbol_addr.1)))
 (let (($x198 (and $x86 $x180)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x99) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x14 $x77)))))))
 (let (($x175 (and $x44 $x198)))
 (let (($x127 (= $x175 true)))
 (let (($x148 (= $x127 true)))
 (let (($x95 (= $x148 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x136 (= $x39 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x51)))
 (let (($x34 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x10 (= ?x57 input.dst.llvm-%n)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x37 (and $x79 $x68)))
 (let (($x32 (and $x37 $x6)))
 (let (($x171 (and $x32 $x136)))
 (let (($x200 (and $x171 $x95)))
 (let (($x52 (and $x200 $x133)))
 (let (($x186 (and $x52 $x145)))
 (let (($x163 (and $x186 $x235)))
 (let (($x67 (and $x163 $x211)))
 (let (($x218 (and $x67 $x246)))
 (let (($x281 (and $x218 $x324)))
 (let (($x63 (and $x281 $x349)))
 (let (($x359 (and $x63 $x234)))
 (let (($x123 (and $x359 $x117)))
 (let (($x297 (and $x123 $x296)))
 (let (($x225 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x355 (and (not $x225) $x297)))
 (let (($x331 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x354 (and $x331 $x355)))
 (let (($x357 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x35 (and $x357 $x354)))
 (let (($x323 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x323 $x35)))
 (let (($x56 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x222 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x56)))))
 (let (($x256 (=> (and $x174 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x56)))))
 (let (($x249 (and $x256 $x81)))
 (let (($x275 (=> $x249 $x290)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x104 (bvsle ?x265 (_ bv399 32))))
 (let (($x113 (= $x104 true)))
 (let (($x290 (= $x113 true)))
 (let (($x229 (forall ((input.ind-%var1261X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1261X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1261X) (_ bv0 32)))))
 ))
 (let (($x168 (forall ((input.ind-%var1260X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1260X)))
 (= $x53 false)))
 ))
 (let (($x343 (and $x168 $x229)))
 (let (($x296 (= $x343 true)))
 (let (($x278 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let ((?x340 (bvadd symbol.1 (bvmul input.ind-%var1255X (_ bv4 32)))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x340))))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv2 32))) ?x337)))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x340 (_ bv3 32))) ?x295)))
 (let ((?x219 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1255X)))
 (let (($x302 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1255X)))
 (=> $x302 (= ?x219 ?x232)))))))))
 ))
 (let (($x166 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let (($x328 (and (bvule (_ bv0 32) input.ind-%var1254X) (bvult input.ind-%var1254X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x302 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1254X)))
 (= $x302 $x328))))
 ))
 (let (($x313 (and $x166 $x278)))
 (let (($x117 (= $x313 true)))
 (let (($x139 (forall ((input.ind-%var1249X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1249X)))
 (=> $x53 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1249X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var1248X (_ BitVec 32)) )(let (($x53 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1248X)))
 (= $x53 false)))
 ))
 (let (($x258 (and $x255 $x139)))
 (let (($x234 (= $x258 true)))
 (let ((?x227 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x114 (bvneg ?x227)))
 (let (($x12 (= ?x114 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x7 (= $x12 true)))
 (let (($x349 (= $x7 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x298 (bvsub ?x96 ?x87)))
 (let (($x269 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x298) (bvult ?x96 ?x298))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x300)))
 (let ((?x189 ((_ extract 63 32) ?x221)))
 (let (($x202 (= (_ bv0 32) ?x189)))
 (let (($x301 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x311 (and (and (and true $x301) $x202) $x269)))
 (let (($x201 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x288 (and $x201 $x311)))
 (let (($x289 (= true $x288)))
 (let (($x174 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (=> $x174 $x289)))
 (let (($x111 (= $x147 true)))
 (let (($x243 (= $x111 true)))
 (let (($x324 (= $x243 true)))
 (let (($x80 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x80 true)))
 (let (($x144 (= $x176 true)))
 (let (($x246 (= $x144 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (= $x239 true)))
 (let (($x245 (= $x182 true)))
 (let (($x211 (= $x245 true)))
 (let (($x19 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x153 (= $x19 true)))
 (let (($x199 (= $x153 true)))
 (let (($x235 (= $x199 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x29 (= $x115 true)))
 (let (($x169 (= $x29 true)))
 (let (($x145 (= $x169 true)))
 (let (($x72 (= $x174 true)))
 (let (($x226 (= $x72 true)))
 (let (($x133 (= $x226 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x141)))
 (let ((?x142 (bvand symbol.1 (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x142)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x159 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x93 (= input.memlabel-mem--symbol.1_end ?x159)))
 (let (($x85 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x66 (and $x85 $x93)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x160 $x66)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x138 $x152)))
 (let (($x119 (not $x25)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (and $x178 $x134)))
 (let (($x140 (and (not $x78) $x119)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x122 $x158)))
 (let (($x157 (not $x9)))
 (let (($x102 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x173 $x102)))
 (let (($x15 (and (not $x167) $x157)))
 (let (($x137 (and (and (and (and (and (and $x15 $x140) $x179) $x146) $x177) $x212) $x129)))
 (let (($x180 (and $x137 $x11)))
 (let (($x86 (= symbol.1 dst_symbol_addr.1)))
 (let (($x198 (and $x86 $x180)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x99) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x14 $x77)))))))
 (let (($x175 (and $x44 $x198)))
 (let (($x127 (= $x175 true)))
 (let (($x148 (= $x127 true)))
 (let (($x95 (= $x148 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x136 (= $x39 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x51)))
 (let (($x34 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x10 (= ?x57 input.dst.llvm-%n)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x37 (and $x79 $x68)))
 (let (($x32 (and $x37 $x6)))
 (let (($x171 (and $x32 $x136)))
 (let (($x200 (and $x171 $x95)))
 (let (($x52 (and $x200 $x133)))
 (let (($x186 (and $x52 $x145)))
 (let (($x163 (and $x186 $x235)))
 (let (($x67 (and $x163 $x211)))
 (let (($x218 (and $x67 $x246)))
 (let (($x281 (and $x218 $x324)))
 (let (($x63 (and $x281 $x349)))
 (let (($x359 (and $x63 $x234)))
 (let (($x123 (and $x359 $x117)))
 (let (($x297 (and $x123 $x296)))
 (let (($x225 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x355 (and (not $x225) $x297)))
 (let (($x331 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x354 (and $x331 $x355)))
 (let (($x357 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x35 (and $x357 $x354)))
 (let (($x323 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x323 $x35)))
 (let (($x56 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x222 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x56)))))
 (let (($x256 (=> (and $x174 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x56)))))
 (let (($x249 (and $x256 $x81)))
 (let (($x275 (=> $x249 $x290)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x48 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (bvsge ?x48 (_ bv0 32))))
 (let (($x220 (= $x40 true)))
 (let (($x360 (= $x220 true)))
 (let (($x213 (forall ((input.ind-%var1279X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1279X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1279X) (_ bv0 32)))))
 ))
 (let (($x83 (forall ((input.ind-%var1278X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1278X)))
 (= $x8 false)))
 ))
 (let (($x110 (and $x83 $x213)))
 (let (($x336 (= $x110 true)))
 (let (($x346 (forall ((input.ind-%var1273X (_ BitVec 32)) )(let ((?x242 (bvadd symbol.1 (bvmul input.ind-%var1273X (_ bv4 32)))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x242))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv2 32))) ?x43)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv3 32))) ?x252)))
 (let ((?x168 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1273X)))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1273X)))
 (=> $x262 (= ?x168 ?x135)))))))))
 ))
 (let (($x278 (forall ((input.ind-%var1272X (_ BitVec 32)) )(let (($x5 (and (bvule (_ bv0 32) input.ind-%var1272X) (bvult input.ind-%var1272X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1272X)))
 (= $x262 $x5))))
 ))
 (let (($x333 (and $x278 $x346)))
 (let (($x263 (= $x333 true)))
 (let (($x92 (forall ((input.ind-%var1267X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1267X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1267X) (_ bv0 32)))))
 ))
 (let (($x258 (forall ((input.ind-%var1266X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1266X)))
 (= $x8 false)))
 ))
 (let (($x306 (and $x258 $x92)))
 (let (($x340 (= $x306 true)))
 (let ((?x114 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x114)))
 (let (($x7 (= ?x12 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x349 (= $x7 true)))
 (let (($x63 (= $x349 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x185 (bvsub ?x96 ?x87)))
 (let (($x284 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x185) (bvult ?x96 ?x185))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x300)))
 (let ((?x189 ((_ extract 63 32) ?x221)))
 (let (($x202 (= (_ bv0 32) ?x189)))
 (let (($x294 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x288 (and (and (and true $x294) $x202) $x284)))
 (let (($x240 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x289 (and $x240 $x288)))
 (let (($x147 (= true $x289)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (=> $x58 $x147)))
 (let (($x243 (= $x111 true)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x176 true)))
 (let (($x246 (= $x144 true)))
 (let (($x218 (= $x246 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x245 (= $x182 true)))
 (let (($x211 (= $x245 true)))
 (let (($x67 (= $x211 true)))
 (let (($x153 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x199 (= $x153 true)))
 (let (($x235 (= $x199 true)))
 (let (($x163 (= $x235 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x169 (= $x29 true)))
 (let (($x145 (= $x169 true)))
 (let (($x186 (= $x145 true)))
 (let (($x226 (= $x58 true)))
 (let (($x133 (= $x226 true)))
 (let (($x52 (= $x133 true)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x212)))
 (let ((?x151 (bvand symbol.1 (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x151)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x160 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x160)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x159 (and $x128 $x85)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x146 $x159)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x138 $x152)))
 (let (($x119 (not $x25)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x162 (and $x134 $x78)))
 (let (($x154 (and (not $x162) $x119)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x122 $x158)))
 (let (($x157 (not $x9)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x102 $x167)))
 (let (($x178 (and (not $x55) $x157)))
 (let (($x180 (and (and (and (and (and (and $x178 $x154) $x179) $x210) $x93) $x177) $x155)))
 (let (($x198 (and $x180 $x47)))
 (let (($x84 (= symbol.1 dst_symbol_addr.1)))
 (let (($x175 (and $x84 $x198)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x106 (or (bvugt input.memlabel-mem--symbol.1_begin ?x94) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x106) (or $x41 $x131)))))))
 (let (($x127 (and $x173 $x175)))
 (let (($x148 (= $x127 true)))
 (let (($x95 (= $x148 true)))
 (let (($x200 (= $x95 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x136 (= $x39 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x51)))
 (let (($x34 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x10 (= ?x57 input.dst.llvm-%n)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x37 (and $x79 $x68)))
 (let (($x32 (and $x37 $x6)))
 (let (($x171 (and $x32 $x136)))
 (let (($x72 (and $x171 $x200)))
 (let (($x115 (and $x72 $x52)))
 (let (($x19 (and $x115 $x186)))
 (let (($x239 (and $x19 $x163)))
 (let (($x80 (and $x239 $x67)))
 (let (($x190 (and $x80 $x218)))
 (let (($x227 (and $x190 $x281)))
 (let (($x350 (and $x227 $x63)))
 (let (($x257 (and $x350 $x340)))
 (let (($x105 (and $x257 $x263)))
 (let (($x46 (and $x105 $x336)))
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x303 (and (not $x292) $x46)))
 (let (($x267 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x267 $x303)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x215 $x107)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x97 (and $x273 $x287)))
 (let (($x132 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x323 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x250 (=> (and $x58 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x132)))))
 (let (($x31 (and $x250 $x97)))
 (let (($x329 (=> $x31 $x360)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x48 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x40 (bvsge ?x48 (_ bv0 32))))
 (let (($x220 (= $x40 true)))
 (let (($x360 (= $x220 true)))
 (let (($x213 (forall ((input.ind-%var1279X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1279X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1279X) (_ bv0 32)))))
 ))
 (let (($x83 (forall ((input.ind-%var1278X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1278X)))
 (= $x8 false)))
 ))
 (let (($x110 (and $x83 $x213)))
 (let (($x336 (= $x110 true)))
 (let (($x346 (forall ((input.ind-%var1273X (_ BitVec 32)) )(let ((?x242 (bvadd symbol.1 (bvmul input.ind-%var1273X (_ bv4 32)))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x242))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv2 32))) ?x43)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x242 (_ bv3 32))) ?x252)))
 (let ((?x168 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1273X)))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1273X)))
 (=> $x262 (= ?x168 ?x135)))))))))
 ))
 (let (($x278 (forall ((input.ind-%var1272X (_ BitVec 32)) )(let (($x5 (and (bvule (_ bv0 32) input.ind-%var1272X) (bvult input.ind-%var1272X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x262 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1272X)))
 (= $x262 $x5))))
 ))
 (let (($x333 (and $x278 $x346)))
 (let (($x263 (= $x333 true)))
 (let (($x92 (forall ((input.ind-%var1267X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1267X)))
 (=> $x8 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1267X) (_ bv0 32)))))
 ))
 (let (($x258 (forall ((input.ind-%var1266X (_ BitVec 32)) )(let (($x8 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1266X)))
 (= $x8 false)))
 ))
 (let (($x306 (and $x258 $x92)))
 (let (($x340 (= $x306 true)))
 (let ((?x114 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x12 (bvneg ?x114)))
 (let (($x7 (= ?x12 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x349 (= $x7 true)))
 (let (($x63 (= $x349 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x185 (bvsub ?x96 ?x87)))
 (let (($x284 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x185) (bvult ?x96 ?x185))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x300)))
 (let ((?x189 ((_ extract 63 32) ?x221)))
 (let (($x202 (= (_ bv0 32) ?x189)))
 (let (($x294 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x288 (and (and (and true $x294) $x202) $x284)))
 (let (($x240 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x289 (and $x240 $x288)))
 (let (($x147 (= true $x289)))
 (let (($x58 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (=> $x58 $x147)))
 (let (($x243 (= $x111 true)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x176 true)))
 (let (($x246 (= $x144 true)))
 (let (($x218 (= $x246 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x245 (= $x182 true)))
 (let (($x211 (= $x245 true)))
 (let (($x67 (= $x211 true)))
 (let (($x153 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x199 (= $x153 true)))
 (let (($x235 (= $x199 true)))
 (let (($x163 (= $x235 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x169 (= $x29 true)))
 (let (($x145 (= $x169 true)))
 (let (($x186 (= $x145 true)))
 (let (($x226 (= $x58 true)))
 (let (($x133 (= $x226 true)))
 (let (($x52 (= $x133 true)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x212)))
 (let ((?x151 (bvand symbol.1 (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x151)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x160 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x85 (= input.memlabel-mem--symbol.1_end ?x160)))
 (let (($x128 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x159 (and $x128 $x85)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x146 $x159)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x25 (and $x138 $x152)))
 (let (($x119 (not $x25)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x162 (and $x134 $x78)))
 (let (($x154 (and (not $x162) $x119)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x122 $x158)))
 (let (($x157 (not $x9)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x102 $x167)))
 (let (($x178 (and (not $x55) $x157)))
 (let (($x180 (and (and (and (and (and (and $x178 $x154) $x179) $x210) $x93) $x177) $x155)))
 (let (($x198 (and $x180 $x47)))
 (let (($x84 (= symbol.1 dst_symbol_addr.1)))
 (let (($x175 (and $x84 $x198)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x106 (or (bvugt input.memlabel-mem--symbol.1_begin ?x94) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x106) (or $x41 $x131)))))))
 (let (($x127 (and $x173 $x175)))
 (let (($x148 (= $x127 true)))
 (let (($x95 (= $x148 true)))
 (let (($x200 (= $x95 true)))
 (let (($x70 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x60 (= $x70 true)))
 (let (($x39 (= $x60 true)))
 (let (($x136 (= $x39 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x51)))
 (let (($x34 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x10 (= ?x57 input.dst.llvm-%n)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x37 (and $x79 $x68)))
 (let (($x32 (and $x37 $x6)))
 (let (($x171 (and $x32 $x136)))
 (let (($x72 (and $x171 $x200)))
 (let (($x115 (and $x72 $x52)))
 (let (($x19 (and $x115 $x186)))
 (let (($x239 (and $x19 $x163)))
 (let (($x80 (and $x239 $x67)))
 (let (($x190 (and $x80 $x218)))
 (let (($x227 (and $x190 $x281)))
 (let (($x350 (and $x227 $x63)))
 (let (($x257 (and $x350 $x340)))
 (let (($x105 (and $x257 $x263)))
 (let (($x46 (and $x105 $x336)))
 (let (($x292 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x303 (and (not $x292) $x46)))
 (let (($x267 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x267 $x303)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x215 $x107)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x97 (and $x273 $x287)))
 (let (($x132 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x323 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x132)))))
 (let (($x250 (=> (and $x58 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x132)))))
 (let (($x31 (and $x250 $x97)))
 (let (($x329 (=> $x31 $x360)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x26 (bvule ?x117 input.dst.llvm-%n)))
 (let (($x164 (= $x26 true)))
 (let (($x197 (= $x164 true)))
 (let (($x328 (forall ((input.ind-%var1297X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1297X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1297X) (_ bv0 32)))))
 ))
 (let (($x354 (forall ((input.ind-%var1296X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1296X)))
 (= $x307 false)))
 ))
 (let (($x325 (and $x354 $x328)))
 (let (($x348 (= $x325 true)))
 (let (($x355 (forall ((input.ind-%var1291X (_ BitVec 32)) )(let ((?x229 (bvadd symbol.1 (bvmul input.ind-%var1291X (_ bv4 32)))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x229))))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv2 32))) ?x302)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv3 32))) ?x33)))
 (let ((?x83 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1291X)))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1291X)))
 (=> $x271 (= ?x83 ?x53)))))))))
 ))
 (let (($x346 (forall ((input.ind-%var1290X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1290X) (bvult input.ind-%var1290X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1290X)))
 (= $x271 $x272))))
 ))
 (let (($x275 (and $x346 $x355)))
 (let (($x352 (= $x275 true)))
 (let (($x343 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1285X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1285X) (_ bv0 32)))))
 ))
 (let (($x306 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1284X)))
 (= $x307 false)))
 ))
 (let (($x16 (and $x306 $x343)))
 (let (($x242 (= $x16 true)))
 (let ((?x12 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x12)))
 (let (($x349 (= ?x7 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x349 true)))
 (let (($x350 (= $x63 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x51)))
 (let (($x324 (= ?x57 input.dst.llvm-%n)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x300 (bvsub ?x96 ?x87)))
 (let (($x311 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x300) (bvult ?x96 ?x300))))
 (let ((?x301 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x294 (bvmul (_ bv4 64) ?x301)))
 (let ((?x269 ((_ extract 63 32) ?x294)))
 (let (($x183 (= (_ bv0 32) ?x269)))
 (let (($x194 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x298 (and (and (and true $x194) $x183) $x311)))
 (let (($x190 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x120 (and $x190 $x298)))
 (let (($x284 (= true $x120)))
 (let (($x296 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x288 (=> $x296 $x284)))
 (let (($x289 (= $x288 true)))
 (let (($x147 (= $x289 true)))
 (let (($x111 (= $x147 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x67 (= $x211 true)))
 (let (($x80 (= $x67 true)))
 (let (($x176 (= $x80 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x235 true)))
 (let (($x239 (= $x163 true)))
 (let (($x182 (= $x239 true)))
 (let (($x145 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x186 (= $x145 true)))
 (let (($x19 (= $x186 true)))
 (let (($x153 (= $x19 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x52 (= $x133 true)))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x95 (= $x296 true)))
 (let (($x200 (= $x95 true)))
 (let (($x72 (= $x200 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x159)))
 (let ((?x160 (bvand symbol.1 (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x160)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let ((?x129 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x149 (= input.memlabel-mem--symbol.1_end ?x129)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (and $x179 $x149)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x142 $x210)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x162 (and $x134 $x78)))
 (let (($x140 (not $x162)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x178 (and $x9 $x157)))
 (let (($x152 (and (not $x178) $x140)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x102 $x167)))
 (let (($x15 (not $x55)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x173 $x69)))
 (let (($x158 (and (not $x84) $x15)))
 (let (($x155 (and (and (and (and (and (and $x158 $x152) $x25) $x154) $x137) $x128) $x85)))
 (let (($x180 (and $x155 $x93)))
 (let (($x136 (= symbol.1 dst_symbol_addr.1)))
 (let (($x212 (and $x136 $x180)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x124) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x100 $x41)))))))
 (let (($x47 (and $x23 $x212)))
 (let (($x198 (= $x47 true)))
 (let (($x175 (= $x198 true)))
 (let (($x127 (= $x175 true)))
 (let (($x34 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x32 (= $x6 true)))
 (let (($x10 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x37 (and $x79 $x68)))
 (let (($x70 (and $x37 $x32)))
 (let (($x148 (and $x70 $x127)))
 (let (($x226 (and $x148 $x72)))
 (let (($x169 (and $x226 $x29)))
 (let (($x199 (and $x169 $x153)))
 (let (($x245 (and $x199 $x182)))
 (let (($x144 (and $x245 $x176)))
 (let (($x243 (and $x144 $x111)))
 (let (($x114 (and $x243 $x227)))
 (let (($x255 (and $x114 $x350)))
 (let (($x291 (and $x255 $x242)))
 (let (($x104 (and $x291 $x352)))
 (let (($x223 (and $x104 $x348)))
 (let (($x334 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x337 (and (not $x334) $x223)))
 (let (($x225 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x359 (and $x225 $x337)))
 (let (($x314 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x314 $x359)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x216 $x116)))
 (let (($x256 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x273 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x256)))))
 (let (($x358 (=> (and $x296 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x256)))))
 (let (($x28 (and $x358 $x277)))
 (let (($x98 (=> $x28 $x197)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x26 (bvule ?x117 input.dst.llvm-%n)))
 (let (($x164 (= $x26 true)))
 (let (($x197 (= $x164 true)))
 (let (($x328 (forall ((input.ind-%var1297X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1297X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1297X) (_ bv0 32)))))
 ))
 (let (($x354 (forall ((input.ind-%var1296X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1296X)))
 (= $x307 false)))
 ))
 (let (($x325 (and $x354 $x328)))
 (let (($x348 (= $x325 true)))
 (let (($x355 (forall ((input.ind-%var1291X (_ BitVec 32)) )(let ((?x229 (bvadd symbol.1 (bvmul input.ind-%var1291X (_ bv4 32)))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x229))))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv2 32))) ?x302)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x229 (_ bv3 32))) ?x33)))
 (let ((?x83 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1291X)))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1291X)))
 (=> $x271 (= ?x83 ?x53)))))))))
 ))
 (let (($x346 (forall ((input.ind-%var1290X (_ BitVec 32)) )(let (($x272 (and (bvule (_ bv0 32) input.ind-%var1290X) (bvult input.ind-%var1290X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x271 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1290X)))
 (= $x271 $x272))))
 ))
 (let (($x275 (and $x346 $x355)))
 (let (($x352 (= $x275 true)))
 (let (($x343 (forall ((input.ind-%var1285X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1285X)))
 (=> $x307 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1285X) (_ bv0 32)))))
 ))
 (let (($x306 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let (($x307 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1284X)))
 (= $x307 false)))
 ))
 (let (($x16 (and $x306 $x343)))
 (let (($x242 (= $x16 true)))
 (let ((?x12 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x12)))
 (let (($x349 (= ?x7 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x349 true)))
 (let (($x350 (= $x63 true)))
 (let ((?x51 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x51)))
 (let (($x324 (= ?x57 input.dst.llvm-%n)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x300 (bvsub ?x96 ?x87)))
 (let (($x311 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x300) (bvult ?x96 ?x300))))
 (let ((?x301 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x294 (bvmul (_ bv4 64) ?x301)))
 (let ((?x269 ((_ extract 63 32) ?x294)))
 (let (($x183 (= (_ bv0 32) ?x269)))
 (let (($x194 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x298 (and (and (and true $x194) $x183) $x311)))
 (let (($x190 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x120 (and $x190 $x298)))
 (let (($x284 (= true $x120)))
 (let (($x296 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x288 (=> $x296 $x284)))
 (let (($x289 (= $x288 true)))
 (let (($x147 (= $x289 true)))
 (let (($x111 (= $x147 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x67 (= $x211 true)))
 (let (($x80 (= $x67 true)))
 (let (($x176 (= $x80 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x235 true)))
 (let (($x239 (= $x163 true)))
 (let (($x182 (= $x239 true)))
 (let (($x145 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x186 (= $x145 true)))
 (let (($x19 (= $x186 true)))
 (let (($x153 (= $x19 true)))
 (let (($x133 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x52 (= $x133 true)))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x95 (= $x296 true)))
 (let (($x200 (= $x95 true)))
 (let (($x72 (= $x200 true)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x159)))
 (let ((?x160 (bvand symbol.1 (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x160)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let ((?x129 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x149 (= input.memlabel-mem--symbol.1_end ?x129)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x210 (and $x179 $x149)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x142 $x210)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x162 (and $x134 $x78)))
 (let (($x140 (not $x162)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x178 (and $x9 $x157)))
 (let (($x152 (and (not $x178) $x140)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x102 $x167)))
 (let (($x15 (not $x55)))
 (let (($x69 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x173 $x69)))
 (let (($x158 (and (not $x84) $x15)))
 (let (($x155 (and (and (and (and (and (and $x158 $x152) $x25) $x154) $x137) $x128) $x85)))
 (let (($x180 (and $x155 $x93)))
 (let (($x136 (= symbol.1 dst_symbol_addr.1)))
 (let (($x212 (and $x136 $x180)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x124) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x100 $x41)))))))
 (let (($x47 (and $x23 $x212)))
 (let (($x198 (= $x47 true)))
 (let (($x175 (= $x198 true)))
 (let (($x127 (= $x175 true)))
 (let (($x34 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x17 (= $x34 true)))
 (let (($x6 (= $x17 true)))
 (let (($x32 (= $x6 true)))
 (let (($x10 (= ?x57 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x91 (= $x10 true)))
 (let (($x68 (= $x91 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x71 (= $x61 true)))
 (let (($x42 (= $x71 true)))
 (let (($x36 (= $x42 true)))
 (let (($x79 (and $x36 $x62)))
 (let (($x37 (and $x79 $x68)))
 (let (($x70 (and $x37 $x32)))
 (let (($x148 (and $x70 $x127)))
 (let (($x226 (and $x148 $x72)))
 (let (($x169 (and $x226 $x29)))
 (let (($x199 (and $x169 $x153)))
 (let (($x245 (and $x199 $x182)))
 (let (($x144 (and $x245 $x176)))
 (let (($x243 (and $x144 $x111)))
 (let (($x114 (and $x243 $x227)))
 (let (($x255 (and $x114 $x350)))
 (let (($x291 (and $x255 $x242)))
 (let (($x104 (and $x291 $x352)))
 (let (($x223 (and $x104 $x348)))
 (let (($x334 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x337 (and (not $x334) $x223)))
 (let (($x225 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x359 (and $x225 $x337)))
 (let (($x314 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x314 $x359)))
 (let (($x216 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x216 $x116)))
 (let (($x256 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x273 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x256)))))
 (let (($x358 (=> (and $x296 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x256)))))
 (let (($x28 (and $x358 $x277)))
 (let (($x98 (=> $x28 $x197)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x196 (forall ((input.ind-%var1323X (_ BitVec 32)) )(let ((?x213 (bvadd symbol.1 (bvmul input.ind-%var1323X (_ bv4 32)))))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x256 (bvadd ?x96 (_ bv3 32))))
 (let ((?x121 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x96 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x181 (store ?x121 (bvadd ?x96 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x315 (store ?x181 (bvadd ?x96 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x24 (store ?x315 ?x256 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x165 (concat (select ?x24 (bvadd ?x213 (_ bv2 32))) (concat (select ?x24 (bvadd ?x213 (_ bv1 32))) (select ?x24 ?x213)))))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1323X)))
 (let (($x208 (= input.ind-%var1323X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x264 (= (ite $x208 input.spec-%var-i-0.L3%6%bbentry ?x354) (concat (select ?x24 (bvadd ?x213 (_ bv3 32))) ?x165))))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1323X)))
 (let (($x156 (or $x313 $x208)))
 (=> $x156 $x264))))))))))))))))
 ))
 (let (($x170 (forall ((input.ind-%var1322X (_ BitVec 32)) )(let (($x53 (bvule (_ bv0 32) input.ind-%var1322X)))
 (let (($x299 (and $x53 (bvult input.ind-%var1322X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x208 (= input.ind-%var1322X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1322X)))
 (let (($x156 (or $x313 $x208)))
 (= $x156 $x299)))))))
 ))
 (let (($x339 (and $x170 $x196)))
 (let (($x263 (= true true)))
 (let (($x268 (and $x263 $x339)))
 (let (($x285 (= $x268 true)))
 (let (($x5 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1315X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1315X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (= $x232 false)))
 ))
 (let (($x265 (and $x107 $x5)))
 (let (($x310 (= $x265 true)))
 (let (($x303 (forall ((input.ind-%var1309X (_ BitVec 32)) )(let ((?x213 (bvadd symbol.1 (bvmul input.ind-%var1309X (_ bv4 32)))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x213))))
 (let ((?x74 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv2 32))) ?x262)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv3 32))) ?x74)))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1309X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1309X)))
 (=> $x313 (= ?x354 ?x8)))))))))
 ))
 (let (($x355 (forall ((input.ind-%var1308X (_ BitVec 32)) )(let (($x53 (bvule (_ bv0 32) input.ind-%var1308X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1308X)))
 (= $x313 (and $x53 (bvult input.ind-%var1308X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x329 (and $x355 $x303)))
 (let (($x351 (= $x329 true)))
 (let (($x110 (forall ((input.ind-%var1303X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1303X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1303X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1302X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1302X)))
 (= $x232 false)))
 ))
 (let (($x260 (and $x16 $x110)))
 (let (($x229 (= $x260 true)))
 (let ((?x7 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x349 (bvneg ?x7)))
 (let (($x63 (= ?x349 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x350 (= $x63 true)))
 (let (($x255 (= $x350 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x202)))
 (let ((?x300 (bvand symbol.1 (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x300)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x185)))
 (let ((?x301 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x294 (= input.memlabel-mem--symbol.1_end ?x301)))
 (let (($x248 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x269 (and $x248 $x294)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x203 $x269)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x218 (and $x144 $x246)))
 (let (($x190 (not $x218)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x176 (and $x67 $x80)))
 (let (($x251 (and (not $x176) $x190)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x235 $x163)))
 (let (($x182 (not $x239)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x19 $x153)))
 (let (($x211 (and (not $x199) $x182)))
 (let (($x147 (and (and (and (and (and (and $x211 $x251) $x240) $x194) $x183) $x221) $x189)))
 (let (($x111 (and $x147 $x311)))
 (let (($x180 (= symbol.1 dst_symbol_addr.1)))
 (let (($x243 (and $x180 $x111)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x148 (or (bvugt input.memlabel-mem--symbol.1_begin ?x198) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x186 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x148) (or $x226 $x133)))))))
 (let (($x324 (and $x186 $x243)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x114 (= $x227 true)))
 (let (($x128 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x151 (= $x128 true)))
 (let (($x160 (= $x151 true)))
 (let (($x85 (= $x160 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x152 (bvsub ?x96 ?x87)))
 (let (($x119 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x152) (bvult ?x96 ?x152))))
 (let ((?x134 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvmul (_ bv4 64) ?x134)))
 (let ((?x162 ((_ extract 63 32) ?x78)))
 (let (($x140 (= (_ bv0 32) ?x162)))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x142 (and (and (and true $x178) $x140) $x119)))
 (let (($x55 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x179 (and $x55 $x142)))
 (let (($x129 (= true $x179)))
 (let (($x336 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x336 $x129)))
 (let (($x210 (= $x149 true)))
 (let (($x137 (= $x210 true)))
 (let (($x11 (= $x137 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x173 (= $x136 true)))
 (let (($x69 (= $x173 true)))
 (let (($x84 (= $x69 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x131 true)))
 (let (($x90 (= $x22 true)))
 (let (($x23 (= $x90 true)))
 (let (($x106 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x100 (= $x106 true)))
 (let (($x14 (= $x100 true)))
 (let (($x41 (= $x14 true)))
 (let (($x124 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x86 (= $x124 true)))
 (let (($x94 (= $x86 true)))
 (let (($x49 (= $x94 true)))
 (let (($x32 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x70 (= $x32 true)))
 (let (($x171 (= $x70 true)))
 (let (($x99 (= $x171 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x17 (= $x34 true)))
 (let (($x89 (= $x336 true)))
 (let (($x51 (= $x89 true)))
 (let (($x57 (= $x51 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x10 (and $x79 $x57)))
 (let (($x6 (and $x10 $x17)))
 (let (($x44 (and $x6 $x99)))
 (let (($x59 (and $x44 $x49)))
 (let (($x77 (and $x59 $x41)))
 (let (($x39 (and $x77 $x23)))
 (let (($x122 (and $x39 $x84)))
 (let (($x146 (and $x122 $x11)))
 (let (($x155 (and $x146 $x85)))
 (let (($x12 (and $x155 $x114)))
 (let (($x258 (and $x12 $x255)))
 (let (($x209 (and $x258 $x229)))
 (let (($x40 (and $x209 $x351)))
 (let (($x113 (and $x40 $x310)))
 (let (($x233 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x43 (and (not $x233) $x113)))
 (let (($x292 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x257 (and $x292 $x43)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x331 $x257)))
 (let (($x357 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x187 (and $x357 $x312)))
 (let (($x250 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x216 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x250)))))
 (let (($x75 (=> (and $x336 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x250)))))
 (let (($x81 (and $x75 $x187)))
 (let (($x335 (=> $x81 $x285)))
 (not $x335)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x196 (forall ((input.ind-%var1323X (_ BitVec 32)) )(let ((?x213 (bvadd symbol.1 (bvmul input.ind-%var1323X (_ bv4 32)))))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x256 (bvadd ?x96 (_ bv3 32))))
 (let ((?x121 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x96 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x181 (store ?x121 (bvadd ?x96 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x315 (store ?x181 (bvadd ?x96 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x24 (store ?x315 ?x256 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x165 (concat (select ?x24 (bvadd ?x213 (_ bv2 32))) (concat (select ?x24 (bvadd ?x213 (_ bv1 32))) (select ?x24 ?x213)))))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1323X)))
 (let (($x208 (= input.ind-%var1323X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x264 (= (ite $x208 input.spec-%var-i-0.L3%6%bbentry ?x354) (concat (select ?x24 (bvadd ?x213 (_ bv3 32))) ?x165))))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1323X)))
 (let (($x156 (or $x313 $x208)))
 (=> $x156 $x264))))))))))))))))
 ))
 (let (($x170 (forall ((input.ind-%var1322X (_ BitVec 32)) )(let (($x53 (bvule (_ bv0 32) input.ind-%var1322X)))
 (let (($x299 (and $x53 (bvult input.ind-%var1322X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x208 (= input.ind-%var1322X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1322X)))
 (let (($x156 (or $x313 $x208)))
 (= $x156 $x299)))))))
 ))
 (let (($x339 (and $x170 $x196)))
 (let (($x263 (= true true)))
 (let (($x268 (and $x263 $x339)))
 (let (($x285 (= $x268 true)))
 (let (($x5 (forall ((input.ind-%var1315X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1315X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1315X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (= $x232 false)))
 ))
 (let (($x265 (and $x107 $x5)))
 (let (($x310 (= $x265 true)))
 (let (($x303 (forall ((input.ind-%var1309X (_ BitVec 32)) )(let ((?x213 (bvadd symbol.1 (bvmul input.ind-%var1309X (_ bv4 32)))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x213))))
 (let ((?x74 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv2 32))) ?x262)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x213 (_ bv3 32))) ?x74)))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1309X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1309X)))
 (=> $x313 (= ?x354 ?x8)))))))))
 ))
 (let (($x355 (forall ((input.ind-%var1308X (_ BitVec 32)) )(let (($x53 (bvule (_ bv0 32) input.ind-%var1308X)))
 (let (($x313 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1308X)))
 (= $x313 (and $x53 (bvult input.ind-%var1308X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x329 (and $x355 $x303)))
 (let (($x351 (= $x329 true)))
 (let (($x110 (forall ((input.ind-%var1303X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1303X)))
 (=> $x232 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1303X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1302X (_ BitVec 32)) )(let (($x232 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1302X)))
 (= $x232 false)))
 ))
 (let (($x260 (and $x16 $x110)))
 (let (($x229 (= $x260 true)))
 (let ((?x7 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x349 (bvneg ?x7)))
 (let (($x63 (= ?x349 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x350 (= $x63 true)))
 (let (($x255 (= $x350 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x202)))
 (let ((?x300 (bvand symbol.1 (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x300)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x185)))
 (let ((?x301 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x294 (= input.memlabel-mem--symbol.1_end ?x301)))
 (let (($x248 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x269 (and $x248 $x294)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x203 $x269)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x218 (and $x144 $x246)))
 (let (($x190 (not $x218)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x176 (and $x67 $x80)))
 (let (($x251 (and (not $x176) $x190)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x235 $x163)))
 (let (($x182 (not $x239)))
 (let (($x153 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x19 $x153)))
 (let (($x211 (and (not $x199) $x182)))
 (let (($x147 (and (and (and (and (and (and $x211 $x251) $x240) $x194) $x183) $x221) $x189)))
 (let (($x111 (and $x147 $x311)))
 (let (($x180 (= symbol.1 dst_symbol_addr.1)))
 (let (($x243 (and $x180 $x111)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x148 (or (bvugt input.memlabel-mem--symbol.1_begin ?x198) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x186 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x148) (or $x226 $x133)))))))
 (let (($x324 (and $x186 $x243)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x114 (= $x227 true)))
 (let (($x128 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x151 (= $x128 true)))
 (let (($x160 (= $x151 true)))
 (let (($x85 (= $x160 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x152 (bvsub ?x96 ?x87)))
 (let (($x119 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x152) (bvult ?x96 ?x152))))
 (let ((?x134 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvmul (_ bv4 64) ?x134)))
 (let ((?x162 ((_ extract 63 32) ?x78)))
 (let (($x140 (= (_ bv0 32) ?x162)))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x142 (and (and (and true $x178) $x140) $x119)))
 (let (($x55 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x179 (and $x55 $x142)))
 (let (($x129 (= true $x179)))
 (let (($x336 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x336 $x129)))
 (let (($x210 (= $x149 true)))
 (let (($x137 (= $x210 true)))
 (let (($x11 (= $x137 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x173 (= $x136 true)))
 (let (($x69 (= $x173 true)))
 (let (($x84 (= $x69 true)))
 (let (($x131 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (= $x131 true)))
 (let (($x90 (= $x22 true)))
 (let (($x23 (= $x90 true)))
 (let (($x106 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x100 (= $x106 true)))
 (let (($x14 (= $x100 true)))
 (let (($x41 (= $x14 true)))
 (let (($x124 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x86 (= $x124 true)))
 (let (($x94 (= $x86 true)))
 (let (($x49 (= $x94 true)))
 (let (($x32 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x70 (= $x32 true)))
 (let (($x171 (= $x70 true)))
 (let (($x99 (= $x171 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x37 (= $x68 true)))
 (let (($x34 (= $x37 true)))
 (let (($x17 (= $x34 true)))
 (let (($x89 (= $x336 true)))
 (let (($x51 (= $x89 true)))
 (let (($x57 (= $x51 true)))
 (let ((?x61 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x61)))
 (let (($x88 (= ?x71 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x42 (= ?x71 input.dst.llvm-%n)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x79 (and $x64 $x62)))
 (let (($x10 (and $x79 $x57)))
 (let (($x6 (and $x10 $x17)))
 (let (($x44 (and $x6 $x99)))
 (let (($x59 (and $x44 $x49)))
 (let (($x77 (and $x59 $x41)))
 (let (($x39 (and $x77 $x23)))
 (let (($x122 (and $x39 $x84)))
 (let (($x146 (and $x122 $x11)))
 (let (($x155 (and $x146 $x85)))
 (let (($x12 (and $x155 $x114)))
 (let (($x258 (and $x12 $x255)))
 (let (($x209 (and $x258 $x229)))
 (let (($x40 (and $x209 $x351)))
 (let (($x113 (and $x40 $x310)))
 (let (($x233 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x43 (and (not $x233) $x113)))
 (let (($x292 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x257 (and $x292 $x43)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x331 $x257)))
 (let (($x357 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x187 (and $x357 $x312)))
 (let (($x250 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x216 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x250)))))
 (let (($x75 (=> (and $x336 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x250)))))
 (let (($x81 (and $x75 $x187)))
 (let (($x335 (=> $x81 $x285)))
 (not $x335)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x348 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (not $x348)))
 (let (($x328 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (not $x328)))
 (let (($x31 (or $x278 $x252)))
 (let (($x242 (= $x31 true)))
 (let (($x271 (= $x242 true)))
 (let (($x268 (forall ((input.ind-%var1341X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1341X)))
 (=> $x258 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1341X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var1340X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1340X)))
 (= $x258 false)))
 ))
 (let (($x285 (and $x165 $x268)))
 (let (($x335 (= $x285 true)))
 (let (($x342 (forall ((input.ind-%var1335X (_ BitVec 32)) )(let ((?x299 (bvadd symbol.1 (bvmul input.ind-%var1335X (_ bv4 32)))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x299))))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv2 32))) ?x254)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv3 32))) ?x126)))
 (let ((?x46 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1335X)))
 (let (($x322 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1335X)))
 (=> $x322 (= ?x46 ?x217)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let (($x340 (and (bvule (_ bv0 32) input.ind-%var1334X) (bvult input.ind-%var1334X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x322 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1334X)))
 (= $x322 $x340))))
 ))
 (let (($x24 (and $x262 $x342)))
 (let (($x327 (= $x24 true)))
 (let (($x33 (forall ((input.ind-%var1329X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1329X)))
 (=> $x258 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1329X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1328X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1328X)))
 (= $x258 false)))
 ))
 (let (($x347 (and $x16 $x33)))
 (let (($x297 (= $x347 true)))
 (let ((?x281 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x227 (bvneg ?x281)))
 (let (($x114 (= ?x227 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x114 true)))
 (let (($x7 (= $x12 true)))
 (let ((?x221 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x221)))
 (let (($x311 (= ?x289 input.dst.llvm-%n)))
 (let (($x111 (= $x311 true)))
 (let (($x243 (= $x111 true)))
 (let (($x300 (= ?x289 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (= $x300 true)))
 (let (($x147 (= $x189 true)))
 (let (($x301 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x294 (= $x301 true)))
 (let (($x269 (= $x294 true)))
 (let (($x183 (= $x269 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x176 (bvsub ?x96 ?x87)))
 (let (($x218 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x176) (bvult ?x96 ?x176))))
 (let ((?x182 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x211 (bvmul (_ bv4 64) ?x182)))
 (let ((?x67 ((_ extract 63 32) ?x211)))
 (let (($x80 (= (_ bv0 32) ?x67)))
 (let (($x163 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x298 (and (and (and true $x163) $x80) $x218)))
 (let (($x19 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x240 (and $x19 $x298)))
 (let (($x120 (= true $x240)))
 (let (($x247 (=> $x348 $x120)))
 (let (($x194 (= $x247 true)))
 (let (($x284 (= $x194 true)))
 (let (($x203 (= $x284 true)))
 (let (($x52 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x169 (= $x29 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x95 true)))
 (let (($x226 (= $x200 true)))
 (let (($x72 (= $x226 true)))
 (let (($x145 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x198 (= $x145 true)))
 (let (($x175 (= $x198 true)))
 (let (($x127 (= $x175 true)))
 (let (($x160 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x85 (= $x160 true)))
 (let (($x155 (= $x85 true)))
 (let (($x212 (= $x155 true)))
 (let (($x137 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x11 (= $x137 true)))
 (let (($x146 (= $x11 true)))
 (let (($x128 (= $x146 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x142 (= $x119 true)))
 (let (($x179 (= $x142 true)))
 (let (($x129 (= $x179 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x9)))
 (let ((?x158 (bvand symbol.1 (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x158)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x69 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x84 (= input.memlabel-mem--symbol.1_end ?x69)))
 (let (($x136 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x122 (and $x136 $x84)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x39 $x122)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x106 $x100)))
 (let (($x41 (not $x14)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (and $x94 $x49)))
 (let (($x131 (and (not $x59) $x41)))
 (let (($x171 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x70 $x171)))
 (let (($x44 (not $x99)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x17 $x6)))
 (let (($x86 (and (not $x32) $x44)))
 (let (($x162 (and (and (and (and (and (and $x86 $x131) $x22) $x23) $x102) $x55) $x15)))
 (let (($x140 (and $x162 $x157)))
 (let (($x45 (= symbol.1 dst_symbol_addr.1)))
 (let (($x177 (and $x45 $x140)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x88 (or (bvugt input.memlabel-mem--symbol.1_begin ?x42) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x88) (or $x89 $x51)))))))
 (let (($x141 (and $x34 $x177)))
 (let (($x152 (= $x141 true)))
 (let (($x25 (= $x152 true)))
 (let (($x66 (= $x25 true)))
 (let (($x149 (and $x66 $x129)))
 (let (($x151 (and $x149 $x128)))
 (let (($x47 (and $x151 $x212)))
 (let (($x148 (and $x47 $x127)))
 (let (($x133 (and $x148 $x72)))
 (let (($x186 (and $x133 $x169)))
 (let (($x248 (and $x186 $x203)))
 (let (($x288 (and $x248 $x183)))
 (let (($x202 (and $x288 $x147)))
 (let (($x324 (and $x202 $x243)))
 (let (($x349 (and $x324 $x7)))
 (let (($x355 (and $x349 $x297)))
 (let (($x65 (and $x355 $x327)))
 (let (($x161 (and $x65 $x335)))
 (let (($x334 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and $x334 $x161)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x261 (and $x267 $x276)))
 (let (($x215 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x159 (and $x215 $x261)))
 (let (($x358 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x357 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x358)))))
 (let (($x332 (=> (and $x348 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x358)))))
 (let (($x123 (and $x332 $x159)))
 (let (($x275 (=> $x123 $x271)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x348 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x252 (not $x348)))
 (let (($x328 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (not $x328)))
 (let (($x31 (or $x278 $x252)))
 (let (($x242 (= $x31 true)))
 (let (($x271 (= $x242 true)))
 (let (($x268 (forall ((input.ind-%var1341X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1341X)))
 (=> $x258 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1341X) (_ bv0 32)))))
 ))
 (let (($x165 (forall ((input.ind-%var1340X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1340X)))
 (= $x258 false)))
 ))
 (let (($x285 (and $x165 $x268)))
 (let (($x335 (= $x285 true)))
 (let (($x342 (forall ((input.ind-%var1335X (_ BitVec 32)) )(let ((?x299 (bvadd symbol.1 (bvmul input.ind-%var1335X (_ bv4 32)))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x299))))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv2 32))) ?x254)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x299 (_ bv3 32))) ?x126)))
 (let ((?x46 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1335X)))
 (let (($x322 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1335X)))
 (=> $x322 (= ?x46 ?x217)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1334X (_ BitVec 32)) )(let (($x340 (and (bvule (_ bv0 32) input.ind-%var1334X) (bvult input.ind-%var1334X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x322 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1334X)))
 (= $x322 $x340))))
 ))
 (let (($x24 (and $x262 $x342)))
 (let (($x327 (= $x24 true)))
 (let (($x33 (forall ((input.ind-%var1329X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1329X)))
 (=> $x258 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1329X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1328X (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1328X)))
 (= $x258 false)))
 ))
 (let (($x347 (and $x16 $x33)))
 (let (($x297 (= $x347 true)))
 (let ((?x281 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x227 (bvneg ?x281)))
 (let (($x114 (= ?x227 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x114 true)))
 (let (($x7 (= $x12 true)))
 (let ((?x221 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x221)))
 (let (($x311 (= ?x289 input.dst.llvm-%n)))
 (let (($x111 (= $x311 true)))
 (let (($x243 (= $x111 true)))
 (let (($x300 (= ?x289 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x189 (= $x300 true)))
 (let (($x147 (= $x189 true)))
 (let (($x301 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x294 (= $x301 true)))
 (let (($x269 (= $x294 true)))
 (let (($x183 (= $x269 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x176 (bvsub ?x96 ?x87)))
 (let (($x218 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x176) (bvult ?x96 ?x176))))
 (let ((?x182 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x211 (bvmul (_ bv4 64) ?x182)))
 (let ((?x67 ((_ extract 63 32) ?x211)))
 (let (($x80 (= (_ bv0 32) ?x67)))
 (let (($x163 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x298 (and (and (and true $x163) $x80) $x218)))
 (let (($x19 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x240 (and $x19 $x298)))
 (let (($x120 (= true $x240)))
 (let (($x247 (=> $x348 $x120)))
 (let (($x194 (= $x247 true)))
 (let (($x284 (= $x194 true)))
 (let (($x203 (= $x284 true)))
 (let (($x52 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x169 (= $x29 true)))
 (let (($x95 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x95 true)))
 (let (($x226 (= $x200 true)))
 (let (($x72 (= $x226 true)))
 (let (($x145 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x198 (= $x145 true)))
 (let (($x175 (= $x198 true)))
 (let (($x127 (= $x175 true)))
 (let (($x160 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x85 (= $x160 true)))
 (let (($x155 (= $x85 true)))
 (let (($x212 (= $x155 true)))
 (let (($x137 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x11 (= $x137 true)))
 (let (($x146 (= $x11 true)))
 (let (($x128 (= $x146 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x142 (= $x119 true)))
 (let (($x179 (= $x142 true)))
 (let (($x129 (= $x179 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x9)))
 (let ((?x158 (bvand symbol.1 (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x158)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x69 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x84 (= input.memlabel-mem--symbol.1_end ?x69)))
 (let (($x136 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x122 (and $x136 $x84)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x39 $x122)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x14 (and $x106 $x100)))
 (let (($x41 (not $x14)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (and $x94 $x49)))
 (let (($x131 (and (not $x59) $x41)))
 (let (($x171 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x70 $x171)))
 (let (($x44 (not $x99)))
 (let (($x6 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x17 $x6)))
 (let (($x86 (and (not $x32) $x44)))
 (let (($x162 (and (and (and (and (and (and $x86 $x131) $x22) $x23) $x102) $x55) $x15)))
 (let (($x140 (and $x162 $x157)))
 (let (($x45 (= symbol.1 dst_symbol_addr.1)))
 (let (($x177 (and $x45 $x140)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x88 (or (bvugt input.memlabel-mem--symbol.1_begin ?x42) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x88) (or $x89 $x51)))))))
 (let (($x141 (and $x34 $x177)))
 (let (($x152 (= $x141 true)))
 (let (($x25 (= $x152 true)))
 (let (($x66 (= $x25 true)))
 (let (($x149 (and $x66 $x129)))
 (let (($x151 (and $x149 $x128)))
 (let (($x47 (and $x151 $x212)))
 (let (($x148 (and $x47 $x127)))
 (let (($x133 (and $x148 $x72)))
 (let (($x186 (and $x133 $x169)))
 (let (($x248 (and $x186 $x203)))
 (let (($x288 (and $x248 $x183)))
 (let (($x202 (and $x288 $x147)))
 (let (($x324 (and $x202 $x243)))
 (let (($x349 (and $x324 $x7)))
 (let (($x355 (and $x349 $x297)))
 (let (($x65 (and $x355 $x327)))
 (let (($x161 (and $x65 $x335)))
 (let (($x334 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and $x334 $x161)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x261 (and $x267 $x276)))
 (let (($x215 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x159 (and $x215 $x261)))
 (let (($x358 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x357 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x358)))))
 (let (($x332 (=> (and $x348 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x358)))))
 (let (($x123 (and $x332 $x159)))
 (let (($x275 (=> $x123 $x271)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x109 (bvmul (_ bv4294967295 32) ?x13)))
 (let ((?x130 (bvneg ?x109)))
 (let (($x307 (= ?x130 ?x234)))
 (let (($x92 (= $x307 true)))
 (let (($x333 (forall ((input.ind-%var1359X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1359X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1359X) (_ bv0 32)))))
 ))
 (let (($x232 (forall ((input.ind-%var1358X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1358X)))
 (= $x355 false)))
 ))
 (let (($x346 (and $x232 $x333)))
 (let (($x209 (= $x346 true)))
 (let (($x265 (forall ((input.ind-%var1353X (_ BitVec 32)) )(let ((?x74 (bvadd symbol.1 (bvmul input.ind-%var1353X (_ bv4 32)))))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x74))))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv2 32))) ?x205)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv3 32))) ?x40)))
 (let ((?x261 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1353X)))
 (let (($x126 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1353X)))
 (=> $x126 (= ?x261 ?x263)))))))))
 ))
 (let (($x285 (forall ((input.ind-%var1352X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1352X) (bvult input.ind-%var1352X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x126 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1352X)))
 (= $x126 $x165))))
 ))
 (let (($x310 (and $x285 $x265)))
 (let (($x5 (= $x310 true)))
 (let (($x191 (forall ((input.ind-%var1347X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1347X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1347X) (_ bv0 32)))))
 ))
 (let (($x340 (forall ((input.ind-%var1346X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1346X)))
 (= $x355 false)))
 ))
 (let (($x121 (and $x340 $x191)))
 (let (($x170 (= $x121 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x343 (bvneg ?x258)))
 (let (($x16 (= ?x343 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x16 true)))
 (let (($x313 (= $x110 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x114 true)))
 (let (($x7 (= $x12 true)))
 (let (($x349 (= $x7 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x183 (bvsub ?x96 ?x87)))
 (let (($x289 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x183) (bvult ?x96 ?x183))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x301 (bvmul (_ bv4 64) ?x248)))
 (let ((?x294 ((_ extract 63 32) ?x301)))
 (let (($x269 (= (_ bv0 32) ?x294)))
 (let (($x284 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x147 (and (and (and true $x284) $x269) $x289)))
 (let (($x298 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x202 (and $x298 $x147)))
 (let (($x311 (= true $x202)))
 (let (($x351 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (=> $x351 $x311)))
 (let (($x243 (= $x111 true)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x80 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x251 (= $x80 true)))
 (let (($x201 (= $x251 true)))
 (let (($x176 (= $x201 true)))
 (let (($x190 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x239 (= $x190 true)))
 (let (($x182 (= $x239 true)))
 (let (($x211 (= $x182 true)))
 (let (($x199 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x153 (= $x199 true)))
 (let (($x245 (= $x153 true)))
 (let (($x235 (= $x245 true)))
 (let (($x169 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x186 (= $x169 true)))
 (let (($x93 (= $x186 true)))
 (let (($x180 (= $x93 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x133 (= $x72 true)))
 (let (($x52 (= $x133 true)))
 (let (($x115 (= $x52 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x148 (= $x127 true)))
 (let (($x95 (= $x148 true)))
 (let (($x200 (= $x95 true)))
 (let (($x47 (= $x351 true)))
 (let (($x145 (= $x47 true)))
 (let (($x198 (= $x145 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x119)))
 (let ((?x25 (bvand symbol.1 (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x25)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x9 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x157 (= input.memlabel-mem--symbol.1_end ?x9)))
 (let (($x15 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x140 (and $x15 $x157)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x158 $x140)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (and $x173 $x69)))
 (let (($x122 (not $x84)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x136 (and $x138 $x39)))
 (let (($x134 (and (not $x136) $x122)))
 (let (($x178 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x131 $x178)))
 (let (($x154 (not $x22)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x100 $x14)))
 (let (($x23 (and (not $x41) $x154)))
 (let (($x11 (and (and (and (and (and (and $x23 $x134) $x167) $x78) $x177) $x152) $x66)))
 (let (($x146 (and $x11 $x142)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x128 (and $x68 $x146)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x32 (or (bvugt input.memlabel-mem--symbol.1_begin ?x45) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x32) (or $x99 $x44)))))))
 (let (($x151 (and $x106 $x128)))
 (let (($x160 (= $x151 true)))
 (let (($x85 (= $x160 true)))
 (let (($x155 (= $x85 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x36)))
 (let (($x89 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x88 (= ?x64 input.dst.llvm-%n)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x57 (and $x62 $x51)))
 (let (($x212 (and $x57 $x155)))
 (let (($x175 (and $x212 $x198)))
 (let (($x226 (and $x175 $x200)))
 (let (($x29 (and $x226 $x115)))
 (let (($x19 (and $x29 $x180)))
 (let (($x163 (and $x19 $x235)))
 (let (($x67 (and $x163 $x211)))
 (let (($x144 (and $x67 $x176)))
 (let (($x227 (and $x144 $x281)))
 (let (($x255 (and $x227 $x349)))
 (let (($x53 (and $x255 $x313)))
 (let (($x82 (and $x53 $x170)))
 (let (($x113 (and $x82 $x5)))
 (let (($x156 (and $x113 $x209)))
 (let (($x37 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and (not $x37) $x156)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x230 (and $x61 $x8)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x225 $x230)))
 (let (($x314 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x264 (and $x314 $x196)))
 (let (($x75 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x215 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x75)))))
 (let (($x266 (=> (and $x351 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x75)))))
 (let (($x339 (and $x266 $x264)))
 (let (($x223 (=> $x339 $x92)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x109 (bvmul (_ bv4294967295 32) ?x13)))
 (let ((?x130 (bvneg ?x109)))
 (let (($x307 (= ?x130 ?x234)))
 (let (($x92 (= $x307 true)))
 (let (($x333 (forall ((input.ind-%var1359X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1359X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1359X) (_ bv0 32)))))
 ))
 (let (($x232 (forall ((input.ind-%var1358X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1358X)))
 (= $x355 false)))
 ))
 (let (($x346 (and $x232 $x333)))
 (let (($x209 (= $x346 true)))
 (let (($x265 (forall ((input.ind-%var1353X (_ BitVec 32)) )(let ((?x74 (bvadd symbol.1 (bvmul input.ind-%var1353X (_ bv4 32)))))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x74))))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv2 32))) ?x205)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x74 (_ bv3 32))) ?x40)))
 (let ((?x261 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1353X)))
 (let (($x126 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1353X)))
 (=> $x126 (= ?x261 ?x263)))))))))
 ))
 (let (($x285 (forall ((input.ind-%var1352X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1352X) (bvult input.ind-%var1352X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x126 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1352X)))
 (= $x126 $x165))))
 ))
 (let (($x310 (and $x285 $x265)))
 (let (($x5 (= $x310 true)))
 (let (($x191 (forall ((input.ind-%var1347X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1347X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1347X) (_ bv0 32)))))
 ))
 (let (($x340 (forall ((input.ind-%var1346X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1346X)))
 (= $x355 false)))
 ))
 (let (($x121 (and $x340 $x191)))
 (let (($x170 (= $x121 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x343 (bvneg ?x258)))
 (let (($x16 (= ?x343 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x16 true)))
 (let (($x313 (= $x110 true)))
 (let (($x114 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x12 (= $x114 true)))
 (let (($x7 (= $x12 true)))
 (let (($x349 (= $x7 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x183 (bvsub ?x96 ?x87)))
 (let (($x289 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x183) (bvult ?x96 ?x183))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x301 (bvmul (_ bv4 64) ?x248)))
 (let ((?x294 ((_ extract 63 32) ?x301)))
 (let (($x269 (= (_ bv0 32) ?x294)))
 (let (($x284 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x147 (and (and (and true $x284) $x269) $x289)))
 (let (($x298 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x202 (and $x298 $x147)))
 (let (($x311 (= true $x202)))
 (let (($x351 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (=> $x351 $x311)))
 (let (($x243 (= $x111 true)))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x80 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x251 (= $x80 true)))
 (let (($x201 (= $x251 true)))
 (let (($x176 (= $x201 true)))
 (let (($x190 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x239 (= $x190 true)))
 (let (($x182 (= $x239 true)))
 (let (($x211 (= $x182 true)))
 (let (($x199 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x153 (= $x199 true)))
 (let (($x245 (= $x153 true)))
 (let (($x235 (= $x245 true)))
 (let (($x169 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x186 (= $x169 true)))
 (let (($x93 (= $x186 true)))
 (let (($x180 (= $x93 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x133 (= $x72 true)))
 (let (($x52 (= $x133 true)))
 (let (($x115 (= $x52 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x148 (= $x127 true)))
 (let (($x95 (= $x148 true)))
 (let (($x200 (= $x95 true)))
 (let (($x47 (= $x351 true)))
 (let (($x145 (= $x47 true)))
 (let (($x198 (= $x145 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x119)))
 (let ((?x25 (bvand symbol.1 (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x25)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x9 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x157 (= input.memlabel-mem--symbol.1_end ?x9)))
 (let (($x15 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x140 (and $x15 $x157)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x158 $x140)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (and $x173 $x69)))
 (let (($x122 (not $x84)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x136 (and $x138 $x39)))
 (let (($x134 (and (not $x136) $x122)))
 (let (($x178 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x131 $x178)))
 (let (($x154 (not $x22)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x100 $x14)))
 (let (($x23 (and (not $x41) $x154)))
 (let (($x11 (and (and (and (and (and (and $x23 $x134) $x167) $x78) $x177) $x152) $x66)))
 (let (($x146 (and $x11 $x142)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x128 (and $x68 $x146)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x32 (or (bvugt input.memlabel-mem--symbol.1_begin ?x45) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x106 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x32) (or $x99 $x44)))))))
 (let (($x151 (and $x106 $x128)))
 (let (($x160 (= $x151 true)))
 (let (($x85 (= $x160 true)))
 (let (($x155 (= $x85 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x36)))
 (let (($x89 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x88 (= ?x64 input.dst.llvm-%n)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x57 (and $x62 $x51)))
 (let (($x212 (and $x57 $x155)))
 (let (($x175 (and $x212 $x198)))
 (let (($x226 (and $x175 $x200)))
 (let (($x29 (and $x226 $x115)))
 (let (($x19 (and $x29 $x180)))
 (let (($x163 (and $x19 $x235)))
 (let (($x67 (and $x163 $x211)))
 (let (($x144 (and $x67 $x176)))
 (let (($x227 (and $x144 $x281)))
 (let (($x255 (and $x227 $x349)))
 (let (($x53 (and $x255 $x313)))
 (let (($x82 (and $x53 $x170)))
 (let (($x113 (and $x82 $x5)))
 (let (($x156 (and $x113 $x209)))
 (let (($x37 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x8 (and (not $x37) $x156)))
 (let (($x61 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x230 (and $x61 $x8)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x196 (and $x225 $x230)))
 (let (($x314 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x264 (and $x314 $x196)))
 (let (($x75 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x215 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x75)))))
 (let (($x266 (=> (and $x351 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x75)))))
 (let (($x339 (and $x266 $x264)))
 (let (($x223 (=> $x339 $x92)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x286 (bvsle ?x260 (_ bv399 32))))
 (let (($x161 (= $x286 true)))
 (let (($x135 (= $x161 true)))
 (let (($x117 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1377X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1377X) (_ bv0 32)))))
 ))
 (let (($x242 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1376X)))
 (= $x329 false)))
 ))
 (let (($x295 (and $x242 $x117)))
 (let (($x299 (= $x295 true)))
 (let (($x347 (forall ((input.ind-%var1371X (_ BitVec 32)) )(let ((?x10 (bvadd symbol.1 (bvmul input.ind-%var1371X (_ bv4 32)))))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x10))))
 (let ((?x335 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv2 32))) ?x108)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv3 32))) ?x335)))
 (let ((?x232 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1371X)))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1371X)))
 (=> $x63 (= ?x232 ?x193)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1370X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1370X) (bvult input.ind-%var1370X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1370X)))
 (= $x63 $x257))))
 ))
 (let (($x278 (and $x265 $x347)))
 (let (($x252 (= $x278 true)))
 (let (($x123 (forall ((input.ind-%var1365X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1365X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1365X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var1364X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1364X)))
 (= $x329 false)))
 ))
 (let (($x83 (and $x121 $x123)))
 (let (($x74 (= $x83 true)))
 (let ((?x343 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x343)))
 (let (($x110 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x110 true)))
 (let (($x53 (= $x313 true)))
 (let (($x12 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x7 (= $x12 true)))
 (let (($x349 (= $x7 true)))
 (let (($x255 (= $x349 true)))
 (let (($x243 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x289 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x147 (= $x289 true)))
 (let (($x202 (= $x147 true)))
 (let (($x311 (= $x202 true)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x240)))
 (let ((?x298 (bvand symbol.1 (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x298)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x218 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x251 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x201 (= input.memlabel-mem--symbol.1_end ?x251)))
 (let (($x80 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x176 (and $x80 $x201)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x67 $x176)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x245 (and $x199 $x153)))
 (let (($x235 (not $x245)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x93 $x180)))
 (let (($x190 (and (not $x19) $x235)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x200 $x226)))
 (let (($x186 (and (not $x72) $x29)))
 (let (($x301 (and (and (and (and (and (and $x186 $x190) $x239) $x211) $x144) $x218) $x120)))
 (let (($x294 (and $x301 $x247)))
 (let (($x66 (= symbol.1 dst_symbol_addr.1)))
 (let (($x269 (and $x66 $x294)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x151 (or (bvugt input.memlabel-mem--symbol.1_begin ?x142) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x151) (or $x212 $x47)))))))
 (let (($x189 (and $x95 $x269)))
 (let (($x288 (= $x189 true)))
 (let (($x183 (= $x288 true)))
 (let (($x185 (= $x183 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x167 (bvsub ?x96 ?x87)))
 (let (($x149 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x167) (bvult ?x96 ?x167))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x84)))
 (let ((?x134 ((_ extract 63 32) ?x122)))
 (let (($x179 (= (_ bv0 32) ?x134)))
 (let (($x173 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x162 (and (and (and true $x173) $x179) $x149)))
 (let (($x23 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x9 (and $x23 $x162)))
 (let (($x157 (= true $x9)))
 (let (($x328 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (=> $x328 $x157)))
 (let (($x177 (= $x140 true)))
 (let (($x210 (= $x177 true)))
 (let (($x141 (= $x210 true)))
 (let (($x14 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (= $x14 true)))
 (let (($x90 (= $x41 true)))
 (let (($x131 (= $x90 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (= $x59 true)))
 (let (($x91 (= $x106 true)))
 (let (($x68 (= $x91 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x6)))
 (let (($x44 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x124 (= ?x32 input.dst.llvm-%n)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x34 (= $x57 true)))
 (let (($x35 (= $x34 true)))
 (let (($x77 (= $x35 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x42 (= $x328 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x51 (and $x64 $x79)))
 (let (($x45 (and $x51 $x77)))
 (let (($x171 (and $x45 $x99)))
 (let (($x49 (and $x171 $x94)))
 (let (($x100 (and $x49 $x68)))
 (let (($x178 (and $x100 $x131)))
 (let (($x152 (and $x178 $x141)))
 (let (($x221 (and $x152 $x185)))
 (let (($x111 (and $x221 $x311)))
 (let (($x114 (and $x111 $x227)))
 (let (($x258 (and $x114 $x255)))
 (let (($x297 (and $x258 $x53)))
 (let (($x107 (and $x297 $x74)))
 (let (($x213 (and $x107 $x252)))
 (let (($x254 (and $x213 $x299)))
 (let (($x103 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x187 (and (not $x103) $x254)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (and $x71 $x187)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x24 (and $x292 $x208)))
 (let (($x331 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x262 (and $x331 $x24)))
 (let (($x332 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x314 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x332)))))
 (let (($x222 (=> (and $x328 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x332)))))
 (let (($x231 (and $x222 $x262)))
 (let (($x241 (=> $x231 $x135)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x286 (bvsle ?x260 (_ bv399 32))))
 (let (($x161 (= $x286 true)))
 (let (($x135 (= $x161 true)))
 (let (($x117 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1377X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1377X) (_ bv0 32)))))
 ))
 (let (($x242 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1376X)))
 (= $x329 false)))
 ))
 (let (($x295 (and $x242 $x117)))
 (let (($x299 (= $x295 true)))
 (let (($x347 (forall ((input.ind-%var1371X (_ BitVec 32)) )(let ((?x10 (bvadd symbol.1 (bvmul input.ind-%var1371X (_ bv4 32)))))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x10))))
 (let ((?x335 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv2 32))) ?x108)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x10 (_ bv3 32))) ?x335)))
 (let ((?x232 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1371X)))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1371X)))
 (=> $x63 (= ?x232 ?x193)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1370X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1370X) (bvult input.ind-%var1370X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x63 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1370X)))
 (= $x63 $x257))))
 ))
 (let (($x278 (and $x265 $x347)))
 (let (($x252 (= $x278 true)))
 (let (($x123 (forall ((input.ind-%var1365X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1365X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1365X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var1364X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1364X)))
 (= $x329 false)))
 ))
 (let (($x83 (and $x121 $x123)))
 (let (($x74 (= $x83 true)))
 (let ((?x343 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x343)))
 (let (($x110 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x313 (= $x110 true)))
 (let (($x53 (= $x313 true)))
 (let (($x12 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x7 (= $x12 true)))
 (let (($x349 (= $x7 true)))
 (let (($x255 (= $x349 true)))
 (let (($x243 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x324 (= $x243 true)))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x289 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x147 (= $x289 true)))
 (let (($x202 (= $x147 true)))
 (let (($x311 (= $x202 true)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x240)))
 (let ((?x298 (bvand symbol.1 (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x298)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x218 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x251 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x201 (= input.memlabel-mem--symbol.1_end ?x251)))
 (let (($x80 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x176 (and $x80 $x201)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x67 $x176)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x245 (and $x199 $x153)))
 (let (($x235 (not $x245)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (and $x93 $x180)))
 (let (($x190 (and (not $x19) $x235)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x200 $x226)))
 (let (($x186 (and (not $x72) $x29)))
 (let (($x301 (and (and (and (and (and (and $x186 $x190) $x239) $x211) $x144) $x218) $x120)))
 (let (($x294 (and $x301 $x247)))
 (let (($x66 (= symbol.1 dst_symbol_addr.1)))
 (let (($x269 (and $x66 $x294)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x151 (or (bvugt input.memlabel-mem--symbol.1_begin ?x142) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x95 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x151) (or $x212 $x47)))))))
 (let (($x189 (and $x95 $x269)))
 (let (($x288 (= $x189 true)))
 (let (($x183 (= $x288 true)))
 (let (($x185 (= $x183 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x167 (bvsub ?x96 ?x87)))
 (let (($x149 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x167) (bvult ?x96 ?x167))))
 (let ((?x84 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x84)))
 (let ((?x134 ((_ extract 63 32) ?x122)))
 (let (($x179 (= (_ bv0 32) ?x134)))
 (let (($x173 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x162 (and (and (and true $x173) $x179) $x149)))
 (let (($x23 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x9 (and $x23 $x162)))
 (let (($x157 (= true $x9)))
 (let (($x328 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (=> $x328 $x157)))
 (let (($x177 (= $x140 true)))
 (let (($x210 (= $x177 true)))
 (let (($x141 (= $x210 true)))
 (let (($x14 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (= $x14 true)))
 (let (($x90 (= $x41 true)))
 (let (($x131 (= $x90 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (= $x59 true)))
 (let (($x91 (= $x106 true)))
 (let (($x68 (= $x91 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x6)))
 (let (($x44 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x124 (= ?x32 input.dst.llvm-%n)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x34 (= $x57 true)))
 (let (($x35 (= $x34 true)))
 (let (($x77 (= $x35 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x42 (= $x328 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x51 (and $x64 $x79)))
 (let (($x45 (and $x51 $x77)))
 (let (($x171 (and $x45 $x99)))
 (let (($x49 (and $x171 $x94)))
 (let (($x100 (and $x49 $x68)))
 (let (($x178 (and $x100 $x131)))
 (let (($x152 (and $x178 $x141)))
 (let (($x221 (and $x152 $x185)))
 (let (($x111 (and $x221 $x311)))
 (let (($x114 (and $x111 $x227)))
 (let (($x258 (and $x114 $x255)))
 (let (($x297 (and $x258 $x53)))
 (let (($x107 (and $x297 $x74)))
 (let (($x213 (and $x107 $x252)))
 (let (($x254 (and $x213 $x299)))
 (let (($x103 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x187 (and (not $x103) $x254)))
 (let (($x71 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x208 (and $x71 $x187)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x24 (and $x292 $x208)))
 (let (($x331 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x262 (and $x331 $x24)))
 (let (($x332 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x314 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x332)))))
 (let (($x222 (=> (and $x328 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x332)))))
 (let (($x231 (and $x222 $x262)))
 (let (($x241 (=> $x231 $x135)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x58 (bvule ?x5 (_ bv399 32))))
 (let (($x233 (= $x58 true)))
 (let (($x31 (= $x233 true)))
 (let (($x165 (forall ((input.ind-%var1395X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1395X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1395X) (_ bv0 32)))))
 ))
 (let (($x230 (forall ((input.ind-%var1394X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1394X)))
 (= $x65 false)))
 ))
 (let (($x104 (and $x230 $x165)))
 (let (($x139 (= $x104 true)))
 (let (($x8 (forall ((input.ind-%var1389X (_ BitVec 32)) )(let ((?x333 (bvadd symbol.1 (bvmul input.ind-%var1389X (_ bv4 32)))))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x333))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv2 32))) ?x126)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv3 32))) ?x81)))
 (let ((?x242 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1389X)))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1389X)))
 (=> $x166 (= ?x242 ?x355)))))))))
 ))
 (let (($x347 (forall ((input.ind-%var1388X (_ BitVec 32)) )(let (($x315 (and (bvule (_ bv0 32) input.ind-%var1388X) (bvult input.ind-%var1388X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1388X)))
 (= $x166 $x315))))
 ))
 (let (($x307 (and $x347 $x8)))
 (let (($x92 (= $x307 true)))
 (let (($x346 (forall ((input.ind-%var1383X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1383X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1383X) (_ bv0 32)))))
 ))
 (let (($x83 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1382X)))
 (= $x65 false)))
 ))
 (let (($x195 (and $x83 $x346)))
 (let (($x10 (= $x195 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x16)))
 (let (($x313 (= ?x110 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x53 (= $x313 true)))
 (let (($x297 (= $x53 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x349 (= $x7 true)))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x324 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x114 (= $x227 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x202 (= $x147 true)))
 (let (($x311 (= $x202 true)))
 (let (($x111 (= $x311 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x218)))
 (let ((?x203 (bvand symbol.1 (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x203)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x67 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x80 (= input.memlabel-mem--symbol.1_end ?x67)))
 (let (($x300 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x251 (and $x300 $x80)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x211 $x251)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x245 (and $x199 $x153)))
 (let (($x235 (not $x245)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x163 (and $x180 $x19)))
 (let (($x194 (and (not $x163) $x235)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x72 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x226 $x72)))
 (let (($x93 (and (not $x169) $x29)))
 (let (($x294 (and (and (and (and (and (and $x93 $x194) $x239) $x182) $x201) $x144) $x246)))
 (let (($x269 (and $x294 $x248)))
 (let (($x148 (= symbol.1 dst_symbol_addr.1)))
 (let (($x189 (and $x148 $x269)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x85 (or (bvugt input.memlabel-mem--symbol.1_begin ?x128) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x85) (or $x145 $x198)))))))
 (let (($x288 (and $x200 $x189)))
 (let (($x183 (= $x288 true)))
 (let (($x185 (= $x183 true)))
 (let (($x221 (= $x185 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x179 (bvsub ?x96 ?x87)))
 (let (($x55 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x179) (bvult ?x96 ?x179))))
 (let ((?x69 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x84 (bvmul (_ bv4 64) ?x69)))
 (let ((?x122 ((_ extract 63 32) ?x84)))
 (let (($x134 (= (_ bv0 32) ?x122)))
 (let (($x173 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x162 (and (and (and true $x173) $x134) $x55)))
 (let (($x23 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x9 (and $x23 $x162)))
 (let (($x157 (= true $x9)))
 (let (($x209 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (=> $x209 $x157)))
 (let (($x177 (= $x140 true)))
 (let (($x210 (= $x177 true)))
 (let (($x141 (= $x210 true)))
 (let (($x14 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (= $x14 true)))
 (let (($x90 (= $x41 true)))
 (let (($x131 (= $x90 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (= $x59 true)))
 (let (($x91 (= $x106 true)))
 (let (($x68 (= $x91 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x6)))
 (let (($x44 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x124 (= ?x32 input.dst.llvm-%n)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x34 (= $x57 true)))
 (let (($x35 (= $x34 true)))
 (let (($x77 (= $x35 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x42 (= $x209 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x51 (and $x64 $x79)))
 (let (($x45 (and $x51 $x77)))
 (let (($x171 (and $x45 $x99)))
 (let (($x49 (and $x171 $x94)))
 (let (($x100 (and $x49 $x68)))
 (let (($x178 (and $x100 $x131)))
 (let (($x152 (and $x178 $x141)))
 (let (($x289 (and $x152 $x221)))
 (let (($x243 (and $x289 $x111)))
 (let (($x12 (and $x243 $x114)))
 (let (($x343 (and $x12 $x258)))
 (let (($x340 (and $x343 $x297)))
 (let (($x276 (and $x340 $x10)))
 (let (($x109 (and $x276 $x92)))
 (let (($x303 (and $x109 $x139)))
 (let (($x342 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (and (not $x342) $x303)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x37 $x205)))
 (let (($x334 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x334 $x82)))
 (let (($x267 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x337 (and $x267 $x268)))
 (let (($x266 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x331 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x266)))))
 (let (($x323 (=> (and $x209 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x266)))))
 (let (($x237 (and $x323 $x337)))
 (let (($x306 (=> $x237 $x31)))
 (not $x306)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x58 (bvule ?x5 (_ bv399 32))))
 (let (($x233 (= $x58 true)))
 (let (($x31 (= $x233 true)))
 (let (($x165 (forall ((input.ind-%var1395X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1395X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1395X) (_ bv0 32)))))
 ))
 (let (($x230 (forall ((input.ind-%var1394X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1394X)))
 (= $x65 false)))
 ))
 (let (($x104 (and $x230 $x165)))
 (let (($x139 (= $x104 true)))
 (let (($x8 (forall ((input.ind-%var1389X (_ BitVec 32)) )(let ((?x333 (bvadd symbol.1 (bvmul input.ind-%var1389X (_ bv4 32)))))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x333))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv2 32))) ?x126)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x333 (_ bv3 32))) ?x81)))
 (let ((?x242 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1389X)))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1389X)))
 (=> $x166 (= ?x242 ?x355)))))))))
 ))
 (let (($x347 (forall ((input.ind-%var1388X (_ BitVec 32)) )(let (($x315 (and (bvule (_ bv0 32) input.ind-%var1388X) (bvult input.ind-%var1388X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x166 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1388X)))
 (= $x166 $x315))))
 ))
 (let (($x307 (and $x347 $x8)))
 (let (($x92 (= $x307 true)))
 (let (($x346 (forall ((input.ind-%var1383X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1383X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1383X) (_ bv0 32)))))
 ))
 (let (($x83 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1382X)))
 (= $x65 false)))
 ))
 (let (($x195 (and $x83 $x346)))
 (let (($x10 (= $x195 true)))
 (let ((?x16 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x16)))
 (let (($x313 (= ?x110 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x53 (= $x313 true)))
 (let (($x297 (= $x53 true)))
 (let (($x7 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x349 (= $x7 true)))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x324 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x281 (= $x324 true)))
 (let (($x227 (= $x281 true)))
 (let (($x114 (= $x227 true)))
 (let (($x147 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x202 (= $x147 true)))
 (let (($x311 (= $x202 true)))
 (let (($x111 (= $x311 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x218)))
 (let ((?x203 (bvand symbol.1 (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x203)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x67 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x80 (= input.memlabel-mem--symbol.1_end ?x67)))
 (let (($x300 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x251 (and $x300 $x80)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x211 $x251)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x245 (and $x199 $x153)))
 (let (($x235 (not $x245)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x163 (and $x180 $x19)))
 (let (($x194 (and (not $x163) $x235)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x72 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x226 $x72)))
 (let (($x93 (and (not $x169) $x29)))
 (let (($x294 (and (and (and (and (and (and $x93 $x194) $x239) $x182) $x201) $x144) $x246)))
 (let (($x269 (and $x294 $x248)))
 (let (($x148 (= symbol.1 dst_symbol_addr.1)))
 (let (($x189 (and $x148 $x269)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x85 (or (bvugt input.memlabel-mem--symbol.1_begin ?x128) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x85) (or $x145 $x198)))))))
 (let (($x288 (and $x200 $x189)))
 (let (($x183 (= $x288 true)))
 (let (($x185 (= $x183 true)))
 (let (($x221 (= $x185 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x179 (bvsub ?x96 ?x87)))
 (let (($x55 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x179) (bvult ?x96 ?x179))))
 (let ((?x69 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x84 (bvmul (_ bv4 64) ?x69)))
 (let ((?x122 ((_ extract 63 32) ?x84)))
 (let (($x134 (= (_ bv0 32) ?x122)))
 (let (($x173 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x162 (and (and (and true $x173) $x134) $x55)))
 (let (($x23 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x9 (and $x23 $x162)))
 (let (($x157 (= true $x9)))
 (let (($x209 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (=> $x209 $x157)))
 (let (($x177 (= $x140 true)))
 (let (($x210 (= $x177 true)))
 (let (($x141 (= $x210 true)))
 (let (($x14 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (= $x14 true)))
 (let (($x90 (= $x41 true)))
 (let (($x131 (= $x90 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (= $x59 true)))
 (let (($x91 (= $x106 true)))
 (let (($x68 (= $x91 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x6)))
 (let (($x44 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x124 (= ?x32 input.dst.llvm-%n)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x34 (= $x57 true)))
 (let (($x35 (= $x34 true)))
 (let (($x77 (= $x35 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x42 (= $x209 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x51 (and $x64 $x79)))
 (let (($x45 (and $x51 $x77)))
 (let (($x171 (and $x45 $x99)))
 (let (($x49 (and $x171 $x94)))
 (let (($x100 (and $x49 $x68)))
 (let (($x178 (and $x100 $x131)))
 (let (($x152 (and $x178 $x141)))
 (let (($x289 (and $x152 $x221)))
 (let (($x243 (and $x289 $x111)))
 (let (($x12 (and $x243 $x114)))
 (let (($x343 (and $x12 $x258)))
 (let (($x340 (and $x343 $x297)))
 (let (($x276 (and $x340 $x10)))
 (let (($x109 (and $x276 $x92)))
 (let (($x303 (and $x109 $x139)))
 (let (($x342 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (and (not $x342) $x303)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and $x37 $x205)))
 (let (($x334 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x334 $x82)))
 (let (($x267 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x337 (and $x267 $x268)))
 (let (($x266 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x331 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x266)))))
 (let (($x323 (=> (and $x209 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x266)))))
 (let (($x237 (and $x323 $x337)))
 (let (($x306 (=> $x237 $x31)))
 (not $x306)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x252 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x137 (bvsge ?x252 (_ bv0 32))))
 (let (($x275 (= $x137 true)))
 (let (($x234 (= $x275 true)))
 (let (($x257 (forall ((input.ind-%var1413X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1413X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1413X) (_ bv0 32)))))
 ))
 (let (($x208 (forall ((input.ind-%var1412X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1412X)))
 (= $x263 false)))
 ))
 (let (($x13 (and $x208 $x257)))
 (let (($x217 (= $x13 true)))
 (let (($x187 (forall ((input.ind-%var1407X (_ BitVec 32)) )(let ((?x117 (bvadd symbol.1 (bvmul input.ind-%var1407X (_ bv4 32)))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x117))))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv2 32))) ?x63)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv3 32))) ?x125)))
 (let ((?x230 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1407X)))
 (let (($x310 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1407X)))
 (=> $x310 (= ?x230 ?x329)))))))))
 ))
 (let (($x8 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var1406X) (bvult input.ind-%var1406X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x310 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1406X)))
 (= $x310 $x105))))
 ))
 (let (($x241 (and $x8 $x187)))
 (let (($x325 (= $x241 true)))
 (let (($x295 (forall ((input.ind-%var1401X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1401X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1401X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var1400X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1400X)))
 (= $x263 false)))
 ))
 (let (($x350 (and $x195 $x295)))
 (let (($x333 (= $x350 true)))
 (let ((?x110 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x313 (bvneg ?x110)))
 (let (($x53 (= ?x313 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x53 true)))
 (let (($x340 (= $x297 true)))
 (let (($x349 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x281 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x227 (= $x281 true)))
 (let (($x114 (= $x227 true)))
 (let (($x12 (= $x114 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x311 (= $x202 true)))
 (let (($x111 (= $x311 true)))
 (let (($x243 (= $x111 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x144)))
 (let ((?x240 (bvand symbol.1 (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x240)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x211 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x300 (= input.memlabel-mem--symbol.1_end ?x211)))
 (let (($x301 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x67 (and $x301 $x300)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x182 $x67)))
 (let (($x284 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x245 (and $x199 $x153)))
 (let (($x235 (not $x245)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x19 $x163)))
 (let (($x298 (and (not $x190) $x235)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x72 $x169)))
 (let (($x180 (and (not $x186) $x29)))
 (let (($x269 (and (and (and (and (and (and $x180 $x298) $x239) $x284) $x80) $x201) $x176)))
 (let (($x189 (and $x269 $x247)))
 (let (($x66 (= symbol.1 dst_symbol_addr.1)))
 (let (($x288 (and $x66 $x189)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x155 (or (bvugt input.memlabel-mem--symbol.1_begin ?x160) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x155) (or $x175 $x127)))))))
 (let (($x183 (and $x226 $x288)))
 (let (($x185 (= $x183 true)))
 (let (($x221 (= $x185 true)))
 (let (($x289 (= $x221 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x134 (bvsub ?x96 ?x87)))
 (let (($x129 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x134) (bvult ?x96 ?x134))))
 (let ((?x158 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x69 (bvmul (_ bv4 64) ?x158)))
 (let ((?x84 ((_ extract 63 32) ?x69)))
 (let (($x122 (= (_ bv0 32) ?x84)))
 (let (($x173 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x162 (and (and (and true $x173) $x122) $x129)))
 (let (($x23 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x9 (and $x23 $x162)))
 (let (($x157 (= true $x9)))
 (let (($x299 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (=> $x299 $x157)))
 (let (($x177 (= $x140 true)))
 (let (($x210 (= $x177 true)))
 (let (($x141 (= $x210 true)))
 (let (($x14 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (= $x14 true)))
 (let (($x90 (= $x41 true)))
 (let (($x131 (= $x90 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (= $x59 true)))
 (let (($x91 (= $x106 true)))
 (let (($x68 (= $x91 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x6)))
 (let (($x44 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x124 (= ?x32 input.dst.llvm-%n)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x34 (= $x57 true)))
 (let (($x35 (= $x34 true)))
 (let (($x77 (= $x35 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x42 (= $x299 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x51 (and $x64 $x79)))
 (let (($x45 (and $x51 $x77)))
 (let (($x171 (and $x45 $x99)))
 (let (($x49 (and $x171 $x94)))
 (let (($x100 (and $x49 $x68)))
 (let (($x178 (and $x100 $x131)))
 (let (($x152 (and $x178 $x141)))
 (let (($x147 (and $x152 $x289)))
 (let (($x324 (and $x147 $x243)))
 (let (($x7 (and $x324 $x12)))
 (let (($x16 (and $x7 $x343)))
 (let (($x121 (and $x16 $x340)))
 (let (($x354 (and $x121 $x333)))
 (let (($x286 (and $x354 $x325)))
 (let (($x130 (and $x286 $x217)))
 (let (($x174 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and (not $x174) $x130)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x103 $x108)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x61 $x107)))
 (let (($x225 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x27 (and $x225 $x312)))
 (let (($x222 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x267 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x222)))))
 (let (($x273 (=> (and $x299 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x222)))))
 (let (($x264 (and $x273 $x27)))
 (let (($x43 (=> $x264 $x234)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x252 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x137 (bvsge ?x252 (_ bv0 32))))
 (let (($x275 (= $x137 true)))
 (let (($x234 (= $x275 true)))
 (let (($x257 (forall ((input.ind-%var1413X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1413X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1413X) (_ bv0 32)))))
 ))
 (let (($x208 (forall ((input.ind-%var1412X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1412X)))
 (= $x263 false)))
 ))
 (let (($x13 (and $x208 $x257)))
 (let (($x217 (= $x13 true)))
 (let (($x187 (forall ((input.ind-%var1407X (_ BitVec 32)) )(let ((?x117 (bvadd symbol.1 (bvmul input.ind-%var1407X (_ bv4 32)))))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x117))))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv2 32))) ?x63)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x117 (_ bv3 32))) ?x125)))
 (let ((?x230 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1407X)))
 (let (($x310 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1407X)))
 (=> $x310 (= ?x230 ?x329)))))))))
 ))
 (let (($x8 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var1406X) (bvult input.ind-%var1406X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x310 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1406X)))
 (= $x310 $x105))))
 ))
 (let (($x241 (and $x8 $x187)))
 (let (($x325 (= $x241 true)))
 (let (($x295 (forall ((input.ind-%var1401X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1401X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1401X) (_ bv0 32)))))
 ))
 (let (($x195 (forall ((input.ind-%var1400X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1400X)))
 (= $x263 false)))
 ))
 (let (($x350 (and $x195 $x295)))
 (let (($x333 (= $x350 true)))
 (let ((?x110 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x313 (bvneg ?x110)))
 (let (($x53 (= ?x313 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x53 true)))
 (let (($x340 (= $x297 true)))
 (let (($x349 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x281 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x227 (= $x281 true)))
 (let (($x114 (= $x227 true)))
 (let (($x12 (= $x114 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x311 (= $x202 true)))
 (let (($x111 (= $x311 true)))
 (let (($x243 (= $x111 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x144)))
 (let ((?x240 (bvand symbol.1 (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x240)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x211 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x300 (= input.memlabel-mem--symbol.1_end ?x211)))
 (let (($x301 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x67 (and $x301 $x300)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x182 $x67)))
 (let (($x284 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x245 (and $x199 $x153)))
 (let (($x235 (not $x245)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x19 $x163)))
 (let (($x298 (and (not $x190) $x235)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x133 $x52)))
 (let (($x29 (not $x115)))
 (let (($x169 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x72 $x169)))
 (let (($x180 (and (not $x186) $x29)))
 (let (($x269 (and (and (and (and (and (and $x180 $x298) $x239) $x284) $x80) $x201) $x176)))
 (let (($x189 (and $x269 $x247)))
 (let (($x66 (= symbol.1 dst_symbol_addr.1)))
 (let (($x288 (and $x66 $x189)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x155 (or (bvugt input.memlabel-mem--symbol.1_begin ?x160) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x155) (or $x175 $x127)))))))
 (let (($x183 (and $x226 $x288)))
 (let (($x185 (= $x183 true)))
 (let (($x221 (= $x185 true)))
 (let (($x289 (= $x221 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x134 (bvsub ?x96 ?x87)))
 (let (($x129 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x134) (bvult ?x96 ?x134))))
 (let ((?x158 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x69 (bvmul (_ bv4 64) ?x158)))
 (let ((?x84 ((_ extract 63 32) ?x69)))
 (let (($x122 (= (_ bv0 32) ?x84)))
 (let (($x173 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x162 (and (and (and true $x173) $x122) $x129)))
 (let (($x23 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x9 (and $x23 $x162)))
 (let (($x157 (= true $x9)))
 (let (($x299 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x140 (=> $x299 $x157)))
 (let (($x177 (= $x140 true)))
 (let (($x210 (= $x177 true)))
 (let (($x141 (= $x210 true)))
 (let (($x14 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (= $x14 true)))
 (let (($x90 (= $x41 true)))
 (let (($x131 (= $x90 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (= $x59 true)))
 (let (($x91 (= $x106 true)))
 (let (($x68 (= $x91 true)))
 (let ((?x6 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x6)))
 (let (($x44 (= ?x32 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x124 (= ?x32 input.dst.llvm-%n)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x57 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x34 (= $x57 true)))
 (let (($x35 (= $x34 true)))
 (let (($x77 (= $x35 true)))
 (let (($x76 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x42 (= $x299 true)))
 (let (($x36 (= $x42 true)))
 (let (($x64 (= $x36 true)))
 (let (($x51 (and $x64 $x79)))
 (let (($x45 (and $x51 $x77)))
 (let (($x171 (and $x45 $x99)))
 (let (($x49 (and $x171 $x94)))
 (let (($x100 (and $x49 $x68)))
 (let (($x178 (and $x100 $x131)))
 (let (($x152 (and $x178 $x141)))
 (let (($x147 (and $x152 $x289)))
 (let (($x324 (and $x147 $x243)))
 (let (($x7 (and $x324 $x12)))
 (let (($x16 (and $x7 $x343)))
 (let (($x121 (and $x16 $x340)))
 (let (($x354 (and $x121 $x333)))
 (let (($x286 (and $x354 $x325)))
 (let (($x130 (and $x286 $x217)))
 (let (($x174 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and (not $x174) $x130)))
 (let (($x103 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x107 (and $x103 $x108)))
 (let (($x61 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x61 $x107)))
 (let (($x225 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x27 (and $x225 $x312)))
 (let (($x222 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x267 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x222)))))
 (let (($x273 (=> (and $x299 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x222)))))
 (let (($x264 (and $x273 $x27)))
 (let (($x43 (=> $x264 $x234)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (bvule ?x92 (_ bv399 32))))
 (let (($x223 (= $x11 true)))
 (let (($x135 (= $x223 true)))
 (let (($x315 (forall ((input.ind-%var1431X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1431X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1431X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var1430X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1430X)))
 (= $x193 false)))
 ))
 (let (($x260 (and $x82 $x315)))
 (let (($x181 (= $x260 true)))
 (let (($x205 (forall ((input.ind-%var1425X (_ BitVec 32)) )(let ((?x165 (bvadd symbol.1 (bvmul input.ind-%var1425X (_ bv4 32)))))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x165))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv2 32))) ?x166)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv3 32))) ?x206)))
 (let ((?x208 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1425X)))
 (let (($x278 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1425X)))
 (=> $x278 (= ?x208 ?x65)))))))))
 ))
 (let (($x187 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x191 (and (bvule (_ bv0 32) input.ind-%var1424X) (bvult input.ind-%var1424X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x278 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1424X)))
 (= $x278 $x191))))
 ))
 (let (($x306 (and $x187 $x205)))
 (let (($x229 (= $x306 true)))
 (let (($x104 (forall ((input.ind-%var1419X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1419X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1419X) (_ bv0 32)))))
 ))
 (let (($x350 (forall ((input.ind-%var1418X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1418X)))
 (= $x193 false)))
 ))
 (let (($x46 (and $x350 $x104)))
 (let (($x117 (= $x46 true)))
 (let ((?x313 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x313)))
 (let (($x297 (= ?x53 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x340 (= $x297 true)))
 (let (($x121 (= $x340 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x311 (bvsub ?x96 ?x87)))
 (let (($x281 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x311) (bvult ?x96 ?x311))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x289 (bvmul (_ bv4 64) ?x221)))
 (let ((?x147 ((_ extract 63 32) ?x289)))
 (let (($x202 (= (_ bv0 32) ?x147)))
 (let (($x183 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x12 (and (and (and true $x183) $x202) $x281)))
 (let (($x269 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x7 (and $x269 $x12)))
 (let (($x349 (= true $x7)))
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x255 (=> $x139 $x349)))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x16 (= $x343 true)))
 (let (($x80 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x80 true)))
 (let (($x251 (= $x218 true)))
 (let (($x201 (= $x251 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (= $x182 true)))
 (let (($x211 (= $x301 true)))
 (let (($x300 (= $x211 true)))
 (let (($x239 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x246 (= $x239 true)))
 (let (($x120 (= $x246 true)))
 (let (($x284 (= $x120 true)))
 (let (($x153 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x245 (= $x153 true)))
 (let (($x235 (= $x245 true)))
 (let (($x298 (= $x235 true)))
 (let (($x163 (= $x139 true)))
 (let (($x190 (= $x163 true)))
 (let (($x194 (= $x190 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x200)))
 (let ((?x95 (bvand symbol.1 (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x95)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x155 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x145 (= input.memlabel-mem--symbol.1_end ?x155)))
 (let (($x212 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (and $x212 $x145)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x85 $x47)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x140 $x177)))
 (let (($x141 (not $x210)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x162 $x9)))
 (let (($x128 (and (not $x157) $x141)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x55 $x149)))
 (let (($x15 (not $x134)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x69 $x84)))
 (let (($x129 (and (not $x122) $x15)))
 (let (($x186 (and (and (and (and (and (and $x129 $x128) $x151) $x160) $x175) $x127) $x25)))
 (let (($x93 (and $x186 $x119)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x133 (and $x68 $x93)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x178 (or (bvugt input.memlabel-mem--symbol.1_begin ?x41) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x178) (or $x39 $x138)))))))
 (let (($x52 (and $x158 $x133)))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x180 (= $x29 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x49 (= $x94 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x35)))
 (let (($x124 (= ?x77 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x45 (= ?x77 input.dst.llvm-%n)))
 (let (($x17 (= $x45 true)))
 (let (($x6 (= $x17 true)))
 (let (($x62 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x57 (and $x76 $x51)))
 (let (($x32 (and $x57 $x6)))
 (let (($x171 (and $x32 $x99)))
 (let (($x59 (and $x171 $x49)))
 (let (($x19 (and $x59 $x180)))
 (let (($x199 (and $x19 $x194)))
 (let (($x203 (and $x199 $x298)))
 (let (($x294 (and $x203 $x284)))
 (let (($x67 (and $x294 $x300)))
 (let (($x248 (and $x67 $x201)))
 (let (($x110 (and $x248 $x16)))
 (let (($x83 (and $x110 $x121)))
 (let (($x159 (and $x83 $x117)))
 (let (($x58 (and $x159 $x229)))
 (let (($x161 (and $x58 $x181)))
 (let (($x196 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and (not $x196) $x161)))
 (let (($x342 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and $x342 $x126)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x33 (and $x71 $x276)))
 (let (($x292 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x292 $x33)))
 (let (($x323 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x225 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x323)))))
 (let (($x216 (=> (and $x139 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x323)))))
 (let (($x262 (and $x216 $x228)))
 (let (($x261 (=> $x262 $x135)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (bvule ?x92 (_ bv399 32))))
 (let (($x223 (= $x11 true)))
 (let (($x135 (= $x223 true)))
 (let (($x315 (forall ((input.ind-%var1431X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1431X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1431X) (_ bv0 32)))))
 ))
 (let (($x82 (forall ((input.ind-%var1430X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1430X)))
 (= $x193 false)))
 ))
 (let (($x260 (and $x82 $x315)))
 (let (($x181 (= $x260 true)))
 (let (($x205 (forall ((input.ind-%var1425X (_ BitVec 32)) )(let ((?x165 (bvadd symbol.1 (bvmul input.ind-%var1425X (_ bv4 32)))))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x165))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv2 32))) ?x166)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x165 (_ bv3 32))) ?x206)))
 (let ((?x208 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1425X)))
 (let (($x278 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1425X)))
 (=> $x278 (= ?x208 ?x65)))))))))
 ))
 (let (($x187 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let (($x191 (and (bvule (_ bv0 32) input.ind-%var1424X) (bvult input.ind-%var1424X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x278 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1424X)))
 (= $x278 $x191))))
 ))
 (let (($x306 (and $x187 $x205)))
 (let (($x229 (= $x306 true)))
 (let (($x104 (forall ((input.ind-%var1419X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1419X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1419X) (_ bv0 32)))))
 ))
 (let (($x350 (forall ((input.ind-%var1418X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1418X)))
 (= $x193 false)))
 ))
 (let (($x46 (and $x350 $x104)))
 (let (($x117 (= $x46 true)))
 (let ((?x313 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x313)))
 (let (($x297 (= ?x53 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x340 (= $x297 true)))
 (let (($x121 (= $x340 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x311 (bvsub ?x96 ?x87)))
 (let (($x281 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x311) (bvult ?x96 ?x311))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x289 (bvmul (_ bv4 64) ?x221)))
 (let ((?x147 ((_ extract 63 32) ?x289)))
 (let (($x202 (= (_ bv0 32) ?x147)))
 (let (($x183 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x12 (and (and (and true $x183) $x202) $x281)))
 (let (($x269 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x7 (and $x269 $x12)))
 (let (($x349 (= true $x7)))
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x255 (=> $x139 $x349)))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x16 (= $x343 true)))
 (let (($x80 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x80 true)))
 (let (($x251 (= $x218 true)))
 (let (($x201 (= $x251 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x301 (= $x182 true)))
 (let (($x211 (= $x301 true)))
 (let (($x300 (= $x211 true)))
 (let (($x239 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x246 (= $x239 true)))
 (let (($x120 (= $x246 true)))
 (let (($x284 (= $x120 true)))
 (let (($x153 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x245 (= $x153 true)))
 (let (($x235 (= $x245 true)))
 (let (($x298 (= $x235 true)))
 (let (($x163 (= $x139 true)))
 (let (($x190 (= $x163 true)))
 (let (($x194 (= $x190 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x200)))
 (let ((?x95 (bvand symbol.1 (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x95)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x155 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x145 (= input.memlabel-mem--symbol.1_end ?x155)))
 (let (($x212 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (and $x212 $x145)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x85 $x47)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x140 $x177)))
 (let (($x141 (not $x210)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (and $x162 $x9)))
 (let (($x128 (and (not $x157) $x141)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x55 $x149)))
 (let (($x15 (not $x134)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x69 $x84)))
 (let (($x129 (and (not $x122) $x15)))
 (let (($x186 (and (and (and (and (and (and $x129 $x128) $x151) $x160) $x175) $x127) $x25)))
 (let (($x93 (and $x186 $x119)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x133 (and $x68 $x93)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x178 (or (bvugt input.memlabel-mem--symbol.1_begin ?x41) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x178) (or $x39 $x138)))))))
 (let (($x52 (and $x158 $x133)))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x180 (= $x29 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x49 (= $x94 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x35)))
 (let (($x124 (= ?x77 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x45 (= ?x77 input.dst.llvm-%n)))
 (let (($x17 (= $x45 true)))
 (let (($x6 (= $x17 true)))
 (let (($x62 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x57 (and $x76 $x51)))
 (let (($x32 (and $x57 $x6)))
 (let (($x171 (and $x32 $x99)))
 (let (($x59 (and $x171 $x49)))
 (let (($x19 (and $x59 $x180)))
 (let (($x199 (and $x19 $x194)))
 (let (($x203 (and $x199 $x298)))
 (let (($x294 (and $x203 $x284)))
 (let (($x67 (and $x294 $x300)))
 (let (($x248 (and $x67 $x201)))
 (let (($x110 (and $x248 $x16)))
 (let (($x83 (and $x110 $x121)))
 (let (($x159 (and $x83 $x117)))
 (let (($x58 (and $x159 $x229)))
 (let (($x161 (and $x58 $x181)))
 (let (($x196 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x126 (and (not $x196) $x161)))
 (let (($x342 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and $x342 $x126)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x33 (and $x71 $x276)))
 (let (($x292 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x292 $x33)))
 (let (($x323 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x225 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x323)))))
 (let (($x216 (=> (and $x139 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x323)))))
 (let (($x262 (and $x216 $x228)))
 (let (($x261 (=> $x262 $x135)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (bvsle ?x325 (_ bv399 32))))
 (let (($x296 (= $x142 true)))
 (let (($x31 (= $x296 true)))
 (let (($x105 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1449X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1449X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1448X)))
 (= $x355 false)))
 ))
 (let (($x5 (and $x107 $x105)))
 (let (($x285 (= $x5 true)))
 (let (($x108 (forall ((input.ind-%var1443X (_ BitVec 32)) )(let ((?x257 (bvadd symbol.1 (bvmul input.ind-%var1443X (_ bv4 32)))))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x257))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv2 32))) ?x310)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv3 32))) ?x322)))
 (let ((?x82 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1443X)))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1443X)))
 (=> $x307 (= ?x82 ?x263)))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1442X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1442X) (bvult input.ind-%var1442X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1442X)))
 (= $x307 $x123))))
 ))
 (let (($x43 (and $x205 $x108)))
 (let (($x271 (= $x43 true)))
 (let (($x13 (forall ((input.ind-%var1437X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1437X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1437X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1436X)))
 (= $x355 false)))
 ))
 (let (($x113 (and $x46 $x13)))
 (let (($x165 (= $x113 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x53)))
 (let (($x340 (= ?x297 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x340 true)))
 (let (($x83 (= $x121 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x114 (bvsub ?x96 ?x87)))
 (let (($x324 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x114) (bvult ?x96 ?x114))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x289 (bvmul (_ bv4 64) ?x221)))
 (let ((?x147 ((_ extract 63 32) ?x289)))
 (let (($x202 (= (_ bv0 32) ?x147)))
 (let (($x227 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and (and (and true $x227) $x202) $x324)))
 (let (($x247 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x349 (and $x247 $x7)))
 (let (($x255 (= true $x349)))
 (let (($x217 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x258 (=> $x217 $x255)))
 (let (($x343 (= $x258 true)))
 (let (($x16 (= $x343 true)))
 (let (($x110 (= $x16 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x251 (= $x218 true)))
 (let (($x201 (= $x251 true)))
 (let (($x248 (= $x201 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (= $x301 true)))
 (let (($x300 (= $x211 true)))
 (let (($x67 (= $x300 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x120 (= $x246 true)))
 (let (($x284 (= $x120 true)))
 (let (($x294 (= $x284 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x235 (= $x245 true)))
 (let (($x298 (= $x235 true)))
 (let (($x203 (= $x298 true)))
 (let (($x190 (= $x217 true)))
 (let (($x194 (= $x190 true)))
 (let (($x199 (= $x194 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x127)))
 (let ((?x72 (bvand symbol.1 (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x72)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x85 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x212 (= input.memlabel-mem--symbol.1_end ?x85)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (and $x66 $x212)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x160 $x155)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x140 $x177)))
 (let (($x141 (not $x210)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (and $x9 $x157)))
 (let (($x226 (and (not $x152) $x141)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x55 $x149)))
 (let (($x15 (not $x134)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x84 $x122)))
 (let (($x162 (and (not $x179) $x15)))
 (let (($x93 (and (and (and (and (and (and $x162 $x226) $x151) $x148) $x145) $x175) $x198)))
 (let (($x133 (and $x93 $x169)))
 (let (($x78 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x78 $x133)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x154 (or (bvugt input.memlabel-mem--symbol.1_begin ?x131) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x154) (or $x136 $x102)))))))
 (let (($x115 (and $x69 $x52)))
 (let (($x29 (= $x115 true)))
 (let (($x180 (= $x29 true)))
 (let (($x19 (= $x180 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x49 (= $x94 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x35)))
 (let (($x124 (= ?x77 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x45 (= ?x77 input.dst.llvm-%n)))
 (let (($x17 (= $x45 true)))
 (let (($x6 (= $x17 true)))
 (let (($x62 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x57 (and $x76 $x51)))
 (let (($x32 (and $x57 $x6)))
 (let (($x171 (and $x32 $x99)))
 (let (($x59 (and $x171 $x49)))
 (let (($x163 (and $x59 $x19)))
 (let (($x153 (and $x163 $x199)))
 (let (($x239 (and $x153 $x203)))
 (let (($x182 (and $x239 $x294)))
 (let (($x80 (and $x182 $x67)))
 (let (($x240 (and $x80 $x248)))
 (let (($x313 (and $x240 $x110)))
 (let (($x195 (and $x313 $x83)))
 (let (($x327 (and $x195 $x165)))
 (let (($x137 (and $x327 $x271)))
 (let (($x233 (and $x137 $x285)))
 (let (($x24 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (and (not $x24) $x233)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x354 (and $x174 $x63)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x156 (and $x37 $x354)))
 (let (($x334 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x56 (and $x334 $x156)))
 (let (($x273 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x292 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x273)))))
 (let (($x357 (=> (and $x217 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x273)))))
 (let (($x337 (and $x357 $x56)))
 (let (($x232 (=> $x337 $x31)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x142 (bvsle ?x325 (_ bv399 32))))
 (let (($x296 (= $x142 true)))
 (let (($x31 (= $x296 true)))
 (let (($x105 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1449X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1449X) (_ bv0 32)))))
 ))
 (let (($x107 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1448X)))
 (= $x355 false)))
 ))
 (let (($x5 (and $x107 $x105)))
 (let (($x285 (= $x5 true)))
 (let (($x108 (forall ((input.ind-%var1443X (_ BitVec 32)) )(let ((?x257 (bvadd symbol.1 (bvmul input.ind-%var1443X (_ bv4 32)))))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x257))))
 (let ((?x322 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv2 32))) ?x310)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x257 (_ bv3 32))) ?x322)))
 (let ((?x82 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1443X)))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1443X)))
 (=> $x307 (= ?x82 ?x263)))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1442X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1442X) (bvult input.ind-%var1442X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x307 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1442X)))
 (= $x307 $x123))))
 ))
 (let (($x43 (and $x205 $x108)))
 (let (($x271 (= $x43 true)))
 (let (($x13 (forall ((input.ind-%var1437X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1437X)))
 (=> $x355 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1437X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x355 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1436X)))
 (= $x355 false)))
 ))
 (let (($x113 (and $x46 $x13)))
 (let (($x165 (= $x113 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x53)))
 (let (($x340 (= ?x297 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x340 true)))
 (let (($x83 (= $x121 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x114 (bvsub ?x96 ?x87)))
 (let (($x324 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x114) (bvult ?x96 ?x114))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x289 (bvmul (_ bv4 64) ?x221)))
 (let ((?x147 ((_ extract 63 32) ?x289)))
 (let (($x202 (= (_ bv0 32) ?x147)))
 (let (($x227 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x7 (and (and (and true $x227) $x202) $x324)))
 (let (($x247 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x349 (and $x247 $x7)))
 (let (($x255 (= true $x349)))
 (let (($x217 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x258 (=> $x217 $x255)))
 (let (($x343 (= $x258 true)))
 (let (($x16 (= $x343 true)))
 (let (($x110 (= $x16 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x251 (= $x218 true)))
 (let (($x201 (= $x251 true)))
 (let (($x248 (= $x201 true)))
 (let (($x301 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (= $x301 true)))
 (let (($x300 (= $x211 true)))
 (let (($x67 (= $x300 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x120 (= $x246 true)))
 (let (($x284 (= $x120 true)))
 (let (($x294 (= $x284 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x235 (= $x245 true)))
 (let (($x298 (= $x235 true)))
 (let (($x203 (= $x298 true)))
 (let (($x190 (= $x217 true)))
 (let (($x194 (= $x190 true)))
 (let (($x199 (= $x194 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x127)))
 (let ((?x72 (bvand symbol.1 (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x72)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x85 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x212 (= input.memlabel-mem--symbol.1_end ?x85)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x155 (and $x66 $x212)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x160 $x155)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x140 $x177)))
 (let (($x141 (not $x210)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (and $x9 $x157)))
 (let (($x226 (and (not $x152) $x141)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x55 $x149)))
 (let (($x15 (not $x134)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x84 $x122)))
 (let (($x162 (and (not $x179) $x15)))
 (let (($x93 (and (and (and (and (and (and $x162 $x226) $x151) $x148) $x145) $x175) $x198)))
 (let (($x133 (and $x93 $x169)))
 (let (($x78 (= symbol.1 dst_symbol_addr.1)))
 (let (($x52 (and $x78 $x133)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x154 (or (bvugt input.memlabel-mem--symbol.1_begin ?x131) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x154) (or $x136 $x102)))))))
 (let (($x115 (and $x69 $x52)))
 (let (($x29 (= $x115 true)))
 (let (($x180 (= $x29 true)))
 (let (($x19 (= $x180 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x49 (= $x94 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x35)))
 (let (($x124 (= ?x77 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x45 (= ?x77 input.dst.llvm-%n)))
 (let (($x17 (= $x45 true)))
 (let (($x6 (= $x17 true)))
 (let (($x62 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x57 (and $x76 $x51)))
 (let (($x32 (and $x57 $x6)))
 (let (($x171 (and $x32 $x99)))
 (let (($x59 (and $x171 $x49)))
 (let (($x163 (and $x59 $x19)))
 (let (($x153 (and $x163 $x199)))
 (let (($x239 (and $x153 $x203)))
 (let (($x182 (and $x239 $x294)))
 (let (($x80 (and $x182 $x67)))
 (let (($x240 (and $x80 $x248)))
 (let (($x313 (and $x240 $x110)))
 (let (($x195 (and $x313 $x83)))
 (let (($x327 (and $x195 $x165)))
 (let (($x137 (and $x327 $x271)))
 (let (($x233 (and $x137 $x285)))
 (let (($x24 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x63 (and (not $x24) $x233)))
 (let (($x174 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x354 (and $x174 $x63)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x156 (and $x37 $x354)))
 (let (($x334 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x56 (and $x334 $x156)))
 (let (($x273 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x292 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x273)))))
 (let (($x357 (=> (and $x217 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x273)))))
 (let (($x337 (and $x357 $x56)))
 (let (($x232 (=> $x337 $x31)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (bvsge ?x229 (_ bv0 32))))
 (let (($x336 (= $x106 true)))
 (let (($x234 (= $x336 true)))
 (let (($x191 (forall ((input.ind-%var1467X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1467X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1467X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var1466X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1466X)))
 (= $x329 false)))
 ))
 (let (($x252 (and $x276 $x191)))
 (let (($x265 (= $x252 true)))
 (let (($x126 (forall ((input.ind-%var1461X (_ BitVec 32)) )(let ((?x315 (bvadd symbol.1 (bvmul input.ind-%var1461X (_ bv4 32)))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x315))))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv2 32))) ?x278)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv3 32))) ?x170)))
 (let ((?x107 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1461X)))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1461X)))
 (=> $x241 (= ?x107 ?x193)))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x346 (and (bvule (_ bv0 32) input.ind-%var1460X) (bvult input.ind-%var1460X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1460X)))
 (= $x241 $x346))))
 ))
 (let (($x261 (and $x108 $x126)))
 (let (($x339 (= $x261 true)))
 (let (($x260 (forall ((input.ind-%var1455X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1455X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1455X) (_ bv0 32)))))
 ))
 (let (($x113 (forall ((input.ind-%var1454X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1454X)))
 (= $x329 false)))
 ))
 (let (($x213 (and $x113 $x260)))
 (let (($x257 (= $x213 true)))
 (let ((?x297 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x340 (bvneg ?x297)))
 (let (($x121 (= ?x340 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x121 true)))
 (let (($x195 (= $x83 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x12 (bvsub ?x96 ?x87)))
 (let (($x243 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x12) (bvult ?x96 ?x12))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x289 (bvmul (_ bv4 64) ?x221)))
 (let ((?x147 ((_ extract 63 32) ?x289)))
 (let (($x202 (= (_ bv0 32) ?x147)))
 (let (($x281 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x349 (and (and (and true $x281) $x202) $x243)))
 (let (($x189 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x255 (and $x189 $x349)))
 (let (($x258 (= true $x255)))
 (let (($x181 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x343 (=> $x181 $x258)))
 (let (($x16 (= $x343 true)))
 (let (($x110 (= $x16 true)))
 (let (($x313 (= $x110 true)))
 (let (($x251 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x201 (= $x251 true)))
 (let (($x248 (= $x201 true)))
 (let (($x240 (= $x248 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x300 (= $x211 true)))
 (let (($x67 (= $x300 true)))
 (let (($x80 (= $x67 true)))
 (let (($x120 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x284 (= $x120 true)))
 (let (($x294 (= $x284 true)))
 (let (($x182 (= $x294 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x298 (= $x235 true)))
 (let (($x203 (= $x298 true)))
 (let (($x239 (= $x203 true)))
 (let (($x194 (= $x181 true)))
 (let (($x199 (= $x194 true)))
 (let (($x153 (= $x199 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x175)))
 (let ((?x200 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x200)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x160 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x66 (= input.memlabel-mem--symbol.1_end ?x160)))
 (let (($x186 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x85 (and $x186 $x66)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x148 $x85)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x140 $x177)))
 (let (($x141 (not $x210)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x128 (and $x157 $x152)))
 (let (($x95 (and (not $x128) $x141)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x55 $x149)))
 (let (($x15 (not $x134)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x122 $x179)))
 (let (($x9 (and (not $x129) $x15)))
 (let (($x133 (and (and (and (and (and (and $x9 $x95) $x151) $x146) $x212) $x145) $x47)))
 (let (($x52 (and $x133 $x119)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x68 $x52)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x173 $x167)))))))
 (let (($x29 (and $x84 $x115)))
 (let (($x180 (= $x29 true)))
 (let (($x19 (= $x180 true)))
 (let (($x163 (= $x19 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x49 (= $x94 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x35)))
 (let (($x124 (= ?x77 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x45 (= ?x77 input.dst.llvm-%n)))
 (let (($x17 (= $x45 true)))
 (let (($x6 (= $x17 true)))
 (let (($x62 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x57 (and $x76 $x51)))
 (let (($x32 (and $x57 $x6)))
 (let (($x171 (and $x32 $x99)))
 (let (($x59 (and $x171 $x49)))
 (let (($x190 (and $x59 $x163)))
 (let (($x245 (and $x190 $x153)))
 (let (($x246 (and $x245 $x239)))
 (let (($x301 (and $x246 $x182)))
 (let (($x218 (and $x301 $x80)))
 (let (($x176 (and $x218 $x240)))
 (let (($x53 (and $x176 $x313)))
 (let (($x350 (and $x53 $x195)))
 (let (($x40 (and $x350 $x257)))
 (let (($x11 (and $x40 $x339)))
 (let (($x275 (and $x11 $x265)))
 (let (($x268 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and (not $x268) $x275)))
 (let (($x196 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x196 $x166)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x254 (and $x103 $x159)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x61 $x254)))
 (let (($x216 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x334 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x216)))))
 (let (($x215 (=> (and $x181 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x216)))))
 (let (($x27 (and $x215 $x132)))
 (let (($x242 (=> $x27 $x234)))
 (not $x242)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (bvsge ?x229 (_ bv0 32))))
 (let (($x336 (= $x106 true)))
 (let (($x234 (= $x336 true)))
 (let (($x191 (forall ((input.ind-%var1467X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1467X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1467X) (_ bv0 32)))))
 ))
 (let (($x276 (forall ((input.ind-%var1466X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1466X)))
 (= $x329 false)))
 ))
 (let (($x252 (and $x276 $x191)))
 (let (($x265 (= $x252 true)))
 (let (($x126 (forall ((input.ind-%var1461X (_ BitVec 32)) )(let ((?x315 (bvadd symbol.1 (bvmul input.ind-%var1461X (_ bv4 32)))))
 (let ((?x278 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x315))))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv2 32))) ?x278)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x315 (_ bv3 32))) ?x170)))
 (let ((?x107 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1461X)))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1461X)))
 (=> $x241 (= ?x107 ?x193)))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x346 (and (bvule (_ bv0 32) input.ind-%var1460X) (bvult input.ind-%var1460X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1460X)))
 (= $x241 $x346))))
 ))
 (let (($x261 (and $x108 $x126)))
 (let (($x339 (= $x261 true)))
 (let (($x260 (forall ((input.ind-%var1455X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1455X)))
 (=> $x329 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1455X) (_ bv0 32)))))
 ))
 (let (($x113 (forall ((input.ind-%var1454X (_ BitVec 32)) )(let (($x329 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1454X)))
 (= $x329 false)))
 ))
 (let (($x213 (and $x113 $x260)))
 (let (($x257 (= $x213 true)))
 (let ((?x297 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x340 (bvneg ?x297)))
 (let (($x121 (= ?x340 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x121 true)))
 (let (($x195 (= $x83 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x12 (bvsub ?x96 ?x87)))
 (let (($x243 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x12) (bvult ?x96 ?x12))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x289 (bvmul (_ bv4 64) ?x221)))
 (let ((?x147 ((_ extract 63 32) ?x289)))
 (let (($x202 (= (_ bv0 32) ?x147)))
 (let (($x281 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x349 (and (and (and true $x281) $x202) $x243)))
 (let (($x189 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x255 (and $x189 $x349)))
 (let (($x258 (= true $x255)))
 (let (($x181 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x343 (=> $x181 $x258)))
 (let (($x16 (= $x343 true)))
 (let (($x110 (= $x16 true)))
 (let (($x313 (= $x110 true)))
 (let (($x251 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x201 (= $x251 true)))
 (let (($x248 (= $x201 true)))
 (let (($x240 (= $x248 true)))
 (let (($x211 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x300 (= $x211 true)))
 (let (($x67 (= $x300 true)))
 (let (($x80 (= $x67 true)))
 (let (($x120 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x284 (= $x120 true)))
 (let (($x294 (= $x284 true)))
 (let (($x182 (= $x294 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x298 (= $x235 true)))
 (let (($x203 (= $x298 true)))
 (let (($x239 (= $x203 true)))
 (let (($x194 (= $x181 true)))
 (let (($x199 (= $x194 true)))
 (let (($x153 (= $x199 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x175)))
 (let ((?x200 (bvand symbol.1 (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x200)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x160 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x66 (= input.memlabel-mem--symbol.1_end ?x160)))
 (let (($x186 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x85 (and $x186 $x66)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x148 $x85)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x140 $x177)))
 (let (($x141 (not $x210)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x128 (and $x157 $x152)))
 (let (($x95 (and (not $x128) $x141)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x55 $x149)))
 (let (($x15 (not $x134)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x122 $x179)))
 (let (($x9 (and (not $x129) $x15)))
 (let (($x133 (and (and (and (and (and (and $x9 $x95) $x151) $x146) $x212) $x145) $x47)))
 (let (($x52 (and $x133 $x119)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x68 $x52)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x23 (or (bvugt input.memlabel-mem--symbol.1_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x23) (or $x173 $x167)))))))
 (let (($x29 (and $x84 $x115)))
 (let (($x180 (= $x29 true)))
 (let (($x19 (= $x180 true)))
 (let (($x163 (= $x19 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x44 true)))
 (let (($x94 (= $x86 true)))
 (let (($x49 (= $x94 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x35)))
 (let (($x124 (= ?x77 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x45 (= ?x77 input.dst.llvm-%n)))
 (let (($x17 (= $x45 true)))
 (let (($x6 (= $x17 true)))
 (let (($x62 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x57 (and $x76 $x51)))
 (let (($x32 (and $x57 $x6)))
 (let (($x171 (and $x32 $x99)))
 (let (($x59 (and $x171 $x49)))
 (let (($x190 (and $x59 $x163)))
 (let (($x245 (and $x190 $x153)))
 (let (($x246 (and $x245 $x239)))
 (let (($x301 (and $x246 $x182)))
 (let (($x218 (and $x301 $x80)))
 (let (($x176 (and $x218 $x240)))
 (let (($x53 (and $x176 $x313)))
 (let (($x350 (and $x53 $x195)))
 (let (($x40 (and $x350 $x257)))
 (let (($x11 (and $x40 $x339)))
 (let (($x275 (and $x11 $x265)))
 (let (($x268 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x166 (and (not $x268) $x275)))
 (let (($x196 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x196 $x166)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x254 (and $x103 $x159)))
 (let (($x61 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x61 $x254)))
 (let (($x216 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x334 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x216)))))
 (let (($x215 (=> (and $x181 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x216)))))
 (let (($x27 (and $x215 $x132)))
 (let (($x242 (=> $x27 $x234)))
 (not $x242)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (bvule ?x271 input.dst.llvm-%n)))
 (let (($x348 (= $x100 true)))
 (let (($x135 (= $x348 true)))
 (let (($x123 (forall ((input.ind-%var1485X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1485X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1485X) (_ bv0 32)))))
 ))
 (let (($x354 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1484X)))
 (= $x65 false)))
 ))
 (let (($x92 (and $x354 $x123)))
 (let (($x347 (= $x92 true)))
 (let (($x63 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let ((?x105 (bvadd symbol.1 (bvmul input.ind-%var1479X (_ bv4 32)))))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x105))))
 (let ((?x74 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x105 (_ bv2 32))) ?x307)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x105 (_ bv3 32))) ?x74)))
 (let ((?x276 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1479X)))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1479X)))
 (=> $x306 (= ?x276 ?x355)))))))))
 ))
 (let (($x126 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x295 (and (bvule (_ bv0 32) input.ind-%var1478X) (bvult input.ind-%var1478X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1478X)))
 (= $x306 $x295))))
 ))
 (let (($x232 (and $x126 $x63)))
 (let (($x231 (= $x232 true)))
 (let (($x5 (forall ((input.ind-%var1473X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1473X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1473X) (_ bv0 32)))))
 ))
 (let (($x213 (forall ((input.ind-%var1472X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1472X)))
 (= $x65 false)))
 ))
 (let (($x109 (and $x213 $x5)))
 (let (($x315 (= $x109 true)))
 (let ((?x340 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x340)))
 (let (($x83 (= ?x121 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x83 true)))
 (let (($x350 (= $x195 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x35)))
 (let (($x110 (= ?x77 input.dst.llvm-%n)))
 (let (($x313 (= $x110 true)))
 (let (($x53 (= $x313 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x221 (bvsub ?x96 ?x87)))
 (let (($x7 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x221) (bvult ?x96 ?x221))))
 (let ((?x227 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x281 (bvmul (_ bv4 64) ?x227)))
 (let ((?x324 ((_ extract 63 32) ?x281)))
 (let (($x185 (= (_ bv0 32) ?x324)))
 (let (($x144 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x114 (and (and (and true $x144) $x185) $x7)))
 (let (($x176 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x311 (and $x176 $x114)))
 (let (($x243 (= true $x311)))
 (let (($x285 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x349 (=> $x285 $x243)))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (= $x67 true)))
 (let (($x218 (= $x80 true)))
 (let (($x251 (= $x218 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (= $x294 true)))
 (let (($x301 (= $x182 true)))
 (let (($x211 (= $x301 true)))
 (let (($x203 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x239 (= $x203 true)))
 (let (($x246 (= $x239 true)))
 (let (($x120 (= $x246 true)))
 (let (($x199 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x153 (= $x199 true)))
 (let (($x245 (= $x153 true)))
 (let (($x235 (= $x245 true)))
 (let (($x19 (= $x285 true)))
 (let (($x163 (= $x19 true)))
 (let (($x190 (= $x163 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x85)))
 (let ((?x160 (bvand symbol.1 (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x160)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x198 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x25 (= input.memlabel-mem--symbol.1_end ?x198)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x146 (and $x151 $x25)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x72 $x146)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x128 (and $x157 $x152)))
 (let (($x226 (not $x128)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x134 $x15)))
 (let (($x177 (and (not $x9) $x226)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x122 $x179)))
 (let (($x162 (not $x129)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x84 $x90)))
 (let (($x149 (and (not $x68) $x162)))
 (let (($x47 (and (and (and (and (and (and $x149 $x177) $x210) $x95) $x93) $x186) $x66)))
 (let (($x133 (and $x47 $x212)))
 (let (($x49 (= symbol.1 dst_symbol_addr.1)))
 (let (($x175 (and $x49 $x133)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x154 (or (bvugt input.memlabel-mem--symbol.1_begin ?x178) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x154) (or $x138 $x173)))))))
 (let (($x119 (and $x14 $x175)))
 (let (($x52 (= $x119 true)))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x124 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x171 (= $x99 true)))
 (let (($x45 (= ?x77 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x45 true)))
 (let (($x6 (= $x17 true)))
 (let (($x62 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x57 (and $x76 $x51)))
 (let (($x32 (and $x57 $x6)))
 (let (($x44 (and $x32 $x171)))
 (let (($x180 (and $x44 $x29)))
 (let (($x194 (and $x180 $x190)))
 (let (($x298 (and $x194 $x235)))
 (let (($x284 (and $x298 $x120)))
 (let (($x300 (and $x284 $x211)))
 (let (($x201 (and $x300 $x251)))
 (let (($x16 (and $x201 $x343)))
 (let (($x297 (and $x16 $x53)))
 (let (($x46 (and $x297 $x350)))
 (let (($x335 (and $x46 $x315)))
 (let (($x142 (and $x335 $x231)))
 (let (($x223 (and $x142 $x347)))
 (let (($x312 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x310 (and (not $x312) $x223)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x24 $x310)))
 (let (($x342 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x303 (and $x342 $x327)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x256 (and $x71 $x303)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x61 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x314 (=> (and $x285 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x228 (and $x314 $x256)))
 (let (($x230 (=> $x228 $x135)))
 (not $x230)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (bvule ?x271 input.dst.llvm-%n)))
 (let (($x348 (= $x100 true)))
 (let (($x135 (= $x348 true)))
 (let (($x123 (forall ((input.ind-%var1485X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1485X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1485X) (_ bv0 32)))))
 ))
 (let (($x354 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1484X)))
 (= $x65 false)))
 ))
 (let (($x92 (and $x354 $x123)))
 (let (($x347 (= $x92 true)))
 (let (($x63 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let ((?x105 (bvadd symbol.1 (bvmul input.ind-%var1479X (_ bv4 32)))))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x105))))
 (let ((?x74 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x105 (_ bv2 32))) ?x307)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x105 (_ bv3 32))) ?x74)))
 (let ((?x276 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1479X)))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1479X)))
 (=> $x306 (= ?x276 ?x355)))))))))
 ))
 (let (($x126 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x295 (and (bvule (_ bv0 32) input.ind-%var1478X) (bvult input.ind-%var1478X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x306 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1478X)))
 (= $x306 $x295))))
 ))
 (let (($x232 (and $x126 $x63)))
 (let (($x231 (= $x232 true)))
 (let (($x5 (forall ((input.ind-%var1473X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1473X)))
 (=> $x65 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1473X) (_ bv0 32)))))
 ))
 (let (($x213 (forall ((input.ind-%var1472X (_ BitVec 32)) )(let (($x65 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1472X)))
 (= $x65 false)))
 ))
 (let (($x109 (and $x213 $x5)))
 (let (($x315 (= $x109 true)))
 (let ((?x340 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x121 (bvneg ?x340)))
 (let (($x83 (= ?x121 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x83 true)))
 (let (($x350 (= $x195 true)))
 (let ((?x35 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x35)))
 (let (($x110 (= ?x77 input.dst.llvm-%n)))
 (let (($x313 (= $x110 true)))
 (let (($x53 (= $x313 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x221 (bvsub ?x96 ?x87)))
 (let (($x7 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x221) (bvult ?x96 ?x221))))
 (let ((?x227 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x281 (bvmul (_ bv4 64) ?x227)))
 (let ((?x324 ((_ extract 63 32) ?x281)))
 (let (($x185 (= (_ bv0 32) ?x324)))
 (let (($x144 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x114 (and (and (and true $x144) $x185) $x7)))
 (let (($x176 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x311 (and $x176 $x114)))
 (let (($x243 (= true $x311)))
 (let (($x285 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x349 (=> $x285 $x243)))
 (let (($x255 (= $x349 true)))
 (let (($x258 (= $x255 true)))
 (let (($x343 (= $x258 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x80 (= $x67 true)))
 (let (($x218 (= $x80 true)))
 (let (($x251 (= $x218 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (= $x294 true)))
 (let (($x301 (= $x182 true)))
 (let (($x211 (= $x301 true)))
 (let (($x203 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x239 (= $x203 true)))
 (let (($x246 (= $x239 true)))
 (let (($x120 (= $x246 true)))
 (let (($x199 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x153 (= $x199 true)))
 (let (($x245 (= $x153 true)))
 (let (($x235 (= $x245 true)))
 (let (($x19 (= $x285 true)))
 (let (($x163 (= $x19 true)))
 (let (($x190 (= $x163 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x85)))
 (let ((?x160 (bvand symbol.1 (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x160)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x198 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x25 (= input.memlabel-mem--symbol.1_end ?x198)))
 (let (($x151 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x146 (and $x151 $x25)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x72 $x146)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x128 (and $x157 $x152)))
 (let (($x226 (not $x128)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x134 $x15)))
 (let (($x177 (and (not $x9) $x226)))
 (let (($x179 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x122 $x179)))
 (let (($x162 (not $x129)))
 (let (($x90 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x84 $x90)))
 (let (($x149 (and (not $x68) $x162)))
 (let (($x47 (and (and (and (and (and (and $x149 $x177) $x210) $x95) $x93) $x186) $x66)))
 (let (($x133 (and $x47 $x212)))
 (let (($x49 (= symbol.1 dst_symbol_addr.1)))
 (let (($x175 (and $x49 $x133)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x154 (or (bvugt input.memlabel-mem--symbol.1_begin ?x178) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x154) (or $x138 $x173)))))))
 (let (($x119 (and $x14 $x175)))
 (let (($x52 (= $x119 true)))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x124 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x70 (= $x124 true)))
 (let (($x99 (= $x70 true)))
 (let (($x171 (= $x99 true)))
 (let (($x45 (= ?x77 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x17 (= $x45 true)))
 (let (($x6 (= $x17 true)))
 (let (($x62 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x36 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x64 (= $x36 true)))
 (let (($x88 (= $x64 true)))
 (let (($x76 (= $x88 true)))
 (let (($x57 (and $x76 $x51)))
 (let (($x32 (and $x57 $x6)))
 (let (($x44 (and $x32 $x171)))
 (let (($x180 (and $x44 $x29)))
 (let (($x194 (and $x180 $x190)))
 (let (($x298 (and $x194 $x235)))
 (let (($x284 (and $x298 $x120)))
 (let (($x300 (and $x284 $x211)))
 (let (($x201 (and $x300 $x251)))
 (let (($x16 (and $x201 $x343)))
 (let (($x297 (and $x16 $x53)))
 (let (($x46 (and $x297 $x350)))
 (let (($x335 (and $x46 $x315)))
 (let (($x142 (and $x335 $x231)))
 (let (($x223 (and $x142 $x347)))
 (let (($x312 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x310 (and (not $x312) $x223)))
 (let (($x24 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x24 $x310)))
 (let (($x342 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x303 (and $x342 $x327)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x256 (and $x71 $x303)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x61 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x314 (=> (and $x285 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x228 (and $x314 $x256)))
 (let (($x230 (=> $x228 $x135)))
 (not $x230)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x21 (forall ((input.ind-%var1511X (_ BitVec 32)) )(let ((?x191 (bvadd symbol.1 (bvmul input.ind-%var1511X (_ bv4 32)))))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x357 (bvadd ?x96 (_ bv3 32))))
 (let ((?x220 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x96 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x204 (store ?x220 (bvadd ?x96 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x356 (store ?x204 (bvadd ?x96 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x338 (store ?x356 ?x357 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x279 (concat (select ?x338 (bvadd ?x191 (_ bv2 32))) (concat (select ?x338 (bvadd ?x191 (_ bv1 32))) (select ?x338 ?x191)))))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1511X)))
 (let (($x116 (= input.ind-%var1511X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x274 (= (ite $x116 input.spec-%var-i-0.L3%6%bbentry ?x354) (concat (select ?x338 (bvadd ?x191 (_ bv3 32))) ?x279))))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1511X)))
 (let (($x277 (or $x43 $x116)))
 (=> $x277 $x274))))))))))))))))
 ))
 (let (($x28 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let (($x355 (bvule (_ bv0 32) input.ind-%var1510X)))
 (let (($x164 (and $x355 (bvult input.ind-%var1510X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x116 (= input.ind-%var1510X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1510X)))
 (let (($x277 (or $x43 $x116)))
 (= $x277 $x164)))))))
 ))
 (let (($x326 (and $x28 $x21)))
 (let (($x339 (= true true)))
 (let (($x341 (and $x339 $x326)))
 (let (($x192 (= $x341 true)))
 (let (($x346 (forall ((input.ind-%var1503X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1503X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1503X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var1502X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1502X)))
 (= $x263 false)))
 ))
 (let (($x325 (and $x159 $x346)))
 (let (($x8 (= $x325 true)))
 (let (($x166 (forall ((input.ind-%var1497X (_ BitVec 32)) )(let ((?x191 (bvadd symbol.1 (bvmul input.ind-%var1497X (_ bv4 32)))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x191))))
 (let ((?x10 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv2 32))) ?x241)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv3 32))) ?x10)))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1497X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1497X)))
 (=> $x43 (= ?x354 ?x329)))))))))
 ))
 (let (($x63 (forall ((input.ind-%var1496X (_ BitVec 32)) )(let (($x355 (bvule (_ bv0 32) input.ind-%var1496X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1496X)))
 (= $x43 (and $x355 (bvult input.ind-%var1496X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x242 (and $x63 $x166)))
 (let (($x237 (= $x242 true)))
 (let (($x252 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1491X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1491X) (_ bv0 32)))))
 ))
 (let (($x109 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1490X)))
 (= $x263 false)))
 ))
 (let (($x286 (and $x109 $x252)))
 (let (($x105 (= $x286 true)))
 (let ((?x121 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x121)))
 (let (($x195 (= ?x83 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x350 (= $x195 true)))
 (let (($x46 (= $x350 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x202)))
 (let ((?x221 (bvand symbol.1 (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x221)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x227 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x281 (= input.memlabel-mem--symbol.1_end ?x227)))
 (let (($x183 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x324 (and $x183 $x281)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x111 $x324)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x240 (and $x201 $x248)))
 (let (($x176 (not $x240)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x251 (and $x80 $x218)))
 (let (($x269 (and (not $x251) $x176)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x294 $x182)))
 (let (($x211 (not $x301)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x246 $x120)))
 (let (($x67 (and (not $x284) $x211)))
 (let (($x258 (and (and (and (and (and (and $x67 $x269) $x189) $x144) $x185) $x289) $x147)))
 (let (($x343 (and $x258 $x7)))
 (let (($x133 (= symbol.1 dst_symbol_addr.1)))
 (let (($x16 (and $x133 $x343)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x180 (or (bvugt input.memlabel-mem--symbol.1_begin ?x52) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x239 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x180) (or $x194 $x199)))))))
 (let (($x110 (and $x239 $x16)))
 (let (($x313 (= $x110 true)))
 (let (($x53 (= $x313 true)))
 (let (($x297 (= $x53 true)))
 (let (($x186 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x200 (= $x186 true)))
 (let (($x160 (= $x200 true)))
 (let (($x66 (= $x160 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x177 (bvsub ?x96 ?x87)))
 (let (($x141 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x177) (bvult ?x96 ?x177))))
 (let ((?x157 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x152 (bvmul (_ bv4 64) ?x157)))
 (let ((?x128 ((_ extract 63 32) ?x152)))
 (let (($x226 (= (_ bv0 32) ?x128)))
 (let (($x9 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x72 (and (and (and true $x9) $x226) $x141)))
 (let (($x129 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x151 (and $x129 $x72)))
 (let (($x198 (= true $x151)))
 (let (($x265 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x265 $x198)))
 (let (($x146 (= $x25 true)))
 (let (($x93 (= $x146 true)))
 (let (($x169 (= $x93 true)))
 (let (($x49 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (= $x49 true)))
 (let (($x90 (= $x84 true)))
 (let (($x68 (= $x90 true)))
 (let (($x167 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x167 true)))
 (let (($x91 (= $x158 true)))
 (let (($x14 (= $x91 true)))
 (let (($x23 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x138 (= $x23 true)))
 (let (($x136 (= $x138 true)))
 (let (($x173 (= $x136 true)))
 (let (($x178 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x78 (= $x178 true)))
 (let (($x22 (= $x78 true)))
 (let (($x154 (= $x22 true)))
 (let (($x171 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x44 (= $x171 true)))
 (let (($x59 (= $x44 true)))
 (let (($x131 (= $x59 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x32 (= $x6 true)))
 (let (($x124 (= $x32 true)))
 (let (($x70 (= $x124 true)))
 (let (($x34 (= $x265 true)))
 (let (($x35 (= $x34 true)))
 (let (($x77 (= $x35 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x36)))
 (let (($x89 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x88 (= ?x64 input.dst.llvm-%n)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x57 (and $x62 $x51)))
 (let (($x45 (and $x57 $x77)))
 (let (($x99 (and $x45 $x70)))
 (let (($x69 (and $x99 $x131)))
 (let (($x39 (and $x69 $x154)))
 (let (($x102 (and $x39 $x173)))
 (let (($x94 (and $x102 $x14)))
 (let (($x55 (and $x94 $x68)))
 (let (($x148 (and $x55 $x169)))
 (let (($x47 (and $x148 $x66)))
 (let (($x340 (and $x47 $x297)))
 (let (($x113 (and $x340 $x46)))
 (let (($x81 (and $x113 $x105)))
 (let (($x106 (and $x81 $x237)))
 (let (($x296 (and $x106 $x8)))
 (let (($x33 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (and (not $x33) $x296)))
 (let (($x268 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (and $x268 $x278)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x130 (and $x174 $x40)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x250 (and $x37 $x130)))
 (let (($x215 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x71 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x215)))))
 (let (($x331 (=> (and $x265 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x215)))))
 (let (($x56 (and $x331 $x250)))
 (let (($x112 (=> $x56 $x192)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x21 (forall ((input.ind-%var1511X (_ BitVec 32)) )(let ((?x191 (bvadd symbol.1 (bvmul input.ind-%var1511X (_ bv4 32)))))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x357 (bvadd ?x96 (_ bv3 32))))
 (let ((?x220 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x96 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x204 (store ?x220 (bvadd ?x96 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x356 (store ?x204 (bvadd ?x96 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x338 (store ?x356 ?x357 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x279 (concat (select ?x338 (bvadd ?x191 (_ bv2 32))) (concat (select ?x338 (bvadd ?x191 (_ bv1 32))) (select ?x338 ?x191)))))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1511X)))
 (let (($x116 (= input.ind-%var1511X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x274 (= (ite $x116 input.spec-%var-i-0.L3%6%bbentry ?x354) (concat (select ?x338 (bvadd ?x191 (_ bv3 32))) ?x279))))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1511X)))
 (let (($x277 (or $x43 $x116)))
 (=> $x277 $x274))))))))))))))))
 ))
 (let (($x28 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let (($x355 (bvule (_ bv0 32) input.ind-%var1510X)))
 (let (($x164 (and $x355 (bvult input.ind-%var1510X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x116 (= input.ind-%var1510X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1510X)))
 (let (($x277 (or $x43 $x116)))
 (= $x277 $x164)))))))
 ))
 (let (($x326 (and $x28 $x21)))
 (let (($x339 (= true true)))
 (let (($x341 (and $x339 $x326)))
 (let (($x192 (= $x341 true)))
 (let (($x346 (forall ((input.ind-%var1503X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1503X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1503X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var1502X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1502X)))
 (= $x263 false)))
 ))
 (let (($x325 (and $x159 $x346)))
 (let (($x8 (= $x325 true)))
 (let (($x166 (forall ((input.ind-%var1497X (_ BitVec 32)) )(let ((?x191 (bvadd symbol.1 (bvmul input.ind-%var1497X (_ bv4 32)))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x191))))
 (let ((?x10 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv2 32))) ?x241)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x191 (_ bv3 32))) ?x10)))
 (let ((?x354 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1497X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1497X)))
 (=> $x43 (= ?x354 ?x329)))))))))
 ))
 (let (($x63 (forall ((input.ind-%var1496X (_ BitVec 32)) )(let (($x355 (bvule (_ bv0 32) input.ind-%var1496X)))
 (let (($x43 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1496X)))
 (= $x43 (and $x355 (bvult input.ind-%var1496X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x242 (and $x63 $x166)))
 (let (($x237 (= $x242 true)))
 (let (($x252 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1491X)))
 (=> $x263 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1491X) (_ bv0 32)))))
 ))
 (let (($x109 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x263 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1490X)))
 (= $x263 false)))
 ))
 (let (($x286 (and $x109 $x252)))
 (let (($x105 (= $x286 true)))
 (let ((?x121 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x121)))
 (let (($x195 (= ?x83 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x350 (= $x195 true)))
 (let (($x46 (= $x350 true)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x202)))
 (let ((?x221 (bvand symbol.1 (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x221)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x227 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x281 (= input.memlabel-mem--symbol.1_end ?x227)))
 (let (($x183 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x324 (and $x183 $x281)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x111 $x324)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x240 (and $x201 $x248)))
 (let (($x176 (not $x240)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x251 (and $x80 $x218)))
 (let (($x269 (and (not $x251) $x176)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x294 $x182)))
 (let (($x211 (not $x301)))
 (let (($x120 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x246 $x120)))
 (let (($x67 (and (not $x284) $x211)))
 (let (($x258 (and (and (and (and (and (and $x67 $x269) $x189) $x144) $x185) $x289) $x147)))
 (let (($x343 (and $x258 $x7)))
 (let (($x133 (= symbol.1 dst_symbol_addr.1)))
 (let (($x16 (and $x133 $x343)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x180 (or (bvugt input.memlabel-mem--symbol.1_begin ?x52) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x239 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x180) (or $x194 $x199)))))))
 (let (($x110 (and $x239 $x16)))
 (let (($x313 (= $x110 true)))
 (let (($x53 (= $x313 true)))
 (let (($x297 (= $x53 true)))
 (let (($x186 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x200 (= $x186 true)))
 (let (($x160 (= $x200 true)))
 (let (($x66 (= $x160 true)))
 (let ((?x87 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x87)))
 (let ((?x177 (bvsub ?x96 ?x87)))
 (let (($x141 (ite (bvsge ?x87 (_ bv0 32)) (bvuge ?x96 ?x177) (bvult ?x96 ?x177))))
 (let ((?x157 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x152 (bvmul (_ bv4 64) ?x157)))
 (let ((?x128 ((_ extract 63 32) ?x152)))
 (let (($x226 (= (_ bv0 32) ?x128)))
 (let (($x9 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x72 (and (and (and true $x9) $x226) $x141)))
 (let (($x129 (= (bvand ?x96 (_ bv4294967292 32)) ?x96)))
 (let (($x151 (and $x129 $x72)))
 (let (($x198 (= true $x151)))
 (let (($x265 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x265 $x198)))
 (let (($x146 (= $x25 true)))
 (let (($x93 (= $x146 true)))
 (let (($x169 (= $x93 true)))
 (let (($x49 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (= $x49 true)))
 (let (($x90 (= $x84 true)))
 (let (($x68 (= $x90 true)))
 (let (($x167 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x167 true)))
 (let (($x91 (= $x158 true)))
 (let (($x14 (= $x91 true)))
 (let (($x23 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x138 (= $x23 true)))
 (let (($x136 (= $x138 true)))
 (let (($x173 (= $x136 true)))
 (let (($x178 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x78 (= $x178 true)))
 (let (($x22 (= $x78 true)))
 (let (($x154 (= $x22 true)))
 (let (($x171 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x44 (= $x171 true)))
 (let (($x59 (= $x44 true)))
 (let (($x131 (= $x59 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x32 (= $x6 true)))
 (let (($x124 (= $x32 true)))
 (let (($x70 (= $x124 true)))
 (let (($x34 (= $x265 true)))
 (let (($x35 (= $x34 true)))
 (let (($x77 (= $x35 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x64 (bvneg ?x36)))
 (let (($x89 (= ?x64 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x88 (= ?x64 input.dst.llvm-%n)))
 (let (($x76 (= $x88 true)))
 (let (($x62 (= $x76 true)))
 (let (($x57 (and $x62 $x51)))
 (let (($x45 (and $x57 $x77)))
 (let (($x99 (and $x45 $x70)))
 (let (($x69 (and $x99 $x131)))
 (let (($x39 (and $x69 $x154)))
 (let (($x102 (and $x39 $x173)))
 (let (($x94 (and $x102 $x14)))
 (let (($x55 (and $x94 $x68)))
 (let (($x148 (and $x55 $x169)))
 (let (($x47 (and $x148 $x66)))
 (let (($x340 (and $x47 $x297)))
 (let (($x113 (and $x340 $x46)))
 (let (($x81 (and $x113 $x105)))
 (let (($x106 (and $x81 $x237)))
 (let (($x296 (and $x106 $x8)))
 (let (($x33 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x278 (and (not $x33) $x296)))
 (let (($x268 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x40 (and $x268 $x278)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x130 (and $x174 $x40)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x250 (and $x37 $x130)))
 (let (($x215 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x71 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x215)))))
 (let (($x331 (=> (and $x265 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x215)))))
 (let (($x56 (and $x331 $x250)))
 (let (($x112 (=> $x56 $x192)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x265 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (not $x265)))
 (let (($x123 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (not $x123)))
 (let (($x27 (or $x108 $x170)))
 (let (($x315 (= $x27 true)))
 (let (($x306 (= $x315 true)))
 (let (($x192 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1529X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1529X) (_ bv0 32)))))
 ))
 (let (($x219 (forall ((input.ind-%var1528X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1528X)))
 (= $x213 false)))
 ))
 (let (($x112 (and $x219 $x192)))
 (let (($x249 (= $x112 true)))
 (let (($x338 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let ((?x359 (bvadd symbol.1 (bvmul input.ind-%var1523X (_ bv4 32)))))
 (let ((?x48 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x359))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv2 32))) ?x48)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv3 32))) ?x287)))
 (let ((?x166 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1523X)))
 (let (($x191 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1523X)))
 (=> $x191 (= ?x166 ?x321)))))))))
 ))
 (let (($x10 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x205 (and (bvule (_ bv0 32) input.ind-%var1522X) (bvult input.ind-%var1522X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x191 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1522X)))
 (= $x191 $x205))))
 ))
 (let (($x360 (and $x10 $x338)))
 (let (($x244 (= $x360 true)))
 (let (($x104 (forall ((input.ind-%var1517X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1517X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1517X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1516X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1516X)))
 (= $x213 false)))
 ))
 (let (($x233 (and $x193 $x104)))
 (let (($x63 (= $x233 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x53)))
 (let (($x340 (= ?x297 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x340 true)))
 (let (($x83 (= $x121 true)))
 (let ((?x255 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x221 (bvneg ?x255)))
 (let (($x343 (= ?x221 input.dst.llvm-%n)))
 (let (($x16 (= $x343 true)))
 (let (($x110 (= $x16 true)))
 (let (($x147 (= ?x221 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (= $x147 true)))
 (let (($x202 (= $x258 true)))
 (let (($x281 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x324 (= $x281 true)))
 (let (($x185 (= $x324 true)))
 (let (($x349 (= $x185 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x247 (bvsub ?x332 ?x96)))
 (let (($x176 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x247) (bvult ?x332 ?x247))))
 (let ((?x67 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x80 (bvmul (_ bv4 64) ?x67)))
 (let ((?x218 ((_ extract 63 32) ?x80)))
 (let (($x251 (= (_ bv0 32) ?x218)))
 (let (($x301 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x189 (and (and (and true $x301) $x251) $x176)))
 (let (($x120 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x311 (and $x120 $x189)))
 (let (($x288 (= true $x311)))
 (let (($x144 (=> $x265 $x288)))
 (let (($x243 (= $x144 true)))
 (let (($x111 (= $x243 true)))
 (let (($x183 (= $x111 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x235 (= $x245 true)))
 (let (($x298 (= $x235 true)))
 (let (($x239 (= $x298 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (= $x163 true)))
 (let (($x190 (= $x194 true)))
 (let (($x199 (= $x190 true)))
 (let (($x52 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x180 (= $x29 true)))
 (let (($x66 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x47 (= $x66 true)))
 (let (($x175 (= $x47 true)))
 (let (($x119 (= $x175 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x148 (= $x169 true)))
 (let (($x186 (= $x148 true)))
 (let (($x200 (= $x186 true)))
 (let (($x72 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x151 (= $x72 true)))
 (let (($x198 (= $x151 true)))
 (let (($x25 (= $x198 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x15)))
 (let ((?x162 (bvand symbol.1 (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x162)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x68 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x55 (= input.memlabel-mem--symbol.1_end ?x68)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x122 (and $x84 $x55)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x49 $x122)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x138 $x136)))
 (let (($x102 (not $x173)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (and $x154 $x39)))
 (let (($x158 (and (not $x23) $x102)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x59 $x131)))
 (let (($x178 (not $x69)))
 (let (($x171 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x99 $x171)))
 (let (($x22 (and (not $x44) $x178)))
 (let (($x226 (and (and (and (and (and (and $x22 $x158) $x91) $x94) $x179) $x149) $x134)))
 (let (($x145 (and $x226 $x9)))
 (let (($x36 (= symbol.1 dst_symbol_addr.1)))
 (let (($x127 (and $x36 $x145)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x79 (or (bvugt input.memlabel-mem--symbol.1_begin ?x76) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x79) (or $x35 $x77)))))))
 (let (($x177 (and $x70 $x127)))
 (let (($x210 (= $x177 true)))
 (let (($x155 (= $x210 true)))
 (let (($x141 (= $x155 true)))
 (let (($x146 (and $x141 $x25)))
 (let (($x160 (and $x146 $x200)))
 (let (($x203 (and $x160 $x119)))
 (let (($x19 (and $x203 $x180)))
 (let (($x153 (and $x19 $x199)))
 (let (($x212 (and $x153 $x239)))
 (let (($x227 (and $x212 $x183)))
 (let (($x12 (and $x227 $x349)))
 (let (($x7 (and $x12 $x202)))
 (let (($x313 (and $x7 $x110)))
 (let (($x195 (and $x313 $x83)))
 (let (($x354 (and $x195 $x63)))
 (let (($x352 (and $x354 $x244)))
 (let (($x347 (and $x352 $x249)))
 (let (($x33 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x139 (and $x33 $x347)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x24 $x139)))
 (let (($x342 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x85 (and $x342 $x75)))
 (let (($x71 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x103 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x71)))))
 (let (($x323 (=> (and $x265 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x71)))))
 (let (($x137 (and $x323 $x85)))
 (let (($x232 (=> $x137 $x306)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x265 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (not $x265)))
 (let (($x123 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (not $x123)))
 (let (($x27 (or $x108 $x170)))
 (let (($x315 (= $x27 true)))
 (let (($x306 (= $x315 true)))
 (let (($x192 (forall ((input.ind-%var1529X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1529X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1529X) (_ bv0 32)))))
 ))
 (let (($x219 (forall ((input.ind-%var1528X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1528X)))
 (= $x213 false)))
 ))
 (let (($x112 (and $x219 $x192)))
 (let (($x249 (= $x112 true)))
 (let (($x338 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let ((?x359 (bvadd symbol.1 (bvmul input.ind-%var1523X (_ bv4 32)))))
 (let ((?x48 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x359))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv2 32))) ?x48)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x359 (_ bv3 32))) ?x287)))
 (let ((?x166 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1523X)))
 (let (($x191 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1523X)))
 (=> $x191 (= ?x166 ?x321)))))))))
 ))
 (let (($x10 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x205 (and (bvule (_ bv0 32) input.ind-%var1522X) (bvult input.ind-%var1522X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x191 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1522X)))
 (= $x191 $x205))))
 ))
 (let (($x360 (and $x10 $x338)))
 (let (($x244 (= $x360 true)))
 (let (($x104 (forall ((input.ind-%var1517X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1517X)))
 (=> $x213 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1517X) (_ bv0 32)))))
 ))
 (let (($x193 (forall ((input.ind-%var1516X (_ BitVec 32)) )(let (($x213 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1516X)))
 (= $x213 false)))
 ))
 (let (($x233 (and $x193 $x104)))
 (let (($x63 (= $x233 true)))
 (let ((?x53 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x53)))
 (let (($x340 (= ?x297 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x121 (= $x340 true)))
 (let (($x83 (= $x121 true)))
 (let ((?x255 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x221 (bvneg ?x255)))
 (let (($x343 (= ?x221 input.dst.llvm-%n)))
 (let (($x16 (= $x343 true)))
 (let (($x110 (= $x16 true)))
 (let (($x147 (= ?x221 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x258 (= $x147 true)))
 (let (($x202 (= $x258 true)))
 (let (($x281 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x324 (= $x281 true)))
 (let (($x185 (= $x324 true)))
 (let (($x349 (= $x185 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x247 (bvsub ?x332 ?x96)))
 (let (($x176 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x247) (bvult ?x332 ?x247))))
 (let ((?x67 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x80 (bvmul (_ bv4 64) ?x67)))
 (let ((?x218 ((_ extract 63 32) ?x80)))
 (let (($x251 (= (_ bv0 32) ?x218)))
 (let (($x301 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x189 (and (and (and true $x301) $x251) $x176)))
 (let (($x120 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x311 (and $x120 $x189)))
 (let (($x288 (= true $x311)))
 (let (($x144 (=> $x265 $x288)))
 (let (($x243 (= $x144 true)))
 (let (($x111 (= $x243 true)))
 (let (($x183 (= $x111 true)))
 (let (($x245 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x235 (= $x245 true)))
 (let (($x298 (= $x235 true)))
 (let (($x239 (= $x298 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (= $x163 true)))
 (let (($x190 (= $x194 true)))
 (let (($x199 (= $x190 true)))
 (let (($x52 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x115 (= $x52 true)))
 (let (($x29 (= $x115 true)))
 (let (($x180 (= $x29 true)))
 (let (($x66 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x47 (= $x66 true)))
 (let (($x175 (= $x47 true)))
 (let (($x119 (= $x175 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x148 (= $x169 true)))
 (let (($x186 (= $x148 true)))
 (let (($x200 (= $x186 true)))
 (let (($x72 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x151 (= $x72 true)))
 (let (($x198 (= $x151 true)))
 (let (($x25 (= $x198 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x15)))
 (let ((?x162 (bvand symbol.1 (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x162)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x68 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x55 (= input.memlabel-mem--symbol.1_end ?x68)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x122 (and $x84 $x55)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x49 $x122)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x138 $x136)))
 (let (($x102 (not $x173)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (and $x154 $x39)))
 (let (($x158 (and (not $x23) $x102)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x59 $x131)))
 (let (($x178 (not $x69)))
 (let (($x171 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x99 $x171)))
 (let (($x22 (and (not $x44) $x178)))
 (let (($x226 (and (and (and (and (and (and $x22 $x158) $x91) $x94) $x179) $x149) $x134)))
 (let (($x145 (and $x226 $x9)))
 (let (($x36 (= symbol.1 dst_symbol_addr.1)))
 (let (($x127 (and $x36 $x145)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x79 (or (bvugt input.memlabel-mem--symbol.1_begin ?x76) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x79) (or $x35 $x77)))))))
 (let (($x177 (and $x70 $x127)))
 (let (($x210 (= $x177 true)))
 (let (($x155 (= $x210 true)))
 (let (($x141 (= $x155 true)))
 (let (($x146 (and $x141 $x25)))
 (let (($x160 (and $x146 $x200)))
 (let (($x203 (and $x160 $x119)))
 (let (($x19 (and $x203 $x180)))
 (let (($x153 (and $x19 $x199)))
 (let (($x212 (and $x153 $x239)))
 (let (($x227 (and $x212 $x183)))
 (let (($x12 (and $x227 $x349)))
 (let (($x7 (and $x12 $x202)))
 (let (($x313 (and $x7 $x110)))
 (let (($x195 (and $x313 $x83)))
 (let (($x354 (and $x195 $x63)))
 (let (($x352 (and $x354 $x244)))
 (let (($x347 (and $x352 $x249)))
 (let (($x33 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x139 (and $x33 $x347)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x75 (and $x24 $x139)))
 (let (($x342 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x85 (and $x342 $x75)))
 (let (($x71 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x103 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x71)))))
 (let (($x323 (=> (and $x265 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x71)))))
 (let (($x137 (and $x323 $x85)))
 (let (($x232 (=> $x137 $x306)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x165 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x197 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x333 (bvmul (_ bv4294967295 32) ?x197)))
 (let ((?x206 (bvneg ?x333)))
 (let (($x65 (= ?x206 ?x165)))
 (let (($x260 (= $x65 true)))
 (let (($x11 (forall ((input.ind-%var1547X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1547X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1547X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var1546X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1546X)))
 (= $x354 false)))
 ))
 (let (($x276 (and $x5 $x11)))
 (let (($x43 (= $x276 true)))
 (let (($x8 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let ((?x329 (bvadd symbol.1 (bvmul input.ind-%var1541X (_ bv4 32)))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x329))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv2 32))) ?x271)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv3 32))) ?x159)))
 (let ((?x75 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1541X)))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1541X)))
 (=> $x287 (= ?x75 ?x116)))))))))
 ))
 (let (($x112 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x219 (and (bvule (_ bv0 32) input.ind-%var1540X) (bvult input.ind-%var1540X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1540X)))
 (= $x287 $x219))))
 ))
 (let (($x296 (and $x112 $x8)))
 (let (($x325 (= $x296 true)))
 (let (($x220 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1535X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1535X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var1534X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1534X)))
 (= $x354 false)))
 ))
 (let (($x236 (and $x205 $x220)))
 (let (($x224 (= $x236 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x213)))
 (let (($x193 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x193 true)))
 (let (($x355 (= $x286 true)))
 (let (($x340 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x121 (= $x340 true)))
 (let (($x83 (= $x121 true)))
 (let (($x195 (= $x83 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x349 (bvsub ?x332 ?x96)))
 (let (($x221 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x349) (bvult ?x332 ?x349))))
 (let ((?x227 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x281 (bvmul (_ bv4 64) ?x227)))
 (let ((?x324 ((_ extract 63 32) ?x281)))
 (let (($x185 (= (_ bv0 32) ?x324)))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x202 (and (and (and true $x111) $x185) $x221)))
 (let (($x189 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x7 (and $x189 $x202)))
 (let (($x343 (= true $x7)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x16 (=> $x106 $x343)))
 (let (($x110 (= $x16 true)))
 (let (($x313 (= $x110 true)))
 (let (($x53 (= $x313 true)))
 (let (($x251 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x251 true)))
 (let (($x201 (= $x114 true)))
 (let (($x247 (= $x201 true)))
 (let (($x269 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (= $x269 true)))
 (let (($x67 (= $x211 true)))
 (let (($x80 (= $x67 true)))
 (let (($x300 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x284 (= $x300 true)))
 (let (($x294 (= $x284 true)))
 (let (($x182 (= $x294 true)))
 (let (($x239 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x212 (= $x239 true)))
 (let (($x133 (= $x212 true)))
 (let (($x246 (= $x133 true)))
 (let (($x199 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x153 (= $x199 true)))
 (let (($x245 (= $x153 true)))
 (let (($x235 (= $x245 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x19 (= $x180 true)))
 (let (($x163 (= $x19 true)))
 (let (($x194 (= $x163 true)))
 (let (($x203 (= $x106 true)))
 (let (($x52 (= $x203 true)))
 (let (($x115 (= $x52 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x72)))
 (let ((?x155 (bvand symbol.1 (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x155)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x15 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x9 (= input.memlabel-mem--symbol.1_end ?x15)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (and $x134 $x9)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x162 $x145)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x90 $x68)))
 (let (($x122 (not $x55)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (and $x157 $x49)))
 (let (($x152 (and (not $x84) $x122)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x158 $x95)))
 (let (($x140 (not $x91)))
 (let (($x173 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x136 $x173)))
 (let (($x94 (and (not $x102) $x140)))
 (let (($x148 (and (and (and (and (and (and $x94 $x152) $x129) $x128) $x127) $x210) $x141)))
 (let (($x186 (and $x148 $x151)))
 (let (($x32 (= symbol.1 dst_symbol_addr.1)))
 (let (($x200 (and $x32 $x186)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x44 (or (bvugt input.memlabel-mem--symbol.1_begin ?x36) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x44) (or $x69 $x178)))))))
 (let (($x160 (and $x138 $x200)))
 (let (($x66 (= $x160 true)))
 (let (($x47 (= $x66 true)))
 (let (($x175 (= $x47 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x62)))
 (let (($x35 (= ?x89 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x79 (= ?x89 input.dst.llvm-%n)))
 (let (($x51 (= $x79 true)))
 (let (($x57 (= $x51 true)))
 (let (($x45 (and $x57 $x77)))
 (let (($x119 (and $x45 $x175)))
 (let (($x29 (and $x119 $x115)))
 (let (($x190 (and $x29 $x194)))
 (let (($x298 (and $x190 $x235)))
 (let (($x120 (and $x298 $x246)))
 (let (($x301 (and $x120 $x182)))
 (let (($x218 (and $x301 $x80)))
 (let (($x248 (and $x218 $x247)))
 (let (($x297 (and $x248 $x53)))
 (let (($x113 (and $x297 $x195)))
 (let (($x74 (and $x113 $x355)))
 (let (($x207 (and $x74 $x224)))
 (let (($x278 (and $x207 $x325)))
 (let (($x50 (and $x278 $x43)))
 (let (($x124 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and (not $x124) $x50)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (and $x64 $x13)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x326 (and $x268 $x26)))
 (let (($x174 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x174 $x326)))
 (let (($x222 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x342 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x222)))))
 (let (($x273 (=> (and $x106 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x222)))))
 (let (($x341 (and $x273 $x18)))
 (let (($x223 (=> $x341 $x260)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x165 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x197 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x333 (bvmul (_ bv4294967295 32) ?x197)))
 (let ((?x206 (bvneg ?x333)))
 (let (($x65 (= ?x206 ?x165)))
 (let (($x260 (= $x65 true)))
 (let (($x11 (forall ((input.ind-%var1547X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1547X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1547X) (_ bv0 32)))))
 ))
 (let (($x5 (forall ((input.ind-%var1546X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1546X)))
 (= $x354 false)))
 ))
 (let (($x276 (and $x5 $x11)))
 (let (($x43 (= $x276 true)))
 (let (($x8 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let ((?x329 (bvadd symbol.1 (bvmul input.ind-%var1541X (_ bv4 32)))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x329))))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv2 32))) ?x271)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x329 (_ bv3 32))) ?x159)))
 (let ((?x75 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1541X)))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1541X)))
 (=> $x287 (= ?x75 ?x116)))))))))
 ))
 (let (($x112 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x219 (and (bvule (_ bv0 32) input.ind-%var1540X) (bvult input.ind-%var1540X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x287 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1540X)))
 (= $x287 $x219))))
 ))
 (let (($x296 (and $x112 $x8)))
 (let (($x325 (= $x296 true)))
 (let (($x220 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1535X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1535X) (_ bv0 32)))))
 ))
 (let (($x205 (forall ((input.ind-%var1534X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1534X)))
 (= $x354 false)))
 ))
 (let (($x236 (and $x205 $x220)))
 (let (($x224 (= $x236 true)))
 (let ((?x213 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x109 (bvneg ?x213)))
 (let (($x193 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x193 true)))
 (let (($x355 (= $x286 true)))
 (let (($x340 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x121 (= $x340 true)))
 (let (($x83 (= $x121 true)))
 (let (($x195 (= $x83 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x349 (bvsub ?x332 ?x96)))
 (let (($x221 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x349) (bvult ?x332 ?x349))))
 (let ((?x227 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x281 (bvmul (_ bv4 64) ?x227)))
 (let ((?x324 ((_ extract 63 32) ?x281)))
 (let (($x185 (= (_ bv0 32) ?x324)))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x202 (and (and (and true $x111) $x185) $x221)))
 (let (($x189 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x7 (and $x189 $x202)))
 (let (($x343 (= true $x7)))
 (let (($x106 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x16 (=> $x106 $x343)))
 (let (($x110 (= $x16 true)))
 (let (($x313 (= $x110 true)))
 (let (($x53 (= $x313 true)))
 (let (($x251 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x251 true)))
 (let (($x201 (= $x114 true)))
 (let (($x247 (= $x201 true)))
 (let (($x269 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x211 (= $x269 true)))
 (let (($x67 (= $x211 true)))
 (let (($x80 (= $x67 true)))
 (let (($x300 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x284 (= $x300 true)))
 (let (($x294 (= $x284 true)))
 (let (($x182 (= $x294 true)))
 (let (($x239 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x212 (= $x239 true)))
 (let (($x133 (= $x212 true)))
 (let (($x246 (= $x133 true)))
 (let (($x199 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x153 (= $x199 true)))
 (let (($x245 (= $x153 true)))
 (let (($x235 (= $x245 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x19 (= $x180 true)))
 (let (($x163 (= $x19 true)))
 (let (($x194 (= $x163 true)))
 (let (($x203 (= $x106 true)))
 (let (($x52 (= $x203 true)))
 (let (($x115 (= $x52 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x72)))
 (let ((?x155 (bvand symbol.1 (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x155)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x15 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x9 (= input.memlabel-mem--symbol.1_end ?x15)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x145 (and $x134 $x9)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x162 $x145)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x55 (and $x90 $x68)))
 (let (($x122 (not $x55)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x84 (and $x157 $x49)))
 (let (($x152 (and (not $x84) $x122)))
 (let (($x95 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x158 $x95)))
 (let (($x140 (not $x91)))
 (let (($x173 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x136 $x173)))
 (let (($x94 (and (not $x102) $x140)))
 (let (($x148 (and (and (and (and (and (and $x94 $x152) $x129) $x128) $x127) $x210) $x141)))
 (let (($x186 (and $x148 $x151)))
 (let (($x32 (= symbol.1 dst_symbol_addr.1)))
 (let (($x200 (and $x32 $x186)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x36 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x36)))
 (let (($x44 (or (bvugt input.memlabel-mem--symbol.1_begin ?x36) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x44) (or $x69 $x178)))))))
 (let (($x160 (and $x138 $x200)))
 (let (($x66 (= $x160 true)))
 (let (($x47 (= $x66 true)))
 (let (($x175 (= $x47 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x62)))
 (let (($x35 (= ?x89 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x79 (= ?x89 input.dst.llvm-%n)))
 (let (($x51 (= $x79 true)))
 (let (($x57 (= $x51 true)))
 (let (($x45 (and $x57 $x77)))
 (let (($x119 (and $x45 $x175)))
 (let (($x29 (and $x119 $x115)))
 (let (($x190 (and $x29 $x194)))
 (let (($x298 (and $x190 $x235)))
 (let (($x120 (and $x298 $x246)))
 (let (($x301 (and $x120 $x182)))
 (let (($x218 (and $x301 $x80)))
 (let (($x248 (and $x218 $x247)))
 (let (($x297 (and $x248 $x53)))
 (let (($x113 (and $x297 $x195)))
 (let (($x74 (and $x113 $x355)))
 (let (($x207 (and $x74 $x224)))
 (let (($x278 (and $x207 $x325)))
 (let (($x50 (and $x278 $x43)))
 (let (($x124 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and (not $x124) $x50)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x26 (and $x64 $x13)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x326 (and $x268 $x26)))
 (let (($x174 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x174 $x326)))
 (let (($x222 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x342 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x222)))))
 (let (($x273 (=> (and $x106 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x222)))))
 (let (($x341 (and $x273 $x18)))
 (let (($x223 (=> $x341 $x260)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x105 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x21 (bvsle ?x105 (_ bv399 32))))
 (let (($x347 (= $x21 true)))
 (let (($x126 (= $x347 true)))
 (let (($x261 (forall ((input.ind-%var1565X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1565X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1565X) (_ bv0 32)))))
 ))
 (let (($x315 (forall ((input.ind-%var1564X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1564X)))
 (= $x237 false)))
 ))
 (let (($x257 (and $x315 $x261)))
 (let (($x359 (= $x257 true)))
 (let (($x233 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let ((?x17 (bvadd symbol.1 (bvmul input.ind-%var1559X (_ bv4 32)))))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x17))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv2 32))) ?x164)))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv3 32))) ?x249)))
 (let ((?x5 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1559X)))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1559X)))
 (=> $x350 (= ?x5 ?x356)))))))))
 ))
 (let (($x8 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x130 (and (bvule (_ bv0 32) input.ind-%var1558X) (bvult input.ind-%var1558X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1558X)))
 (= $x350 $x130))))
 ))
 (let (($x108 (and $x8 $x233)))
 (let (($x170 (= $x108 true)))
 (let (($x137 (forall ((input.ind-%var1553X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1553X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1553X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1552X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1552X)))
 (= $x237 false)))
 ))
 (let (($x252 (and $x236 $x137)))
 (let (($x329 (= $x252 true)))
 (let ((?x109 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x109)))
 (let (($x286 (= ?x193 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x355 (= $x286 true)))
 (let (($x74 (= $x355 true)))
 (let (($x121 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x83 (= $x121 true)))
 (let (($x195 (= $x83 true)))
 (let (($x113 (= $x195 true)))
 (let (($x110 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x313 (= $x110 true)))
 (let (($x53 (= $x313 true)))
 (let (($x297 (= $x53 true)))
 (let (($x221 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x202 (= $x221 true)))
 (let (($x7 (= $x202 true)))
 (let (($x343 (= $x7 true)))
 (let ((?x311 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x311)))
 (let ((?x189 (bvand symbol.1 (_ bv3 32))))
 (let (($x288 (= (_ bv0 32) ?x189)))
 (let ((?x240 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x240)))
 (let ((?x114 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x201 (= input.memlabel-mem--symbol.1_end ?x114)))
 (let (($x251 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x247 (and $x251 $x201)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x218 $x247)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x294 (and $x300 $x284)))
 (let (($x182 (not $x294)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x133 $x246)))
 (let (($x269 (and (not $x120) $x182)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x153 $x245)))
 (let (($x298 (not $x235)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x194 $x190)))
 (let (($x212 (and (not $x199) $x298)))
 (let (($x281 (and (and (and (and (and (and $x212 $x269) $x211) $x80) $x248) $x176) $x288)))
 (let (($x324 (and $x281 $x144)))
 (let (($x141 (= symbol.1 dst_symbol_addr.1)))
 (let (($x185 (and $x141 $x324)))
 (let (($x203 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x160 (or (bvugt input.memlabel-mem--symbol.1_begin ?x151) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x160) (or $x119 $x203)))))))
 (let (($x258 (and $x163 $x185)))
 (let (($x12 (= $x258 true)))
 (let (($x349 (= $x12 true)))
 (let (($x289 (= $x349 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x129 (bvsub ?x332 ?x96)))
 (let (($x146 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x129) (bvult ?x332 ?x129))))
 (let ((?x55 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x55)))
 (let ((?x152 ((_ extract 63 32) ?x122)))
 (let (($x198 (= (_ bv0 32) ?x152)))
 (let (($x90 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x226 (and (and (and true $x90) $x198) $x146)))
 (let (($x94 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x15 (and $x94 $x226)))
 (let (($x9 (= true $x15)))
 (let (($x123 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x123 $x9)))
 (let (($x127 (= $x145 true)))
 (let (($x93 (= $x127 true)))
 (let (($x177 (= $x93 true)))
 (let (($x173 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x173 true)))
 (let (($x14 (= $x102 true)))
 (let (($x158 (= $x14 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x23 true)))
 (let (($x6 (= $x138 true)))
 (let (($x32 (= $x6 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x171)))
 (let (($x178 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x78 (= ?x44 input.dst.llvm-%n)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x70 (= $x45 true)))
 (let (($x42 (= $x70 true)))
 (let (($x167 (= $x42 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x76 (= $x123 true)))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x77 (and $x89 $x34)))
 (let (($x36 (and $x77 $x167)))
 (let (($x131 (and $x36 $x69)))
 (let (($x39 (and $x131 $x154)))
 (let (($x136 (and $x39 $x32)))
 (let (($x95 (and $x136 $x158)))
 (let (($x210 (and $x95 $x177)))
 (let (($x255 (and $x210 $x289)))
 (let (($x16 (and $x255 $x343)))
 (let (($x340 (and $x16 $x297)))
 (let (($x213 (and $x340 $x113)))
 (let (($x63 (and $x213 $x74)))
 (let (($x346 (and $x63 $x329)))
 (let (($x125 (and $x346 $x170)))
 (let (($x48 (and $x125 $x359)))
 (let (($x279 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and (not $x279) $x48)))
 (let (($x88 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and $x88 $x56)))
 (let (($x312 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x360 (and $x312 $x277)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x196 $x360)))
 (let (($x323 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x174 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x323)))))
 (let (($x357 (=> (and $x123 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x323)))))
 (let (($x204 (and $x357 $x10)))
 (let (($x97 (=> $x204 $x126)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x105 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x21 (bvsle ?x105 (_ bv399 32))))
 (let (($x347 (= $x21 true)))
 (let (($x126 (= $x347 true)))
 (let (($x261 (forall ((input.ind-%var1565X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1565X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1565X) (_ bv0 32)))))
 ))
 (let (($x315 (forall ((input.ind-%var1564X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1564X)))
 (= $x237 false)))
 ))
 (let (($x257 (and $x315 $x261)))
 (let (($x359 (= $x257 true)))
 (let (($x233 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let ((?x17 (bvadd symbol.1 (bvmul input.ind-%var1559X (_ bv4 32)))))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x17))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv2 32))) ?x164)))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x17 (_ bv3 32))) ?x249)))
 (let ((?x5 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1559X)))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1559X)))
 (=> $x350 (= ?x5 ?x356)))))))))
 ))
 (let (($x8 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x130 (and (bvule (_ bv0 32) input.ind-%var1558X) (bvult input.ind-%var1558X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x350 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1558X)))
 (= $x350 $x130))))
 ))
 (let (($x108 (and $x8 $x233)))
 (let (($x170 (= $x108 true)))
 (let (($x137 (forall ((input.ind-%var1553X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1553X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1553X) (_ bv0 32)))))
 ))
 (let (($x236 (forall ((input.ind-%var1552X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1552X)))
 (= $x237 false)))
 ))
 (let (($x252 (and $x236 $x137)))
 (let (($x329 (= $x252 true)))
 (let ((?x109 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x109)))
 (let (($x286 (= ?x193 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x355 (= $x286 true)))
 (let (($x74 (= $x355 true)))
 (let (($x121 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x83 (= $x121 true)))
 (let (($x195 (= $x83 true)))
 (let (($x113 (= $x195 true)))
 (let (($x110 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x313 (= $x110 true)))
 (let (($x53 (= $x313 true)))
 (let (($x297 (= $x53 true)))
 (let (($x221 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x202 (= $x221 true)))
 (let (($x7 (= $x202 true)))
 (let (($x343 (= $x7 true)))
 (let ((?x311 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x311)))
 (let ((?x189 (bvand symbol.1 (_ bv3 32))))
 (let (($x288 (= (_ bv0 32) ?x189)))
 (let ((?x240 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x240)))
 (let ((?x114 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x201 (= input.memlabel-mem--symbol.1_end ?x114)))
 (let (($x251 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x247 (and $x251 $x201)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x218 $x247)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x294 (and $x300 $x284)))
 (let (($x182 (not $x294)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (and $x133 $x246)))
 (let (($x269 (and (not $x120) $x182)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x153 $x245)))
 (let (($x298 (not $x235)))
 (let (($x190 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x194 $x190)))
 (let (($x212 (and (not $x199) $x298)))
 (let (($x281 (and (and (and (and (and (and $x212 $x269) $x211) $x80) $x248) $x176) $x288)))
 (let (($x324 (and $x281 $x144)))
 (let (($x141 (= symbol.1 dst_symbol_addr.1)))
 (let (($x185 (and $x141 $x324)))
 (let (($x203 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x160 (or (bvugt input.memlabel-mem--symbol.1_begin ?x151) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x160) (or $x119 $x203)))))))
 (let (($x258 (and $x163 $x185)))
 (let (($x12 (= $x258 true)))
 (let (($x349 (= $x12 true)))
 (let (($x289 (= $x349 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x129 (bvsub ?x332 ?x96)))
 (let (($x146 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x129) (bvult ?x332 ?x129))))
 (let ((?x55 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x55)))
 (let ((?x152 ((_ extract 63 32) ?x122)))
 (let (($x198 (= (_ bv0 32) ?x152)))
 (let (($x90 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x226 (and (and (and true $x90) $x198) $x146)))
 (let (($x94 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x15 (and $x94 $x226)))
 (let (($x9 (= true $x15)))
 (let (($x123 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x123 $x9)))
 (let (($x127 (= $x145 true)))
 (let (($x93 (= $x127 true)))
 (let (($x177 (= $x93 true)))
 (let (($x173 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x173 true)))
 (let (($x14 (= $x102 true)))
 (let (($x158 (= $x14 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x23 true)))
 (let (($x6 (= $x138 true)))
 (let (($x32 (= $x6 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x171)))
 (let (($x178 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x78 (= ?x44 input.dst.llvm-%n)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x70 (= $x45 true)))
 (let (($x42 (= $x70 true)))
 (let (($x167 (= $x42 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x76 (= $x123 true)))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x77 (and $x89 $x34)))
 (let (($x36 (and $x77 $x167)))
 (let (($x131 (and $x36 $x69)))
 (let (($x39 (and $x131 $x154)))
 (let (($x136 (and $x39 $x32)))
 (let (($x95 (and $x136 $x158)))
 (let (($x210 (and $x95 $x177)))
 (let (($x255 (and $x210 $x289)))
 (let (($x16 (and $x255 $x343)))
 (let (($x340 (and $x16 $x297)))
 (let (($x213 (and $x340 $x113)))
 (let (($x63 (and $x213 $x74)))
 (let (($x346 (and $x63 $x329)))
 (let (($x125 (and $x346 $x170)))
 (let (($x48 (and $x125 $x359)))
 (let (($x279 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x56 (and (not $x279) $x48)))
 (let (($x88 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x277 (and $x88 $x56)))
 (let (($x312 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x360 (and $x312 $x277)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x196 $x360)))
 (let (($x323 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x174 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x323)))))
 (let (($x357 (=> (and $x123 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x323)))))
 (let (($x204 (and $x357 $x10)))
 (let (($x97 (=> $x204 $x126)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x181 (bvule ?x325 (_ bv399 32))))
 (let (($x156 (= $x181 true)))
 (let (($x27 (= $x156 true)))
 (let (($x219 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1583X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1583X) (_ bv0 32)))))
 ))
 (let (($x26 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1582X)))
 (= $x352 false)))
 ))
 (let (($x142 (and $x26 $x219)))
 (let (($x275 (= $x142 true)))
 (let (($x13 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let ((?x11 (bvadd symbol.1 (bvmul input.ind-%var1577X (_ bv4 32)))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x11))))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv2 32))) ?x287)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv3 32))) ?x339)))
 (let ((?x315 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1577X)))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1577X)))
 (=> $x241 (= ?x315 ?x354)))))))))
 ))
 (let (($x233 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x361 (and (bvule (_ bv0 32) input.ind-%var1576X) (bvult input.ind-%var1576X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1576X)))
 (= $x241 $x361))))
 ))
 (let (($x65 (and $x233 $x13)))
 (let (($x260 (= $x65 true)))
 (let (($x276 (forall ((input.ind-%var1571X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1571X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1571X) (_ bv0 32)))))
 ))
 (let (($x252 (forall ((input.ind-%var1570X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1570X)))
 (= $x352 false)))
 ))
 (let (($x225 (and $x252 $x276)))
 (let (($x17 (= $x225 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x193)))
 (let (($x355 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x355 true)))
 (let (($x63 (= $x74 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x195 (= $x83 true)))
 (let (($x113 (= $x195 true)))
 (let (($x213 (= $x113 true)))
 (let (($x313 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x53 (= $x313 true)))
 (let (($x297 (= $x53 true)))
 (let (($x340 (= $x297 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x7 (= $x202 true)))
 (let (($x343 (= $x7 true)))
 (let (($x16 (= $x343 true)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x176)))
 (let ((?x183 (bvand symbol.1 (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x183)))
 (let ((?x247 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x247)))
 (let ((?x218 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x251 (= input.memlabel-mem--symbol.1_end ?x218)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (and $x147 $x251)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x80 $x114)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x294 (and $x300 $x284)))
 (let (($x182 (not $x294)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (and $x246 $x120)))
 (let (($x243 (and (not $x301) $x182)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x153 $x245)))
 (let (($x298 (not $x235)))
 (let (($x199 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x190 $x199)))
 (let (($x133 (and (not $x239) $x298)))
 (let (($x324 (and (and (and (and (and (and $x133 $x243) $x211) $x67) $x201) $x248) $x240)))
 (let (($x185 (and $x324 $x227)))
 (let (($x19 (= symbol.1 dst_symbol_addr.1)))
 (let (($x258 (and $x19 $x185)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x200 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x200)))
 (let (($x47 (or (bvugt input.memlabel-mem--symbol.1_begin ?x200) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x47) (or $x52 $x115)))))))
 (let (($x12 (and $x194 $x258)))
 (let (($x349 (= $x12 true)))
 (let (($x289 (= $x349 true)))
 (let (($x255 (= $x289 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x198 (bvsub ?x332 ?x96)))
 (let (($x149 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x198) (bvult ?x332 ?x198))))
 (let ((?x68 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x55 (bvmul (_ bv4 64) ?x68)))
 (let ((?x122 ((_ extract 63 32) ?x55)))
 (let (($x152 (= (_ bv0 32) ?x122)))
 (let (($x90 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x226 (and (and (and true $x90) $x152) $x149)))
 (let (($x94 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x15 (and $x94 $x226)))
 (let (($x9 (= true $x15)))
 (let (($x43 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x43 $x9)))
 (let (($x127 (= $x145 true)))
 (let (($x93 (= $x127 true)))
 (let (($x177 (= $x93 true)))
 (let (($x173 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x173 true)))
 (let (($x14 (= $x102 true)))
 (let (($x158 (= $x14 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x23 true)))
 (let (($x6 (= $x138 true)))
 (let (($x32 (= $x6 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x171)))
 (let (($x178 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x78 (= ?x44 input.dst.llvm-%n)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x70 (= $x45 true)))
 (let (($x42 (= $x70 true)))
 (let (($x167 (= $x42 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x76 (= $x43 true)))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x77 (and $x89 $x34)))
 (let (($x36 (and $x77 $x167)))
 (let (($x131 (and $x36 $x69)))
 (let (($x39 (and $x131 $x154)))
 (let (($x136 (and $x39 $x32)))
 (let (($x95 (and $x136 $x158)))
 (let (($x210 (and $x95 $x177)))
 (let (($x221 (and $x210 $x255)))
 (let (($x110 (and $x221 $x16)))
 (let (($x121 (and $x110 $x340)))
 (let (($x109 (and $x121 $x213)))
 (let (($x205 (and $x109 $x63)))
 (let (($x139 (and $x205 $x17)))
 (let (($x333 (and $x139 $x260)))
 (let (($x242 (and $x333 $x275)))
 (let (($x338 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x271 (and (not $x338) $x242)))
 (let (($x124 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and $x124 $x271)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x33 $x207)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x24 $x192)))
 (let (($x273 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x196 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x273)))))
 (let (($x215 (=> (and $x43 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x273)))))
 (let (($x267 (and $x215 $x310)))
 (let (($x263 (=> $x267 $x27)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x181 (bvule ?x325 (_ bv399 32))))
 (let (($x156 (= $x181 true)))
 (let (($x27 (= $x156 true)))
 (let (($x219 (forall ((input.ind-%var1583X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1583X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1583X) (_ bv0 32)))))
 ))
 (let (($x26 (forall ((input.ind-%var1582X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1582X)))
 (= $x352 false)))
 ))
 (let (($x142 (and $x26 $x219)))
 (let (($x275 (= $x142 true)))
 (let (($x13 (forall ((input.ind-%var1577X (_ BitVec 32)) )(let ((?x11 (bvadd symbol.1 (bvmul input.ind-%var1577X (_ bv4 32)))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x11))))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv2 32))) ?x287)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x11 (_ bv3 32))) ?x339)))
 (let ((?x315 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1577X)))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1577X)))
 (=> $x241 (= ?x315 ?x354)))))))))
 ))
 (let (($x233 (forall ((input.ind-%var1576X (_ BitVec 32)) )(let (($x361 (and (bvule (_ bv0 32) input.ind-%var1576X) (bvult input.ind-%var1576X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x241 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1576X)))
 (= $x241 $x361))))
 ))
 (let (($x65 (and $x233 $x13)))
 (let (($x260 (= $x65 true)))
 (let (($x276 (forall ((input.ind-%var1571X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1571X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1571X) (_ bv0 32)))))
 ))
 (let (($x252 (forall ((input.ind-%var1570X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1570X)))
 (= $x352 false)))
 ))
 (let (($x225 (and $x252 $x276)))
 (let (($x17 (= $x225 true)))
 (let ((?x193 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x286 (bvneg ?x193)))
 (let (($x355 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x355 true)))
 (let (($x63 (= $x74 true)))
 (let (($x83 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x195 (= $x83 true)))
 (let (($x113 (= $x195 true)))
 (let (($x213 (= $x113 true)))
 (let (($x313 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x53 (= $x313 true)))
 (let (($x297 (= $x53 true)))
 (let (($x340 (= $x297 true)))
 (let (($x202 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x7 (= $x202 true)))
 (let (($x343 (= $x7 true)))
 (let (($x16 (= $x343 true)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x176)))
 (let ((?x183 (bvand symbol.1 (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x183)))
 (let ((?x247 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x247)))
 (let ((?x218 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x251 (= input.memlabel-mem--symbol.1_end ?x218)))
 (let (($x147 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (and $x147 $x251)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x80 $x114)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x294 (and $x300 $x284)))
 (let (($x182 (not $x294)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (and $x246 $x120)))
 (let (($x243 (and (not $x301) $x182)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x153 $x245)))
 (let (($x298 (not $x235)))
 (let (($x199 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x190 $x199)))
 (let (($x133 (and (not $x239) $x298)))
 (let (($x324 (and (and (and (and (and (and $x133 $x243) $x211) $x67) $x201) $x248) $x240)))
 (let (($x185 (and $x324 $x227)))
 (let (($x19 (= symbol.1 dst_symbol_addr.1)))
 (let (($x258 (and $x19 $x185)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x200 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x200)))
 (let (($x47 (or (bvugt input.memlabel-mem--symbol.1_begin ?x200) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x47) (or $x52 $x115)))))))
 (let (($x12 (and $x194 $x258)))
 (let (($x349 (= $x12 true)))
 (let (($x289 (= $x349 true)))
 (let (($x255 (= $x289 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x198 (bvsub ?x332 ?x96)))
 (let (($x149 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x198) (bvult ?x332 ?x198))))
 (let ((?x68 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x55 (bvmul (_ bv4 64) ?x68)))
 (let ((?x122 ((_ extract 63 32) ?x55)))
 (let (($x152 (= (_ bv0 32) ?x122)))
 (let (($x90 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x226 (and (and (and true $x90) $x152) $x149)))
 (let (($x94 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x15 (and $x94 $x226)))
 (let (($x9 (= true $x15)))
 (let (($x43 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x43 $x9)))
 (let (($x127 (= $x145 true)))
 (let (($x93 (= $x127 true)))
 (let (($x177 (= $x93 true)))
 (let (($x173 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x173 true)))
 (let (($x14 (= $x102 true)))
 (let (($x158 (= $x14 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x23 true)))
 (let (($x6 (= $x138 true)))
 (let (($x32 (= $x6 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x171)))
 (let (($x178 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x78 (= ?x44 input.dst.llvm-%n)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x70 (= $x45 true)))
 (let (($x42 (= $x70 true)))
 (let (($x167 (= $x42 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x76 (= $x43 true)))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x77 (and $x89 $x34)))
 (let (($x36 (and $x77 $x167)))
 (let (($x131 (and $x36 $x69)))
 (let (($x39 (and $x131 $x154)))
 (let (($x136 (and $x39 $x32)))
 (let (($x95 (and $x136 $x158)))
 (let (($x210 (and $x95 $x177)))
 (let (($x221 (and $x210 $x255)))
 (let (($x110 (and $x221 $x16)))
 (let (($x121 (and $x110 $x340)))
 (let (($x109 (and $x121 $x213)))
 (let (($x205 (and $x109 $x63)))
 (let (($x139 (and $x205 $x17)))
 (let (($x333 (and $x139 $x260)))
 (let (($x242 (and $x333 $x275)))
 (let (($x338 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x271 (and (not $x338) $x242)))
 (let (($x124 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x207 (and $x124 $x271)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x33 $x207)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x24 $x192)))
 (let (($x273 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x196 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x273)))))
 (let (($x215 (=> (and $x43 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x273)))))
 (let (($x267 (and $x215 $x310)))
 (let (($x263 (=> $x267 $x27)))
 (not $x263)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x170 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x169 (bvsge ?x170 (_ bv0 32))))
 (let (($x232 (= $x169 true)))
 (let (($x165 (= $x232 true)))
 (let (($x130 (forall ((input.ind-%var1601X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1601X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1601X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var1600X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1600X)))
 (= $x116 false)))
 ))
 (let (($x197 (and $x277 $x130)))
 (let (($x321 (= $x197 true)))
 (let (($x56 (forall ((input.ind-%var1595X (_ BitVec 32)) )(let ((?x261 (bvadd symbol.1 (bvmul input.ind-%var1595X (_ bv4 32)))))
 (let ((?x350 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x350)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x28)))
 (let ((?x26 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1595X)))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1595X)))
 (=> $x296 (= ?x26 ?x237)))))))))
 ))
 (let (($x13 (forall ((input.ind-%var1594X (_ BitVec 32)) )(let (($x322 (and (bvule (_ bv0 32) input.ind-%var1594X) (bvult input.ind-%var1594X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1594X)))
 (= $x296 $x322))))
 ))
 (let (($x97 (and $x13 $x56)))
 (let (($x58 (= $x97 true)))
 (let (($x257 (forall ((input.ind-%var1589X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1589X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1589X) (_ bv0 32)))))
 ))
 (let (($x225 (forall ((input.ind-%var1588X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1588X)))
 (= $x116 false)))
 ))
 (let (($x46 (and $x225 $x257)))
 (let (($x11 (= $x46 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x355 (bvneg ?x286)))
 (let (($x74 (= ?x355 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x74 true)))
 (let (($x205 (= $x63 true)))
 (let (($x195 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x113 (= $x195 true)))
 (let (($x213 (= $x113 true)))
 (let (($x109 (= $x213 true)))
 (let (($x53 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x297 (= $x53 true)))
 (let (($x340 (= $x297 true)))
 (let (($x121 (= $x340 true)))
 (let (($x7 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x343 (= $x7 true)))
 (let (($x16 (= $x343 true)))
 (let (($x110 (= $x16 true)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x248)))
 (let ((?x311 (bvand symbol.1 (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x311)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x80 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x80)))
 (let (($x281 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x218 (and $x281 $x147)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (and $x67 $x218)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x294 (and $x300 $x284)))
 (let (($x182 (not $x294)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x269 (and $x120 $x301)))
 (let (($x189 (and (not $x269) $x182)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x153 $x245)))
 (let (($x298 (not $x235)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x199 $x239)))
 (let (($x246 (and (not $x212) $x298)))
 (let (($x185 (and (and (and (and (and (and $x246 $x189) $x211) $x111) $x251) $x201) $x247)))
 (let (($x258 (and $x185 $x144)))
 (let (($x141 (= symbol.1 dst_symbol_addr.1)))
 (let (($x12 (and $x141 $x258)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x66) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x29 $x180)))))))
 (let (($x349 (and $x190 $x12)))
 (let (($x289 (= $x349 true)))
 (let (($x255 (= $x289 true)))
 (let (($x221 (= $x255 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x152 (bvsub ?x332 ?x96)))
 (let (($x25 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x152) (bvult ?x332 ?x152))))
 (let ((?x162 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x162)))
 (let ((?x55 ((_ extract 63 32) ?x68)))
 (let (($x122 (= (_ bv0 32) ?x55)))
 (let (($x90 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x226 (and (and (and true $x90) $x122) $x25)))
 (let (($x94 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x15 (and $x94 $x226)))
 (let (($x9 (= true $x15)))
 (let (($x359 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x359 $x9)))
 (let (($x127 (= $x145 true)))
 (let (($x93 (= $x127 true)))
 (let (($x177 (= $x93 true)))
 (let (($x173 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x173 true)))
 (let (($x14 (= $x102 true)))
 (let (($x158 (= $x14 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x23 true)))
 (let (($x6 (= $x138 true)))
 (let (($x32 (= $x6 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x171)))
 (let (($x178 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x78 (= ?x44 input.dst.llvm-%n)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x70 (= $x45 true)))
 (let (($x42 (= $x70 true)))
 (let (($x167 (= $x42 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x76 (= $x359 true)))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x77 (and $x89 $x34)))
 (let (($x36 (and $x77 $x167)))
 (let (($x131 (and $x36 $x69)))
 (let (($x39 (and $x131 $x154)))
 (let (($x136 (and $x39 $x32)))
 (let (($x95 (and $x136 $x158)))
 (let (($x210 (and $x95 $x177)))
 (let (($x202 (and $x210 $x221)))
 (let (($x313 (and $x202 $x110)))
 (let (($x83 (and $x313 $x121)))
 (let (($x193 (and $x83 $x109)))
 (let (($x236 (and $x193 $x205)))
 (let (($x92 (and $x236 $x11)))
 (let (($x21 (and $x92 $x58)))
 (let (($x206 (and $x21 $x321)))
 (let (($x87 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and (not $x87) $x206)))
 (let (($x279 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x346 (and $x279 $x164)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x250 (and $x64 $x346)))
 (let (($x268 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x268 $x250)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x24 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x314 (=> (and $x359 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x18 (and $x314 $x37)))
 (let (($x40 (=> $x18 $x165)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x170 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x169 (bvsge ?x170 (_ bv0 32))))
 (let (($x232 (= $x169 true)))
 (let (($x165 (= $x232 true)))
 (let (($x130 (forall ((input.ind-%var1601X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1601X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1601X) (_ bv0 32)))))
 ))
 (let (($x277 (forall ((input.ind-%var1600X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1600X)))
 (= $x116 false)))
 ))
 (let (($x197 (and $x277 $x130)))
 (let (($x321 (= $x197 true)))
 (let (($x56 (forall ((input.ind-%var1595X (_ BitVec 32)) )(let ((?x261 (bvadd symbol.1 (bvmul input.ind-%var1595X (_ bv4 32)))))
 (let ((?x350 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x350)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x28)))
 (let ((?x26 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1595X)))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1595X)))
 (=> $x296 (= ?x26 ?x237)))))))))
 ))
 (let (($x13 (forall ((input.ind-%var1594X (_ BitVec 32)) )(let (($x322 (and (bvule (_ bv0 32) input.ind-%var1594X) (bvult input.ind-%var1594X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x296 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1594X)))
 (= $x296 $x322))))
 ))
 (let (($x97 (and $x13 $x56)))
 (let (($x58 (= $x97 true)))
 (let (($x257 (forall ((input.ind-%var1589X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1589X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1589X) (_ bv0 32)))))
 ))
 (let (($x225 (forall ((input.ind-%var1588X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1588X)))
 (= $x116 false)))
 ))
 (let (($x46 (and $x225 $x257)))
 (let (($x11 (= $x46 true)))
 (let ((?x286 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x355 (bvneg ?x286)))
 (let (($x74 (= ?x355 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x74 true)))
 (let (($x205 (= $x63 true)))
 (let (($x195 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x113 (= $x195 true)))
 (let (($x213 (= $x113 true)))
 (let (($x109 (= $x213 true)))
 (let (($x53 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x297 (= $x53 true)))
 (let (($x340 (= $x297 true)))
 (let (($x121 (= $x340 true)))
 (let (($x7 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x343 (= $x7 true)))
 (let (($x16 (= $x343 true)))
 (let (($x110 (= $x16 true)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x248)))
 (let ((?x311 (bvand symbol.1 (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x311)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x80 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x147 (= input.memlabel-mem--symbol.1_end ?x80)))
 (let (($x281 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x218 (and $x281 $x147)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (and $x67 $x218)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x294 (and $x300 $x284)))
 (let (($x182 (not $x294)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x269 (and $x120 $x301)))
 (let (($x189 (and (not $x269) $x182)))
 (let (($x245 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x153 $x245)))
 (let (($x298 (not $x235)))
 (let (($x239 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x199 $x239)))
 (let (($x246 (and (not $x212) $x298)))
 (let (($x185 (and (and (and (and (and (and $x246 $x189) $x211) $x111) $x251) $x201) $x247)))
 (let (($x258 (and $x185 $x144)))
 (let (($x141 (= symbol.1 dst_symbol_addr.1)))
 (let (($x12 (and $x141 $x258)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x66 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x175 (or (bvugt input.memlabel-mem--symbol.1_begin ?x66) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x175) (or $x29 $x180)))))))
 (let (($x349 (and $x190 $x12)))
 (let (($x289 (= $x349 true)))
 (let (($x255 (= $x289 true)))
 (let (($x221 (= $x255 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x152 (bvsub ?x332 ?x96)))
 (let (($x25 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x152) (bvult ?x332 ?x152))))
 (let ((?x162 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvmul (_ bv4 64) ?x162)))
 (let ((?x55 ((_ extract 63 32) ?x68)))
 (let (($x122 (= (_ bv0 32) ?x55)))
 (let (($x90 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x226 (and (and (and true $x90) $x122) $x25)))
 (let (($x94 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x15 (and $x94 $x226)))
 (let (($x9 (= true $x15)))
 (let (($x359 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x359 $x9)))
 (let (($x127 (= $x145 true)))
 (let (($x93 (= $x127 true)))
 (let (($x177 (= $x93 true)))
 (let (($x173 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (= $x173 true)))
 (let (($x14 (= $x102 true)))
 (let (($x158 (= $x14 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x23 true)))
 (let (($x6 (= $x138 true)))
 (let (($x32 (= $x6 true)))
 (let ((?x171 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x171)))
 (let (($x178 (= ?x44 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x78 (= ?x44 input.dst.llvm-%n)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x45 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x70 (= $x45 true)))
 (let (($x42 (= $x70 true)))
 (let (($x167 (= $x42 true)))
 (let (($x51 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x76 (= $x359 true)))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x77 (and $x89 $x34)))
 (let (($x36 (and $x77 $x167)))
 (let (($x131 (and $x36 $x69)))
 (let (($x39 (and $x131 $x154)))
 (let (($x136 (and $x39 $x32)))
 (let (($x95 (and $x136 $x158)))
 (let (($x210 (and $x95 $x177)))
 (let (($x202 (and $x210 $x221)))
 (let (($x313 (and $x202 $x110)))
 (let (($x83 (and $x313 $x121)))
 (let (($x193 (and $x83 $x109)))
 (let (($x236 (and $x193 $x205)))
 (let (($x92 (and $x236 $x11)))
 (let (($x21 (and $x92 $x58)))
 (let (($x206 (and $x21 $x321)))
 (let (($x87 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x164 (and (not $x87) $x206)))
 (let (($x279 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x346 (and $x279 $x164)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x250 (and $x64 $x346)))
 (let (($x268 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x37 (and $x268 $x250)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x24 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x314 (=> (and $x359 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x18 (and $x314 $x37)))
 (let (($x40 (=> $x18 $x165)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (bvule ?x260 (_ bv399 32))))
 (let (($x223 (= $x148 true)))
 (let (($x126 (= $x223 true)))
 (let (($x361 (forall ((input.ind-%var1619X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1619X)))
 (=> $x356 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1619X) (_ bv0 32)))))
 ))
 (let (($x207 (forall ((input.ind-%var1618X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1618X)))
 (= $x356 false)))
 ))
 (let (($x105 (and $x207 $x361)))
 (let (($x30 (= $x105 true)))
 (let (($x271 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let ((?x219 (bvadd symbol.1 (bvmul input.ind-%var1613X (_ bv4 32)))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x219))))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv2 32))) ?x241)))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv3 32))) ?x117)))
 (let ((?x277 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1613X)))
 (let (($x108 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1613X)))
 (=> $x108 (= ?x277 ?x352)))))))))
 ))
 (let (($x56 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var1612X) (bvult input.ind-%var1612X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x108 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1612X)))
 (= $x108 $x220))))
 ))
 (let (($x263 (and $x56 $x271)))
 (let (($x81 (= $x263 true)))
 (let (($x142 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1607X)))
 (=> $x356 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1607X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1606X)))
 (= $x356 false)))
 ))
 (let (($x166 (and $x46 $x142)))
 (let (($x261 (= $x166 true)))
 (let ((?x355 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x355)))
 (let (($x63 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x63 true)))
 (let (($x236 (= $x205 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x343 (bvsub ?x332 ?x96)))
 (let (($x53 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x343) (bvult ?x332 ?x343))))
 (let ((?x255 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x255)))
 (let ((?x202 ((_ extract 63 32) ?x221)))
 (let (($x7 (= (_ bv0 32) ?x202)))
 (let (($x349 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x121 (and (and (and true $x349) $x7) $x53)))
 (let (($x185 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x83 (and $x185 $x121)))
 (let (($x195 (= true $x83)))
 (let (($x275 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (=> $x275 $x195)))
 (let (($x213 (= $x113 true)))
 (let (($x109 (= $x213 true)))
 (let (($x193 (= $x109 true)))
 (let (($x251 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x251 true)))
 (let (($x114 (= $x176 true)))
 (let (($x201 (= $x114 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x281 (= $x67 true)))
 (let (($x80 (= $x281 true)))
 (let (($x147 (= $x80 true)))
 (let (($x211 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x240 (= $x211 true)))
 (let (($x288 (= $x240 true)))
 (let (($x111 (= $x288 true)))
 (let (($x284 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x294 (= $x284 true)))
 (let (($x182 (= $x294 true)))
 (let (($x189 (= $x182 true)))
 (let (($x301 (= $x275 true)))
 (let (($x269 (= $x301 true)))
 (let (($x243 (= $x269 true)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x194)))
 (let ((?x163 (bvand symbol.1 (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x163)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x175 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_end ?x175)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x203 (and $x119 $x52)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x47 $x203)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x145 $x127)))
 (let (($x177 (not $x93)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x226 $x15)))
 (let (($x200 (and (not $x9) $x177)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x149 $x146)))
 (let (($x134 (not $x152)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x68 $x55)))
 (let (($x25 (and (not $x122) $x134)))
 (let (($x212 (and (and (and (and (and (and $x25 $x200) $x160) $x66) $x29) $x180) $x155)))
 (let (($x133 (and $x212 $x72)))
 (let (($x32 (= symbol.1 dst_symbol_addr.1)))
 (let (($x153 (and $x32 $x133)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x95 (or (bvugt input.memlabel-mem--symbol.1_begin ?x102) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x95) (or $x49 $x157)))))))
 (let (($x245 (and $x162 $x153)))
 (let (($x235 (= $x245 true)))
 (let (($x298 (= $x235 true)))
 (let (($x246 (= $x298 true)))
 (let (($x178 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x39 (= $x154 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x42)))
 (let (($x78 (= ?x167 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x36 (= ?x167 input.dst.llvm-%n)))
 (let (($x99 (= $x36 true)))
 (let (($x171 (= $x99 true)))
 (let (($x57 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x45 (and $x51 $x77)))
 (let (($x44 (and $x45 $x171)))
 (let (($x131 (and $x44 $x69)))
 (let (($x23 (and $x131 $x39)))
 (let (($x120 (and $x23 $x246)))
 (let (($x300 (and $x120 $x243)))
 (let (($x183 (and $x300 $x189)))
 (let (($x324 (and $x183 $x111)))
 (let (($x218 (and $x324 $x147)))
 (let (($x227 (and $x218 $x201)))
 (let (($x286 (and $x227 $x193)))
 (let (($x252 (and $x286 $x236)))
 (let (($x85 (and $x252 $x261)))
 (let (($x181 (and $x85 $x81)))
 (let (($x347 (and $x181 $x30)))
 (let (($x326 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x287 (and (not $x326) $x347)))
 (let (($x338 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x139 (and $x338 $x287)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x104 (and $x88 $x139)))
 (let (($x312 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x312 $x104)))
 (let (($x215 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x268 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x215)))))
 (let (($x331 (=> (and $x275 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x215)))))
 (let (($x10 (and $x331 $x266)))
 (let (($x75 (=> $x10 $x126)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x148 (bvule ?x260 (_ bv399 32))))
 (let (($x223 (= $x148 true)))
 (let (($x126 (= $x223 true)))
 (let (($x361 (forall ((input.ind-%var1619X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1619X)))
 (=> $x356 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1619X) (_ bv0 32)))))
 ))
 (let (($x207 (forall ((input.ind-%var1618X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1618X)))
 (= $x356 false)))
 ))
 (let (($x105 (and $x207 $x361)))
 (let (($x30 (= $x105 true)))
 (let (($x271 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let ((?x219 (bvadd symbol.1 (bvmul input.ind-%var1613X (_ bv4 32)))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x219))))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv2 32))) ?x241)))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x219 (_ bv3 32))) ?x117)))
 (let ((?x277 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1613X)))
 (let (($x108 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1613X)))
 (=> $x108 (= ?x277 ?x352)))))))))
 ))
 (let (($x56 (forall ((input.ind-%var1612X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var1612X) (bvult input.ind-%var1612X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x108 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1612X)))
 (= $x108 $x220))))
 ))
 (let (($x263 (and $x56 $x271)))
 (let (($x81 (= $x263 true)))
 (let (($x142 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1607X)))
 (=> $x356 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1607X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var1606X (_ BitVec 32)) )(let (($x356 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1606X)))
 (= $x356 false)))
 ))
 (let (($x166 (and $x46 $x142)))
 (let (($x261 (= $x166 true)))
 (let ((?x355 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x355)))
 (let (($x63 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x63 true)))
 (let (($x236 (= $x205 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x343 (bvsub ?x332 ?x96)))
 (let (($x53 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x343) (bvult ?x332 ?x343))))
 (let ((?x255 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x255)))
 (let ((?x202 ((_ extract 63 32) ?x221)))
 (let (($x7 (= (_ bv0 32) ?x202)))
 (let (($x349 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x121 (and (and (and true $x349) $x7) $x53)))
 (let (($x185 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x83 (and $x185 $x121)))
 (let (($x195 (= true $x83)))
 (let (($x275 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (=> $x275 $x195)))
 (let (($x213 (= $x113 true)))
 (let (($x109 (= $x213 true)))
 (let (($x193 (= $x109 true)))
 (let (($x251 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (= $x251 true)))
 (let (($x114 (= $x176 true)))
 (let (($x201 (= $x114 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x281 (= $x67 true)))
 (let (($x80 (= $x281 true)))
 (let (($x147 (= $x80 true)))
 (let (($x211 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x240 (= $x211 true)))
 (let (($x288 (= $x240 true)))
 (let (($x111 (= $x288 true)))
 (let (($x284 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x294 (= $x284 true)))
 (let (($x182 (= $x294 true)))
 (let (($x189 (= $x182 true)))
 (let (($x301 (= $x275 true)))
 (let (($x269 (= $x301 true)))
 (let (($x243 (= $x269 true)))
 (let ((?x194 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x194)))
 (let ((?x163 (bvand symbol.1 (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x163)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x175 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x52 (= input.memlabel-mem--symbol.1_end ?x175)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x203 (and $x119 $x52)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x47 $x203)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x145 $x127)))
 (let (($x177 (not $x93)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x226 $x15)))
 (let (($x200 (and (not $x9) $x177)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x149 $x146)))
 (let (($x134 (not $x152)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x68 $x55)))
 (let (($x25 (and (not $x122) $x134)))
 (let (($x212 (and (and (and (and (and (and $x25 $x200) $x160) $x66) $x29) $x180) $x155)))
 (let (($x133 (and $x212 $x72)))
 (let (($x32 (= symbol.1 dst_symbol_addr.1)))
 (let (($x153 (and $x32 $x133)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x95 (or (bvugt input.memlabel-mem--symbol.1_begin ?x102) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x95) (or $x49 $x157)))))))
 (let (($x245 (and $x162 $x153)))
 (let (($x235 (= $x245 true)))
 (let (($x298 (= $x235 true)))
 (let (($x246 (= $x298 true)))
 (let (($x178 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x39 (= $x154 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x42)))
 (let (($x78 (= ?x167 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x36 (= ?x167 input.dst.llvm-%n)))
 (let (($x99 (= $x36 true)))
 (let (($x171 (= $x99 true)))
 (let (($x57 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x45 (and $x51 $x77)))
 (let (($x44 (and $x45 $x171)))
 (let (($x131 (and $x44 $x69)))
 (let (($x23 (and $x131 $x39)))
 (let (($x120 (and $x23 $x246)))
 (let (($x300 (and $x120 $x243)))
 (let (($x183 (and $x300 $x189)))
 (let (($x324 (and $x183 $x111)))
 (let (($x218 (and $x324 $x147)))
 (let (($x227 (and $x218 $x201)))
 (let (($x286 (and $x227 $x193)))
 (let (($x252 (and $x286 $x236)))
 (let (($x85 (and $x252 $x261)))
 (let (($x181 (and $x85 $x81)))
 (let (($x347 (and $x181 $x30)))
 (let (($x326 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x287 (and (not $x326) $x347)))
 (let (($x338 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x139 (and $x338 $x287)))
 (let (($x88 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x104 (and $x88 $x139)))
 (let (($x312 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x312 $x104)))
 (let (($x215 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x268 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x215)))))
 (let (($x331 (=> (and $x275 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x215)))))
 (let (($x10 (and $x331 $x266)))
 (let (($x75 (=> $x10 $x126)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x58 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x151 (bvsle ?x58 (_ bv399 32))))
 (let (($x217 (= $x151 true)))
 (let (($x27 (= $x217 true)))
 (let (($x322 (forall ((input.ind-%var1637X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1637X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1637X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var1636X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1636X)))
 (= $x354 false)))
 ))
 (let (($x325 (and $x346 $x322)))
 (let (($x112 (= $x325 true)))
 (let (($x164 (forall ((input.ind-%var1631X (_ BitVec 32)) )(let ((?x130 (bvadd symbol.1 (bvmul input.ind-%var1631X (_ bv4 32)))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x130))))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv2 32))) ?x296)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv3 32))) ?x191)))
 (let ((?x207 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1631X)))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1631X)))
 (=> $x65 (= ?x207 ?x116)))))))))
 ))
 (let (($x271 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x137 (and (bvule (_ bv0 32) input.ind-%var1630X) (bvult input.ind-%var1630X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1630X)))
 (= $x65 $x137))))
 ))
 (let (($x40 (and $x271 $x164)))
 (let (($x306 (= $x40 true)))
 (let (($x197 (forall ((input.ind-%var1625X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1625X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1625X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var1624X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1624X)))
 (= $x354 false)))
 ))
 (let (($x278 (and $x166 $x197)))
 (let (($x219 (= $x278 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x74)))
 (let (($x205 (= ?x63 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x205 true)))
 (let (($x252 (= $x236 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x340 (bvsub ?x332 ?x96)))
 (let (($x313 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x340) (bvult ?x332 ?x340))))
 (let ((?x255 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x255)))
 (let ((?x202 ((_ extract 63 32) ?x221)))
 (let (($x7 (= (_ bv0 32) ?x202)))
 (let (($x297 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x83 (and (and (and true $x297) $x7) $x313)))
 (let (($x144 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x195 (and $x144 $x83)))
 (let (($x113 (= true $x195)))
 (let (($x321 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (=> $x321 $x113)))
 (let (($x109 (= $x213 true)))
 (let (($x193 (= $x109 true)))
 (let (($x286 (= $x193 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x176 true)))
 (let (($x201 (= $x114 true)))
 (let (($x227 (= $x201 true)))
 (let (($x281 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (= $x281 true)))
 (let (($x147 (= $x80 true)))
 (let (($x218 (= $x147 true)))
 (let (($x240 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x288 (= $x240 true)))
 (let (($x111 (= $x288 true)))
 (let (($x324 (= $x111 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x182 (= $x294 true)))
 (let (($x189 (= $x182 true)))
 (let (($x183 (= $x189 true)))
 (let (($x269 (= $x321 true)))
 (let (($x243 (= $x269 true)))
 (let (($x300 (= $x243 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x180)))
 (let ((?x199 (bvand symbol.1 (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x199)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let ((?x47 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x119 (= input.memlabel-mem--symbol.1_end ?x47)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x175 (and $x141 $x119)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x66 $x175)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x145 $x127)))
 (let (($x177 (not $x93)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x15 $x9)))
 (let (($x190 (and (not $x210) $x177)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x149 $x146)))
 (let (($x134 (not $x152)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x55 $x122)))
 (let (($x226 (and (not $x198) $x134)))
 (let (($x133 (and (and (and (and (and (and $x226 $x190) $x160) $x19) $x52) $x29) $x115)))
 (let (($x153 (and $x133 $x239)))
 (let (($x128 (= symbol.1 dst_symbol_addr.1)))
 (let (($x245 (and $x128 $x153)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x140 (or (bvugt input.memlabel-mem--symbol.1_begin ?x158) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x140) (or $x84 $x179)))))))
 (let (($x235 (and $x68 $x245)))
 (let (($x298 (= $x235 true)))
 (let (($x246 (= $x298 true)))
 (let (($x120 (= $x246 true)))
 (let (($x178 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x39 (= $x154 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x42)))
 (let (($x78 (= ?x167 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x36 (= ?x167 input.dst.llvm-%n)))
 (let (($x99 (= $x36 true)))
 (let (($x171 (= $x99 true)))
 (let (($x57 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x45 (and $x51 $x77)))
 (let (($x44 (and $x45 $x171)))
 (let (($x131 (and $x44 $x69)))
 (let (($x23 (and $x131 $x39)))
 (let (($x301 (and $x23 $x120)))
 (let (($x284 (and $x301 $x300)))
 (let (($x211 (and $x284 $x183)))
 (let (($x67 (and $x211 $x324)))
 (let (($x251 (and $x67 $x218)))
 (let (($x311 (and $x251 $x227)))
 (let (($x355 (and $x311 $x286)))
 (let (($x225 (and $x355 $x252)))
 (let (($x244 (and $x225 $x219)))
 (let (($x169 (and $x244 $x306)))
 (let (($x156 (and $x169 $x112)))
 (let (($x360 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x350 (and (not $x360) $x156)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x87 $x350)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x50 (and $x124 $x92)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x33 $x50)))
 (let (($x314 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x312 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x314)))))
 (let (($x103 (=> (and $x321 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x314)))))
 (let (($x310 (and $x103 $x292)))
 (let (($x5 (=> $x310 $x27)))
 (not $x5)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x58 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x151 (bvsle ?x58 (_ bv399 32))))
 (let (($x217 (= $x151 true)))
 (let (($x27 (= $x217 true)))
 (let (($x322 (forall ((input.ind-%var1637X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1637X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1637X) (_ bv0 32)))))
 ))
 (let (($x346 (forall ((input.ind-%var1636X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1636X)))
 (= $x354 false)))
 ))
 (let (($x325 (and $x346 $x322)))
 (let (($x112 (= $x325 true)))
 (let (($x164 (forall ((input.ind-%var1631X (_ BitVec 32)) )(let ((?x130 (bvadd symbol.1 (bvmul input.ind-%var1631X (_ bv4 32)))))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x130))))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv2 32))) ?x296)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x130 (_ bv3 32))) ?x191)))
 (let ((?x207 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1631X)))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1631X)))
 (=> $x65 (= ?x207 ?x116)))))))))
 ))
 (let (($x271 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x137 (and (bvule (_ bv0 32) input.ind-%var1630X) (bvult input.ind-%var1630X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x65 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1630X)))
 (= $x65 $x137))))
 ))
 (let (($x40 (and $x271 $x164)))
 (let (($x306 (= $x40 true)))
 (let (($x197 (forall ((input.ind-%var1625X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1625X)))
 (=> $x354 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1625X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var1624X (_ BitVec 32)) )(let (($x354 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1624X)))
 (= $x354 false)))
 ))
 (let (($x278 (and $x166 $x197)))
 (let (($x219 (= $x278 true)))
 (let ((?x74 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x74)))
 (let (($x205 (= ?x63 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x205 true)))
 (let (($x252 (= $x236 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x340 (bvsub ?x332 ?x96)))
 (let (($x313 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x340) (bvult ?x332 ?x340))))
 (let ((?x255 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x255)))
 (let ((?x202 ((_ extract 63 32) ?x221)))
 (let (($x7 (= (_ bv0 32) ?x202)))
 (let (($x297 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x83 (and (and (and true $x297) $x7) $x313)))
 (let (($x144 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x195 (and $x144 $x83)))
 (let (($x113 (= true $x195)))
 (let (($x321 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (=> $x321 $x113)))
 (let (($x109 (= $x213 true)))
 (let (($x193 (= $x109 true)))
 (let (($x286 (= $x193 true)))
 (let (($x176 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (= $x176 true)))
 (let (($x201 (= $x114 true)))
 (let (($x227 (= $x201 true)))
 (let (($x281 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (= $x281 true)))
 (let (($x147 (= $x80 true)))
 (let (($x218 (= $x147 true)))
 (let (($x240 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x288 (= $x240 true)))
 (let (($x111 (= $x288 true)))
 (let (($x324 (= $x111 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x182 (= $x294 true)))
 (let (($x189 (= $x182 true)))
 (let (($x183 (= $x189 true)))
 (let (($x269 (= $x321 true)))
 (let (($x243 (= $x269 true)))
 (let (($x300 (= $x243 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x180)))
 (let ((?x199 (bvand symbol.1 (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x199)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let ((?x47 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x119 (= input.memlabel-mem--symbol.1_end ?x47)))
 (let (($x141 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x175 (and $x141 $x119)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x66 $x175)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x145 $x127)))
 (let (($x177 (not $x93)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (and $x15 $x9)))
 (let (($x190 (and (not $x210) $x177)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x149 $x146)))
 (let (($x134 (not $x152)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x55 $x122)))
 (let (($x226 (and (not $x198) $x134)))
 (let (($x133 (and (and (and (and (and (and $x226 $x190) $x160) $x19) $x52) $x29) $x115)))
 (let (($x153 (and $x133 $x239)))
 (let (($x128 (= symbol.1 dst_symbol_addr.1)))
 (let (($x245 (and $x128 $x153)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x140 (or (bvugt input.memlabel-mem--symbol.1_begin ?x158) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x140) (or $x84 $x179)))))))
 (let (($x235 (and $x68 $x245)))
 (let (($x298 (= $x235 true)))
 (let (($x246 (= $x298 true)))
 (let (($x120 (= $x246 true)))
 (let (($x178 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x39 (= $x154 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x42)))
 (let (($x78 (= ?x167 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x36 (= ?x167 input.dst.llvm-%n)))
 (let (($x99 (= $x36 true)))
 (let (($x171 (= $x99 true)))
 (let (($x57 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x45 (and $x51 $x77)))
 (let (($x44 (and $x45 $x171)))
 (let (($x131 (and $x44 $x69)))
 (let (($x23 (and $x131 $x39)))
 (let (($x301 (and $x23 $x120)))
 (let (($x284 (and $x301 $x300)))
 (let (($x211 (and $x284 $x183)))
 (let (($x67 (and $x211 $x324)))
 (let (($x251 (and $x67 $x218)))
 (let (($x311 (and $x251 $x227)))
 (let (($x355 (and $x311 $x286)))
 (let (($x225 (and $x355 $x252)))
 (let (($x244 (and $x225 $x219)))
 (let (($x169 (and $x244 $x306)))
 (let (($x156 (and $x169 $x112)))
 (let (($x360 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x350 (and (not $x360) $x156)))
 (let (($x87 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x92 (and $x87 $x350)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x50 (and $x124 $x92)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x292 (and $x33 $x50)))
 (let (($x314 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x312 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x314)))))
 (let (($x103 (=> (and $x321 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x314)))))
 (let (($x310 (and $x103 $x292)))
 (let (($x5 (=> $x310 $x27)))
 (not $x5)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x81 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (bvsge ?x81 (_ bv0 32))))
 (let (($x285 (= $x138 true)))
 (let (($x165 (= $x285 true)))
 (let (($x220 (forall ((input.ind-%var1655X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1655X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1655X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var1654X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1654X)))
 (= $x237 false)))
 ))
 (let (($x170 (and $x139 $x220)))
 (let (($x8 (= $x170 true)))
 (let (($x287 (forall ((input.ind-%var1649X (_ BitVec 32)) )(let ((?x361 (bvadd symbol.1 (bvmul input.ind-%var1649X (_ bv4 32)))))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x361))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv2 32))) ?x108)))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv3 32))) ?x224)))
 (let ((?x346 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1649X)))
 (let (($x97 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1649X)))
 (=> $x97 (= ?x346 ?x356)))))))))
 ))
 (let (($x164 (forall ((input.ind-%var1648X (_ BitVec 32)) )(let (($x276 (and (bvule (_ bv0 32) input.ind-%var1648X) (bvult input.ind-%var1648X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x97 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1648X)))
 (= $x97 $x276))))
 ))
 (let (($x75 (and $x164 $x287)))
 (let (($x341 (= $x75 true)))
 (let (($x105 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1643X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1643X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1642X)))
 (= $x237 false)))
 ))
 (let (($x125 (and $x278 $x105)))
 (let (($x130 (= $x125 true)))
 (let ((?x63 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x63)))
 (let (($x236 (= ?x205 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x236 true)))
 (let (($x225 (= $x252 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x121 (bvsub ?x332 ?x96)))
 (let (($x110 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x121) (bvult ?x332 ?x121))))
 (let ((?x255 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x255)))
 (let ((?x202 ((_ extract 63 32) ?x221)))
 (let (($x7 (= (_ bv0 32) ?x202)))
 (let (($x53 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x195 (and (and (and true $x53) $x7) $x110)))
 (let (($x258 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x113 (and $x258 $x195)))
 (let (($x213 (= true $x113)))
 (let (($x30 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (=> $x30 $x213)))
 (let (($x193 (= $x109 true)))
 (let (($x286 (= $x193 true)))
 (let (($x355 (= $x286 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x201 (= $x114 true)))
 (let (($x227 (= $x201 true)))
 (let (($x311 (= $x227 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x80 true)))
 (let (($x218 (= $x147 true)))
 (let (($x251 (= $x218 true)))
 (let (($x288 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x111 (= $x288 true)))
 (let (($x324 (= $x111 true)))
 (let (($x67 (= $x324 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x182 true)))
 (let (($x183 (= $x189 true)))
 (let (($x211 (= $x183 true)))
 (let (($x243 (= $x30 true)))
 (let (($x300 (= $x243 true)))
 (let (($x284 (= $x300 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x29)))
 (let ((?x194 (bvand symbol.1 (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x194)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let ((?x66 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x141 (= input.memlabel-mem--symbol.1_end ?x66)))
 (let (($x212 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (and $x212 $x141)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x19 $x47)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x145 $x127)))
 (let (($x177 (not $x93)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (and $x9 $x210)))
 (let (($x163 (and (not $x200) $x177)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x149 $x146)))
 (let (($x134 (not $x152)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x122 $x198)))
 (let (($x15 (and (not $x25) $x134)))
 (let (($x153 (and (and (and (and (and (and $x15 $x163) $x160) $x186) $x119) $x52) $x203)))
 (let (($x245 (and $x153 $x72)))
 (let (($x32 (= symbol.1 dst_symbol_addr.1)))
 (let (($x235 (and $x32 $x245)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x94 (or (bvugt input.memlabel-mem--symbol.1_begin ?x91) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x94) (or $x90 $x129)))))))
 (let (($x298 (and $x55 $x235)))
 (let (($x246 (= $x298 true)))
 (let (($x120 (= $x246 true)))
 (let (($x301 (= $x120 true)))
 (let (($x178 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x39 (= $x154 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x42)))
 (let (($x78 (= ?x167 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x36 (= ?x167 input.dst.llvm-%n)))
 (let (($x99 (= $x36 true)))
 (let (($x171 (= $x99 true)))
 (let (($x57 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x45 (and $x51 $x77)))
 (let (($x44 (and $x45 $x171)))
 (let (($x131 (and $x44 $x69)))
 (let (($x23 (and $x131 $x39)))
 (let (($x269 (and $x23 $x301)))
 (let (($x294 (and $x269 $x284)))
 (let (($x240 (and $x294 $x211)))
 (let (($x281 (and $x240 $x67)))
 (let (($x176 (and $x281 $x251)))
 (let (($x247 (and $x176 $x311)))
 (let (($x74 (and $x247 $x355)))
 (let (($x46 (and $x74 $x225)))
 (let (($x159 (and $x46 $x130)))
 (let (($x148 (and $x159 $x341)))
 (let (($x232 (and $x148 $x8)))
 (let (($x192 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x241 (and (not $x192) $x232)))
 (let (($x326 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (and $x326 $x241)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x48 (and $x279 $x85)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x334 (and $x64 $x48)))
 (let (($x331 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x331)))))
 (let (($x342 (=> (and $x30 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x331)))))
 (let (($x37 (and $x342 $x334)))
 (let (($x315 (=> $x37 $x165)))
 (not $x315)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x81 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (bvsge ?x81 (_ bv0 32))))
 (let (($x285 (= $x138 true)))
 (let (($x165 (= $x285 true)))
 (let (($x220 (forall ((input.ind-%var1655X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1655X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1655X) (_ bv0 32)))))
 ))
 (let (($x139 (forall ((input.ind-%var1654X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1654X)))
 (= $x237 false)))
 ))
 (let (($x170 (and $x139 $x220)))
 (let (($x8 (= $x170 true)))
 (let (($x287 (forall ((input.ind-%var1649X (_ BitVec 32)) )(let ((?x361 (bvadd symbol.1 (bvmul input.ind-%var1649X (_ bv4 32)))))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x361))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv2 32))) ?x108)))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x361 (_ bv3 32))) ?x224)))
 (let ((?x346 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1649X)))
 (let (($x97 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1649X)))
 (=> $x97 (= ?x346 ?x356)))))))))
 ))
 (let (($x164 (forall ((input.ind-%var1648X (_ BitVec 32)) )(let (($x276 (and (bvule (_ bv0 32) input.ind-%var1648X) (bvult input.ind-%var1648X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x97 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1648X)))
 (= $x97 $x276))))
 ))
 (let (($x75 (and $x164 $x287)))
 (let (($x341 (= $x75 true)))
 (let (($x105 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1643X)))
 (=> $x237 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1643X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let (($x237 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1642X)))
 (= $x237 false)))
 ))
 (let (($x125 (and $x278 $x105)))
 (let (($x130 (= $x125 true)))
 (let ((?x63 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x63)))
 (let (($x236 (= ?x205 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x236 true)))
 (let (($x225 (= $x252 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x121 (bvsub ?x332 ?x96)))
 (let (($x110 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x121) (bvult ?x332 ?x121))))
 (let ((?x255 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x221 (bvmul (_ bv4 64) ?x255)))
 (let ((?x202 ((_ extract 63 32) ?x221)))
 (let (($x7 (= (_ bv0 32) ?x202)))
 (let (($x53 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x195 (and (and (and true $x53) $x7) $x110)))
 (let (($x258 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x113 (and $x258 $x195)))
 (let (($x213 (= true $x113)))
 (let (($x30 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (=> $x30 $x213)))
 (let (($x193 (= $x109 true)))
 (let (($x286 (= $x193 true)))
 (let (($x355 (= $x286 true)))
 (let (($x114 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x201 (= $x114 true)))
 (let (($x227 (= $x201 true)))
 (let (($x311 (= $x227 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x80 true)))
 (let (($x218 (= $x147 true)))
 (let (($x251 (= $x218 true)))
 (let (($x288 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x111 (= $x288 true)))
 (let (($x324 (= $x111 true)))
 (let (($x67 (= $x324 true)))
 (let (($x182 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x182 true)))
 (let (($x183 (= $x189 true)))
 (let (($x211 (= $x183 true)))
 (let (($x243 (= $x30 true)))
 (let (($x300 (= $x243 true)))
 (let (($x284 (= $x300 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x29)))
 (let ((?x194 (bvand symbol.1 (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x194)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let ((?x66 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x141 (= input.memlabel-mem--symbol.1_end ?x66)))
 (let (($x212 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x47 (and $x212 $x141)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x19 $x47)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x145 $x127)))
 (let (($x177 (not $x93)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (and $x9 $x210)))
 (let (($x163 (and (not $x200) $x177)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x149 $x146)))
 (let (($x134 (not $x152)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x122 $x198)))
 (let (($x15 (and (not $x25) $x134)))
 (let (($x153 (and (and (and (and (and (and $x15 $x163) $x160) $x186) $x119) $x52) $x203)))
 (let (($x245 (and $x153 $x72)))
 (let (($x32 (= symbol.1 dst_symbol_addr.1)))
 (let (($x235 (and $x32 $x245)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x94 (or (bvugt input.memlabel-mem--symbol.1_begin ?x91) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x94) (or $x90 $x129)))))))
 (let (($x298 (and $x55 $x235)))
 (let (($x246 (= $x298 true)))
 (let (($x120 (= $x246 true)))
 (let (($x301 (= $x120 true)))
 (let (($x178 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x22 (= $x178 true)))
 (let (($x154 (= $x22 true)))
 (let (($x39 (= $x154 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x42)))
 (let (($x78 (= ?x167 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x36 (= ?x167 input.dst.llvm-%n)))
 (let (($x99 (= $x36 true)))
 (let (($x171 (= $x99 true)))
 (let (($x57 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x45 (and $x51 $x77)))
 (let (($x44 (and $x45 $x171)))
 (let (($x131 (and $x44 $x69)))
 (let (($x23 (and $x131 $x39)))
 (let (($x269 (and $x23 $x301)))
 (let (($x294 (and $x269 $x284)))
 (let (($x240 (and $x294 $x211)))
 (let (($x281 (and $x240 $x67)))
 (let (($x176 (and $x281 $x251)))
 (let (($x247 (and $x176 $x311)))
 (let (($x74 (and $x247 $x355)))
 (let (($x46 (and $x74 $x225)))
 (let (($x159 (and $x46 $x130)))
 (let (($x148 (and $x159 $x341)))
 (let (($x232 (and $x148 $x8)))
 (let (($x192 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x241 (and (not $x192) $x232)))
 (let (($x326 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x85 (and $x326 $x241)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x48 (and $x279 $x85)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x334 (and $x64 $x48)))
 (let (($x331 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x33 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x331)))))
 (let (($x342 (=> (and $x30 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x331)))))
 (let (($x37 (and $x342 $x334)))
 (let (($x315 (=> $x37 $x165)))
 (not $x315)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x136 (bvule ?x306 input.dst.llvm-%n)))
 (let (($x265 (= $x136 true)))
 (let (($x126 (= $x265 true)))
 (let (($x137 (forall ((input.ind-%var1673X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1673X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1673X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var1672X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1672X)))
 (= $x352 false)))
 ))
 (let (($x260 (and $x92 $x137)))
 (let (($x233 (= $x260 true)))
 (let (($x350 (forall ((input.ind-%var1667X (_ BitVec 32)) )(let ((?x322 (bvadd symbol.1 (bvmul input.ind-%var1667X (_ bv4 32)))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x322))))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv2 32))) ?x65)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv3 32))) ?x329)))
 (let ((?x139 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1667X)))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1667X)))
 (=> $x263 (= ?x139 ?x354)))))))))
 ))
 (let (($x287 (forall ((input.ind-%var1666X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1666X) (bvult input.ind-%var1666X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1666X)))
 (= $x263 $x257))))
 ))
 (let (($x5 (and $x287 $x350)))
 (let (($x204 (= $x5 true)))
 (let (($x325 (forall ((input.ind-%var1661X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1661X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1661X) (_ bv0 32)))))
 ))
 (let (($x125 (forall ((input.ind-%var1660X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1660X)))
 (= $x352 false)))
 ))
 (let (($x333 (and $x125 $x325)))
 (let (($x361 (= $x333 true)))
 (let ((?x205 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x205)))
 (let (($x252 (= ?x236 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x252 true)))
 (let (($x46 (= $x225 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x42)))
 (let (($x286 (= ?x167 input.dst.llvm-%n)))
 (let (($x355 (= $x286 true)))
 (let (($x74 (= $x355 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x255 (bvsub ?x332 ?x96)))
 (let (($x83 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x255) (bvult ?x332 ?x255))))
 (let ((?x297 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x297)))
 (let ((?x313 ((_ extract 63 32) ?x53)))
 (let (($x289 (= (_ bv0 32) ?x313)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x340 (and (and (and true $x248) $x289) $x83)))
 (let (($x247 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x343 (and $x247 $x340)))
 (let (($x110 (= true $x343)))
 (let (($x112 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (=> $x112 $x110)))
 (let (($x113 (= $x195 true)))
 (let (($x213 (= $x113 true)))
 (let (($x109 (= $x213 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x251 (= $x218 true)))
 (let (($x176 (= $x251 true)))
 (let (($x114 (= $x176 true)))
 (let (($x324 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x67 (= $x324 true)))
 (let (($x281 (= $x67 true)))
 (let (($x80 (= $x281 true)))
 (let (($x183 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x211 (= $x183 true)))
 (let (($x240 (= $x211 true)))
 (let (($x288 (= $x240 true)))
 (let (($x300 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x284 (= $x300 true)))
 (let (($x294 (= $x284 true)))
 (let (($x182 (= $x294 true)))
 (let (($x120 (= $x112 true)))
 (let (($x301 (= $x120 true)))
 (let (($x269 (= $x301 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x47)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x66)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x115 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x155 (= input.memlabel-mem--symbol.1_end ?x115)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x186 (and $x160 $x155)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x199 $x186)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (and $x9 $x210)))
 (let (($x190 (not $x200)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x152 $x134)))
 (let (($x127 (and (not $x15) $x190)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x122 $x198)))
 (let (($x226 (not $x25)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x55 $x14)))
 (let (($x146 (and (not $x32) $x226)))
 (let (($x203 (and (and (and (and (and (and $x146 $x127) $x93) $x163) $x133) $x212) $x141)))
 (let (($x153 (and $x203 $x119)))
 (let (($x39 (= symbol.1 dst_symbol_addr.1)))
 (let (($x29 (and $x39 $x153)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x140 (or (bvugt input.memlabel-mem--symbol.1_begin ?x95) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x140) (or $x157 $x90)))))))
 (let (($x72 (and $x173 $x29)))
 (let (($x245 (= $x72 true)))
 (let (($x235 (= $x245 true)))
 (let (($x298 (= $x235 true)))
 (let (($x78 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x131 (= $x69 true)))
 (let (($x36 (= ?x167 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (= $x36 true)))
 (let (($x171 (= $x99 true)))
 (let (($x57 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x45 (and $x51 $x77)))
 (let (($x44 (and $x45 $x171)))
 (let (($x178 (and $x44 $x131)))
 (let (($x246 (and $x178 $x298)))
 (let (($x243 (and $x246 $x269)))
 (let (($x189 (and $x243 $x182)))
 (let (($x111 (and $x189 $x288)))
 (let (($x147 (and $x111 $x80)))
 (let (($x201 (and $x147 $x114)))
 (let (($x193 (and $x201 $x109)))
 (let (($x63 (and $x193 $x74)))
 (let (($x166 (and $x63 $x46)))
 (let (($x249 (and $x166 $x361)))
 (let (($x151 (and $x249 $x204)))
 (let (($x223 (and $x151 $x233)))
 (let (($x250 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x296 (and (not $x250) $x223)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and $x360 $x296)))
 (let (($x338 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x242 (and $x338 $x244)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x216 (and $x88 $x242)))
 (let (($x103 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x64 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x174 (=> (and $x112 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x103)))))
 (let (($x266 (and $x174 $x216)))
 (let (($x26 (=> $x266 $x126)))
 (not $x26)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x136 (bvule ?x306 input.dst.llvm-%n)))
 (let (($x265 (= $x136 true)))
 (let (($x126 (= $x265 true)))
 (let (($x137 (forall ((input.ind-%var1673X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1673X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1673X) (_ bv0 32)))))
 ))
 (let (($x92 (forall ((input.ind-%var1672X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1672X)))
 (= $x352 false)))
 ))
 (let (($x260 (and $x92 $x137)))
 (let (($x233 (= $x260 true)))
 (let (($x350 (forall ((input.ind-%var1667X (_ BitVec 32)) )(let ((?x322 (bvadd symbol.1 (bvmul input.ind-%var1667X (_ bv4 32)))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x322))))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv2 32))) ?x65)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x322 (_ bv3 32))) ?x329)))
 (let ((?x139 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1667X)))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1667X)))
 (=> $x263 (= ?x139 ?x354)))))))))
 ))
 (let (($x287 (forall ((input.ind-%var1666X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1666X) (bvult input.ind-%var1666X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x263 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1666X)))
 (= $x263 $x257))))
 ))
 (let (($x5 (and $x287 $x350)))
 (let (($x204 (= $x5 true)))
 (let (($x325 (forall ((input.ind-%var1661X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1661X)))
 (=> $x352 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1661X) (_ bv0 32)))))
 ))
 (let (($x125 (forall ((input.ind-%var1660X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1660X)))
 (= $x352 false)))
 ))
 (let (($x333 (and $x125 $x325)))
 (let (($x361 (= $x333 true)))
 (let ((?x205 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x205)))
 (let (($x252 (= ?x236 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x252 true)))
 (let (($x46 (= $x225 true)))
 (let ((?x42 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x167 (bvneg ?x42)))
 (let (($x286 (= ?x167 input.dst.llvm-%n)))
 (let (($x355 (= $x286 true)))
 (let (($x74 (= $x355 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x255 (bvsub ?x332 ?x96)))
 (let (($x83 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x255) (bvult ?x332 ?x255))))
 (let ((?x297 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x297)))
 (let ((?x313 ((_ extract 63 32) ?x53)))
 (let (($x289 (= (_ bv0 32) ?x313)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x340 (and (and (and true $x248) $x289) $x83)))
 (let (($x247 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x343 (and $x247 $x340)))
 (let (($x110 (= true $x343)))
 (let (($x112 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (=> $x112 $x110)))
 (let (($x113 (= $x195 true)))
 (let (($x213 (= $x113 true)))
 (let (($x109 (= $x213 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x251 (= $x218 true)))
 (let (($x176 (= $x251 true)))
 (let (($x114 (= $x176 true)))
 (let (($x324 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x67 (= $x324 true)))
 (let (($x281 (= $x67 true)))
 (let (($x80 (= $x281 true)))
 (let (($x183 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x211 (= $x183 true)))
 (let (($x240 (= $x211 true)))
 (let (($x288 (= $x240 true)))
 (let (($x300 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x284 (= $x300 true)))
 (let (($x294 (= $x284 true)))
 (let (($x182 (= $x294 true)))
 (let (($x120 (= $x112 true)))
 (let (($x301 (= $x120 true)))
 (let (($x269 (= $x301 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x47)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x66)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x115 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x155 (= input.memlabel-mem--symbol.1_end ?x115)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x186 (and $x160 $x155)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x199 $x186)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (and $x9 $x210)))
 (let (($x190 (not $x200)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x152 $x134)))
 (let (($x127 (and (not $x15) $x190)))
 (let (($x198 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x122 $x198)))
 (let (($x226 (not $x25)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x55 $x14)))
 (let (($x146 (and (not $x32) $x226)))
 (let (($x203 (and (and (and (and (and (and $x146 $x127) $x93) $x163) $x133) $x212) $x141)))
 (let (($x153 (and $x203 $x119)))
 (let (($x39 (= symbol.1 dst_symbol_addr.1)))
 (let (($x29 (and $x39 $x153)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x140 (or (bvugt input.memlabel-mem--symbol.1_begin ?x95) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x140) (or $x157 $x90)))))))
 (let (($x72 (and $x173 $x29)))
 (let (($x245 (= $x72 true)))
 (let (($x235 (= $x245 true)))
 (let (($x298 (= $x235 true)))
 (let (($x78 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x131 (= $x69 true)))
 (let (($x36 (= ?x167 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x99 (= $x36 true)))
 (let (($x171 (= $x99 true)))
 (let (($x57 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x51 (= $x79 true)))
 (let (($x45 (and $x51 $x77)))
 (let (($x44 (and $x45 $x171)))
 (let (($x178 (and $x44 $x131)))
 (let (($x246 (and $x178 $x298)))
 (let (($x243 (and $x246 $x269)))
 (let (($x189 (and $x243 $x182)))
 (let (($x111 (and $x189 $x288)))
 (let (($x147 (and $x111 $x80)))
 (let (($x201 (and $x147 $x114)))
 (let (($x193 (and $x201 $x109)))
 (let (($x63 (and $x193 $x74)))
 (let (($x166 (and $x63 $x46)))
 (let (($x249 (and $x166 $x361)))
 (let (($x151 (and $x249 $x204)))
 (let (($x223 (and $x151 $x233)))
 (let (($x250 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x296 (and (not $x250) $x223)))
 (let (($x360 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x244 (and $x360 $x296)))
 (let (($x338 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x242 (and $x338 $x244)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x216 (and $x88 $x242)))
 (let (($x103 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x64 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x103)))))
 (let (($x174 (=> (and $x112 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x103)))))
 (let (($x266 (and $x174 $x216)))
 (let (($x26 (=> $x266 $x126)))
 (not $x26)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x305 (forall ((input.ind-%var1699X (_ BitVec 32)) )(let ((?x220 (bvadd symbol.1 (bvmul input.ind-%var1699X (_ bv4 32)))))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x103 (bvadd ?x332 (_ bv3 32))))
 (let ((?x336 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x20 (store ?x336 (bvadd ?x332 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x302 (store ?x20 (bvadd ?x332 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x309 (store ?x302 ?x103 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x351 (concat (select ?x309 (bvadd ?x220 (_ bv2 32))) (concat (select ?x309 (bvadd ?x220 (_ bv1 32))) (select ?x309 ?x220)))))
 (let ((?x92 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1699X)))
 (let (($x303 (= input.ind-%var1699X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x282 (= (ite $x303 input.spec-%var-i-0.L3%6%bbentry ?x92) (concat (select ?x309 (bvadd ?x220 (_ bv3 32))) ?x351))))
 (let (($x40 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1699X)))
 (let (($x256 (or $x40 $x303)))
 (=> $x256 $x282))))))))))))))))
 ))
 (let (($x228 (forall ((input.ind-%var1698X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1698X)))
 (let (($x348 (and $x354 (bvult input.ind-%var1698X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x303 (= input.ind-%var1698X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x40 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1698X)))
 (let (($x256 (or $x40 $x303)))
 (= $x256 $x348)))))))
 ))
 (let (($x293 (and $x228 $x305)))
 (let (($x341 (= true true)))
 (let (($x238 (and $x341 $x293)))
 (let (($x143 (= $x238 true)))
 (let (($x276 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1691X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1691X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var1690X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1690X)))
 (= $x116 false)))
 ))
 (let (($x58 (and $x85 $x276)))
 (let (($x13 (= $x58 true)))
 (let (($x241 (forall ((input.ind-%var1685X (_ BitVec 32)) )(let ((?x220 (bvadd symbol.1 (bvmul input.ind-%var1685X (_ bv4 32)))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x220))))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv2 32))) ?x97)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv3 32))) ?x17)))
 (let ((?x92 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1685X)))
 (let (($x40 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1685X)))
 (=> $x40 (= ?x92 ?x237)))))))))
 ))
 (let (($x350 (forall ((input.ind-%var1684X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1684X)))
 (let (($x40 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1684X)))
 (= $x40 (and $x354 (bvult input.ind-%var1684X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x315 (and $x350 $x241)))
 (let (($x267 (= $x315 true)))
 (let (($x170 (forall ((input.ind-%var1679X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1679X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1679X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1678X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1678X)))
 (= $x116 false)))
 ))
 (let (($x21 (and $x333 $x170)))
 (let (($x322 (= $x21 true)))
 (let ((?x236 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x236)))
 (let (($x225 (= ?x252 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x225 true)))
 (let (($x166 (= $x46 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x7)))
 (let ((?x255 (bvand symbol.1 (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x255)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x297 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x53 (= input.memlabel-mem--symbol.1_end ?x297)))
 (let (($x349 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x313 (and $x349 $x53)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x16 $x313)))
 (let (($x248 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x311 (and $x201 $x227)))
 (let (($x247 (not $x311)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x114 (and $x251 $x176)))
 (let (($x185 (and (not $x114) $x247)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x324 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x324 $x67)))
 (let (($x80 (not $x281)))
 (let (($x288 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x240 $x288)))
 (let (($x218 (and (not $x111) $x80)))
 (let (($x213 (and (and (and (and (and (and $x218 $x185) $x258) $x248) $x289) $x221) $x202)))
 (let (($x109 (and $x213 $x83)))
 (let (($x153 (= symbol.1 dst_symbol_addr.1)))
 (let (($x193 (and $x153 $x109)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x245 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x246 (or (bvugt input.memlabel-mem--symbol.1_begin ?x245) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x246) (or $x243 $x300)))))))
 (let (($x286 (and $x211 $x193)))
 (let (($x355 (= $x286 true)))
 (let (($x74 (= $x355 true)))
 (let (($x63 (= $x74 true)))
 (let (($x212 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x194 (= $x212 true)))
 (let (($x66 (= $x194 true)))
 (let (($x141 (= $x66 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x127 (bvsub ?x332 ?x96)))
 (let (($x177 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x127) (bvult ?x332 ?x127))))
 (let ((?x9 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x210 (bvmul (_ bv4 64) ?x9)))
 (let ((?x200 ((_ extract 63 32) ?x210)))
 (let (($x190 (= (_ bv0 32) ?x200)))
 (let (($x15 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x199 (and (and (and true $x15) $x190) $x177)))
 (let (($x25 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x160 (and $x25 $x199)))
 (let (($x115 (= true $x160)))
 (let (($x8 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x155 (=> $x8 $x115)))
 (let (($x186 (= $x155 true)))
 (let (($x133 (= $x186 true)))
 (let (($x239 (= $x133 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x55 (= $x39 true)))
 (let (($x14 (= $x55 true)))
 (let (($x32 (= $x14 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x162 (= $x129 true)))
 (let (($x6 (= $x162 true)))
 (let (($x173 (= $x6 true)))
 (let (($x94 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x157 (= $x94 true)))
 (let (($x84 (= $x157 true)))
 (let (($x90 (= $x84 true)))
 (let (($x95 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x128 (= $x95 true)))
 (let (($x91 (= $x128 true)))
 (let (($x140 (= $x91 true)))
 (let (($x131 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x178 (= $x131 true)))
 (let (($x23 (= $x178 true)))
 (let (($x158 (= $x23 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x171 true)))
 (let (($x78 (= $x44 true)))
 (let (($x59 (= $x78 true)))
 (let (($x70 (= $x8 true)))
 (let (($x42 (= $x70 true)))
 (let (($x167 (= $x42 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x62)))
 (let (($x35 (= ?x89 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x79 (= ?x89 input.dst.llvm-%n)))
 (let (($x51 (= $x79 true)))
 (let (($x57 (= $x51 true)))
 (let (($x45 (and $x57 $x77)))
 (let (($x36 (and $x45 $x167)))
 (let (($x69 (and $x36 $x59)))
 (let (($x68 (and $x69 $x158)))
 (let (($x49 (and $x68 $x140)))
 (let (($x179 (and $x49 $x90)))
 (let (($x154 (and $x179 $x173)))
 (let (($x149 (and $x154 $x32)))
 (let (($x19 (and $x149 $x239)))
 (let (($x203 (and $x19 $x141)))
 (let (($x205 (and $x203 $x63)))
 (let (($x278 (and $x205 $x166)))
 (let (($x339 (and $x278 $x322)))
 (let (($x138 (and $x339 $x267)))
 (let (($x217 (and $x138 $x13)))
 (let (($x104 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and (not $x104) $x217)))
 (let (($x192 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x192 $x108)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x206 (and $x87 $x159)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x61 (and $x124 $x206)))
 (let (($x342 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x88 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x342)))))
 (let (($x196 (=> (and $x8 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x342)))))
 (let (($x292 (and $x196 $x61)))
 (let (($x283 (=> $x292 $x143)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x305 (forall ((input.ind-%var1699X (_ BitVec 32)) )(let ((?x220 (bvadd symbol.1 (bvmul input.ind-%var1699X (_ bv4 32)))))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x103 (bvadd ?x332 (_ bv3 32))))
 (let ((?x336 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x332 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x20 (store ?x336 (bvadd ?x332 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x302 (store ?x20 (bvadd ?x332 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x309 (store ?x302 ?x103 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x351 (concat (select ?x309 (bvadd ?x220 (_ bv2 32))) (concat (select ?x309 (bvadd ?x220 (_ bv1 32))) (select ?x309 ?x220)))))
 (let ((?x92 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1699X)))
 (let (($x303 (= input.ind-%var1699X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x282 (= (ite $x303 input.spec-%var-i-0.L3%6%bbentry ?x92) (concat (select ?x309 (bvadd ?x220 (_ bv3 32))) ?x351))))
 (let (($x40 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1699X)))
 (let (($x256 (or $x40 $x303)))
 (=> $x256 $x282))))))))))))))))
 ))
 (let (($x228 (forall ((input.ind-%var1698X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1698X)))
 (let (($x348 (and $x354 (bvult input.ind-%var1698X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x303 (= input.ind-%var1698X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x40 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1698X)))
 (let (($x256 (or $x40 $x303)))
 (= $x256 $x348)))))))
 ))
 (let (($x293 (and $x228 $x305)))
 (let (($x341 (= true true)))
 (let (($x238 (and $x341 $x293)))
 (let (($x143 (= $x238 true)))
 (let (($x276 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1691X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1691X) (_ bv0 32)))))
 ))
 (let (($x85 (forall ((input.ind-%var1690X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1690X)))
 (= $x116 false)))
 ))
 (let (($x58 (and $x85 $x276)))
 (let (($x13 (= $x58 true)))
 (let (($x241 (forall ((input.ind-%var1685X (_ BitVec 32)) )(let ((?x220 (bvadd symbol.1 (bvmul input.ind-%var1685X (_ bv4 32)))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x220))))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv2 32))) ?x97)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x220 (_ bv3 32))) ?x17)))
 (let ((?x92 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1685X)))
 (let (($x40 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1685X)))
 (=> $x40 (= ?x92 ?x237)))))))))
 ))
 (let (($x350 (forall ((input.ind-%var1684X (_ BitVec 32)) )(let (($x354 (bvule (_ bv0 32) input.ind-%var1684X)))
 (let (($x40 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1684X)))
 (= $x40 (and $x354 (bvult input.ind-%var1684X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x315 (and $x350 $x241)))
 (let (($x267 (= $x315 true)))
 (let (($x170 (forall ((input.ind-%var1679X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1679X)))
 (=> $x116 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1679X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1678X (_ BitVec 32)) )(let (($x116 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1678X)))
 (= $x116 false)))
 ))
 (let (($x21 (and $x333 $x170)))
 (let (($x322 (= $x21 true)))
 (let ((?x236 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x252 (bvneg ?x236)))
 (let (($x225 (= ?x252 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x225 true)))
 (let (($x166 (= $x46 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x7)))
 (let ((?x255 (bvand symbol.1 (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x255)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x297 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x53 (= input.memlabel-mem--symbol.1_end ?x297)))
 (let (($x349 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x313 (and $x349 $x53)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x16 $x313)))
 (let (($x248 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x311 (and $x201 $x227)))
 (let (($x247 (not $x311)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x114 (and $x251 $x176)))
 (let (($x185 (and (not $x114) $x247)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x324 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x324 $x67)))
 (let (($x80 (not $x281)))
 (let (($x288 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x240 $x288)))
 (let (($x218 (and (not $x111) $x80)))
 (let (($x213 (and (and (and (and (and (and $x218 $x185) $x258) $x248) $x289) $x221) $x202)))
 (let (($x109 (and $x213 $x83)))
 (let (($x153 (= symbol.1 dst_symbol_addr.1)))
 (let (($x193 (and $x153 $x109)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x245 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x246 (or (bvugt input.memlabel-mem--symbol.1_begin ?x245) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x246) (or $x243 $x300)))))))
 (let (($x286 (and $x211 $x193)))
 (let (($x355 (= $x286 true)))
 (let (($x74 (= $x355 true)))
 (let (($x63 (= $x74 true)))
 (let (($x212 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x194 (= $x212 true)))
 (let (($x66 (= $x194 true)))
 (let (($x141 (= $x66 true)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let ((?x127 (bvsub ?x332 ?x96)))
 (let (($x177 (ite (bvsge ?x96 (_ bv0 32)) (bvuge ?x332 ?x127) (bvult ?x332 ?x127))))
 (let ((?x9 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x210 (bvmul (_ bv4 64) ?x9)))
 (let ((?x200 ((_ extract 63 32) ?x210)))
 (let (($x190 (= (_ bv0 32) ?x200)))
 (let (($x15 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x199 (and (and (and true $x15) $x190) $x177)))
 (let (($x25 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x160 (and $x25 $x199)))
 (let (($x115 (= true $x160)))
 (let (($x8 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x155 (=> $x8 $x115)))
 (let (($x186 (= $x155 true)))
 (let (($x133 (= $x186 true)))
 (let (($x239 (= $x133 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x55 (= $x39 true)))
 (let (($x14 (= $x55 true)))
 (let (($x32 (= $x14 true)))
 (let (($x129 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x162 (= $x129 true)))
 (let (($x6 (= $x162 true)))
 (let (($x173 (= $x6 true)))
 (let (($x94 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x157 (= $x94 true)))
 (let (($x84 (= $x157 true)))
 (let (($x90 (= $x84 true)))
 (let (($x95 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x128 (= $x95 true)))
 (let (($x91 (= $x128 true)))
 (let (($x140 (= $x91 true)))
 (let (($x131 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x178 (= $x131 true)))
 (let (($x23 (= $x178 true)))
 (let (($x158 (= $x23 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x171 true)))
 (let (($x78 (= $x44 true)))
 (let (($x59 (= $x78 true)))
 (let (($x70 (= $x8 true)))
 (let (($x42 (= $x70 true)))
 (let (($x167 (= $x42 true)))
 (let ((?x62 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x62)))
 (let (($x35 (= ?x89 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x34 (= $x35 true)))
 (let (($x77 (= $x34 true)))
 (let (($x79 (= ?x89 input.dst.llvm-%n)))
 (let (($x51 (= $x79 true)))
 (let (($x57 (= $x51 true)))
 (let (($x45 (and $x57 $x77)))
 (let (($x36 (and $x45 $x167)))
 (let (($x69 (and $x36 $x59)))
 (let (($x68 (and $x69 $x158)))
 (let (($x49 (and $x68 $x140)))
 (let (($x179 (and $x49 $x90)))
 (let (($x154 (and $x179 $x173)))
 (let (($x149 (and $x154 $x32)))
 (let (($x19 (and $x149 $x239)))
 (let (($x203 (and $x19 $x141)))
 (let (($x205 (and $x203 $x63)))
 (let (($x278 (and $x205 $x166)))
 (let (($x339 (and $x278 $x322)))
 (let (($x138 (and $x339 $x267)))
 (let (($x217 (and $x138 $x13)))
 (let (($x104 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and (not $x104) $x217)))
 (let (($x192 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x159 (and $x192 $x108)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x206 (and $x87 $x159)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x61 (and $x124 $x206)))
 (let (($x342 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x88 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x342)))))
 (let (($x196 (=> (and $x8 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x342)))))
 (let (($x292 (and $x196 $x61)))
 (let (($x283 (=> $x292 $x143)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x233 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x336 (not $x233)))
 (let (($x330 (= $x336 false)))
 (let (($x254 (= $x330 true)))
 (let (($x60 (forall ((input.ind-%var1717X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1717X)))
 (=> $x110 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1717X) (_ bv0 32)))))
 ))
 (let (($x206 (forall ((input.ind-%var1716X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1716X)))
 (= $x110 false)))
 ))
 (let (($x100 (and $x206 $x60)))
 (let (($x348 (= $x100 true)))
 (let (($x85 (forall ((input.ind-%var1711X (_ BitVec 32)) )(let ((?x148 (bvadd symbol.1 (bvmul input.ind-%var1711X (_ bv4 32)))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x148))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv2 32))) ?x97)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv3 32))) ?x197)))
 (let ((?x287 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1711X)))
 (let (($x74 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1711X)))
 (=> $x74 (= ?x287 ?x315)))))))))
 ))
 (let (($x116 (forall ((input.ind-%var1710X (_ BitVec 32)) )(let (($x278 (and (bvule (_ bv0 32) input.ind-%var1710X) (bvult input.ind-%var1710X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x74 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1710X)))
 (= $x74 $x278))))
 ))
 (let (($x276 (and $x116 $x85)))
 (let (($x58 (= $x276 true)))
 (let (($x7 (forall ((input.ind-%var1705X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1705X)))
 (=> $x110 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1705X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var1704X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1704X)))
 (= $x110 false)))
 ))
 (let (($x83 (and $x53 $x7)))
 (let (($x109 (= $x83 true)))
 (let ((?x227 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x311 (bvneg ?x227)))
 (let (($x247 (= ?x311 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x247 true)))
 (let (($x340 (= $x185 true)))
 (let ((?x70 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x70)))
 (let (($x176 (= ?x42 input.dst.llvm-%n)))
 (let (($x114 (= $x176 true)))
 (let (($x144 (= $x114 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x281 (= $x67 true)))
 (let (($x80 (= $x281 true)))
 (let (($x218 (= $x80 true)))
 (let (($x240 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x288 (= $x240 true)))
 (let (($x111 (= $x288 true)))
 (let (($x147 (= $x111 true)))
 (let (($x182 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x182 true)))
 (let (($x211 (= $x189 true)))
 (let (($x119 (= $x211 true)))
 (let (($x243 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x269 (= $x243 true)))
 (let (($x300 (= $x269 true)))
 (let (($x284 (= $x300 true)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x19)))
 (let ((?x133 (bvand symbol.1 (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x133)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x177 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x199 (= input.memlabel-mem--symbol.1_end ?x177)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x160 (and $x175 $x199)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x93 $x160)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x163 $x145)))
 (let (($x210 (not $x9)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x152 $x134)))
 (let (($x190 (and (not $x15) $x210)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x149 $x122)))
 (let (($x25 (not $x198)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x55 $x14)))
 (let (($x226 (and (not $x32) $x25)))
 (let (($x72 (and (and (and (and (and (and $x226 $x190) $x52) $x127) $x115) $x186) $x239)))
 (let (($x183 (and $x72 $x212)))
 (let (($x158 (= symbol.1 dst_symbol_addr.1)))
 (let (($x245 (and $x158 $x183)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x128) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x90 $x179)))))))
 (let (($x235 (and $x39 $x245)))
 (let (($x298 (= $x235 true)))
 (let (($x246 (= $x298 true)))
 (let (($x120 (= $x246 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x78 (= $x44 true)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x167 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (= $x167 true)))
 (let (($x99 (= $x36 true)))
 (let (($x51 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x76 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x77 (and $x79 $x34)))
 (let (($x171 (and $x77 $x99)))
 (let (($x131 (and $x171 $x69)))
 (let (($x301 (and $x131 $x120)))
 (let (($x294 (and $x301 $x284)))
 (let (($x153 (and $x294 $x119)))
 (let (($x324 (and $x153 $x147)))
 (let (($x251 (and $x324 $x218)))
 (let (($x201 (and $x251 $x144)))
 (let (($x258 (and $x201 $x340)))
 (let (($x193 (and $x258 $x109)))
 (let (($x13 (and $x193 $x58)))
 (let (($x327 (and $x13 $x348)))
 (let (($x250 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x228 (and $x250 $x327)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x326 $x228)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x187 (and $x279 $x208)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let (($x174 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x174)))))
 (let (($x24 (=> (and $x233 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x174)))))
 (let (($x229 (and $x24 $x187)))
 (let (($x20 (=> $x229 $x254)))
 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x233 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x336 (not $x233)))
 (let (($x330 (= $x336 false)))
 (let (($x254 (= $x330 true)))
 (let (($x60 (forall ((input.ind-%var1717X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1717X)))
 (=> $x110 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1717X) (_ bv0 32)))))
 ))
 (let (($x206 (forall ((input.ind-%var1716X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1716X)))
 (= $x110 false)))
 ))
 (let (($x100 (and $x206 $x60)))
 (let (($x348 (= $x100 true)))
 (let (($x85 (forall ((input.ind-%var1711X (_ BitVec 32)) )(let ((?x148 (bvadd symbol.1 (bvmul input.ind-%var1711X (_ bv4 32)))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x148))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv2 32))) ?x97)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv3 32))) ?x197)))
 (let ((?x287 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1711X)))
 (let (($x74 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1711X)))
 (=> $x74 (= ?x287 ?x315)))))))))
 ))
 (let (($x116 (forall ((input.ind-%var1710X (_ BitVec 32)) )(let (($x278 (and (bvule (_ bv0 32) input.ind-%var1710X) (bvult input.ind-%var1710X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x74 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1710X)))
 (= $x74 $x278))))
 ))
 (let (($x276 (and $x116 $x85)))
 (let (($x58 (= $x276 true)))
 (let (($x7 (forall ((input.ind-%var1705X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1705X)))
 (=> $x110 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1705X) (_ bv0 32)))))
 ))
 (let (($x53 (forall ((input.ind-%var1704X (_ BitVec 32)) )(let (($x110 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1704X)))
 (= $x110 false)))
 ))
 (let (($x83 (and $x53 $x7)))
 (let (($x109 (= $x83 true)))
 (let ((?x227 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x311 (bvneg ?x227)))
 (let (($x247 (= ?x311 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x185 (= $x247 true)))
 (let (($x340 (= $x185 true)))
 (let ((?x70 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x70)))
 (let (($x176 (= ?x42 input.dst.llvm-%n)))
 (let (($x114 (= $x176 true)))
 (let (($x144 (= $x114 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x281 (= $x67 true)))
 (let (($x80 (= $x281 true)))
 (let (($x218 (= $x80 true)))
 (let (($x240 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x288 (= $x240 true)))
 (let (($x111 (= $x288 true)))
 (let (($x147 (= $x111 true)))
 (let (($x182 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x189 (= $x182 true)))
 (let (($x211 (= $x189 true)))
 (let (($x119 (= $x211 true)))
 (let (($x243 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x269 (= $x243 true)))
 (let (($x300 (= $x269 true)))
 (let (($x284 (= $x300 true)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x19)))
 (let ((?x133 (bvand symbol.1 (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x133)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x177 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x199 (= input.memlabel-mem--symbol.1_end ?x177)))
 (let (($x175 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x160 (and $x175 $x199)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x93 $x160)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x9 (and $x163 $x145)))
 (let (($x210 (not $x9)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x15 (and $x152 $x134)))
 (let (($x190 (and (not $x15) $x210)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x149 $x122)))
 (let (($x25 (not $x198)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x55 $x14)))
 (let (($x226 (and (not $x32) $x25)))
 (let (($x72 (and (and (and (and (and (and $x226 $x190) $x52) $x127) $x115) $x186) $x239)))
 (let (($x183 (and $x72 $x212)))
 (let (($x158 (= symbol.1 dst_symbol_addr.1)))
 (let (($x245 (and $x158 $x183)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x128) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x90 $x179)))))))
 (let (($x235 (and $x39 $x245)))
 (let (($x298 (= $x235 true)))
 (let (($x246 (= $x298 true)))
 (let (($x120 (= $x246 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x78 (= $x44 true)))
 (let (($x59 (= $x78 true)))
 (let (($x69 (= $x59 true)))
 (let (($x167 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x36 (= $x167 true)))
 (let (($x99 (= $x36 true)))
 (let (($x51 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let (($x76 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x62 (= $x76 true)))
 (let (($x89 (= $x62 true)))
 (let (($x79 (= $x89 true)))
 (let (($x77 (and $x79 $x34)))
 (let (($x171 (and $x77 $x99)))
 (let (($x131 (and $x171 $x69)))
 (let (($x301 (and $x131 $x120)))
 (let (($x294 (and $x301 $x284)))
 (let (($x153 (and $x294 $x119)))
 (let (($x324 (and $x153 $x147)))
 (let (($x251 (and $x324 $x218)))
 (let (($x201 (and $x251 $x144)))
 (let (($x258 (and $x201 $x340)))
 (let (($x193 (and $x258 $x109)))
 (let (($x13 (and $x193 $x58)))
 (let (($x327 (and $x13 $x348)))
 (let (($x250 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x228 (and $x250 $x327)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x326 $x228)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x187 (and $x279 $x208)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let (($x174 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x124 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x174)))))
 (let (($x24 (=> (and $x233 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x174)))))
 (let (($x229 (and $x24 $x187)))
 (let (($x20 (=> $x229 $x254)))
 (not $x20))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x000000f0)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x000000f0)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xa0000040)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x000000f0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x000000f0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xa00001cf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000004)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xa0000040)
  (define-fun symbol.1 () (_ BitVec 32)
    #xa0000040)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x000000f0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (concat (k!1 (bvadd #xa0000043 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #xa0000042 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #xa0000041 (bvmul #x00000004 x!0)))
            (k!1 (bvadd #xa0000040 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x000000f0 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!9))
  (define-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32)
    #x0000008e)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x0000008e)
  (define-fun dst_symbol_addr.1 () (_ BitVec 32)
    #xffbba4e4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xedadc744)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x0000008e)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0000008e)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xedadc747)
  (define-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32)
    #xffbba673)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xedadc744)
  (define-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32)
    #xffbba4e4)
  (define-fun symbol.1 () (_ BitVec 32)
    #xffbba4e4)
  (define-fun input.spec-%var-n-1 () (_ BitVec 32)
    #x0000008e)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!9 (bvadd #xffbba4e7 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #xffbba4e6 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #xffbba4e5 (bvmul #x00000004 x!0)))
              (k!9 (bvadd #xffbba4e4 (bvmul #x00000004 x!0))))))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0000008e x!0)
         (ite (bvule #x0000008f x!0) #x0000008f #x0000008e)
         #x00000000))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L3%6%bbentry.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x233 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x351 (or $x86 $x233)))
 (let (($x82 (= $x351 true)))
 (let (($x282 (= $x82 true)))
 (let (($x98 (forall ((input.ind-%var1767X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1767X)))
 (=> $x170 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1767X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1766X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1766X)))
 (= $x170 false)))
 ))
 (let (($x302 (and $x333 $x98)))
 (let (($x290 (= $x302 true)))
 (let (($x217 (forall ((input.ind-%var1761X (_ BitVec 32)) )(let ((?x350 (bvadd symbol.1 (bvmul input.ind-%var1761X (_ bv4 32)))))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x350))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv2 32))) ?x40)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv3 32))) ?x28)))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1761X)))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1761X)))
 (=> $x206 (= ?x321 ?x113)))))))))
 ))
 (let (($x330 (forall ((input.ind-%var1760X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var1760X) (bvult input.ind-%var1760X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1760X)))
 (= $x206 $x229))))
 ))
 (let (($x108 (and $x330 $x217)))
 (let (($x225 (= $x108 true)))
 (let (($x267 (forall ((input.ind-%var1755X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1755X)))
 (=> $x170 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1755X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var1754X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1754X)))
 (= $x170 false)))
 ))
 (let (($x138 (and $x241 $x267)))
 (let (($x85 (= $x138 true)))
 (let ((?x109 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x109)))
 (let (($x74 (= ?x193 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x166 (= $x74 true)))
 (let (($x46 (= $x166 true)))
 (let ((?x258 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x258)))
 (let (($x202 (= ?x248 input.dst.llvm-%n)))
 (let (($x213 (= $x202 true)))
 (let (($x7 (= $x213 true)))
 (let (($x110 (= ?x248 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (= $x110 true)))
 (let (($x53 (= $x297 true)))
 (let (($x201 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x227 (= $x201 true)))
 (let (($x311 (= $x227 true)))
 (let (($x247 (= $x311 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x251 (= $x218 true)))
 (let (($x176 (= $x251 true)))
 (let (($x114 (= $x176 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x324 (= $x147 true)))
 (let (($x67 (= $x324 true)))
 (let (($x281 (= $x67 true)))
 (let (($x119 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x153 (= $x119 true)))
 (let (($x240 (= $x153 true)))
 (let (($x288 (= $x240 true)))
 (let (($x284 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x294 (= $x284 true)))
 (let (($x182 (= $x294 true)))
 (let (($x189 (= $x182 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x120 true)))
 (let (($x243 (= $x301 true)))
 (let (($x269 (= $x243 true)))
 (let (($x212 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x183 (= $x212 true)))
 (let (($x245 (= $x183 true)))
 (let (($x235 (= $x245 true)))
 (let (($x203 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x155 (and true $x203)))
 (let (($x186 (= true $x155)))
 (let (($x175 (not $x233)))
 (let (($x29 (=> $x175 $x186)))
 (let (($x133 (= $x29 true)))
 (let (($x239 (= $x133 true)))
 (let (($x72 (= $x239 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x15)))
 (let ((?x152 (bvand symbol.1 (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x152)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let ((?x146 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x149 (= input.memlabel-mem--symbol.1_end ?x146)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x122 (and $x14 $x149)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (and $x55 $x122)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x129 (and $x84 $x179)))
 (let (($x162 (not $x129)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x90 (and $x94 $x157)))
 (let (($x173 (and (not $x90) $x162)))
 (let (($x154 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x95 $x154)))
 (let (($x91 (not $x128)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x69 $x131)))
 (let (($x49 (and (not $x68) $x91)))
 (let (($x194 (and (and (and (and (and (and $x49 $x173) $x39) $x158) $x198) $x226) $x134)))
 (let (($x52 (and $x194 $x200)))
 (let (($x62 (= symbol.1 dst_symbol_addr.1)))
 (let (($x66 (and $x62 $x52)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x34 (or (bvugt input.memlabel-mem--symbol.1_begin ?x51) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x42 $x167)))))))
 (let (($x180 (and $x59 $x66)))
 (let (($x127 (= $x180 true)))
 (let (($x141 (= $x127 true)))
 (let (($x93 (= $x141 true)))
 (let (($x19 (and $x93 $x72)))
 (let (($x298 (and $x19 $x235)))
 (let (($x300 (and $x298 $x269)))
 (let (($x211 (and $x300 $x189)))
 (let (($x111 (and $x211 $x288)))
 (let (($x80 (and $x111 $x281)))
 (let (($x144 (and $x80 $x114)))
 (let (($x185 (and $x144 $x247)))
 (let (($x121 (and $x185 $x53)))
 (let (($x83 (and $x121 $x7)))
 (let (($x278 (and $x83 $x46)))
 (let (($x276 (and $x278 $x85)))
 (let (($x289 (and $x276 $x225)))
 (let (($x309 (and $x289 $x290)))
 (let (($x104 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x104 $x309)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x328 (and $x360 $x234)))
 (let (($x338 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x338 $x328)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let (($x196 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x279 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x196)))))
 (let (($x268 (=> (and $x233 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x196)))))
 (let (($x132 (and $x268 $x231)))
 (let (($x101 (=> $x132 $x282)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x233 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x351 (or $x86 $x233)))
 (let (($x82 (= $x351 true)))
 (let (($x282 (= $x82 true)))
 (let (($x98 (forall ((input.ind-%var1767X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1767X)))
 (=> $x170 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1767X) (_ bv0 32)))))
 ))
 (let (($x333 (forall ((input.ind-%var1766X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1766X)))
 (= $x170 false)))
 ))
 (let (($x302 (and $x333 $x98)))
 (let (($x290 (= $x302 true)))
 (let (($x217 (forall ((input.ind-%var1761X (_ BitVec 32)) )(let ((?x350 (bvadd symbol.1 (bvmul input.ind-%var1761X (_ bv4 32)))))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x350))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv2 32))) ?x40)))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x350 (_ bv3 32))) ?x28)))
 (let ((?x321 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1761X)))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1761X)))
 (=> $x206 (= ?x321 ?x113)))))))))
 ))
 (let (($x330 (forall ((input.ind-%var1760X (_ BitVec 32)) )(let (($x229 (and (bvule (_ bv0 32) input.ind-%var1760X) (bvult input.ind-%var1760X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x206 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1760X)))
 (= $x206 $x229))))
 ))
 (let (($x108 (and $x330 $x217)))
 (let (($x225 (= $x108 true)))
 (let (($x267 (forall ((input.ind-%var1755X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1755X)))
 (=> $x170 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1755X) (_ bv0 32)))))
 ))
 (let (($x241 (forall ((input.ind-%var1754X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1754X)))
 (= $x170 false)))
 ))
 (let (($x138 (and $x241 $x267)))
 (let (($x85 (= $x138 true)))
 (let ((?x109 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x193 (bvneg ?x109)))
 (let (($x74 (= ?x193 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x166 (= $x74 true)))
 (let (($x46 (= $x166 true)))
 (let ((?x258 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x258)))
 (let (($x202 (= ?x248 input.dst.llvm-%n)))
 (let (($x213 (= $x202 true)))
 (let (($x7 (= $x213 true)))
 (let (($x110 (= ?x248 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x297 (= $x110 true)))
 (let (($x53 (= $x297 true)))
 (let (($x201 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x227 (= $x201 true)))
 (let (($x311 (= $x227 true)))
 (let (($x247 (= $x311 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x251 (= $x218 true)))
 (let (($x176 (= $x251 true)))
 (let (($x114 (= $x176 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x324 (= $x147 true)))
 (let (($x67 (= $x324 true)))
 (let (($x281 (= $x67 true)))
 (let (($x119 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x153 (= $x119 true)))
 (let (($x240 (= $x153 true)))
 (let (($x288 (= $x240 true)))
 (let (($x284 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x294 (= $x284 true)))
 (let (($x182 (= $x294 true)))
 (let (($x189 (= $x182 true)))
 (let (($x120 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x301 (= $x120 true)))
 (let (($x243 (= $x301 true)))
 (let (($x269 (= $x243 true)))
 (let (($x212 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x183 (= $x212 true)))
 (let (($x245 (= $x183 true)))
 (let (($x235 (= $x245 true)))
 (let (($x203 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x155 (and true $x203)))
 (let (($x186 (= true $x155)))
 (let (($x175 (not $x233)))
 (let (($x29 (=> $x175 $x186)))
 (let (($x133 (= $x29 true)))
 (let (($x239 (= $x133 true)))
 (let (($x72 (= $x239 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x15)))
 (let ((?x152 (bvand symbol.1 (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x152)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let ((?x146 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x149 (= input.memlabel-mem--symbol.1_end ?x146)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x122 (and $x14 $x149)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (and $x55 $x122)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x129 (and $x84 $x179)))
 (let (($x162 (not $x129)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x90 (and $x94 $x157)))
 (let (($x173 (and (not $x90) $x162)))
 (let (($x154 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x95 $x154)))
 (let (($x91 (not $x128)))
 (let (($x131 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x69 $x131)))
 (let (($x49 (and (not $x68) $x91)))
 (let (($x194 (and (and (and (and (and (and $x49 $x173) $x39) $x158) $x198) $x226) $x134)))
 (let (($x52 (and $x194 $x200)))
 (let (($x62 (= symbol.1 dst_symbol_addr.1)))
 (let (($x66 (and $x62 $x52)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x34 (or (bvugt input.memlabel-mem--symbol.1_begin ?x51) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x42 $x167)))))))
 (let (($x180 (and $x59 $x66)))
 (let (($x127 (= $x180 true)))
 (let (($x141 (= $x127 true)))
 (let (($x93 (= $x141 true)))
 (let (($x19 (and $x93 $x72)))
 (let (($x298 (and $x19 $x235)))
 (let (($x300 (and $x298 $x269)))
 (let (($x211 (and $x300 $x189)))
 (let (($x111 (and $x211 $x288)))
 (let (($x80 (and $x111 $x281)))
 (let (($x144 (and $x80 $x114)))
 (let (($x185 (and $x144 $x247)))
 (let (($x121 (and $x185 $x53)))
 (let (($x83 (and $x121 $x7)))
 (let (($x278 (and $x83 $x46)))
 (let (($x276 (and $x278 $x85)))
 (let (($x289 (and $x276 $x225)))
 (let (($x309 (and $x289 $x290)))
 (let (($x104 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x104 $x309)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x328 (and $x360 $x234)))
 (let (($x338 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x231 (and $x338 $x328)))
 (let ((?x96 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x332 (bvadd symbol.1 ?x96)))
 (let (($x196 (and (bvule input.memlabel-mem--symbol.1_begin ?x332) (bvule (bvadd ?x332 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x279 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false $x196)))))
 (let (($x268 (=> (and $x233 (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x196)))))
 (let (($x132 (and $x268 $x231)))
 (let (($x101 (=> $x132 $x282)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 83
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x361 (forall ((input.ind-%var1791X (_ BitVec 32)) )(let ((?x282 (bvadd symbol.1 (bvmul input.ind-%var1791X (_ bv4 32)))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x273)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x323)))
 (let ((?x40 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1791X)))
 (let (($x336 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1791X)))
 (=> $x336 (= ?x40 ?x156)))))))))
 ))
 (let (($x181 (forall ((input.ind-%var1790X (_ BitVec 32)) )(let (($x336 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1790X)))
 (= $x336 (and (bvule (_ bv0 32) input.ind-%var1790X) (bvult input.ind-%var1790X input.dst.llvm-%n)))))
 ))
 (let (($x263 (and $x181 $x361)))
 (let (($x13 (= true true)))
 (let (($x5 (and $x13 $x263)))
 (let (($x151 (= $x5 true)))
 (let (($x195 (forall ((input.ind-%var1785X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1785X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1785X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1784X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1784X)))
 (= $x193 false)))
 ))
 (let (($x221 (and $x16 $x195)))
 (let (($x325 (= $x221 true)))
 (let (($x280 (forall ((input.ind-%var1779X (_ BitVec 32)) )(let ((?x282 (bvadd symbol.1 (bvmul input.ind-%var1779X (_ bv4 32)))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x273)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x323)))
 (let ((?x40 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1779X)))
 (let (($x336 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1779X)))
 (=> $x336 (= ?x40 ?x156)))))))))
 ))
 (let (($x260 (forall ((input.ind-%var1778X (_ BitVec 32)) )(let (($x349 (bvule (_ bv0 32) input.ind-%var1778X)))
 (let (($x336 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1778X)))
 (= $x336 (and $x349 (bvult input.ind-%var1778X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x58 (and $x260 $x280)))
 (let (($x100 (= $x58 true)))
 (let (($x85 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1773X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1773X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1772X)))
 (= $x193 false)))
 ))
 (let (($x276 (and $x278 $x85)))
 (let (($x206 (= $x276 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x45)))
 (let (($x53 (= ?x42 input.dst.llvm-%n)))
 (let (($x121 (= $x53 true)))
 (let (($x202 (= $x121 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x218)))
 (let ((?x281 (bvand symbol.1 (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x281)))
 (let ((?x324 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x324)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x240 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x288 (and $x119 $x240)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x211 $x288)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x243 (and $x120 $x301)))
 (let (($x269 (not $x243)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (and $x235 $x298)))
 (let (($x284 (and (not $x246) $x269)))
 (let (($x72 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x239 $x72)))
 (let (($x212 (not $x19)))
 (let (($x29 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x186 $x29)))
 (let (($x245 (and (not $x133) $x212)))
 (let (($x311 (and (and (and (and (and (and $x245 $x284) $x294) $x189) $x111) $x67) $x80)))
 (let (($x247 (and $x311 $x251)))
 (let (($x226 (= symbol.1 dst_symbol_addr.1)))
 (let (($x185 (and $x226 $x247)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x15) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x93 $x175)))))))
 (let (($x340 (and $x155 $x185)))
 (let (($x258 (= $x340 true)))
 (let (($x248 (= $x258 true)))
 (let (($x110 (= $x248 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (= $x14 true)))
 (let (($x146 (= $x32 true)))
 (let (($x149 (= $x146 true)))
 (let (($x128 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (not $x128)))
 (let (($x23 (= $x91 true)))
 (let (($x158 (= $x23 true)))
 (let (($x9 (= $x158 true)))
 (let (($x84 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x179 (and true $x84)))
 (let (($x129 (= true $x179)))
 (let (($x162 (=> $x91 $x129)))
 (let (($x173 (= $x162 true)))
 (let (($x163 (= $x173 true)))
 (let (($x39 (= $x163 true)))
 (let (($x69 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x131 (= $x69 true)))
 (let (($x68 (= $x131 true)))
 (let (($x140 (= $x68 true)))
 (let (($x171 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x44 (= $x171 true)))
 (let (($x59 (= $x44 true)))
 (let (($x76 (= $x59 true)))
 (let (($x70 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (= $x70 true)))
 (let (($x36 (= $x167 true)))
 (let (($x51 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let ((?x192 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x192)))
 (let (($x104 (= ?x250 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x104 true)))
 (let (($x79 (= $x89 true)))
 (let (($x268 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x314 (= $x268 true)))
 (let (($x338 (= $x314 true)))
 (let (($x87 (= $x338 true)))
 (let (($x88 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x196 (= $x88 true)))
 (let (($x124 (= $x196 true)))
 (let (($x24 (= $x124 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x103 true)))
 (let (($x174 (= $x64 true)))
 (let (($x342 (= $x174 true)))
 (let (($x279 (and $x342 $x24)))
 (let (($x326 (and $x279 $x87)))
 (let (($x78 (and $x326 $x79)))
 (let (($x77 (and $x78 $x34)))
 (let (($x99 (and $x77 $x36)))
 (let (($x62 (and $x99 $x76)))
 (let (($x95 (and $x62 $x140)))
 (let (($x145 (and $x95 $x39)))
 (let (($x55 (and $x145 $x9)))
 (let (($x122 (and $x55 $x149)))
 (let (($x297 (and $x122 $x110)))
 (let (($x213 (and $x297 $x202)))
 (let (($x187 (and $x213 $x206)))
 (let (($x125 (and $x187 $x100)))
 (let (($x236 (and $x125 $x325)))
 (let (($x331 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x322 (and $x331 $x236)))
 (let (($x357 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x292 (and $x357 $x322)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x148 (and $x112 $x292)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x8 $x148)))
 (let (($x11 (=> $x191 $x151)))
 (not $x11))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x361 (forall ((input.ind-%var1791X (_ BitVec 32)) )(let ((?x282 (bvadd symbol.1 (bvmul input.ind-%var1791X (_ bv4 32)))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x273)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x323)))
 (let ((?x40 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1791X)))
 (let (($x336 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1791X)))
 (=> $x336 (= ?x40 ?x156)))))))))
 ))
 (let (($x181 (forall ((input.ind-%var1790X (_ BitVec 32)) )(let (($x336 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1790X)))
 (= $x336 (and (bvule (_ bv0 32) input.ind-%var1790X) (bvult input.ind-%var1790X input.dst.llvm-%n)))))
 ))
 (let (($x263 (and $x181 $x361)))
 (let (($x13 (= true true)))
 (let (($x5 (and $x13 $x263)))
 (let (($x151 (= $x5 true)))
 (let (($x195 (forall ((input.ind-%var1785X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1785X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1785X) (_ bv0 32)))))
 ))
 (let (($x16 (forall ((input.ind-%var1784X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1784X)))
 (= $x193 false)))
 ))
 (let (($x221 (and $x16 $x195)))
 (let (($x325 (= $x221 true)))
 (let (($x280 (forall ((input.ind-%var1779X (_ BitVec 32)) )(let ((?x282 (bvadd symbol.1 (bvmul input.ind-%var1779X (_ bv4 32)))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x282))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv2 32))) ?x273)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x282 (_ bv3 32))) ?x323)))
 (let ((?x40 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1779X)))
 (let (($x336 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1779X)))
 (=> $x336 (= ?x40 ?x156)))))))))
 ))
 (let (($x260 (forall ((input.ind-%var1778X (_ BitVec 32)) )(let (($x349 (bvule (_ bv0 32) input.ind-%var1778X)))
 (let (($x336 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1778X)))
 (= $x336 (and $x349 (bvult input.ind-%var1778X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x58 (and $x260 $x280)))
 (let (($x100 (= $x58 true)))
 (let (($x85 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1773X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1773X) (_ bv0 32)))))
 ))
 (let (($x278 (forall ((input.ind-%var1772X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1772X)))
 (= $x193 false)))
 ))
 (let (($x276 (and $x278 $x85)))
 (let (($x206 (= $x276 true)))
 (let ((?x45 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x42 (bvneg ?x45)))
 (let (($x53 (= ?x42 input.dst.llvm-%n)))
 (let (($x121 (= $x53 true)))
 (let (($x202 (= $x121 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x218)))
 (let ((?x281 (bvand symbol.1 (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x281)))
 (let ((?x324 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x324)))
 (let ((?x153 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x240 (= input.memlabel-mem--symbol.1_end ?x153)))
 (let (($x119 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x288 (and $x119 $x240)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x211 $x288)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x243 (and $x120 $x301)))
 (let (($x269 (not $x243)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x246 (and $x235 $x298)))
 (let (($x284 (and (not $x246) $x269)))
 (let (($x72 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x239 $x72)))
 (let (($x212 (not $x19)))
 (let (($x29 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x186 $x29)))
 (let (($x245 (and (not $x133) $x212)))
 (let (($x311 (and (and (and (and (and (and $x245 $x284) $x294) $x189) $x111) $x67) $x80)))
 (let (($x247 (and $x311 $x251)))
 (let (($x226 (= symbol.1 dst_symbol_addr.1)))
 (let (($x185 (and $x226 $x247)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x66 (or (bvugt input.memlabel-mem--symbol.1_begin ?x15) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x66) (or $x93 $x175)))))))
 (let (($x340 (and $x155 $x185)))
 (let (($x258 (= $x340 true)))
 (let (($x248 (= $x258 true)))
 (let (($x110 (= $x248 true)))
 (let (($x14 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (= $x14 true)))
 (let (($x146 (= $x32 true)))
 (let (($x149 (= $x146 true)))
 (let (($x128 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (not $x128)))
 (let (($x23 (= $x91 true)))
 (let (($x158 (= $x23 true)))
 (let (($x9 (= $x158 true)))
 (let (($x84 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x179 (and true $x84)))
 (let (($x129 (= true $x179)))
 (let (($x162 (=> $x91 $x129)))
 (let (($x173 (= $x162 true)))
 (let (($x163 (= $x173 true)))
 (let (($x39 (= $x163 true)))
 (let (($x69 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x131 (= $x69 true)))
 (let (($x68 (= $x131 true)))
 (let (($x140 (= $x68 true)))
 (let (($x171 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x44 (= $x171 true)))
 (let (($x59 (= $x44 true)))
 (let (($x76 (= $x59 true)))
 (let (($x70 (= ?x42 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x167 (= $x70 true)))
 (let (($x36 (= $x167 true)))
 (let (($x51 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x34 (= $x35 true)))
 (let ((?x192 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x192)))
 (let (($x104 (= ?x250 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x104 true)))
 (let (($x79 (= $x89 true)))
 (let (($x268 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x314 (= $x268 true)))
 (let (($x338 (= $x314 true)))
 (let (($x87 (= $x338 true)))
 (let (($x88 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x196 (= $x88 true)))
 (let (($x124 (= $x196 true)))
 (let (($x24 (= $x124 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x64 (= $x103 true)))
 (let (($x174 (= $x64 true)))
 (let (($x342 (= $x174 true)))
 (let (($x279 (and $x342 $x24)))
 (let (($x326 (and $x279 $x87)))
 (let (($x78 (and $x326 $x79)))
 (let (($x77 (and $x78 $x34)))
 (let (($x99 (and $x77 $x36)))
 (let (($x62 (and $x99 $x76)))
 (let (($x95 (and $x62 $x140)))
 (let (($x145 (and $x95 $x39)))
 (let (($x55 (and $x145 $x9)))
 (let (($x122 (and $x55 $x149)))
 (let (($x297 (and $x122 $x110)))
 (let (($x213 (and $x297 $x202)))
 (let (($x187 (and $x213 $x206)))
 (let (($x125 (and $x187 $x100)))
 (let (($x236 (and $x125 $x325)))
 (let (($x331 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x322 (and $x331 $x236)))
 (let (($x357 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x292 (and $x357 $x322)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x148 (and $x112 $x292)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x8 $x148)))
 (let (($x11 (=> $x191 $x151)))
 (not $x11))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 84
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x355 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x327 (not $x355)))
 (let (($x261 (or $x355 $x327)))
 (let (($x228 (= $x261 true)))
 (let (($x229 (= $x228 true)))
 (let (($x289 (forall ((input.ind-%var1809X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1809X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1809X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1808X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1808X)))
 (= $x193 false)))
 ))
 (let (($x333 (and $x217 $x289)))
 (let (($x225 (= $x333 true)))
 (let (($x354 (forall ((input.ind-%var1803X (_ BitVec 32)) )(let ((?x5 (bvadd symbol.1 (bvmul input.ind-%var1803X (_ bv4 32)))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x5))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x5 (_ bv2 32))) ?x198)))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x5 (_ bv3 32))) ?x28)))
 (let ((?x280 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1803X)))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1803X)))
 (=> $x282 (= ?x280 ?x287)))))))))
 ))
 (let (($x323 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let (($x101 (and (bvule (_ bv0 32) input.ind-%var1802X) (bvult input.ind-%var1802X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1802X)))
 (= $x282 $x101))))
 ))
 (let (($x92 (and $x323 $x354)))
 (let (($x208 (= $x92 true)))
 (let (($x142 (forall ((input.ind-%var1797X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1797X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1797X) (_ bv0 32)))))
 ))
 (let (($x267 (forall ((input.ind-%var1796X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1796X)))
 (= $x193 false)))
 ))
 (let (($x260 (and $x267 $x142)))
 (let (($x40 (= $x260 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x258)))
 (let (($x110 (= ?x248 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x110 true)))
 (let (($x53 (= $x297 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x36)))
 (let (($x251 (= ?x99 input.dst.llvm-%n)))
 (let (($x247 (= $x251 true)))
 (let (($x185 (= $x247 true)))
 (let (($x227 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x281 (= $x227 true)))
 (let (($x80 (= $x281 true)))
 (let (($x311 (= $x80 true)))
 (let (($x111 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (= $x111 true)))
 (let (($x147 (= $x201 true)))
 (let (($x324 (= $x147 true)))
 (let (($x211 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x119 (= $x211 true)))
 (let (($x153 (= $x119 true)))
 (let (($x240 (= $x153 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x114 (= $x294 true)))
 (let (($x182 (= $x114 true)))
 (let (($x189 (= $x182 true)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x239)))
 (let ((?x133 (bvand symbol.1 (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x133)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x115 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x155 (= input.memlabel-mem--symbol.1_end ?x115)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (and $x160 $x155)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x177 $x25)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x66 (and $x194 $x52)))
 (let (($x180 (not $x66)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (and $x134 $x15)))
 (let (($x93 (and (not $x200) $x180)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x146 $x149)))
 (let (($x190 (not $x122)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x55 $x14)))
 (let (($x203 (and (not $x32) $x190)))
 (let (($x246 (and (and (and (and (and (and $x203 $x93) $x141) $x199) $x226) $x29) $x183)))
 (let (($x300 (and $x246 $x72)))
 (let (($x128 (= symbol.1 dst_symbol_addr.1)))
 (let (($x120 (and $x128 $x300)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x49) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x162 $x173)))))))
 (let (($x301 (and $x9 $x120)))
 (let (($x243 (= $x301 true)))
 (let (($x269 (= $x243 true)))
 (let (($x284 (= $x269 true)))
 (let (($x62 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x69 (= $x62 true)))
 (let (($x131 (= $x69 true)))
 (let (($x68 (= $x131 true)))
 (let (($x171 (= ?x99 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x171 true)))
 (let (($x59 (= $x44 true)))
 (let (($x34 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x77 (= $x34 true)))
 (let (($x45 (= $x77 true)))
 (let (($x42 (= $x45 true)))
 (let (($x78 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x51 (= $x78 true)))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x70 (and $x35 $x42)))
 (let (($x76 (and $x70 $x59)))
 (let (($x140 (and $x76 $x68)))
 (let (($x176 (and $x140 $x284)))
 (let (($x144 (and $x176 $x189)))
 (let (($x288 (and $x144 $x240)))
 (let (($x67 (and $x288 $x324)))
 (let (($x218 (and $x67 $x311)))
 (let (($x340 (and $x218 $x185)))
 (let (($x121 (and $x340 $x53)))
 (let (($x113 (and $x121 $x40)))
 (let (($x321 (and $x113 $x208)))
 (let (($x98 (and $x321 $x225)))
 (let (($x104 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x104 $x98)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x132 (and $x360 $x234)))
 (let (($x338 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x286 (and $x338 $x132)))
 (let ((?x112 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x112)))
 (let (($x124 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x314 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x124)))))
 (let (($x357 (=> (and $x355 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x124)))))
 (let (($x135 (and $x357 $x286)))
 (let (($x220 (=> $x135 $x229)))
 (not $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x355 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x327 (not $x355)))
 (let (($x261 (or $x355 $x327)))
 (let (($x228 (= $x261 true)))
 (let (($x229 (= $x228 true)))
 (let (($x289 (forall ((input.ind-%var1809X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1809X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1809X) (_ bv0 32)))))
 ))
 (let (($x217 (forall ((input.ind-%var1808X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1808X)))
 (= $x193 false)))
 ))
 (let (($x333 (and $x217 $x289)))
 (let (($x225 (= $x333 true)))
 (let (($x354 (forall ((input.ind-%var1803X (_ BitVec 32)) )(let ((?x5 (bvadd symbol.1 (bvmul input.ind-%var1803X (_ bv4 32)))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x5))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x5 (_ bv2 32))) ?x198)))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x5 (_ bv3 32))) ?x28)))
 (let ((?x280 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1803X)))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1803X)))
 (=> $x282 (= ?x280 ?x287)))))))))
 ))
 (let (($x323 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let (($x101 (and (bvule (_ bv0 32) input.ind-%var1802X) (bvult input.ind-%var1802X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x282 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1802X)))
 (= $x282 $x101))))
 ))
 (let (($x92 (and $x323 $x354)))
 (let (($x208 (= $x92 true)))
 (let (($x142 (forall ((input.ind-%var1797X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1797X)))
 (=> $x193 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1797X) (_ bv0 32)))))
 ))
 (let (($x267 (forall ((input.ind-%var1796X (_ BitVec 32)) )(let (($x193 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1796X)))
 (= $x193 false)))
 ))
 (let (($x260 (and $x267 $x142)))
 (let (($x40 (= $x260 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x258)))
 (let (($x110 (= ?x248 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x110 true)))
 (let (($x53 (= $x297 true)))
 (let ((?x36 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x99 (bvneg ?x36)))
 (let (($x251 (= ?x99 input.dst.llvm-%n)))
 (let (($x247 (= $x251 true)))
 (let (($x185 (= $x247 true)))
 (let (($x227 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x281 (= $x227 true)))
 (let (($x80 (= $x281 true)))
 (let (($x311 (= $x80 true)))
 (let (($x111 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (= $x111 true)))
 (let (($x147 (= $x201 true)))
 (let (($x324 (= $x147 true)))
 (let (($x211 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x119 (= $x211 true)))
 (let (($x153 (= $x119 true)))
 (let (($x240 (= $x153 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x114 (= $x294 true)))
 (let (($x182 (= $x114 true)))
 (let (($x189 (= $x182 true)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x239)))
 (let ((?x133 (bvand symbol.1 (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x133)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x115 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x155 (= input.memlabel-mem--symbol.1_end ?x115)))
 (let (($x160 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x25 (and $x160 $x155)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x177 $x25)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x66 (and $x194 $x52)))
 (let (($x180 (not $x66)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x200 (and $x134 $x15)))
 (let (($x93 (and (not $x200) $x180)))
 (let (($x149 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x146 $x149)))
 (let (($x190 (not $x122)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x55 $x14)))
 (let (($x203 (and (not $x32) $x190)))
 (let (($x246 (and (and (and (and (and (and $x203 $x93) $x141) $x199) $x226) $x29) $x183)))
 (let (($x300 (and $x246 $x72)))
 (let (($x128 (= symbol.1 dst_symbol_addr.1)))
 (let (($x120 (and $x128 $x300)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x49) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x162 $x173)))))))
 (let (($x301 (and $x9 $x120)))
 (let (($x243 (= $x301 true)))
 (let (($x269 (= $x243 true)))
 (let (($x284 (= $x269 true)))
 (let (($x62 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x69 (= $x62 true)))
 (let (($x131 (= $x69 true)))
 (let (($x68 (= $x131 true)))
 (let (($x171 (= ?x99 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x44 (= $x171 true)))
 (let (($x59 (= $x44 true)))
 (let (($x34 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x77 (= $x34 true)))
 (let (($x45 (= $x77 true)))
 (let (($x42 (= $x45 true)))
 (let (($x78 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x51 (= $x78 true)))
 (let (($x57 (= $x51 true)))
 (let (($x35 (= $x57 true)))
 (let (($x70 (and $x35 $x42)))
 (let (($x76 (and $x70 $x59)))
 (let (($x140 (and $x76 $x68)))
 (let (($x176 (and $x140 $x284)))
 (let (($x144 (and $x176 $x189)))
 (let (($x288 (and $x144 $x240)))
 (let (($x67 (and $x288 $x324)))
 (let (($x218 (and $x67 $x311)))
 (let (($x340 (and $x218 $x185)))
 (let (($x121 (and $x340 $x53)))
 (let (($x113 (and $x121 $x40)))
 (let (($x321 (and $x113 $x208)))
 (let (($x98 (and $x321 $x225)))
 (let (($x104 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x234 (and $x104 $x98)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x132 (and $x360 $x234)))
 (let (($x338 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x286 (and $x338 $x132)))
 (let ((?x112 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x96 (bvadd symbol.1 ?x112)))
 (let (($x124 (and (bvule input.memlabel-mem--symbol.1_begin ?x96) (bvule (bvadd ?x96 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x314 (=> (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32))) (or false (or false $x124)))))
 (let (($x357 (=> (and $x355 (bvule ?x96 (bvsub (bvadd ?x96 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x124)))))
 (let (($x135 (and $x357 $x286)))
 (let (($x220 (=> $x135 $x229)))
 (not $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 85
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x145)))
 (let ((?x163 (bvand symbol.1 (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x163)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x90 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x90)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x84 (and $x49 $x6)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x158 $x84)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x59 $x76)))
 (let (($x69 (not $x62)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x99 $x171)))
 (let (($x68 (and (not $x44) $x69)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x77 $x45)))
 (let (($x70 (not $x42)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x57 $x35)))
 (let (($x36 (and (not $x34) $x70)))
 (let (($x32 (and (and (and (and (and (and $x36 $x68) $x140) $x157) $x179) $x173) $x39)))
 (let (($x152 (and $x32 $x23)))
 (let (($x51 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x51 $x152)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x279 (or (bvugt input.memlabel-mem--symbol.1_begin ?x196) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x279) (or $x338 $x87)))))))
 (let (($x153 (and $x89 $x146)))
 (let (($x240 (= $x153 true)))
 (let (($x288 (= $x240 true)))
 (let (($x294 (forall ((input.ind-%var1815X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1815X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1815X) (_ bv0 32)))))
 ))
 (let (($x246 (forall ((input.ind-%var1814X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1814X)))
 (= $x29 false)))
 ))
 (let (($x114 (and $x246 $x294)))
 (let (($x182 (= $x114 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x180 (concat ?x194 (concat ?x134 ?x190)))))
 (let (($x160 (= ?x93 input.dst.llvm-%n)))
 (let (($x115 (= $x160 true)))
 (let (($x155 (= $x115 true)))
 (let (($x19 (= input.dst.llvm-%n ?x93)))
 (let (($x175 (and (and (and $x89 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x146) $x19)))
 (let (($x199 (= $x175 true)))
 (let (($x245 (= $x199 true)))
 (let (($x177 (= $x245 true)))
 (let (($x25 (and $x177 $x155)))
 (let (($x189 (and $x25 $x182)))
 (let (($x331 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x331 $x189)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x211 (and $x150 $x144)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x119 (and $x21 $x211)))
 (let (($x111 (=> $x119 $x288)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x145)))
 (let ((?x163 (bvand symbol.1 (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x163)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x90 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x6 (= input.memlabel-mem--symbol.1_end ?x90)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x84 (and $x49 $x6)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x158 $x84)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x62 (and $x59 $x76)))
 (let (($x69 (not $x62)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x99 $x171)))
 (let (($x68 (and (not $x44) $x69)))
 (let (($x45 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x77 $x45)))
 (let (($x70 (not $x42)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x57 $x35)))
 (let (($x36 (and (not $x34) $x70)))
 (let (($x32 (and (and (and (and (and (and $x36 $x68) $x140) $x157) $x179) $x173) $x39)))
 (let (($x152 (and $x32 $x23)))
 (let (($x51 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x51 $x152)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x279 (or (bvugt input.memlabel-mem--symbol.1_begin ?x196) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x279) (or $x338 $x87)))))))
 (let (($x153 (and $x89 $x146)))
 (let (($x240 (= $x153 true)))
 (let (($x288 (= $x240 true)))
 (let (($x294 (forall ((input.ind-%var1815X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1815X)))
 (=> $x29 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1815X) (_ bv0 32)))))
 ))
 (let (($x246 (forall ((input.ind-%var1814X (_ BitVec 32)) )(let (($x29 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1814X)))
 (= $x29 false)))
 ))
 (let (($x114 (and $x246 $x294)))
 (let (($x182 (= $x114 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x180 (concat ?x194 (concat ?x134 ?x190)))))
 (let (($x160 (= ?x93 input.dst.llvm-%n)))
 (let (($x115 (= $x160 true)))
 (let (($x155 (= $x115 true)))
 (let (($x19 (= input.dst.llvm-%n ?x93)))
 (let (($x175 (and (and (and $x89 (= input.spec-%var-n-1 input.dst.llvm-%n)) $x146) $x19)))
 (let (($x199 (= $x175 true)))
 (let (($x245 (= $x199 true)))
 (let (($x177 (= $x245 true)))
 (let (($x25 (and $x177 $x155)))
 (let (($x189 (and $x25 $x182)))
 (let (($x331 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x144 (and $x331 $x189)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x211 (and $x150 $x144)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x119 (and $x21 $x211)))
 (let (($x111 (=> $x119 $x288)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 86
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x243)))
 (let (($x269 (= ?x72 input.dst.llvm-%n)))
 (let (($x108 (= $x269 true)))
 (let (($x33 (forall ((input.ind-%var1821X (_ BitVec 32)) )(let (($x284 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1821X)))
 (=> $x284 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1821X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var1820X (_ BitVec 32)) )(let (($x284 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1820X)))
 (= $x284 false)))
 ))
 (let (($x122 (and $x182 $x33)))
 (let (($x298 (= $x122 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x52 (concat ?x134 (concat ?x200 ?x66)))))
 (let (($x155 (= ?x93 input.dst.llvm-%n)))
 (let (($x25 (= $x155 true)))
 (let (($x186 (= $x25 true)))
 (let (($x19 (= input.dst.llvm-%n ?x93)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x129)))
 (let ((?x55 (bvand symbol.1 (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x55)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x158 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x49 (= input.memlabel-mem--symbol.1_end ?x158)))
 (let (($x157 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (and $x157 $x49)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x91 $x94)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x131 $x59)))
 (let (($x62 (not $x76)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x99 $x171)))
 (let (($x68 (and (not $x44) $x62)))
 (let (($x77 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x167 $x77)))
 (let (($x42 (not $x45)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x57 $x35)))
 (let (($x36 (and (not $x34) $x42)))
 (let (($x23 (and (and (and (and (and (and $x36 $x68) $x9) $x154) $x90) $x179) $x162)))
 (let (($x152 (and $x23 $x173)))
 (let (($x51 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x51 $x152)))
 (let (($x104 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x360 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x326 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x357 (or (bvugt input.memlabel-mem--symbol.1_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x357) (or $x326 $x360)))))))
 (let (($x245 (and (and (and $x141 $x104) $x146) $x19)))
 (let (($x177 (= $x245 true)))
 (let (($x160 (= $x177 true)))
 (let (($x115 (= $x160 true)))
 (let (($x29 (and $x115 $x186)))
 (let (($x301 (and $x29 $x298)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (and $x96 $x301)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x226 (and $x8 $x300)))
 (let (($x355 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x235 (and $x355 $x226)))
 (let (($x147 (=> $x235 $x108)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x243)))
 (let (($x269 (= ?x72 input.dst.llvm-%n)))
 (let (($x108 (= $x269 true)))
 (let (($x33 (forall ((input.ind-%var1821X (_ BitVec 32)) )(let (($x284 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1821X)))
 (=> $x284 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1821X) (_ bv0 32)))))
 ))
 (let (($x182 (forall ((input.ind-%var1820X (_ BitVec 32)) )(let (($x284 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1820X)))
 (= $x284 false)))
 ))
 (let (($x122 (and $x182 $x33)))
 (let (($x298 (= $x122 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x52 (concat ?x134 (concat ?x200 ?x66)))))
 (let (($x155 (= ?x93 input.dst.llvm-%n)))
 (let (($x25 (= $x155 true)))
 (let (($x186 (= $x25 true)))
 (let (($x19 (= input.dst.llvm-%n ?x93)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x129)))
 (let ((?x55 (bvand symbol.1 (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x55)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x158 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x49 (= input.memlabel-mem--symbol.1_end ?x158)))
 (let (($x157 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x94 (and $x157 $x49)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x91 $x94)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x76 (and $x131 $x59)))
 (let (($x62 (not $x76)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x99 $x171)))
 (let (($x68 (and (not $x44) $x62)))
 (let (($x77 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x167 $x77)))
 (let (($x42 (not $x45)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x57 $x35)))
 (let (($x36 (and (not $x34) $x42)))
 (let (($x23 (and (and (and (and (and (and $x36 $x68) $x9) $x154) $x90) $x179) $x162)))
 (let (($x152 (and $x23 $x173)))
 (let (($x51 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x51 $x152)))
 (let (($x104 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x360 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x326 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x357 (or (bvugt input.memlabel-mem--symbol.1_begin ?x24) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x357) (or $x326 $x360)))))))
 (let (($x245 (and (and (and $x141 $x104) $x146) $x19)))
 (let (($x177 (= $x245 true)))
 (let (($x160 (= $x177 true)))
 (let (($x115 (= $x160 true)))
 (let (($x29 (and $x115 $x186)))
 (let (($x301 (and $x29 $x298)))
 (let (($x96 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x300 (and $x96 $x301)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x226 (and $x8 $x300)))
 (let (($x355 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x235 (and $x355 $x226)))
 (let (($x147 (=> $x235 $x108)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 87
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x183 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x246 (= $x183 true)))
 (let (($x294 (= $x246 true)))
 (let (($x147 (forall ((input.ind-%var1827X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1827X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1827X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var1826X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1826X)))
 (= $x111 false)))
 ))
 (let (($x324 (and $x298 $x147)))
 (let (($x174 (= $x324 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x190 (concat ?x200 (concat ?x194 ?x15)))))
 (let (($x186 (= ?x93 input.dst.llvm-%n)))
 (let (($x29 (= $x186 true)))
 (let (($x120 (= $x29 true)))
 (let (($x19 (= input.dst.llvm-%n ?x93)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x84)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x32)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x91 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x157 (= input.memlabel-mem--symbol.1_end ?x91)))
 (let (($x154 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x128 (and $x154 $x157)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x140 $x128)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (and $x69 $x131)))
 (let (($x76 (not $x59)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x99 $x171)))
 (let (($x68 (and (not $x44) $x76)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x70 $x167)))
 (let (($x45 (not $x77)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x57 $x35)))
 (let (($x36 (and (not $x34) $x45)))
 (let (($x173 (and (and (and (and (and (and $x36 $x68) $x14) $x163) $x158) $x90) $x6)))
 (let (($x152 (and $x173 $x179)))
 (let (($x51 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x51 $x152)))
 (let (($x103 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x250 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x314 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x314)))
 (let (($x312 (or (bvugt input.memlabel-mem--symbol.1_begin ?x314) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x312) (or $x192 $x250)))))))
 (let (($x160 (and (and (and $x175 $x103) $x146) $x19)))
 (let (($x115 (= $x160 true)))
 (let (($x155 (= $x115 true)))
 (let (($x25 (= $x155 true)))
 (let (($x284 (and $x25 $x120)))
 (let (($x149 (and $x284 $x174)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x176 (and $x112 $x149)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x153 (and $x125 $x176)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x211 (and $x21 $x153)))
 (let (($x240 (=> $x211 $x294)))
 (not $x240)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x183 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x246 (= $x183 true)))
 (let (($x294 (= $x246 true)))
 (let (($x147 (forall ((input.ind-%var1827X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1827X)))
 (=> $x111 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1827X) (_ bv0 32)))))
 ))
 (let (($x298 (forall ((input.ind-%var1826X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1826X)))
 (= $x111 false)))
 ))
 (let (($x324 (and $x298 $x147)))
 (let (($x174 (= $x324 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x190 (concat ?x200 (concat ?x194 ?x15)))))
 (let (($x186 (= ?x93 input.dst.llvm-%n)))
 (let (($x29 (= $x186 true)))
 (let (($x120 (= $x29 true)))
 (let (($x19 (= input.dst.llvm-%n ?x93)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x84)))
 (let ((?x32 (bvand symbol.1 (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x32)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x91 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x157 (= input.memlabel-mem--symbol.1_end ?x91)))
 (let (($x154 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x128 (and $x154 $x157)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x140 $x128)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x69 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x59 (and $x69 $x131)))
 (let (($x76 (not $x59)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x44 (and $x99 $x171)))
 (let (($x68 (and (not $x44) $x76)))
 (let (($x167 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x70 $x167)))
 (let (($x45 (not $x77)))
 (let (($x35 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x57 $x35)))
 (let (($x36 (and (not $x34) $x45)))
 (let (($x173 (and (and (and (and (and (and $x36 $x68) $x14) $x163) $x158) $x90) $x6)))
 (let (($x152 (and $x173 $x179)))
 (let (($x51 (= symbol.1 dst_symbol_addr.1)))
 (let (($x146 (and $x51 $x152)))
 (let (($x103 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x250 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x314 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x314)))
 (let (($x312 (or (bvugt input.memlabel-mem--symbol.1_begin ?x314) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x312) (or $x192 $x250)))))))
 (let (($x160 (and (and (and $x175 $x103) $x146) $x19)))
 (let (($x115 (= $x160 true)))
 (let (($x155 (= $x115 true)))
 (let (($x25 (= $x155 true)))
 (let (($x284 (and $x25 $x120)))
 (let (($x149 (and $x284 $x174)))
 (let (($x112 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x176 (and $x112 $x149)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x153 (and $x125 $x176)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x211 (and $x21 $x153)))
 (let (($x240 (=> $x211 $x294)))
 (not $x240)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 88
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x243)))
 (let (($x72 (= ?x300 input.spec-%var-n-1)))
 (let (($x189 (= $x72 true)))
 (let (($x88 (forall ((input.ind-%var1833X (_ BitVec 32)) )(let (($x269 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1833X)))
 (=> $x269 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1833X) (_ bv0 32)))))
 ))
 (let (($x174 (forall ((input.ind-%var1832X (_ BitVec 32)) )(let (($x269 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1832X)))
 (= $x269 false)))
 ))
 (let (($x212 (and $x174 $x88)))
 (let (($x201 (= $x212 true)))
 (let ((?x279 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x357 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x250 (concat ?x326 (concat ?x357 ?x279)))))
 (let (($x155 (= input.dst.llvm-%n ?x89)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x200)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x134)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let ((?x152 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x146 (= input.memlabel-mem--symbol.1_end ?x152)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x177 (and $x84 $x146)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (and $x173 $x177)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x158 $x23)))
 (let (($x94 (not $x49)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x128 (and $x91 $x157)))
 (let (($x129 (and (not $x128) $x94)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x9 $x163)))
 (let (($x140 (not $x162)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x145 $x14)))
 (let (($x39 (and (not $x55) $x140)))
 (let (($x19 (and (and (and (and (and (and $x39 $x129) $x32) $x6) $x199) $x190) $x180)))
 (let (($x160 (and $x19 $x52)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x68 $x160)))
 (let (($x103 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x70 (or (bvugt input.memlabel-mem--symbol.1_begin ?x35) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x70) (or $x36 $x99)))))))
 (let (($x29 (and (and (and $x59 $x103) $x115) $x155)))
 (let (($x120 (= $x29 true)))
 (let (($x284 (= $x120 true)))
 (let (($x119 (= $x284 true)))
 (let (($x141 (= ?x89 input.dst.llvm-%n)))
 (let (($x342 (= $x141 true)))
 (let (($x175 (= $x342 true)))
 (let (($x111 (and $x175 $x119)))
 (let (($x133 (and $x111 $x201)))
 (let (($x150 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x226 (and $x150 $x133)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x215 $x226)))
 (let (($x355 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x182 (and $x355 $x114)))
 (let (($x288 (=> $x182 $x189)))
 (not $x288))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x243 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x300 (bvneg ?x243)))
 (let (($x72 (= ?x300 input.spec-%var-n-1)))
 (let (($x189 (= $x72 true)))
 (let (($x88 (forall ((input.ind-%var1833X (_ BitVec 32)) )(let (($x269 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1833X)))
 (=> $x269 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1833X) (_ bv0 32)))))
 ))
 (let (($x174 (forall ((input.ind-%var1832X (_ BitVec 32)) )(let (($x269 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1832X)))
 (= $x269 false)))
 ))
 (let (($x212 (and $x174 $x88)))
 (let (($x201 (= $x212 true)))
 (let ((?x279 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x357 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x250 (concat ?x326 (concat ?x357 ?x279)))))
 (let (($x155 (= input.dst.llvm-%n ?x89)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x200)))
 (let ((?x134 (bvand symbol.1 (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x134)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let ((?x152 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x146 (= input.memlabel-mem--symbol.1_end ?x152)))
 (let (($x84 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x177 (and $x84 $x146)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (and $x173 $x177)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x158 $x23)))
 (let (($x94 (not $x49)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x128 (and $x91 $x157)))
 (let (($x129 (and (not $x128) $x94)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x9 $x163)))
 (let (($x140 (not $x162)))
 (let (($x14 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x145 $x14)))
 (let (($x39 (and (not $x55) $x140)))
 (let (($x19 (and (and (and (and (and (and $x39 $x129) $x32) $x6) $x199) $x190) $x180)))
 (let (($x160 (and $x19 $x52)))
 (let (($x68 (= symbol.1 dst_symbol_addr.1)))
 (let (($x115 (and $x68 $x160)))
 (let (($x103 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x70 (or (bvugt input.memlabel-mem--symbol.1_begin ?x35) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x70) (or $x36 $x99)))))))
 (let (($x29 (and (and (and $x59 $x103) $x115) $x155)))
 (let (($x120 (= $x29 true)))
 (let (($x284 (= $x120 true)))
 (let (($x119 (= $x284 true)))
 (let (($x141 (= ?x89 input.dst.llvm-%n)))
 (let (($x342 (= $x141 true)))
 (let (($x175 (= $x342 true)))
 (let (($x111 (and $x175 $x119)))
 (let (($x133 (and $x111 $x201)))
 (let (($x150 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x226 (and $x150 $x133)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x215 $x226)))
 (let (($x355 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x182 (and $x355 $x114)))
 (let (($x288 (=> $x182 $x189)))
 (not $x288))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 89
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x263 (forall ((input.ind-%var1845X (_ BitVec 32)) )(let ((?x40 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1845X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x113 (concat ?x40 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var1845X (_ bv4 32)))))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1845X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1845X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x273 (concat ?x30 ?x113)))))))))
 ))
 (let (($x80 (forall ((input.ind-%var1844X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1844X) (bvult input.ind-%var1844X (_ bv0 32)))))
 ))
 (let (($x5 (and $x80 $x263)))
 (let (($x122 (= true true)))
 (let (($x74 (and $x122 $x5)))
 (let (($x130 (= $x74 true)))
 (let (($x288 (forall ((input.ind-%var1839X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1839X)))
 (=> $x240 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1839X) (_ bv0 32)))))
 ))
 (let (($x201 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1838X)))
 (= $x240 false)))
 ))
 (let (($x239 (and $x201 $x288)))
 (let (($x196 (= $x239 true)))
 (let ((?x360 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x338 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x268 (concat ?x89 (concat ?x357 (concat ?x338 ?x360)))))
 (let (($x155 (= input.dst.llvm-%n ?x268)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x190)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x66)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x179 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x203 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (and $x203 $x179)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x6 $x152)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x158 $x23)))
 (let (($x94 (not $x49)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x90 (and $x157 $x128)))
 (let (($x194 (and (not $x90) $x94)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x9 $x163)))
 (let (($x140 (not $x162)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x14 $x55)))
 (let (($x91 (and (not $x154) $x140)))
 (let (($x160 (and (and (and (and (and (and $x91 $x194) $x32) $x15) $x146) $x199) $x127)))
 (let (($x115 (and $x160 $x93)))
 (let (($x145 (= symbol.1 dst_symbol_addr.1)))
 (let (($x186 (and $x145 $x115)))
 (let (($x131 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x36 (or (bvugt input.memlabel-mem--symbol.1_begin ?x70) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x36) (or $x44 $x62)))))))
 (let (($x284 (and (and (and $x76 $x131) $x186) $x155)))
 (let (($x119 (= $x284 true)))
 (let (($x111 (= $x119 true)))
 (let (($x235 (= $x111 true)))
 (let (($x342 (= ?x268 input.dst.llvm-%n)))
 (let (($x175 (= $x342 true)))
 (let (($x79 (= $x175 true)))
 (let (($x269 (and $x79 $x235)))
 (let (($x24 (and $x269 $x196)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x8 $x24)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x183 (and $x331 $x108)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x153 (and $x21 $x183)))
 (let (($x292 (=> $x153 $x130)))
 (not $x292))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x263 (forall ((input.ind-%var1845X (_ BitVec 32)) )(let ((?x40 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1845X (_ bv4 32))) (_ bv1 32)))))
 (let ((?x113 (concat ?x40 (select input.dst.llvm-mem (bvadd symbol.1 (bvmul input.ind-%var1845X (_ bv4 32)))))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1845X (_ bv4 32))) (_ bv2 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd (bvadd symbol.1 (bvmul input.ind-%var1845X (_ bv4 32))) (_ bv3 32)))))
 (=> false (= (_ bv0 32) (concat ?x273 (concat ?x30 ?x113)))))))))
 ))
 (let (($x80 (forall ((input.ind-%var1844X (_ BitVec 32)) )(= false (and (bvule (_ bv0 32) input.ind-%var1844X) (bvult input.ind-%var1844X (_ bv0 32)))))
 ))
 (let (($x5 (and $x80 $x263)))
 (let (($x122 (= true true)))
 (let (($x74 (and $x122 $x5)))
 (let (($x130 (= $x74 true)))
 (let (($x288 (forall ((input.ind-%var1839X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1839X)))
 (=> $x240 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1839X) (_ bv0 32)))))
 ))
 (let (($x201 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let (($x240 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1838X)))
 (= $x240 false)))
 ))
 (let (($x239 (and $x201 $x288)))
 (let (($x196 (= $x239 true)))
 (let ((?x360 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x338 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x268 (concat ?x89 (concat ?x357 (concat ?x338 ?x360)))))
 (let (($x155 (= input.dst.llvm-%n ?x268)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x190)))
 (let ((?x66 (bvand symbol.1 (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x66)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x84 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x179 (= input.memlabel-mem--symbol.1_end ?x84)))
 (let (($x203 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x152 (and $x203 $x179)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x6 $x152)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x49 (and $x158 $x23)))
 (let (($x94 (not $x49)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x90 (and $x157 $x128)))
 (let (($x194 (and (not $x90) $x94)))
 (let (($x163 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x9 $x163)))
 (let (($x140 (not $x162)))
 (let (($x55 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x14 $x55)))
 (let (($x91 (and (not $x154) $x140)))
 (let (($x160 (and (and (and (and (and (and $x91 $x194) $x32) $x15) $x146) $x199) $x127)))
 (let (($x115 (and $x160 $x93)))
 (let (($x145 (= symbol.1 dst_symbol_addr.1)))
 (let (($x186 (and $x145 $x115)))
 (let (($x131 (= input.spec-%var-n-1 input.dst.llvm-%n)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x36 (or (bvugt input.memlabel-mem--symbol.1_begin ?x70) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x36) (or $x44 $x62)))))))
 (let (($x284 (and (and (and $x76 $x131) $x186) $x155)))
 (let (($x119 (= $x284 true)))
 (let (($x111 (= $x119 true)))
 (let (($x235 (= $x111 true)))
 (let (($x342 (= ?x268 input.dst.llvm-%n)))
 (let (($x175 (= $x342 true)))
 (let (($x79 (= $x175 true)))
 (let (($x269 (and $x79 $x235)))
 (let (($x24 (and $x269 $x196)))
 (let (($x8 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x108 (and $x8 $x24)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x183 (and $x331 $x108)))
 (let (($x21 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x153 (and $x21 $x183)))
 (let (($x292 (=> $x153 $x130)))
 (not $x292))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 90
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x303 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (bvsge ?x303 (_ bv0 32))))
 (let (($x306 (= $x37 true)))
 (let (($x219 (= $x306 true)))
 (let (($x315 (forall ((input.ind-%var1863X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1863X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1863X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var1862X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1862X)))
 (= $x217 false)))
 ))
 (let (($x86 (and $x166 $x315)))
 (let (($x139 (= $x86 true)))
 (let (($x222 (forall ((input.ind-%var1857X (_ BitVec 32)) )(let ((?x178 (bvadd symbol.1 (bvmul input.ind-%var1857X (_ bv4 32)))))
 (let ((?x328 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x178))))
 (let ((?x348 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv2 32))) ?x328)))
 (let ((?x169 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv3 32))) ?x348)))
 (let ((?x159 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1857X)))
 (let (($x46 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1857X)))
 (=> $x46 (= ?x159 ?x169)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var1856X (_ BitVec 32)) )(let (($x302 (and (bvule (_ bv0 32) input.ind-%var1856X) (bvult input.ind-%var1856X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x46 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1856X)))
 (= $x46 $x302))))
 ))
 (let (($x143 (and $x213 $x222)))
 (let (($x283 (= $x143 true)))
 (let (($x116 (forall ((input.ind-%var1851X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1851X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1851X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1850X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1850X)))
 (= $x217 false)))
 ))
 (let (($x233 (and $x98 $x116)))
 (let (($x332 (= $x233 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x198)))
 (let (($x287 (= ?x28 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x232 (= $x287 true)))
 (let (($x343 (= $x232 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x241 (bvsub ?x215 ?x331)))
 (let (($x176 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x241) (bvult ?x215 ?x241))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x340 (bvmul (_ bv4 64) ?x248)))
 (let ((?x110 ((_ extract 63 32) ?x340)))
 (let (($x121 (= (_ bv0 32) ?x110)))
 (let (($x53 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x300 (and (and (and true $x53) $x121) $x176)))
 (let (($x324 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x267 (and $x324 $x300)))
 (let (($x206 (= true $x267)))
 (let (($x218 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x218 $x206)))
 (let (($x330 (= $x149 true)))
 (let (($x11 (= $x330 true)))
 (let (($x117 (= $x11 true)))
 (let (($x33 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x133 (= $x33 true)))
 (let (($x114 (= $x133 true)))
 (let (($x298 (= $x114 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x210 true)))
 (let (($x78 (= $x112 true)))
 (let (($x104 (= $x78 true)))
 (let (($x263 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x5 (= $x263 true)))
 (let (($x74 (= $x5 true)))
 (let (($x130 (= $x74 true)))
 (let (($x113 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x305 (= $x113 true)))
 (let (($x323 (= $x305 true)))
 (let (($x280 (= $x323 true)))
 (let (($x30 (= $x218 true)))
 (let (($x260 (= $x30 true)))
 (let (($x40 (= $x260 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x108)))
 (let ((?x196 (bvand symbol.1 (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x196)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x201 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x182 (= input.memlabel-mem--symbol.1_end ?x201)))
 (let (($x212 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x72 (and $x212 $x182)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x240 $x72)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (and $x186 $x120)))
 (let (($x284 (not $x155)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x190 $x93)))
 (let (($x111 (and (not $x115) $x284)))
 (let (($x199 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x177 $x199)))
 (let (($x66 (not $x52)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x152 $x146)))
 (let (($x160 (and (not $x200) $x66)))
 (let (($x281 (and (and (and (and (and (and $x160 $x111) $x235) $x211) $x189) $x239) $x24)))
 (let (($x80 (and $x281 $x183)))
 (let (($x128 (= symbol.1 dst_symbol_addr.1)))
 (let (($x251 (and $x128 $x80)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x94 (or (bvugt input.memlabel-mem--symbol.1_begin ?x158) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x94) (or $x180 $x15)))))))
 (let (($x341 (and $x179 $x251)))
 (let (($x356 (= $x341 true)))
 (let (($x101 (= $x356 true)))
 (let (($x273 (= $x101 true)))
 (let (($x39 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x9 (= $x39 true)))
 (let (($x163 (= $x9 true)))
 (let (($x162 (= $x163 true)))
 (let ((?x25 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x25)))
 (let (($x145 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (= $x145 true)))
 (let (($x55 (= $x14 true)))
 (let (($x131 (= ?x76 input.dst.llvm-%n)))
 (let (($x29 (= $x131 true)))
 (let (($x51 (= $x29 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x77 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x36 (= $x77 true)))
 (let (($x45 (= $x36 true)))
 (let (($x99 (= $x45 true)))
 (let (($x59 (and $x99 $x69)))
 (let (($x68 (and $x59 $x51)))
 (let (($x154 (and $x68 $x55)))
 (let (($x140 (and $x154 $x162)))
 (let (($x282 (and $x140 $x273)))
 (let (($x142 (and $x282 $x40)))
 (let (($x100 (and $x142 $x280)))
 (let (($x292 (and $x100 $x130)))
 (let (($x144 (and $x292 $x104)))
 (let (($x147 (and $x144 $x298)))
 (let (($x151 (and $x147 $x117)))
 (let (($x354 (and $x151 $x343)))
 (let (($x95 (and $x354 $x332)))
 (let (($x238 (and $x95 $x283)))
 (let (($x329 (and $x238 $x139)))
 (let (($x167 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (and (not $x167) $x329)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and $x57 $x205)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x35 $x97)))
 (let (($x342 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x313 (and $x342 $x12)))
 (let (($x360 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x141 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x360)))))
 (let (($x8 (=> (and $x218 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x360)))))
 (let (($x224 (and $x8 $x313)))
 (let (($x352 (=> $x224 $x219)))
 (not $x352)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x303 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x37 (bvsge ?x303 (_ bv0 32))))
 (let (($x306 (= $x37 true)))
 (let (($x219 (= $x306 true)))
 (let (($x315 (forall ((input.ind-%var1863X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1863X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1863X) (_ bv0 32)))))
 ))
 (let (($x166 (forall ((input.ind-%var1862X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1862X)))
 (= $x217 false)))
 ))
 (let (($x86 (and $x166 $x315)))
 (let (($x139 (= $x86 true)))
 (let (($x222 (forall ((input.ind-%var1857X (_ BitVec 32)) )(let ((?x178 (bvadd symbol.1 (bvmul input.ind-%var1857X (_ bv4 32)))))
 (let ((?x328 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x178))))
 (let ((?x348 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv2 32))) ?x328)))
 (let ((?x169 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x178 (_ bv3 32))) ?x348)))
 (let ((?x159 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1857X)))
 (let (($x46 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1857X)))
 (=> $x46 (= ?x159 ?x169)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var1856X (_ BitVec 32)) )(let (($x302 (and (bvule (_ bv0 32) input.ind-%var1856X) (bvult input.ind-%var1856X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x46 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1856X)))
 (= $x46 $x302))))
 ))
 (let (($x143 (and $x213 $x222)))
 (let (($x283 (= $x143 true)))
 (let (($x116 (forall ((input.ind-%var1851X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1851X)))
 (=> $x217 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1851X) (_ bv0 32)))))
 ))
 (let (($x98 (forall ((input.ind-%var1850X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1850X)))
 (= $x217 false)))
 ))
 (let (($x233 (and $x98 $x116)))
 (let (($x332 (= $x233 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x198)))
 (let (($x287 (= ?x28 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x232 (= $x287 true)))
 (let (($x343 (= $x232 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x241 (bvsub ?x215 ?x331)))
 (let (($x176 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x241) (bvult ?x215 ?x241))))
 (let ((?x248 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x340 (bvmul (_ bv4 64) ?x248)))
 (let ((?x110 ((_ extract 63 32) ?x340)))
 (let (($x121 (= (_ bv0 32) ?x110)))
 (let (($x53 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x300 (and (and (and true $x53) $x121) $x176)))
 (let (($x324 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x267 (and $x324 $x300)))
 (let (($x206 (= true $x267)))
 (let (($x218 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x218 $x206)))
 (let (($x330 (= $x149 true)))
 (let (($x11 (= $x330 true)))
 (let (($x117 (= $x11 true)))
 (let (($x33 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x133 (= $x33 true)))
 (let (($x114 (= $x133 true)))
 (let (($x298 (= $x114 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x210 true)))
 (let (($x78 (= $x112 true)))
 (let (($x104 (= $x78 true)))
 (let (($x263 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x5 (= $x263 true)))
 (let (($x74 (= $x5 true)))
 (let (($x130 (= $x74 true)))
 (let (($x113 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x305 (= $x113 true)))
 (let (($x323 (= $x305 true)))
 (let (($x280 (= $x323 true)))
 (let (($x30 (= $x218 true)))
 (let (($x260 (= $x30 true)))
 (let (($x40 (= $x260 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x108)))
 (let ((?x196 (bvand symbol.1 (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x196)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x201 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x182 (= input.memlabel-mem--symbol.1_end ?x201)))
 (let (($x212 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x72 (and $x212 $x182)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x240 $x72)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x155 (and $x186 $x120)))
 (let (($x284 (not $x155)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x115 (and $x190 $x93)))
 (let (($x111 (and (not $x115) $x284)))
 (let (($x199 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x177 $x199)))
 (let (($x66 (not $x52)))
 (let (($x146 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x152 $x146)))
 (let (($x160 (and (not $x200) $x66)))
 (let (($x281 (and (and (and (and (and (and $x160 $x111) $x235) $x211) $x189) $x239) $x24)))
 (let (($x80 (and $x281 $x183)))
 (let (($x128 (= symbol.1 dst_symbol_addr.1)))
 (let (($x251 (and $x128 $x80)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x94 (or (bvugt input.memlabel-mem--symbol.1_begin ?x158) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x94) (or $x180 $x15)))))))
 (let (($x341 (and $x179 $x251)))
 (let (($x356 (= $x341 true)))
 (let (($x101 (= $x356 true)))
 (let (($x273 (= $x101 true)))
 (let (($x39 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x9 (= $x39 true)))
 (let (($x163 (= $x9 true)))
 (let (($x162 (= $x163 true)))
 (let ((?x25 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x25)))
 (let (($x145 (= ?x76 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x14 (= $x145 true)))
 (let (($x55 (= $x14 true)))
 (let (($x131 (= ?x76 input.dst.llvm-%n)))
 (let (($x29 (= $x131 true)))
 (let (($x51 (= $x29 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x77 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x36 (= $x77 true)))
 (let (($x45 (= $x36 true)))
 (let (($x99 (= $x45 true)))
 (let (($x59 (and $x99 $x69)))
 (let (($x68 (and $x59 $x51)))
 (let (($x154 (and $x68 $x55)))
 (let (($x140 (and $x154 $x162)))
 (let (($x282 (and $x140 $x273)))
 (let (($x142 (and $x282 $x40)))
 (let (($x100 (and $x142 $x280)))
 (let (($x292 (and $x100 $x130)))
 (let (($x144 (and $x292 $x104)))
 (let (($x147 (and $x144 $x298)))
 (let (($x151 (and $x147 $x117)))
 (let (($x354 (and $x151 $x343)))
 (let (($x95 (and $x354 $x332)))
 (let (($x238 (and $x95 $x283)))
 (let (($x329 (and $x238 $x139)))
 (let (($x167 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x205 (and (not $x167) $x329)))
 (let (($x57 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x97 (and $x57 $x205)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x35 $x97)))
 (let (($x342 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x313 (and $x342 $x12)))
 (let (($x360 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x141 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x360)))))
 (let (($x8 (=> (and $x218 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x360)))))
 (let (($x224 (and $x8 $x313)))
 (let (($x352 (=> $x224 $x219)))
 (not $x352)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 91
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x350 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x195 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x349 (bvmul (_ bv4294967295 32) ?x195)))
 (let ((?x17 (bvneg ?x349)))
 (let (($x170 (= ?x17 ?x350)))
 (let (($x311 (= $x170 true)))
 (let (($x261 (forall ((input.ind-%var1881X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1881X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1881X) (_ bv0 32)))))
 ))
 (let (($x322 (forall ((input.ind-%var1880X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1880X)))
 (= $x135 false)))
 ))
 (let (($x58 (and $x322 $x261)))
 (let (($x156 (= $x58 true)))
 (let (($x221 (forall ((input.ind-%var1875X (_ BitVec 32)) )(let ((?x148 (bvadd symbol.1 (bvmul input.ind-%var1875X (_ bv4 32)))))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x148))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv2 32))) ?x286)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv3 32))) ?x75)))
 (let ((?x166 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1875X)))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1875X)))
 (=> $x309 (= ?x166 ?x92)))))))))
 ))
 (let (($x222 (forall ((input.ind-%var1874X (_ BitVec 32)) )(let (($x137 (and (bvule (_ bv0 32) input.ind-%var1874X) (bvult input.ind-%var1874X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1874X)))
 (= $x309 $x137))))
 ))
 (let (($x7 (and $x222 $x221)))
 (let (($x83 (= $x7 true)))
 (let (($x191 (forall ((input.ind-%var1869X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1869X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1869X) (_ bv0 32)))))
 ))
 (let (($x233 (forall ((input.ind-%var1868X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1868X)))
 (= $x135 false)))
 ))
 (let (($x181 (and $x233 $x191)))
 (let (($x178 (= $x181 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x28)))
 (let (($x232 (= ?x287 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x343 (= $x232 true)))
 (let (($x354 (= $x343 true)))
 (let (($x330 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x11 (= $x330 true)))
 (let (($x117 (= $x11 true)))
 (let (($x151 (= $x117 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x258 (bvsub ?x215 ?x331)))
 (let (($x121 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x258) (bvult ?x215 ?x258))))
 (let ((?x193 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x297 (bvmul (_ bv4 64) ?x193)))
 (let ((?x53 ((_ extract 63 32) ?x297)))
 (let (($x294 (= (_ bv0 32) ?x53)))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x241 (and (and (and true $x109) $x294) $x121)))
 (let (($x298 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x243 (and $x298 $x241)))
 (let (($x246 (= true $x243)))
 (let (($x325 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x176 (=> $x325 $x246)))
 (let (($x300 (= $x176 true)))
 (let (($x267 (= $x300 true)))
 (let (($x206 (= $x267 true)))
 (let (($x112 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (= $x112 true)))
 (let (($x104 (= $x78 true)))
 (let (($x144 (= $x104 true)))
 (let (($x5 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (= $x5 true)))
 (let (($x130 (= $x74 true)))
 (let (($x292 (= $x130 true)))
 (let (($x305 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x323 (= $x305 true)))
 (let (($x280 (= $x323 true)))
 (let (($x100 (= $x280 true)))
 (let (($x30 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x260 (= $x30 true)))
 (let (($x40 (= $x260 true)))
 (let (($x142 (= $x40 true)))
 (let (($x341 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x356 (= $x341 true)))
 (let (($x101 (= $x356 true)))
 (let (($x273 (= $x101 true)))
 (let (($x281 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x108 (= $x281 true)))
 (let (($x183 (= $x108 true)))
 (let (($x80 (= $x183 true)))
 (let (($x239 (= $x325 true)))
 (let (($x227 (= $x239 true)))
 (let (($x196 (= $x227 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x111)))
 (let ((?x155 (bvand symbol.1 (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x155)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x190 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x93 (= input.memlabel-mem--symbol.1_end ?x190)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x115 (and $x66 $x93)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x52 $x115)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x128 (and $x179 $x157)))
 (let (($x152 (not $x128)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x6 $x203)))
 (let (($x200 (and (not $x173) $x152)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x194 $x134)))
 (let (($x32 (not $x180)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x23 $x49)))
 (let (($x19 (and (not $x94) $x32)))
 (let (($x240 (and (and (and (and (and (and $x19 $x200) $x127) $x199) $x119) $x120) $x284)))
 (let (($x212 (and $x240 $x153)))
 (let (($x76 (= symbol.1 dst_symbol_addr.1)))
 (let (($x201 (and $x76 $x212)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x14 (or (bvugt input.memlabel-mem--symbol.1_begin ?x51) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x14) (or $x9 $x163)))))))
 (let (($x182 (and $x158 $x201)))
 (let (($x72 (= $x182 true)))
 (let (($x189 (= $x72 true)))
 (let (($x301 (= $x189 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x77)))
 (let (($x171 (= ?x36 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x45 (= ?x36 input.dst.llvm-%n)))
 (let (($x99 (= $x45 true)))
 (let (($x44 (= $x99 true)))
 (let (($x59 (and $x44 $x69)))
 (let (($x288 (and $x59 $x301)))
 (let (($x24 (and $x288 $x196)))
 (let (($x251 (and $x24 $x80)))
 (let (($x282 (and $x251 $x273)))
 (let (($x113 (and $x282 $x142)))
 (let (($x263 (and $x113 $x100)))
 (let (($x210 (and $x263 $x292)))
 (let (($x33 (and $x210 $x144)))
 (let (($x149 (and $x33 $x206)))
 (let (($x198 (and $x149 $x151)))
 (let (($x321 (and $x198 $x354)))
 (let (($x61 (and $x321 $x178)))
 (let (($x336 (and $x61 $x83)))
 (let (($x337 (and $x336 $x156)))
 (let (($x351 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x254 (and (not $x351) $x337)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x70 $x254)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x228 (and $x34 $x132)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x85 (and $x175 $x228)))
 (let (($x279 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x342 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x279)))))
 (let (($x64 (=> (and $x325 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x279)))))
 (let (($x164 (and $x64 $x85)))
 (let (($x223 (=> $x164 $x311)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x350 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x195 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x349 (bvmul (_ bv4294967295 32) ?x195)))
 (let ((?x17 (bvneg ?x349)))
 (let (($x170 (= ?x17 ?x350)))
 (let (($x311 (= $x170 true)))
 (let (($x261 (forall ((input.ind-%var1881X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1881X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1881X) (_ bv0 32)))))
 ))
 (let (($x322 (forall ((input.ind-%var1880X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1880X)))
 (= $x135 false)))
 ))
 (let (($x58 (and $x322 $x261)))
 (let (($x156 (= $x58 true)))
 (let (($x221 (forall ((input.ind-%var1875X (_ BitVec 32)) )(let ((?x148 (bvadd symbol.1 (bvmul input.ind-%var1875X (_ bv4 32)))))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x148))))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv2 32))) ?x286)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x148 (_ bv3 32))) ?x75)))
 (let ((?x166 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1875X)))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1875X)))
 (=> $x309 (= ?x166 ?x92)))))))))
 ))
 (let (($x222 (forall ((input.ind-%var1874X (_ BitVec 32)) )(let (($x137 (and (bvule (_ bv0 32) input.ind-%var1874X) (bvult input.ind-%var1874X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1874X)))
 (= $x309 $x137))))
 ))
 (let (($x7 (and $x222 $x221)))
 (let (($x83 (= $x7 true)))
 (let (($x191 (forall ((input.ind-%var1869X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1869X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1869X) (_ bv0 32)))))
 ))
 (let (($x233 (forall ((input.ind-%var1868X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1868X)))
 (= $x135 false)))
 ))
 (let (($x181 (and $x233 $x191)))
 (let (($x178 (= $x181 true)))
 (let ((?x28 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x28)))
 (let (($x232 (= ?x287 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x343 (= $x232 true)))
 (let (($x354 (= $x343 true)))
 (let (($x330 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x11 (= $x330 true)))
 (let (($x117 (= $x11 true)))
 (let (($x151 (= $x117 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x258 (bvsub ?x215 ?x331)))
 (let (($x121 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x258) (bvult ?x215 ?x258))))
 (let ((?x193 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x297 (bvmul (_ bv4 64) ?x193)))
 (let ((?x53 ((_ extract 63 32) ?x297)))
 (let (($x294 (= (_ bv0 32) ?x53)))
 (let (($x109 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x241 (and (and (and true $x109) $x294) $x121)))
 (let (($x298 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x243 (and $x298 $x241)))
 (let (($x246 (= true $x243)))
 (let (($x325 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x176 (=> $x325 $x246)))
 (let (($x300 (= $x176 true)))
 (let (($x267 (= $x300 true)))
 (let (($x206 (= $x267 true)))
 (let (($x112 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x78 (= $x112 true)))
 (let (($x104 (= $x78 true)))
 (let (($x144 (= $x104 true)))
 (let (($x5 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x74 (= $x5 true)))
 (let (($x130 (= $x74 true)))
 (let (($x292 (= $x130 true)))
 (let (($x305 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x323 (= $x305 true)))
 (let (($x280 (= $x323 true)))
 (let (($x100 (= $x280 true)))
 (let (($x30 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x260 (= $x30 true)))
 (let (($x40 (= $x260 true)))
 (let (($x142 (= $x40 true)))
 (let (($x341 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x356 (= $x341 true)))
 (let (($x101 (= $x356 true)))
 (let (($x273 (= $x101 true)))
 (let (($x281 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x108 (= $x281 true)))
 (let (($x183 (= $x108 true)))
 (let (($x80 (= $x183 true)))
 (let (($x239 (= $x325 true)))
 (let (($x227 (= $x239 true)))
 (let (($x196 (= $x227 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x111)))
 (let ((?x155 (bvand symbol.1 (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x155)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x190 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x93 (= input.memlabel-mem--symbol.1_end ?x190)))
 (let (($x66 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x115 (and $x66 $x93)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x52 $x115)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x128 (and $x179 $x157)))
 (let (($x152 (not $x128)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x173 (and $x6 $x203)))
 (let (($x200 (and (not $x173) $x152)))
 (let (($x134 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x194 $x134)))
 (let (($x32 (not $x180)))
 (let (($x49 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x23 $x49)))
 (let (($x19 (and (not $x94) $x32)))
 (let (($x240 (and (and (and (and (and (and $x19 $x200) $x127) $x199) $x119) $x120) $x284)))
 (let (($x212 (and $x240 $x153)))
 (let (($x76 (= symbol.1 dst_symbol_addr.1)))
 (let (($x201 (and $x76 $x212)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x14 (or (bvugt input.memlabel-mem--symbol.1_begin ?x51) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x14) (or $x9 $x163)))))))
 (let (($x182 (and $x158 $x201)))
 (let (($x72 (= $x182 true)))
 (let (($x189 (= $x72 true)))
 (let (($x301 (= $x189 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x77)))
 (let (($x171 (= ?x36 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x45 (= ?x36 input.dst.llvm-%n)))
 (let (($x99 (= $x45 true)))
 (let (($x44 (= $x99 true)))
 (let (($x59 (and $x44 $x69)))
 (let (($x288 (and $x59 $x301)))
 (let (($x24 (and $x288 $x196)))
 (let (($x251 (and $x24 $x80)))
 (let (($x282 (and $x251 $x273)))
 (let (($x113 (and $x282 $x142)))
 (let (($x263 (and $x113 $x100)))
 (let (($x210 (and $x263 $x292)))
 (let (($x33 (and $x210 $x144)))
 (let (($x149 (and $x33 $x206)))
 (let (($x198 (and $x149 $x151)))
 (let (($x321 (and $x198 $x354)))
 (let (($x61 (and $x321 $x178)))
 (let (($x336 (and $x61 $x83)))
 (let (($x337 (and $x336 $x156)))
 (let (($x351 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x254 (and (not $x351) $x337)))
 (let (($x70 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x132 (and $x70 $x254)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x228 (and $x34 $x132)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x85 (and $x175 $x228)))
 (let (($x279 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x342 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x279)))))
 (let (($x64 (=> (and $x325 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x279)))))
 (let (($x164 (and $x64 $x85)))
 (let (($x223 (=> $x164 $x311)))
 (not $x223)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 92
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x125 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x20 (bvule ?x125 input.dst.llvm-%n)))
 (let (($x283 (= $x20 true)))
 (let (($x91 (= $x283 true)))
 (let (($x60 (forall ((input.ind-%var1899X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1899X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1899X) (_ bv0 32)))))
 ))
 (let (($x12 (forall ((input.ind-%var1898X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1898X)))
 (= $x271 false)))
 ))
 (let (($x220 (and $x12 $x60)))
 (let (($x302 (= $x220 true)))
 (let (($x225 (forall ((input.ind-%var1893X (_ BitVec 32)) )(let ((?x103 (bvadd symbol.1 (bvmul input.ind-%var1893X (_ bv4 32)))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x103))))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x103 (_ bv2 32))) ?x252)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x103 (_ bv3 32))) ?x143)))
 (let ((?x322 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1893X)))
 (let (($x16 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1893X)))
 (=> $x16 (= ?x322 ?x361)))))))))
 ))
 (let (($x221 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var1892X) (bvult input.ind-%var1892X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x16 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1892X)))
 (= $x16 $x208))))
 ))
 (let (($x329 (and $x221 $x225)))
 (let (($x205 (= $x329 true)))
 (let (($x86 (forall ((input.ind-%var1887X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1887X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1887X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var1886X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1886X)))
 (= $x271 false)))
 ))
 (let (($x187 (and $x181 $x86)))
 (let (($x148 (= $x187 true)))
 (let ((?x287 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x287)))
 (let (($x343 (= ?x232 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x354 (= $x343 true)))
 (let (($x321 (= $x354 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x29)))
 (let (($x117 (= ?x84 input.dst.llvm-%n)))
 (let (($x151 (= $x117 true)))
 (let (($x198 (= $x151 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x248 (bvsub ?x215 ?x331)))
 (let (($x121 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x248) (bvult ?x215 ?x248))))
 (let ((?x297 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x297)))
 (let ((?x294 ((_ extract 63 32) ?x53)))
 (let (($x88 (= (_ bv0 32) ?x294)))
 (let (($x174 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x246 (and (and (and true $x174) $x88) $x121)))
 (let (($x147 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x176 (and $x147 $x246)))
 (let (($x300 (= true $x176)))
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x267 (=> $x139 $x300)))
 (let (($x206 (= $x267 true)))
 (let (($x149 (= $x206 true)))
 (let (($x330 (= $x149 true)))
 (let (($x104 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x104 true)))
 (let (($x33 (= $x144 true)))
 (let (($x133 (= $x33 true)))
 (let (($x130 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x292 (= $x130 true)))
 (let (($x210 (= $x292 true)))
 (let (($x112 (= $x210 true)))
 (let (($x280 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x100 (= $x280 true)))
 (let (($x263 (= $x100 true)))
 (let (($x5 (= $x263 true)))
 (let (($x40 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x142 (= $x40 true)))
 (let (($x113 (= $x142 true)))
 (let (($x305 (= $x113 true)))
 (let (($x273 (= $x139 true)))
 (let (($x282 (= $x273 true)))
 (let (($x30 (= $x282 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x301 (= (_ bv0 32) ?x189)))
 (let ((?x182 (bvand symbol.1 (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x182)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let ((?x284 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x240 (= input.memlabel-mem--symbol.1_end ?x284)))
 (let (($x155 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x111 (and $x155 $x240)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x67 $x111)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x66 $x160)))
 (let (($x93 (not $x190)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (and $x199 $x269)))
 (let (($x119 (and (not $x52) $x93)))
 (let (($x200 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x152 $x200)))
 (let (($x127 (not $x235)))
 (let (($x157 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x179 $x157)))
 (let (($x177 (and (not $x128) $x127)))
 (let (($x281 (and (and (and (and (and (and $x177 $x119) $x211) $x120) $x153) $x201) $x72)))
 (let (($x108 (and $x281 $x301)))
 (let (($x90 (= symbol.1 dst_symbol_addr.1)))
 (let (($x183 (and $x90 $x108)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x25) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x134 $x180)))))))
 (let (($x80 (and $x146 $x183)))
 (let (($x251 (= $x80 true)))
 (let (($x341 (= $x251 true)))
 (let (($x356 (= $x341 true)))
 (let (($x55 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x39 (= $x9 true)))
 (let (($x51 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (= $x51 true)))
 (let (($x145 (= $x68 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x77 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x36 (= $x77 true)))
 (let (($x45 (= $x36 true)))
 (let (($x99 (= $x45 true)))
 (let (($x59 (and $x99 $x69)))
 (let (($x14 (and $x59 $x145)))
 (let (($x163 (and $x14 $x39)))
 (let (($x101 (and $x163 $x356)))
 (let (($x260 (and $x101 $x30)))
 (let (($x323 (and $x260 $x305)))
 (let (($x74 (and $x323 $x5)))
 (let (($x78 (and $x74 $x112)))
 (let (($x114 (and $x78 $x133)))
 (let (($x11 (and $x114 $x330)))
 (let (($x28 (and $x11 $x198)))
 (let (($x98 (and $x28 $x321)))
 (let (($x138 (and $x98 $x148)))
 (let (($x352 (and $x138 $x205)))
 (let (($x278 (and $x352 $x302)))
 (let (($x47 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and (not $x47) $x278)))
 (let (($x167 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and $x167 $x82)))
 (let (($x245 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x328 (and $x245 $x13)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x95 (and $x79 $x328)))
 (let (($x8 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x89 (=> (and $x139 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x8)))))
 (let (($x202 (and $x89 $x95)))
 (let (($x255 (=> $x202 $x91)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x125 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x20 (bvule ?x125 input.dst.llvm-%n)))
 (let (($x283 (= $x20 true)))
 (let (($x91 (= $x283 true)))
 (let (($x60 (forall ((input.ind-%var1899X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1899X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1899X) (_ bv0 32)))))
 ))
 (let (($x12 (forall ((input.ind-%var1898X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1898X)))
 (= $x271 false)))
 ))
 (let (($x220 (and $x12 $x60)))
 (let (($x302 (= $x220 true)))
 (let (($x225 (forall ((input.ind-%var1893X (_ BitVec 32)) )(let ((?x103 (bvadd symbol.1 (bvmul input.ind-%var1893X (_ bv4 32)))))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x103))))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x103 (_ bv2 32))) ?x252)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x103 (_ bv3 32))) ?x143)))
 (let ((?x322 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1893X)))
 (let (($x16 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1893X)))
 (=> $x16 (= ?x322 ?x361)))))))))
 ))
 (let (($x221 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let (($x208 (and (bvule (_ bv0 32) input.ind-%var1892X) (bvult input.ind-%var1892X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x16 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1892X)))
 (= $x16 $x208))))
 ))
 (let (($x329 (and $x221 $x225)))
 (let (($x205 (= $x329 true)))
 (let (($x86 (forall ((input.ind-%var1887X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1887X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1887X) (_ bv0 32)))))
 ))
 (let (($x181 (forall ((input.ind-%var1886X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1886X)))
 (= $x271 false)))
 ))
 (let (($x187 (and $x181 $x86)))
 (let (($x148 (= $x187 true)))
 (let ((?x287 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x232 (bvneg ?x287)))
 (let (($x343 (= ?x232 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x354 (= $x343 true)))
 (let (($x321 (= $x354 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x29)))
 (let (($x117 (= ?x84 input.dst.llvm-%n)))
 (let (($x151 (= $x117 true)))
 (let (($x198 (= $x151 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x248 (bvsub ?x215 ?x331)))
 (let (($x121 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x248) (bvult ?x215 ?x248))))
 (let ((?x297 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x53 (bvmul (_ bv4 64) ?x297)))
 (let ((?x294 ((_ extract 63 32) ?x53)))
 (let (($x88 (= (_ bv0 32) ?x294)))
 (let (($x174 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x246 (and (and (and true $x174) $x88) $x121)))
 (let (($x147 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x176 (and $x147 $x246)))
 (let (($x300 (= true $x176)))
 (let (($x139 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x267 (=> $x139 $x300)))
 (let (($x206 (= $x267 true)))
 (let (($x149 (= $x206 true)))
 (let (($x330 (= $x149 true)))
 (let (($x104 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x104 true)))
 (let (($x33 (= $x144 true)))
 (let (($x133 (= $x33 true)))
 (let (($x130 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x292 (= $x130 true)))
 (let (($x210 (= $x292 true)))
 (let (($x112 (= $x210 true)))
 (let (($x280 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x100 (= $x280 true)))
 (let (($x263 (= $x100 true)))
 (let (($x5 (= $x263 true)))
 (let (($x40 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x142 (= $x40 true)))
 (let (($x113 (= $x142 true)))
 (let (($x305 (= $x113 true)))
 (let (($x273 (= $x139 true)))
 (let (($x282 (= $x273 true)))
 (let (($x30 (= $x282 true)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x301 (= (_ bv0 32) ?x189)))
 (let ((?x182 (bvand symbol.1 (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x182)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let ((?x284 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x240 (= input.memlabel-mem--symbol.1_end ?x284)))
 (let (($x155 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x111 (and $x155 $x240)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x67 $x111)))
 (let (($x120 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x190 (and $x66 $x160)))
 (let (($x93 (not $x190)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x52 (and $x199 $x269)))
 (let (($x119 (and (not $x52) $x93)))
 (let (($x200 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x152 $x200)))
 (let (($x127 (not $x235)))
 (let (($x157 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x179 $x157)))
 (let (($x177 (and (not $x128) $x127)))
 (let (($x281 (and (and (and (and (and (and $x177 $x119) $x211) $x120) $x153) $x201) $x72)))
 (let (($x108 (and $x281 $x301)))
 (let (($x90 (= symbol.1 dst_symbol_addr.1)))
 (let (($x183 (and $x90 $x108)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x49 (or (bvugt input.memlabel-mem--symbol.1_begin ?x25) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x49) (or $x134 $x180)))))))
 (let (($x80 (and $x146 $x183)))
 (let (($x251 (= $x80 true)))
 (let (($x341 (= $x251 true)))
 (let (($x356 (= $x341 true)))
 (let (($x55 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x39 (= $x9 true)))
 (let (($x51 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (= $x51 true)))
 (let (($x145 (= $x68 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x77 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x36 (= $x77 true)))
 (let (($x45 (= $x36 true)))
 (let (($x99 (= $x45 true)))
 (let (($x59 (and $x99 $x69)))
 (let (($x14 (and $x59 $x145)))
 (let (($x163 (and $x14 $x39)))
 (let (($x101 (and $x163 $x356)))
 (let (($x260 (and $x101 $x30)))
 (let (($x323 (and $x260 $x305)))
 (let (($x74 (and $x323 $x5)))
 (let (($x78 (and $x74 $x112)))
 (let (($x114 (and $x78 $x133)))
 (let (($x11 (and $x114 $x330)))
 (let (($x28 (and $x11 $x198)))
 (let (($x98 (and $x28 $x321)))
 (let (($x138 (and $x98 $x148)))
 (let (($x352 (and $x138 $x205)))
 (let (($x278 (and $x352 $x302)))
 (let (($x47 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x82 (and (not $x47) $x278)))
 (let (($x167 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x13 (and $x167 $x82)))
 (let (($x245 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x328 (and $x245 $x13)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x95 (and $x79 $x328)))
 (let (($x8 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x175 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x8)))))
 (let (($x89 (=> (and $x139 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x8)))))
 (let (($x202 (and $x89 $x95)))
 (let (($x255 (=> $x202 $x91)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 93
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x355 (bvsle ?x83 (_ bv399 32))))
 (let (($x219 (= $x355 true)))
 (let (($x97 (= $x219 true)))
 (let (($x137 (forall ((input.ind-%var1917X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1917X)))
 (=> $x169 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1917X) (_ bv0 32)))))
 ))
 (let (($x132 (forall ((input.ind-%var1916X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1916X)))
 (= $x169 false)))
 ))
 (let (($x303 (and $x132 $x137)))
 (let (($x289 (= $x303 true)))
 (let (($x254 (forall ((input.ind-%var1911X (_ BitVec 32)) )(let ((?x261 (bvadd symbol.1 (bvmul input.ind-%var1911X (_ bv4 32)))))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x309)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x276)))
 (let ((?x12 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1911X)))
 (let (($x332 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1911X)))
 (=> $x332 (= ?x12 ?x135)))))))))
 ))
 (let (($x225 (forall ((input.ind-%var1910X (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) input.ind-%var1910X) (bvult input.ind-%var1910X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x332 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1910X)))
 (= $x332 $x290))))
 ))
 (let (($x170 (and $x225 $x254)))
 (let (($x311 (= $x170 true)))
 (let (($x58 (forall ((input.ind-%var1905X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1905X)))
 (=> $x169 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1905X) (_ bv0 32)))))
 ))
 (let (($x187 (forall ((input.ind-%var1904X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1904X)))
 (= $x169 false)))
 ))
 (let (($x192 (and $x187 $x58)))
 (let (($x103 (= $x192 true)))
 (let ((?x232 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x343 (bvneg ?x232)))
 (let (($x354 (= ?x343 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x321 (= $x354 true)))
 (let (($x98 (= $x321 true)))
 (let (($x117 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x151 (= $x117 true)))
 (let (($x198 (= $x151 true)))
 (let (($x28 (= $x198 true)))
 (let (($x267 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x206 (= $x267 true)))
 (let (($x149 (= $x206 true)))
 (let (($x330 (= $x149 true)))
 (let (($x110 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x121 (= $x110 true)))
 (let (($x246 (= $x121 true)))
 (let (($x176 (= $x246 true)))
 (let ((?x324 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x324)))
 (let ((?x247 (bvand symbol.1 (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x247)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x144 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x33 (and $x78 $x144)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x112 $x33)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x323 $x280)))
 (let (($x263 (not $x100)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x305 (and $x142 $x113)))
 (let (($x74 (and (not $x305) $x263)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x101 $x273)))
 (let (($x30 (not $x282)))
 (let (($x341 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x356 (and $x251 $x341)))
 (let (($x40 (and (not $x356) $x30)))
 (let (($x297 (and (and (and (and (and (and $x40 $x74) $x130) $x210) $x133) $x298) $x147)))
 (let (($x53 (and $x297 $x185)))
 (let (($x67 (= symbol.1 dst_symbol_addr.1)))
 (let (($x294 (and $x67 $x53)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x240 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x240)))
 (let (($x196 (or (bvugt input.memlabel-mem--symbol.1_begin ?x240) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x196) (or $x182 $x72)))))))
 (let (($x88 (and $x80 $x294)))
 (let (($x243 (= $x88 true)))
 (let (($x258 (= $x243 true)))
 (let (($x248 (= $x258 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x127 (bvsub ?x215 ?x331)))
 (let (($x52 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x127) (bvult ?x215 ?x127))))
 (let ((?x122 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x152 (bvmul (_ bv4 64) ?x122)))
 (let ((?x200 ((_ extract 63 32) ?x152)))
 (let (($x235 (= (_ bv0 32) ?x200)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x160 (and (and (and true $x157) $x235) $x52)))
 (let (($x203 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x190 (and $x203 $x160)))
 (let (($x93 (= true $x190)))
 (let (($x156 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (=> $x156 $x93)))
 (let (($x288 (= $x119 true)))
 (let (($x211 (= $x288 true)))
 (let (($x239 (= $x211 true)))
 (let (($x15 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x15 true)))
 (let (($x194 (= $x134 true)))
 (let (($x180 (= $x194 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x25 true)))
 (let (($x23 (= $x76 true)))
 (let (($x49 (= $x23 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x145)))
 (let (($x163 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x55 (= ?x14 input.dst.llvm-%n)))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x59 true)))
 (let (($x29 (= $x131 true)))
 (let (($x84 (= $x29 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x99 true)))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x42 (= $x156 true)))
 (let (($x77 (= $x42 true)))
 (let (($x36 (= $x77 true)))
 (let (($x69 (and $x36 $x62)))
 (let (($x51 (and $x69 $x84)))
 (let (($x39 (and $x51 $x9)))
 (let (($x173 (and $x39 $x158)))
 (let (($x94 (and $x173 $x49)))
 (let (($x32 (and $x94 $x180)))
 (let (($x186 (and $x32 $x239)))
 (let (($x340 (and $x186 $x248)))
 (let (($x300 (and $x340 $x176)))
 (let (($x11 (and $x300 $x330)))
 (let (($x287 (and $x11 $x28)))
 (let (($x233 (and $x287 $x98)))
 (let (($x238 (and $x233 $x103)))
 (let (($x349 (and $x238 $x311)))
 (let (($x105 (and $x349 $x289)))
 (let (($x237 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x286 (and (not $x237) $x105)))
 (let (($x351 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x61 (and $x351 $x286)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x57 $x61)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x296 (and $x35 $x275)))
 (let (($x64 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x79 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x64)))))
 (let (($x357 (=> (and $x156 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x64)))))
 (let (($x306 (and $x357 $x296)))
 (let (($x96 (=> $x306 $x97)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x355 (bvsle ?x83 (_ bv399 32))))
 (let (($x219 (= $x355 true)))
 (let (($x97 (= $x219 true)))
 (let (($x137 (forall ((input.ind-%var1917X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1917X)))
 (=> $x169 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1917X) (_ bv0 32)))))
 ))
 (let (($x132 (forall ((input.ind-%var1916X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1916X)))
 (= $x169 false)))
 ))
 (let (($x303 (and $x132 $x137)))
 (let (($x289 (= $x303 true)))
 (let (($x254 (forall ((input.ind-%var1911X (_ BitVec 32)) )(let ((?x261 (bvadd symbol.1 (bvmul input.ind-%var1911X (_ bv4 32)))))
 (let ((?x309 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x261))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv2 32))) ?x309)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x261 (_ bv3 32))) ?x276)))
 (let ((?x12 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1911X)))
 (let (($x332 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1911X)))
 (=> $x332 (= ?x12 ?x135)))))))))
 ))
 (let (($x225 (forall ((input.ind-%var1910X (_ BitVec 32)) )(let (($x290 (and (bvule (_ bv0 32) input.ind-%var1910X) (bvult input.ind-%var1910X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x332 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1910X)))
 (= $x332 $x290))))
 ))
 (let (($x170 (and $x225 $x254)))
 (let (($x311 (= $x170 true)))
 (let (($x58 (forall ((input.ind-%var1905X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1905X)))
 (=> $x169 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1905X) (_ bv0 32)))))
 ))
 (let (($x187 (forall ((input.ind-%var1904X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1904X)))
 (= $x169 false)))
 ))
 (let (($x192 (and $x187 $x58)))
 (let (($x103 (= $x192 true)))
 (let ((?x232 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x343 (bvneg ?x232)))
 (let (($x354 (= ?x343 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x321 (= $x354 true)))
 (let (($x98 (= $x321 true)))
 (let (($x117 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x151 (= $x117 true)))
 (let (($x198 (= $x151 true)))
 (let (($x28 (= $x198 true)))
 (let (($x267 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x206 (= $x267 true)))
 (let (($x149 (= $x206 true)))
 (let (($x330 (= $x149 true)))
 (let (($x110 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x121 (= $x110 true)))
 (let (($x246 (= $x121 true)))
 (let (($x176 (= $x246 true)))
 (let ((?x324 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x324)))
 (let ((?x247 (bvand symbol.1 (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x247)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x104 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x144 (= input.memlabel-mem--symbol.1_end ?x104)))
 (let (($x78 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x33 (and $x78 $x144)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x112 $x33)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x323 $x280)))
 (let (($x263 (not $x100)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x305 (and $x142 $x113)))
 (let (($x74 (and (not $x305) $x263)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x101 $x273)))
 (let (($x30 (not $x282)))
 (let (($x341 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x356 (and $x251 $x341)))
 (let (($x40 (and (not $x356) $x30)))
 (let (($x297 (and (and (and (and (and (and $x40 $x74) $x130) $x210) $x133) $x298) $x147)))
 (let (($x53 (and $x297 $x185)))
 (let (($x67 (= symbol.1 dst_symbol_addr.1)))
 (let (($x294 (and $x67 $x53)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x240 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x240)))
 (let (($x196 (or (bvugt input.memlabel-mem--symbol.1_begin ?x240) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x196) (or $x182 $x72)))))))
 (let (($x88 (and $x80 $x294)))
 (let (($x243 (= $x88 true)))
 (let (($x258 (= $x243 true)))
 (let (($x248 (= $x258 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x127 (bvsub ?x215 ?x331)))
 (let (($x52 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x127) (bvult ?x215 ?x127))))
 (let ((?x122 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x152 (bvmul (_ bv4 64) ?x122)))
 (let ((?x200 ((_ extract 63 32) ?x152)))
 (let (($x235 (= (_ bv0 32) ?x200)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x160 (and (and (and true $x157) $x235) $x52)))
 (let (($x203 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x190 (and $x203 $x160)))
 (let (($x93 (= true $x190)))
 (let (($x156 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (=> $x156 $x93)))
 (let (($x288 (= $x119 true)))
 (let (($x211 (= $x288 true)))
 (let (($x239 (= $x211 true)))
 (let (($x15 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x15 true)))
 (let (($x194 (= $x134 true)))
 (let (($x180 (= $x194 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x25 true)))
 (let (($x23 (= $x76 true)))
 (let (($x49 (= $x23 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x145)))
 (let (($x163 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x55 (= ?x14 input.dst.llvm-%n)))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x59 true)))
 (let (($x29 (= $x131 true)))
 (let (($x84 (= $x29 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x99 true)))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x42 (= $x156 true)))
 (let (($x77 (= $x42 true)))
 (let (($x36 (= $x77 true)))
 (let (($x69 (and $x36 $x62)))
 (let (($x51 (and $x69 $x84)))
 (let (($x39 (and $x51 $x9)))
 (let (($x173 (and $x39 $x158)))
 (let (($x94 (and $x173 $x49)))
 (let (($x32 (and $x94 $x180)))
 (let (($x186 (and $x32 $x239)))
 (let (($x340 (and $x186 $x248)))
 (let (($x300 (and $x340 $x176)))
 (let (($x11 (and $x300 $x330)))
 (let (($x287 (and $x11 $x28)))
 (let (($x233 (and $x287 $x98)))
 (let (($x238 (and $x233 $x103)))
 (let (($x349 (and $x238 $x311)))
 (let (($x105 (and $x349 $x289)))
 (let (($x237 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x286 (and (not $x237) $x105)))
 (let (($x351 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x61 (and $x351 $x286)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x57 $x61)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x296 (and $x35 $x275)))
 (let (($x64 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x79 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x64)))))
 (let (($x357 (=> (and $x156 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x64)))))
 (let (($x306 (and $x357 $x296)))
 (let (($x96 (=> $x306 $x97)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 94
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x205 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x162 (bvule ?x205 (_ bv399 32))))
 (let (($x224 (= $x162 true)))
 (let (($x350 (= $x224 true)))
 (let (($x208 (forall ((input.ind-%var1935X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1935X)))
 (=> $x92 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1935X) (_ bv0 32)))))
 ))
 (let (($x13 (forall ((input.ind-%var1934X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1934X)))
 (= $x92 false)))
 ))
 (let (($x195 (and $x13 $x208)))
 (let (($x256 (= $x195 true)))
 (let (($x82 (forall ((input.ind-%var1929X (_ BitVec 32)) )(let ((?x60 (bvadd symbol.1 (bvmul input.ind-%var1929X (_ bv4 32)))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x60))))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv2 32))) ?x16)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv3 32))) ?x293)))
 (let ((?x132 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1929X)))
 (let (($x7 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1929X)))
 (=> $x7 (= ?x132 ?x271)))))))))
 ))
 (let (($x254 (forall ((input.ind-%var1928X (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) input.ind-%var1928X) (bvult input.ind-%var1928X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x7 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1928X)))
 (= $x7 $x116))))
 ))
 (let (($x255 (and $x254 $x82)))
 (let (($x50 (= $x255 true)))
 (let (($x220 (forall ((input.ind-%var1923X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1923X)))
 (=> $x92 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1923X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var1922X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1922X)))
 (= $x92 false)))
 ))
 (let (($x339 (and $x192 $x220)))
 (let (($x261 (= $x339 true)))
 (let ((?x343 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x354 (bvneg ?x343)))
 (let (($x321 (= ?x354 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x321 true)))
 (let (($x233 (= $x98 true)))
 (let (($x151 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x198 (= $x151 true)))
 (let (($x28 (= $x198 true)))
 (let (($x287 (= $x28 true)))
 (let (($x206 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x149 (= $x206 true)))
 (let (($x330 (= $x149 true)))
 (let (($x11 (= $x330 true)))
 (let (($x121 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x246 (= $x121 true)))
 (let (($x176 (= $x246 true)))
 (let (($x300 (= $x176 true)))
 (let ((?x298 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x298)))
 (let ((?x241 (bvand symbol.1 (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x241)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x112 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x78 (= input.memlabel-mem--symbol.1_end ?x112)))
 (let (($x174 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x174 $x78)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x210 $x104)))
 (let (($x292 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x323 $x280)))
 (let (($x263 (not $x100)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (and $x113 $x305)))
 (let (($x109 (and (not $x5) $x263)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x101 $x273)))
 (let (($x30 (not $x282)))
 (let (($x356 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x341 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (and $x341 $x356)))
 (let (($x142 (and (not $x260) $x30)))
 (let (($x53 (and (and (and (and (and (and $x142 $x109) $x130) $x292) $x144) $x133) $x114)))
 (let (($x294 (and $x53 $x193)))
 (let (($x183 (= symbol.1 dst_symbol_addr.1)))
 (let (($x88 (and $x183 $x294)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x153 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x201 (or (bvugt input.memlabel-mem--symbol.1_begin ?x153) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x251 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x201) (or $x281 $x189)))))))
 (let (($x243 (and $x251 $x88)))
 (let (($x258 (= $x243 true)))
 (let (($x248 (= $x258 true)))
 (let (($x340 (= $x248 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x235 (bvsub ?x215 ?x331)))
 (let (($x199 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x235) (bvult ?x215 ?x235))))
 (let ((?x128 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x128)))
 (let ((?x152 ((_ extract 63 32) ?x122)))
 (let (($x200 (= (_ bv0 32) ?x152)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x160 (and (and (and true $x157) $x200) $x199)))
 (let (($x203 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x190 (and $x203 $x160)))
 (let (($x93 (= true $x190)))
 (let (($x302 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (=> $x302 $x93)))
 (let (($x288 (= $x119 true)))
 (let (($x211 (= $x288 true)))
 (let (($x239 (= $x211 true)))
 (let (($x15 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x15 true)))
 (let (($x194 (= $x134 true)))
 (let (($x180 (= $x194 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x25 true)))
 (let (($x23 (= $x76 true)))
 (let (($x49 (= $x23 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x145)))
 (let (($x163 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x55 (= ?x14 input.dst.llvm-%n)))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x59 true)))
 (let (($x29 (= $x131 true)))
 (let (($x84 (= $x29 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x99 true)))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x42 (= $x302 true)))
 (let (($x77 (= $x42 true)))
 (let (($x36 (= $x77 true)))
 (let (($x69 (and $x36 $x62)))
 (let (($x51 (and $x69 $x84)))
 (let (($x39 (and $x51 $x9)))
 (let (($x173 (and $x39 $x158)))
 (let (($x94 (and $x173 $x49)))
 (let (($x32 (and $x94 $x180)))
 (let (($x186 (and $x32 $x239)))
 (let (($x110 (and $x186 $x340)))
 (let (($x267 (and $x110 $x300)))
 (let (($x117 (and $x267 $x11)))
 (let (($x232 (and $x117 $x287)))
 (let (($x181 (and $x232 $x233)))
 (let (($x327 (and $x181 $x261)))
 (let (($x20 (and $x327 $x50)))
 (let (($x17 (and $x20 $x256)))
 (let (($x37 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x252 (and (not $x37) $x17)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (and $x47 $x252)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x236 (and $x70 $x138)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x34 $x236)))
 (let (($x89 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x35 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x89)))))
 (let (($x338 (=> (and $x302 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x89)))))
 (let (($x85 (and $x338 $x268)))
 (let (($x159 (=> $x85 $x350)))
 (not $x159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x205 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x162 (bvule ?x205 (_ bv399 32))))
 (let (($x224 (= $x162 true)))
 (let (($x350 (= $x224 true)))
 (let (($x208 (forall ((input.ind-%var1935X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1935X)))
 (=> $x92 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1935X) (_ bv0 32)))))
 ))
 (let (($x13 (forall ((input.ind-%var1934X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1934X)))
 (= $x92 false)))
 ))
 (let (($x195 (and $x13 $x208)))
 (let (($x256 (= $x195 true)))
 (let (($x82 (forall ((input.ind-%var1929X (_ BitVec 32)) )(let ((?x60 (bvadd symbol.1 (bvmul input.ind-%var1929X (_ bv4 32)))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x60))))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv2 32))) ?x16)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x60 (_ bv3 32))) ?x293)))
 (let ((?x132 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1929X)))
 (let (($x7 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1929X)))
 (=> $x7 (= ?x132 ?x271)))))))))
 ))
 (let (($x254 (forall ((input.ind-%var1928X (_ BitVec 32)) )(let (($x116 (and (bvule (_ bv0 32) input.ind-%var1928X) (bvult input.ind-%var1928X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x7 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1928X)))
 (= $x7 $x116))))
 ))
 (let (($x255 (and $x254 $x82)))
 (let (($x50 (= $x255 true)))
 (let (($x220 (forall ((input.ind-%var1923X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1923X)))
 (=> $x92 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1923X) (_ bv0 32)))))
 ))
 (let (($x192 (forall ((input.ind-%var1922X (_ BitVec 32)) )(let (($x92 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1922X)))
 (= $x92 false)))
 ))
 (let (($x339 (and $x192 $x220)))
 (let (($x261 (= $x339 true)))
 (let ((?x343 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x354 (bvneg ?x343)))
 (let (($x321 (= ?x354 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x321 true)))
 (let (($x233 (= $x98 true)))
 (let (($x151 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x198 (= $x151 true)))
 (let (($x28 (= $x198 true)))
 (let (($x287 (= $x28 true)))
 (let (($x206 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x149 (= $x206 true)))
 (let (($x330 (= $x149 true)))
 (let (($x11 (= $x330 true)))
 (let (($x121 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x246 (= $x121 true)))
 (let (($x176 (= $x246 true)))
 (let (($x300 (= $x176 true)))
 (let ((?x298 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x193 (= (_ bv0 32) ?x298)))
 (let ((?x241 (bvand symbol.1 (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x241)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x112 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x78 (= input.memlabel-mem--symbol.1_end ?x112)))
 (let (($x174 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x104 (and $x174 $x78)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x210 $x104)))
 (let (($x292 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x323 $x280)))
 (let (($x263 (not $x100)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (and $x113 $x305)))
 (let (($x109 (and (not $x5) $x263)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x101 $x273)))
 (let (($x30 (not $x282)))
 (let (($x356 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x341 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (and $x341 $x356)))
 (let (($x142 (and (not $x260) $x30)))
 (let (($x53 (and (and (and (and (and (and $x142 $x109) $x130) $x292) $x144) $x133) $x114)))
 (let (($x294 (and $x53 $x193)))
 (let (($x183 (= symbol.1 dst_symbol_addr.1)))
 (let (($x88 (and $x183 $x294)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x153 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x201 (or (bvugt input.memlabel-mem--symbol.1_begin ?x153) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x251 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x201) (or $x281 $x189)))))))
 (let (($x243 (and $x251 $x88)))
 (let (($x258 (= $x243 true)))
 (let (($x248 (= $x258 true)))
 (let (($x340 (= $x248 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x235 (bvsub ?x215 ?x331)))
 (let (($x199 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x235) (bvult ?x215 ?x235))))
 (let ((?x128 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x122 (bvmul (_ bv4 64) ?x128)))
 (let ((?x152 ((_ extract 63 32) ?x122)))
 (let (($x200 (= (_ bv0 32) ?x152)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x160 (and (and (and true $x157) $x200) $x199)))
 (let (($x203 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x190 (and $x203 $x160)))
 (let (($x93 (= true $x190)))
 (let (($x302 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (=> $x302 $x93)))
 (let (($x288 (= $x119 true)))
 (let (($x211 (= $x288 true)))
 (let (($x239 (= $x211 true)))
 (let (($x15 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x15 true)))
 (let (($x194 (= $x134 true)))
 (let (($x180 (= $x194 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x25 true)))
 (let (($x23 (= $x76 true)))
 (let (($x49 (= $x23 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x145)))
 (let (($x163 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x55 (= ?x14 input.dst.llvm-%n)))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x59 true)))
 (let (($x29 (= $x131 true)))
 (let (($x84 (= $x29 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x99 true)))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x42 (= $x302 true)))
 (let (($x77 (= $x42 true)))
 (let (($x36 (= $x77 true)))
 (let (($x69 (and $x36 $x62)))
 (let (($x51 (and $x69 $x84)))
 (let (($x39 (and $x51 $x9)))
 (let (($x173 (and $x39 $x158)))
 (let (($x94 (and $x173 $x49)))
 (let (($x32 (and $x94 $x180)))
 (let (($x186 (and $x32 $x239)))
 (let (($x110 (and $x186 $x340)))
 (let (($x267 (and $x110 $x300)))
 (let (($x117 (and $x267 $x11)))
 (let (($x232 (and $x117 $x287)))
 (let (($x181 (and $x232 $x233)))
 (let (($x327 (and $x181 $x261)))
 (let (($x20 (and $x327 $x50)))
 (let (($x17 (and $x20 $x256)))
 (let (($x37 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x252 (and (not $x37) $x17)))
 (let (($x47 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x138 (and $x47 $x252)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x236 (and $x70 $x138)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x34 $x236)))
 (let (($x89 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x35 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x89)))))
 (let (($x338 (=> (and $x302 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x89)))))
 (let (($x85 (and $x338 $x268)))
 (let (($x159 (=> $x85 $x350)))
 (not $x159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 193 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 95
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x311 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x120 (bvsge ?x311 (_ bv0 32))))
 (let (($x223 (= $x120 true)))
 (let (($x91 (= $x223 true)))
 (let (($x290 (forall ((input.ind-%var1953X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1953X)))
 (=> $x361 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1953X) (_ bv0 32)))))
 ))
 (let (($x61 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1952X)))
 (= $x361 false)))
 ))
 (let (($x125 (and $x61 $x290)))
 (let (($x213 (= $x125 true)))
 (let (($x286 (forall ((input.ind-%var1947X (_ BitVec 32)) )(let ((?x137 (bvadd symbol.1 (bvmul input.ind-%var1947X (_ bv4 32)))))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x137))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv2 32))) ?x332)))
 (let ((?x169 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv3 32))) ?x234)))
 (let ((?x13 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1947X)))
 (let (($x329 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1947X)))
 (=> $x329 (= ?x13 ?x169)))))))))
 ))
 (let (($x82 (forall ((input.ind-%var1946X (_ BitVec 32)) )(let (($x191 (and (bvule (_ bv0 32) input.ind-%var1946X) (bvult input.ind-%var1946X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x329 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1946X)))
 (= $x329 $x191))))
 ))
 (let (($x96 (and $x82 $x286)))
 (let (($x231 (= $x96 true)))
 (let (($x303 (forall ((input.ind-%var1941X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1941X)))
 (=> $x361 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1941X) (_ bv0 32)))))
 ))
 (let (($x339 (forall ((input.ind-%var1940X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1940X)))
 (= $x361 false)))
 ))
 (let (($x46 (and $x339 $x303)))
 (let (($x60 (= $x46 true)))
 (let ((?x354 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x321 (bvneg ?x354)))
 (let (($x98 (= ?x321 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x233 (= $x98 true)))
 (let (($x181 (= $x233 true)))
 (let (($x198 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x28 (= $x198 true)))
 (let (($x287 (= $x28 true)))
 (let (($x232 (= $x287 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x330 (= $x149 true)))
 (let (($x11 (= $x330 true)))
 (let (($x117 (= $x11 true)))
 (let (($x246 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x176 (= $x246 true)))
 (let (($x300 (= $x176 true)))
 (let (($x267 (= $x300 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x133)))
 (let ((?x324 (bvand symbol.1 (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x324)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x210 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x174 (= input.memlabel-mem--symbol.1_end ?x210)))
 (let (($x297 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x112 (and $x297 $x174)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x292 $x112)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x323 $x280)))
 (let (($x263 (not $x100)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x305 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (and $x305 $x5)))
 (let (($x247 (and (not $x74) $x263)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x101 $x273)))
 (let (($x30 (not $x282)))
 (let (($x260 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x356 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x356 $x260)))
 (let (($x113 (and (not $x40) $x30)))
 (let (($x294 (and (and (and (and (and (and $x113 $x247) $x130) $x226) $x78) $x144) $x33)))
 (let (($x88 (and $x294 $x185)))
 (let (($x67 (= symbol.1 dst_symbol_addr.1)))
 (let (($x243 (and $x67 $x88)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x212 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x212)))
 (let (($x24 (or (bvugt input.memlabel-mem--symbol.1_begin ?x212) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x341 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x24) (or $x301 $x108)))))))
 (let (($x258 (and $x341 $x243)))
 (let (($x248 (= $x258 true)))
 (let (($x340 (= $x248 true)))
 (let (($x110 (= $x340 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x200 (bvsub ?x215 ?x331)))
 (let (($x177 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x200) (bvult ?x215 ?x200))))
 (let ((?x115 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvmul (_ bv4 64) ?x115)))
 (let ((?x122 ((_ extract 63 32) ?x128)))
 (let (($x152 (= (_ bv0 32) ?x122)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x160 (and (and (and true $x157) $x152) $x177)))
 (let (($x203 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x190 (and $x203 $x160)))
 (let (($x93 (= true $x190)))
 (let (($x289 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (=> $x289 $x93)))
 (let (($x288 (= $x119 true)))
 (let (($x211 (= $x288 true)))
 (let (($x239 (= $x211 true)))
 (let (($x15 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x15 true)))
 (let (($x194 (= $x134 true)))
 (let (($x180 (= $x194 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x25 true)))
 (let (($x23 (= $x76 true)))
 (let (($x49 (= $x23 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x145)))
 (let (($x163 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x55 (= ?x14 input.dst.llvm-%n)))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x59 true)))
 (let (($x29 (= $x131 true)))
 (let (($x84 (= $x29 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x99 true)))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x42 (= $x289 true)))
 (let (($x77 (= $x42 true)))
 (let (($x36 (= $x77 true)))
 (let (($x69 (and $x36 $x62)))
 (let (($x51 (and $x69 $x84)))
 (let (($x39 (and $x51 $x9)))
 (let (($x173 (and $x39 $x158)))
 (let (($x94 (and $x173 $x49)))
 (let (($x32 (and $x94 $x180)))
 (let (($x186 (and $x32 $x239)))
 (let (($x121 (and $x186 $x110)))
 (let (($x206 (and $x121 $x267)))
 (let (($x151 (and $x206 $x117)))
 (let (($x343 (and $x151 $x232)))
 (let (($x187 (and $x343 $x181)))
 (let (($x315 (and $x187 $x60)))
 (let (($x355 (and $x315 $x231)))
 (let (($x283 (and $x355 $x213)))
 (let (($x228 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x309 (and (not $x228) $x283)))
 (let (($x237 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x238 (and $x237 $x309)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x217 (and $x167 $x238)))
 (let (($x245 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x245 $x217)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x312 (=> (and $x289 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x95 (and $x312 $x150)))
 (let (($x166 (=> $x95 $x91)))
 (not $x166)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x311 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x120 (bvsge ?x311 (_ bv0 32))))
 (let (($x223 (= $x120 true)))
 (let (($x91 (= $x223 true)))
 (let (($x290 (forall ((input.ind-%var1953X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1953X)))
 (=> $x361 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1953X) (_ bv0 32)))))
 ))
 (let (($x61 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1952X)))
 (= $x361 false)))
 ))
 (let (($x125 (and $x61 $x290)))
 (let (($x213 (= $x125 true)))
 (let (($x286 (forall ((input.ind-%var1947X (_ BitVec 32)) )(let ((?x137 (bvadd symbol.1 (bvmul input.ind-%var1947X (_ bv4 32)))))
 (let ((?x332 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x137))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv2 32))) ?x332)))
 (let ((?x169 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x137 (_ bv3 32))) ?x234)))
 (let ((?x13 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1947X)))
 (let (($x329 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1947X)))
 (=> $x329 (= ?x13 ?x169)))))))))
 ))
 (let (($x82 (forall ((input.ind-%var1946X (_ BitVec 32)) )(let (($x191 (and (bvule (_ bv0 32) input.ind-%var1946X) (bvult input.ind-%var1946X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x329 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1946X)))
 (= $x329 $x191))))
 ))
 (let (($x96 (and $x82 $x286)))
 (let (($x231 (= $x96 true)))
 (let (($x303 (forall ((input.ind-%var1941X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1941X)))
 (=> $x361 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1941X) (_ bv0 32)))))
 ))
 (let (($x339 (forall ((input.ind-%var1940X (_ BitVec 32)) )(let (($x361 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1940X)))
 (= $x361 false)))
 ))
 (let (($x46 (and $x339 $x303)))
 (let (($x60 (= $x46 true)))
 (let ((?x354 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x321 (bvneg ?x354)))
 (let (($x98 (= ?x321 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x233 (= $x98 true)))
 (let (($x181 (= $x233 true)))
 (let (($x198 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x28 (= $x198 true)))
 (let (($x287 (= $x28 true)))
 (let (($x232 (= $x287 true)))
 (let (($x149 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x330 (= $x149 true)))
 (let (($x11 (= $x330 true)))
 (let (($x117 (= $x11 true)))
 (let (($x246 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x176 (= $x246 true)))
 (let (($x300 (= $x176 true)))
 (let (($x267 (= $x300 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x133)))
 (let ((?x324 (bvand symbol.1 (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x324)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x210 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x174 (= input.memlabel-mem--symbol.1_end ?x210)))
 (let (($x297 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x112 (and $x297 $x174)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x292 $x112)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x100 (and $x323 $x280)))
 (let (($x263 (not $x100)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x305 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x74 (and $x305 $x5)))
 (let (($x247 (and (not $x74) $x263)))
 (let (($x273 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x101 $x273)))
 (let (($x30 (not $x282)))
 (let (($x260 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x356 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x356 $x260)))
 (let (($x113 (and (not $x40) $x30)))
 (let (($x294 (and (and (and (and (and (and $x113 $x247) $x130) $x226) $x78) $x144) $x33)))
 (let (($x88 (and $x294 $x185)))
 (let (($x67 (= symbol.1 dst_symbol_addr.1)))
 (let (($x243 (and $x67 $x88)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x212 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x212)))
 (let (($x24 (or (bvugt input.memlabel-mem--symbol.1_begin ?x212) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x341 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x24) (or $x301 $x108)))))))
 (let (($x258 (and $x341 $x243)))
 (let (($x248 (= $x258 true)))
 (let (($x340 (= $x248 true)))
 (let (($x110 (= $x340 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x200 (bvsub ?x215 ?x331)))
 (let (($x177 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x200) (bvult ?x215 ?x200))))
 (let ((?x115 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x128 (bvmul (_ bv4 64) ?x115)))
 (let ((?x122 ((_ extract 63 32) ?x128)))
 (let (($x152 (= (_ bv0 32) ?x122)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x160 (and (and (and true $x157) $x152) $x177)))
 (let (($x203 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x190 (and $x203 $x160)))
 (let (($x93 (= true $x190)))
 (let (($x289 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (=> $x289 $x93)))
 (let (($x288 (= $x119 true)))
 (let (($x211 (= $x288 true)))
 (let (($x239 (= $x211 true)))
 (let (($x15 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x134 (= $x15 true)))
 (let (($x194 (= $x134 true)))
 (let (($x180 (= $x194 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (= $x25 true)))
 (let (($x23 (= $x76 true)))
 (let (($x49 (= $x23 true)))
 (let ((?x145 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x14 (bvneg ?x145)))
 (let (($x163 (= ?x14 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x55 (= ?x14 input.dst.llvm-%n)))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x59 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x131 (= $x59 true)))
 (let (($x29 (= $x131 true)))
 (let (($x84 (= $x29 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x44 (= $x99 true)))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x42 (= $x289 true)))
 (let (($x77 (= $x42 true)))
 (let (($x36 (= $x77 true)))
 (let (($x69 (and $x36 $x62)))
 (let (($x51 (and $x69 $x84)))
 (let (($x39 (and $x51 $x9)))
 (let (($x173 (and $x39 $x158)))
 (let (($x94 (and $x173 $x49)))
 (let (($x32 (and $x94 $x180)))
 (let (($x186 (and $x32 $x239)))
 (let (($x121 (and $x186 $x110)))
 (let (($x206 (and $x121 $x267)))
 (let (($x151 (and $x206 $x117)))
 (let (($x343 (and $x151 $x232)))
 (let (($x187 (and $x343 $x181)))
 (let (($x315 (and $x187 $x60)))
 (let (($x355 (and $x315 $x231)))
 (let (($x283 (and $x355 $x213)))
 (let (($x228 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x309 (and (not $x228) $x283)))
 (let (($x237 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x238 (and $x237 $x309)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x217 (and $x167 $x238)))
 (let (($x245 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x150 (and $x245 $x217)))
 (let (($x357 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x34 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x357)))))
 (let (($x312 (=> (and $x289 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x357)))))
 (let (($x95 (and $x312 $x150)))
 (let (($x166 (=> $x95 $x91)))
 (not $x166)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 96
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x155 (bvule ?x50 (_ bv399 32))))
 (let (($x124 (= $x155 true)))
 (let (($x97 (= $x124 true)))
 (let (($x116 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1971X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1971X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1970X)))
 (= $x135 false)))
 ))
 (let (($x83 (and $x138 $x116)))
 (let (($x222 (= $x83 true)))
 (let (($x252 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let ((?x208 (bvadd symbol.1 (bvmul input.ind-%var1965X (_ bv4 32)))))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x208))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv2 32))) ?x7)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv3 32))) ?x229)))
 (let ((?x61 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1965X)))
 (let (($x170 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1965X)))
 (=> $x170 (= ?x61 ?x92)))))))))
 ))
 (let (($x286 (forall ((input.ind-%var1964X (_ BitVec 32)) )(let (($x86 (and (bvule (_ bv0 32) input.ind-%var1964X) (bvult input.ind-%var1964X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x170 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1964X)))
 (= $x170 $x86))))
 ))
 (let (($x159 (and $x286 $x252)))
 (let (($x313 (= $x159 true)))
 (let (($x195 (forall ((input.ind-%var1959X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1959X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1959X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var1958X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1958X)))
 (= $x135 false)))
 ))
 (let (($x336 (and $x46 $x195)))
 (let (($x137 (= $x336 true)))
 (let ((?x321 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x321)))
 (let (($x233 (= ?x98 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x181 (= $x233 true)))
 (let (($x187 (= $x181 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x176 (bvsub ?x215 ?x331)))
 (let (($x149 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x176) (bvult ?x215 ?x176))))
 (let ((?x340 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x110 (bvmul (_ bv4 64) ?x340)))
 (let ((?x121 ((_ extract 63 32) ?x110)))
 (let (($x246 (= (_ bv0 32) ?x121)))
 (let (($x258 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x117 (and (and (and true $x258) $x246) $x149)))
 (let (($x294 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x151 (and $x294 $x117)))
 (let (($x198 (= true $x151)))
 (let (($x256 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x28 (=> $x256 $x198)))
 (let (($x287 (= $x28 true)))
 (let (($x232 (= $x287 true)))
 (let (($x343 (= $x232 true)))
 (let (($x78 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x298 (= $x78 true)))
 (let (($x104 (= $x298 true)))
 (let (($x144 (= $x104 true)))
 (let (($x292 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x297 (= $x292 true)))
 (let (($x210 (= $x297 true)))
 (let (($x174 (= $x210 true)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x114 (= $x130 true)))
 (let (($x147 (= $x114 true)))
 (let (($x226 (= $x147 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x100 (= $x280 true)))
 (let (($x263 (= $x100 true)))
 (let (($x247 (= $x263 true)))
 (let (($x5 (= $x256 true)))
 (let (($x74 (= $x5 true)))
 (let (($x109 (= $x74 true)))
 (let ((?x251 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x251)))
 (let ((?x80 (bvand symbol.1 (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x80)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x24 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x281 (= input.memlabel-mem--symbol.1_end ?x24)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x72 (and $x182 $x281)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (and $x201 $x72)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x211 (and $x119 $x288)))
 (let (($x239 (not $x211)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x160 $x190)))
 (let (($x153 (and (not $x93) $x239)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x199 $x52)))
 (let (($x66 (not $x200)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x128 $x122)))
 (let (($x177 (and (not $x152) $x66)))
 (let (($x40 (and (and (and (and (and (and $x177 $x153) $x196) $x212) $x301) $x108) $x227)))
 (let (($x142 (and $x40 $x284)))
 (let (($x49 (= symbol.1 dst_symbol_addr.1)))
 (let (($x101 (and $x49 $x142)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x32 (or (bvugt input.memlabel-mem--symbol.1_begin ?x134) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x32) (or $x140 $x146)))))))
 (let (($x273 (and $x115 $x101)))
 (let (($x282 (= $x273 true)))
 (let (($x30 (= $x282 true)))
 (let (($x113 (= $x30 true)))
 (let (($x163 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x173 (= $x158 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x29)))
 (let (($x55 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x51 (= ?x84 input.dst.llvm-%n)))
 (let (($x68 (= $x51 true)))
 (let (($x145 (= $x68 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x77 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x36 (= $x77 true)))
 (let (($x45 (= $x36 true)))
 (let (($x99 (= $x45 true)))
 (let (($x59 (and $x99 $x69)))
 (let (($x14 (and $x59 $x145)))
 (let (($x39 (and $x14 $x9)))
 (let (($x25 (and $x39 $x173)))
 (let (($x305 (and $x25 $x113)))
 (let (($x323 (and $x305 $x109)))
 (let (($x241 (and $x323 $x247)))
 (let (($x53 (and $x241 $x226)))
 (let (($x112 (and $x53 $x174)))
 (let (($x193 (and $x112 $x144)))
 (let (($x354 (and $x193 $x343)))
 (let (($x192 (and $x354 $x187)))
 (let (($x348 (and $x192 $x137)))
 (let (($x162 (and $x348 $x313)))
 (let (($x219 (and $x162 $x222)))
 (let (($x328 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (and (not $x328) $x219)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x37 $x16)))
 (let (($x351 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x337 (and $x351 $x327)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x87 (and $x57 $x337)))
 (let (($x338 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x245 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x338)))))
 (let (($x141 (=> (and $x256 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x338)))))
 (let (($x296 (and $x141 $x87)))
 (let (($x322 (=> $x296 $x97)))
 (not $x322)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x155 (bvule ?x50 (_ bv399 32))))
 (let (($x124 (= $x155 true)))
 (let (($x97 (= $x124 true)))
 (let (($x116 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1971X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1971X) (_ bv0 32)))))
 ))
 (let (($x138 (forall ((input.ind-%var1970X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1970X)))
 (= $x135 false)))
 ))
 (let (($x83 (and $x138 $x116)))
 (let (($x222 (= $x83 true)))
 (let (($x252 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let ((?x208 (bvadd symbol.1 (bvmul input.ind-%var1965X (_ bv4 32)))))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x208))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv2 32))) ?x7)))
 (let ((?x92 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x208 (_ bv3 32))) ?x229)))
 (let ((?x61 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1965X)))
 (let (($x170 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1965X)))
 (=> $x170 (= ?x61 ?x92)))))))))
 ))
 (let (($x286 (forall ((input.ind-%var1964X (_ BitVec 32)) )(let (($x86 (and (bvule (_ bv0 32) input.ind-%var1964X) (bvult input.ind-%var1964X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x170 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1964X)))
 (= $x170 $x86))))
 ))
 (let (($x159 (and $x286 $x252)))
 (let (($x313 (= $x159 true)))
 (let (($x195 (forall ((input.ind-%var1959X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1959X)))
 (=> $x135 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1959X) (_ bv0 32)))))
 ))
 (let (($x46 (forall ((input.ind-%var1958X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1958X)))
 (= $x135 false)))
 ))
 (let (($x336 (and $x46 $x195)))
 (let (($x137 (= $x336 true)))
 (let ((?x321 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x98 (bvneg ?x321)))
 (let (($x233 (= ?x98 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x181 (= $x233 true)))
 (let (($x187 (= $x181 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x176 (bvsub ?x215 ?x331)))
 (let (($x149 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x176) (bvult ?x215 ?x176))))
 (let ((?x340 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x110 (bvmul (_ bv4 64) ?x340)))
 (let ((?x121 ((_ extract 63 32) ?x110)))
 (let (($x246 (= (_ bv0 32) ?x121)))
 (let (($x258 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x117 (and (and (and true $x258) $x246) $x149)))
 (let (($x294 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x151 (and $x294 $x117)))
 (let (($x198 (= true $x151)))
 (let (($x256 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x28 (=> $x256 $x198)))
 (let (($x287 (= $x28 true)))
 (let (($x232 (= $x287 true)))
 (let (($x343 (= $x232 true)))
 (let (($x78 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x298 (= $x78 true)))
 (let (($x104 (= $x298 true)))
 (let (($x144 (= $x104 true)))
 (let (($x292 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x297 (= $x292 true)))
 (let (($x210 (= $x297 true)))
 (let (($x174 (= $x210 true)))
 (let (($x130 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x114 (= $x130 true)))
 (let (($x147 (= $x114 true)))
 (let (($x226 (= $x147 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x100 (= $x280 true)))
 (let (($x263 (= $x100 true)))
 (let (($x247 (= $x263 true)))
 (let (($x5 (= $x256 true)))
 (let (($x74 (= $x5 true)))
 (let (($x109 (= $x74 true)))
 (let ((?x251 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x251)))
 (let ((?x80 (bvand symbol.1 (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x80)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x24 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x281 (= input.memlabel-mem--symbol.1_end ?x24)))
 (let (($x182 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x72 (and $x182 $x281)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (and $x201 $x72)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x211 (and $x119 $x288)))
 (let (($x239 (not $x211)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x93 (and $x160 $x190)))
 (let (($x153 (and (not $x93) $x239)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x199 $x52)))
 (let (($x66 (not $x200)))
 (let (($x122 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (and $x128 $x122)))
 (let (($x177 (and (not $x152) $x66)))
 (let (($x40 (and (and (and (and (and (and $x177 $x153) $x196) $x212) $x301) $x108) $x227)))
 (let (($x142 (and $x40 $x284)))
 (let (($x49 (= symbol.1 dst_symbol_addr.1)))
 (let (($x101 (and $x49 $x142)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x32 (or (bvugt input.memlabel-mem--symbol.1_begin ?x134) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x32) (or $x140 $x146)))))))
 (let (($x273 (and $x115 $x101)))
 (let (($x282 (= $x273 true)))
 (let (($x30 (= $x282 true)))
 (let (($x113 (= $x30 true)))
 (let (($x163 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x173 (= $x158 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x29)))
 (let (($x55 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x51 (= ?x84 input.dst.llvm-%n)))
 (let (($x68 (= $x51 true)))
 (let (($x145 (= $x68 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x77 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x36 (= $x77 true)))
 (let (($x45 (= $x36 true)))
 (let (($x99 (= $x45 true)))
 (let (($x59 (and $x99 $x69)))
 (let (($x14 (and $x59 $x145)))
 (let (($x39 (and $x14 $x9)))
 (let (($x25 (and $x39 $x173)))
 (let (($x305 (and $x25 $x113)))
 (let (($x323 (and $x305 $x109)))
 (let (($x241 (and $x323 $x247)))
 (let (($x53 (and $x241 $x226)))
 (let (($x112 (and $x53 $x174)))
 (let (($x193 (and $x112 $x144)))
 (let (($x354 (and $x193 $x343)))
 (let (($x192 (and $x354 $x187)))
 (let (($x348 (and $x192 $x137)))
 (let (($x162 (and $x348 $x313)))
 (let (($x219 (and $x162 $x222)))
 (let (($x328 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x16 (and (not $x328) $x219)))
 (let (($x37 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x327 (and $x37 $x16)))
 (let (($x351 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x337 (and $x351 $x327)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x87 (and $x57 $x337)))
 (let (($x338 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x245 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x338)))))
 (let (($x141 (=> (and $x256 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x338)))))
 (let (($x296 (and $x141 $x87)))
 (let (($x322 (=> $x296 $x97)))
 (not $x322)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 97
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x231 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (bvsle ?x231 (_ bv399 32))))
 (let (($x21 (= $x240 true)))
 (let (($x350 (= $x21 true)))
 (let (($x191 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1989X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1989X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1988X)))
 (= $x271 false)))
 ))
 (let (($x205 (and $x238 $x191)))
 (let (($x221 (= $x205 true)))
 (let (($x309 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let ((?x290 (bvadd symbol.1 (bvmul input.ind-%var1983X (_ bv4 32)))))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x290))))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv2 32))) ?x329)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv3 32))) ?x178)))
 (let ((?x138 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1983X)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1983X)))
 (=> $x255 (= ?x138 ?x361)))))))))
 ))
 (let (($x252 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x58 (and (bvule (_ bv0 32) input.ind-%var1982X) (bvult input.ind-%var1982X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1982X)))
 (= $x255 $x58))))
 ))
 (let (($x166 (and $x252 $x309)))
 (let (($x164 (= $x166 true)))
 (let (($x125 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1977X) (_ bv0 32)))))
 ))
 (let (($x336 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x271 false)))
 ))
 (let (($x352 (and $x336 $x125)))
 (let (($x208 (= $x352 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x98)))
 (let (($x181 (= ?x233 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x181 true)))
 (let (($x192 (= $x187 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x11 (bvsub ?x215 ?x331)))
 (let (($x206 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x11) (bvult ?x215 ?x11))))
 (let ((?x340 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x110 (bvmul (_ bv4 64) ?x340)))
 (let ((?x121 ((_ extract 63 32) ?x110)))
 (let (($x246 (= (_ bv0 32) ?x121)))
 (let (($x330 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x151 (and (and (and true $x330) $x246) $x206)))
 (let (($x185 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x198 (and $x185 $x151)))
 (let (($x28 (= true $x198)))
 (let (($x213 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x287 (=> $x213 $x28)))
 (let (($x232 (= $x287 true)))
 (let (($x343 (= $x232 true)))
 (let (($x354 (= $x343 true)))
 (let (($x298 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (= $x298 true)))
 (let (($x144 (= $x104 true)))
 (let (($x193 (= $x144 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x297 true)))
 (let (($x174 (= $x210 true)))
 (let (($x112 (= $x174 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x147 (= $x114 true)))
 (let (($x226 (= $x147 true)))
 (let (($x53 (= $x226 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x263 (= $x100 true)))
 (let (($x247 (= $x263 true)))
 (let (($x241 (= $x247 true)))
 (let (($x74 (= $x213 true)))
 (let (($x109 (= $x74 true)))
 (let (($x323 (= $x109 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x108)))
 (let ((?x356 (bvand symbol.1 (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x356)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x201 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x182 (= input.memlabel-mem--symbol.1_end ?x201)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x24 (and $x67 $x182)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x212 $x24)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x211 (and $x119 $x288)))
 (let (($x239 (not $x211)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x186 (and $x190 $x93)))
 (let (($x341 (and (not $x186) $x239)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x199 $x52)))
 (let (($x66 (not $x200)))
 (let (($x152 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x122 $x152)))
 (let (($x160 (and (not $x235) $x66)))
 (let (($x142 (and (and (and (and (and (and $x160 $x341) $x196) $x183) $x281) $x301) $x189)))
 (let (($x101 (and $x142 $x260)))
 (let (($x269 (= symbol.1 dst_symbol_addr.1)))
 (let (($x273 (and $x269 $x101)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x180) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x90 $x179)))))))
 (let (($x282 (and $x128 $x273)))
 (let (($x30 (= $x282 true)))
 (let (($x113 (= $x30 true)))
 (let (($x305 (= $x113 true)))
 (let (($x163 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x173 (= $x158 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x29)))
 (let (($x55 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x51 (= ?x84 input.dst.llvm-%n)))
 (let (($x68 (= $x51 true)))
 (let (($x145 (= $x68 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x77 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x36 (= $x77 true)))
 (let (($x45 (= $x36 true)))
 (let (($x99 (= $x45 true)))
 (let (($x59 (and $x99 $x69)))
 (let (($x14 (and $x59 $x145)))
 (let (($x39 (and $x14 $x9)))
 (let (($x25 (and $x39 $x173)))
 (let (($x5 (and $x25 $x305)))
 (let (($x280 (and $x5 $x323)))
 (let (($x130 (and $x280 $x241)))
 (let (($x292 (and $x130 $x53)))
 (let (($x78 (and $x292 $x112)))
 (let (($x324 (and $x78 $x193)))
 (let (($x321 (and $x324 $x354)))
 (let (($x339 (and $x321 $x192)))
 (let (($x75 (and $x339 $x208)))
 (let (($x120 (and $x75 $x164)))
 (let (($x224 (and $x120 $x221)))
 (let (($x275 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x332 (and (not $x275) $x224)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x315 (and $x228 $x332)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x278 (and $x47 $x315)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x314 (and $x70 $x278)))
 (let (($x312 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x312)))))
 (let (($x342 (=> (and $x213 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x312)))))
 (let (($x268 (and $x342 $x314)))
 (let (($x12 (=> $x268 $x350)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x231 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (bvsle ?x231 (_ bv399 32))))
 (let (($x21 (= $x240 true)))
 (let (($x350 (= $x21 true)))
 (let (($x191 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1989X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1989X) (_ bv0 32)))))
 ))
 (let (($x238 (forall ((input.ind-%var1988X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1988X)))
 (= $x271 false)))
 ))
 (let (($x205 (and $x238 $x191)))
 (let (($x221 (= $x205 true)))
 (let (($x309 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let ((?x290 (bvadd symbol.1 (bvmul input.ind-%var1983X (_ bv4 32)))))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x290))))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv2 32))) ?x329)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x290 (_ bv3 32))) ?x178)))
 (let ((?x138 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var1983X)))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1983X)))
 (=> $x255 (= ?x138 ?x361)))))))))
 ))
 (let (($x252 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x58 (and (bvule (_ bv0 32) input.ind-%var1982X) (bvult input.ind-%var1982X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x255 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var1982X)))
 (= $x255 $x58))))
 ))
 (let (($x166 (and $x252 $x309)))
 (let (($x164 (= $x166 true)))
 (let (($x125 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x271 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1977X) (_ bv0 32)))))
 ))
 (let (($x336 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x271 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x271 false)))
 ))
 (let (($x352 (and $x336 $x125)))
 (let (($x208 (= $x352 true)))
 (let ((?x98 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x98)))
 (let (($x181 (= ?x233 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x181 true)))
 (let (($x192 (= $x187 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x11 (bvsub ?x215 ?x331)))
 (let (($x206 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x11) (bvult ?x215 ?x11))))
 (let ((?x340 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x110 (bvmul (_ bv4 64) ?x340)))
 (let ((?x121 ((_ extract 63 32) ?x110)))
 (let (($x246 (= (_ bv0 32) ?x121)))
 (let (($x330 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x151 (and (and (and true $x330) $x246) $x206)))
 (let (($x185 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x198 (and $x185 $x151)))
 (let (($x28 (= true $x198)))
 (let (($x213 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x287 (=> $x213 $x28)))
 (let (($x232 (= $x287 true)))
 (let (($x343 (= $x232 true)))
 (let (($x354 (= $x343 true)))
 (let (($x298 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (= $x298 true)))
 (let (($x144 (= $x104 true)))
 (let (($x193 (= $x144 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x297 true)))
 (let (($x174 (= $x210 true)))
 (let (($x112 (= $x174 true)))
 (let (($x114 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x147 (= $x114 true)))
 (let (($x226 (= $x147 true)))
 (let (($x53 (= $x226 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x263 (= $x100 true)))
 (let (($x247 (= $x263 true)))
 (let (($x241 (= $x247 true)))
 (let (($x74 (= $x213 true)))
 (let (($x109 (= $x74 true)))
 (let (($x323 (= $x109 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x108)))
 (let ((?x356 (bvand symbol.1 (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x356)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x201 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x182 (= input.memlabel-mem--symbol.1_end ?x201)))
 (let (($x67 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x24 (and $x67 $x182)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x212 $x24)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x211 (and $x119 $x288)))
 (let (($x239 (not $x211)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x186 (and $x190 $x93)))
 (let (($x341 (and (not $x186) $x239)))
 (let (($x52 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x199 $x52)))
 (let (($x66 (not $x200)))
 (let (($x152 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x122 $x152)))
 (let (($x160 (and (not $x235) $x66)))
 (let (($x142 (and (and (and (and (and (and $x160 $x341) $x196) $x183) $x281) $x301) $x189)))
 (let (($x101 (and $x142 $x260)))
 (let (($x269 (= symbol.1 dst_symbol_addr.1)))
 (let (($x273 (and $x269 $x101)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x6 (or (bvugt input.memlabel-mem--symbol.1_begin ?x180) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x6) (or $x90 $x179)))))))
 (let (($x282 (and $x128 $x273)))
 (let (($x30 (= $x282 true)))
 (let (($x113 (= $x30 true)))
 (let (($x305 (= $x113 true)))
 (let (($x163 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x173 (= $x158 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x84 (bvneg ?x29)))
 (let (($x55 (= ?x84 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x154 (= $x55 true)))
 (let (($x9 (= $x154 true)))
 (let (($x51 (= ?x84 input.dst.llvm-%n)))
 (let (($x68 (= $x51 true)))
 (let (($x145 (= $x68 true)))
 (let (($x44 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x171 (= $x44 true)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x77 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x36 (= $x77 true)))
 (let (($x45 (= $x36 true)))
 (let (($x99 (= $x45 true)))
 (let (($x59 (and $x99 $x69)))
 (let (($x14 (and $x59 $x145)))
 (let (($x39 (and $x14 $x9)))
 (let (($x25 (and $x39 $x173)))
 (let (($x5 (and $x25 $x305)))
 (let (($x280 (and $x5 $x323)))
 (let (($x130 (and $x280 $x241)))
 (let (($x292 (and $x130 $x53)))
 (let (($x78 (and $x292 $x112)))
 (let (($x324 (and $x78 $x193)))
 (let (($x321 (and $x324 $x354)))
 (let (($x339 (and $x321 $x192)))
 (let (($x75 (and $x339 $x208)))
 (let (($x120 (and $x75 $x164)))
 (let (($x224 (and $x120 $x221)))
 (let (($x275 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x332 (and (not $x275) $x224)))
 (let (($x228 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x315 (and $x228 $x332)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x278 (and $x47 $x315)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x314 (and $x70 $x278)))
 (let (($x312 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x57 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x312)))))
 (let (($x342 (=> (and $x213 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x312)))))
 (let (($x268 (and $x342 $x314)))
 (let (($x12 (=> $x268 $x350)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 98
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x262 (forall ((input.ind-%var2015X (_ BitVec 32)) )(let ((?x116 (bvadd symbol.1 (bvmul input.ind-%var2015X (_ bv4 32)))))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x312 (bvadd ?x215 (_ bv3 32))))
 (let ((?x285 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x215 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x168 (store ?x285 (bvadd ?x215 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x307 (store ?x168 (bvadd ?x215 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x291 (store ?x307 ?x312 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x106 (concat (select ?x291 (bvadd ?x116 (_ bv2 32))) (concat (select ?x291 (bvadd ?x116 (_ bv1 32))) (select ?x291 ?x116)))))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2015X)))
 (let (($x242 (= input.ind-%var2015X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x264 (= (ite $x242 input.spec-%var-i-0.L3%6%bbentry ?x238) (concat (select ?x291 (bvadd ?x116 (_ bv3 32))) ?x106))))
 (let (($x96 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2015X)))
 (let (($x216 (or $x96 $x242)))
 (=> $x216 $x264))))))))))))))))
 ))
 (let (($x266 (forall ((input.ind-%var2014X (_ BitVec 32)) )(let (($x361 (bvule (_ bv0 32) input.ind-%var2014X)))
 (let (($x265 (and $x361 (bvult input.ind-%var2014X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x242 (= input.ind-%var2014X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x96 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2014X)))
 (let (($x216 (or $x96 $x242)))
 (= $x216 $x265)))))))
 ))
 (let (($x161 (and $x266 $x262)))
 (let (($x313 (= true true)))
 (let (($x299 (and $x313 $x161)))
 (let (($x38 (= $x299 true)))
 (let (($x86 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2007X)))
 (=> $x169 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2007X) (_ bv0 32)))))
 ))
 (let (($x327 (forall ((input.ind-%var2006X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2006X)))
 (= $x169 false)))
 ))
 (let (($x311 (and $x327 $x86)))
 (let (($x225 (= $x311 true)))
 (let (($x16 (forall ((input.ind-%var2001X (_ BitVec 32)) )(let ((?x116 (bvadd symbol.1 (bvmul input.ind-%var2001X (_ bv4 32)))))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x116))))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv2 32))) ?x170)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv3 32))) ?x148)))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2001X)))
 (let (($x96 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2001X)))
 (=> $x96 (= ?x238 ?x135)))))))))
 ))
 (let (($x309 (forall ((input.ind-%var2000X (_ BitVec 32)) )(let (($x361 (bvule (_ bv0 32) input.ind-%var2000X)))
 (let (($x96 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2000X)))
 (= $x96 (and $x361 (bvult input.ind-%var2000X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x322 (and $x309 $x16)))
 (let (($x202 (= $x322 true)))
 (let (($x83 (forall ((input.ind-%var1995X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1995X)))
 (=> $x169 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1995X) (_ bv0 32)))))
 ))
 (let (($x352 (forall ((input.ind-%var1994X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1994X)))
 (= $x169 false)))
 ))
 (let (($x349 (and $x352 $x83)))
 (let (($x290 (= $x349 true)))
 (let ((?x233 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x233)))
 (let (($x187 (= ?x181 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x187 true)))
 (let (($x339 (= $x192 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x300 (= (_ bv0 32) ?x117)))
 (let ((?x121 (bvand symbol.1 (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x121)))
 (let ((?x340 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x340)))
 (let ((?x258 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x330 (= input.memlabel-mem--symbol.1_end ?x258)))
 (let (($x243 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x149 (and $x243 $x330)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x133 $x149)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x298 $x104)))
 (let (($x193 (not $x144)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (and $x174 $x112)))
 (let (($x33 (and (not $x78) $x193)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x147 $x226)))
 (let (($x292 (not $x53)))
 (let (($x130 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x241 $x130)))
 (let (($x210 (and (not $x114) $x292)))
 (let (($x198 (and (and (and (and (and (and $x210 $x33) $x294) $x88) $x248) $x110) $x246)))
 (let (($x28 (and $x198 $x300)))
 (let (($x189 (= symbol.1 dst_symbol_addr.1)))
 (let (($x287 (and $x189 $x28)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x260 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x260)))
 (let (($x282 (or (bvugt input.memlabel-mem--symbol.1_begin ?x260) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x282) (or $x5 $x74)))))))
 (let (($x232 (and $x247 $x287)))
 (let (($x343 (= $x232 true)))
 (let (($x354 (= $x343 true)))
 (let (($x321 (= $x354 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x281 (= $x24 true)))
 (let (($x251 (= $x281 true)))
 (let (($x72 (= $x251 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x119 (bvsub ?x215 ?x331)))
 (let (($x341 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x119) (bvult ?x215 ?x119))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x93 (bvmul (_ bv4 64) ?x190)))
 (let ((?x186 ((_ extract 63 32) ?x93)))
 (let (($x153 (= (_ bv0 32) ?x186)))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x227 (and (and (and true $x66) $x153) $x341)))
 (let (($x235 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x111 (and $x235 $x227)))
 (let (($x183 (= true $x111)))
 (let (($x222 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (=> $x222 $x183)))
 (let (($x212 (= $x40 true)))
 (let (($x67 (= $x212 true)))
 (let (($x201 (= $x67 true)))
 (let (($x115 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x23 (= $x115 true)))
 (let (($x128 (= $x23 true)))
 (let (($x15 (= $x128 true)))
 (let (($x90 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x146 (= $x90 true)))
 (let (($x179 (= $x146 true)))
 (let (($x157 (= $x179 true)))
 (let (($x32 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x19 (= $x32 true)))
 (let (($x6 (= $x19 true)))
 (let (($x140 (= $x6 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x134 (= $x25 true)))
 (let (($x194 (= $x134 true)))
 (let (($x49 (= $x194 true)))
 (let (($x39 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x163 (= $x39 true)))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x14 (= $x145 true)))
 (let (($x55 (= $x14 true)))
 (let (($x154 (= $x55 true)))
 (let (($x131 (= $x222 true)))
 (let (($x29 (= $x131 true)))
 (let (($x84 (= $x29 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x77)))
 (let (($x171 (= ?x36 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x45 (= ?x36 input.dst.llvm-%n)))
 (let (($x99 (= $x45 true)))
 (let (($x44 (= $x99 true)))
 (let (($x59 (and $x44 $x69)))
 (let (($x51 (and $x59 $x84)))
 (let (($x9 (and $x51 $x154)))
 (let (($x173 (and $x9 $x158)))
 (let (($x180 (and $x173 $x49)))
 (let (($x203 (and $x180 $x140)))
 (let (($x127 (and $x203 $x157)))
 (let (($x269 (and $x127 $x15)))
 (let (($x182 (and $x269 $x201)))
 (let (($x301 (and $x182 $x72)))
 (let (($x98 (and $x301 $x321)))
 (let (($x46 (and $x98 $x339)))
 (let (($x143 (and $x46 $x290)))
 (let (($x155 (and $x143 $x202)))
 (let (($x223 (and $x155 $x225)))
 (let (($x236 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x7 (and (not $x236) $x223)))
 (let (($x328 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x348 (and $x328 $x7)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x105 (and $x237 $x348)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x326 (and $x167 $x105)))
 (let (($x141 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x70 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x175 (=> (and $x222 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x141)))))
 (let (($x150 (and $x175 $x326)))
 (let (($x358 (=> $x150 $x38)))
 (not $x358)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x262 (forall ((input.ind-%var2015X (_ BitVec 32)) )(let ((?x116 (bvadd symbol.1 (bvmul input.ind-%var2015X (_ bv4 32)))))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x312 (bvadd ?x215 (_ bv3 32))))
 (let ((?x285 (store input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x215 (_ bv0 32)) ((_ extract 7 0) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x168 (store ?x285 (bvadd ?x215 (_ bv1 32)) ((_ extract 15 8) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x307 (store ?x168 (bvadd ?x215 (_ bv2 32)) ((_ extract 23 16) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x291 (store ?x307 ?x312 ((_ extract 31 24) input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let ((?x106 (concat (select ?x291 (bvadd ?x116 (_ bv2 32))) (concat (select ?x291 (bvadd ?x116 (_ bv1 32))) (select ?x291 ?x116)))))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2015X)))
 (let (($x242 (= input.ind-%var2015X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x264 (= (ite $x242 input.spec-%var-i-0.L3%6%bbentry ?x238) (concat (select ?x291 (bvadd ?x116 (_ bv3 32))) ?x106))))
 (let (($x96 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2015X)))
 (let (($x216 (or $x96 $x242)))
 (=> $x216 $x264))))))))))))))))
 ))
 (let (($x266 (forall ((input.ind-%var2014X (_ BitVec 32)) )(let (($x361 (bvule (_ bv0 32) input.ind-%var2014X)))
 (let (($x265 (and $x361 (bvult input.ind-%var2014X (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))))
 (let (($x242 (= input.ind-%var2014X input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x96 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2014X)))
 (let (($x216 (or $x96 $x242)))
 (= $x216 $x265)))))))
 ))
 (let (($x161 (and $x266 $x262)))
 (let (($x313 (= true true)))
 (let (($x299 (and $x313 $x161)))
 (let (($x38 (= $x299 true)))
 (let (($x86 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2007X)))
 (=> $x169 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2007X) (_ bv0 32)))))
 ))
 (let (($x327 (forall ((input.ind-%var2006X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2006X)))
 (= $x169 false)))
 ))
 (let (($x311 (and $x327 $x86)))
 (let (($x225 (= $x311 true)))
 (let (($x16 (forall ((input.ind-%var2001X (_ BitVec 32)) )(let ((?x116 (bvadd symbol.1 (bvmul input.ind-%var2001X (_ bv4 32)))))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x116))))
 (let ((?x148 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv2 32))) ?x170)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x116 (_ bv3 32))) ?x148)))
 (let ((?x238 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2001X)))
 (let (($x96 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2001X)))
 (=> $x96 (= ?x238 ?x135)))))))))
 ))
 (let (($x309 (forall ((input.ind-%var2000X (_ BitVec 32)) )(let (($x361 (bvule (_ bv0 32) input.ind-%var2000X)))
 (let (($x96 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2000X)))
 (= $x96 (and $x361 (bvult input.ind-%var2000X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x322 (and $x309 $x16)))
 (let (($x202 (= $x322 true)))
 (let (($x83 (forall ((input.ind-%var1995X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1995X)))
 (=> $x169 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var1995X) (_ bv0 32)))))
 ))
 (let (($x352 (forall ((input.ind-%var1994X (_ BitVec 32)) )(let (($x169 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var1994X)))
 (= $x169 false)))
 ))
 (let (($x349 (and $x352 $x83)))
 (let (($x290 (= $x349 true)))
 (let ((?x233 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x233)))
 (let (($x187 (= ?x181 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x187 true)))
 (let (($x339 (= $x192 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x300 (= (_ bv0 32) ?x117)))
 (let ((?x121 (bvand symbol.1 (_ bv3 32))))
 (let (($x246 (= (_ bv0 32) ?x121)))
 (let ((?x340 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x340)))
 (let ((?x258 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x330 (= input.memlabel-mem--symbol.1_end ?x258)))
 (let (($x243 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x149 (and $x243 $x330)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x133 $x149)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x144 (and $x298 $x104)))
 (let (($x193 (not $x144)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x78 (and $x174 $x112)))
 (let (($x33 (and (not $x78) $x193)))
 (let (($x226 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x147 $x226)))
 (let (($x292 (not $x53)))
 (let (($x130 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x241 $x130)))
 (let (($x210 (and (not $x114) $x292)))
 (let (($x198 (and (and (and (and (and (and $x210 $x33) $x294) $x88) $x248) $x110) $x246)))
 (let (($x28 (and $x198 $x300)))
 (let (($x189 (= symbol.1 dst_symbol_addr.1)))
 (let (($x287 (and $x189 $x28)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x260 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x260)))
 (let (($x282 (or (bvugt input.memlabel-mem--symbol.1_begin ?x260) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x282) (or $x5 $x74)))))))
 (let (($x232 (and $x247 $x287)))
 (let (($x343 (= $x232 true)))
 (let (($x354 (= $x343 true)))
 (let (($x321 (= $x354 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x281 (= $x24 true)))
 (let (($x251 (= $x281 true)))
 (let (($x72 (= $x251 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x119 (bvsub ?x215 ?x331)))
 (let (($x341 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x119) (bvult ?x215 ?x119))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x93 (bvmul (_ bv4 64) ?x190)))
 (let ((?x186 ((_ extract 63 32) ?x93)))
 (let (($x153 (= (_ bv0 32) ?x186)))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x227 (and (and (and true $x66) $x153) $x341)))
 (let (($x235 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x111 (and $x235 $x227)))
 (let (($x183 (= true $x111)))
 (let (($x222 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x40 (=> $x222 $x183)))
 (let (($x212 (= $x40 true)))
 (let (($x67 (= $x212 true)))
 (let (($x201 (= $x67 true)))
 (let (($x115 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x23 (= $x115 true)))
 (let (($x128 (= $x23 true)))
 (let (($x15 (= $x128 true)))
 (let (($x90 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x146 (= $x90 true)))
 (let (($x179 (= $x146 true)))
 (let (($x157 (= $x179 true)))
 (let (($x32 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x19 (= $x32 true)))
 (let (($x6 (= $x19 true)))
 (let (($x140 (= $x6 true)))
 (let (($x25 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x134 (= $x25 true)))
 (let (($x194 (= $x134 true)))
 (let (($x49 (= $x194 true)))
 (let (($x39 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x163 (= $x39 true)))
 (let (($x129 (= $x163 true)))
 (let (($x158 (= $x129 true)))
 (let (($x145 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x14 (= $x145 true)))
 (let (($x55 (= $x14 true)))
 (let (($x154 (= $x55 true)))
 (let (($x131 (= $x222 true)))
 (let (($x29 (= $x131 true)))
 (let (($x84 (= $x29 true)))
 (let ((?x77 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x36 (bvneg ?x77)))
 (let (($x171 (= ?x36 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x45 (= ?x36 input.dst.llvm-%n)))
 (let (($x99 (= $x45 true)))
 (let (($x44 (= $x99 true)))
 (let (($x59 (and $x44 $x69)))
 (let (($x51 (and $x59 $x84)))
 (let (($x9 (and $x51 $x154)))
 (let (($x173 (and $x9 $x158)))
 (let (($x180 (and $x173 $x49)))
 (let (($x203 (and $x180 $x140)))
 (let (($x127 (and $x203 $x157)))
 (let (($x269 (and $x127 $x15)))
 (let (($x182 (and $x269 $x201)))
 (let (($x301 (and $x182 $x72)))
 (let (($x98 (and $x301 $x321)))
 (let (($x46 (and $x98 $x339)))
 (let (($x143 (and $x46 $x290)))
 (let (($x155 (and $x143 $x202)))
 (let (($x223 (and $x155 $x225)))
 (let (($x236 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x7 (and (not $x236) $x223)))
 (let (($x328 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x348 (and $x328 $x7)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x105 (and $x237 $x348)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x326 (and $x167 $x105)))
 (let (($x141 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x70 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x141)))))
 (let (($x175 (=> (and $x222 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x141)))))
 (let (($x150 (and $x175 $x326)))
 (let (($x358 (=> $x150 $x38)))
 (not $x358)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 99
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x221 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (not $x221)))
 (let (($x191 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x286 (not $x191)))
 (let (($x296 (or $x286 $x229)))
 (let (($x208 (= $x296 true)))
 (let (($x255 (= $x208 true)))
 (let (($x299 (forall ((input.ind-%var2033X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2033X)))
 (=> $x46 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2033X) (_ bv0 32)))))
 ))
 (let (($x106 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2032X)))
 (= $x46 false)))
 ))
 (let (($x38 (and $x106 $x299)))
 (let (($x358 (= $x38 true)))
 (let (($x31 (forall ((input.ind-%var2027X (_ BitVec 32)) )(let ((?x265 (bvadd symbol.1 (bvmul input.ind-%var2027X (_ bv4 32)))))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x265))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv2 32))) ?x56)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv3 32))) ?x274)))
 (let ((?x219 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2027X)))
 (let (($x20 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2027X)))
 (=> $x20 (= ?x219 ?x317)))))))))
 ))
 (let (($x170 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let (($x137 (and (bvule (_ bv0 32) input.ind-%var2026X) (bvult input.ind-%var2026X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x20 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2026X)))
 (= $x20 $x137))))
 ))
 (let (($x291 (and $x170 $x31)))
 (let (($x165 (= $x291 true)))
 (let (($x178 (forall ((input.ind-%var2021X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2021X)))
 (=> $x46 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2021X) (_ bv0 32)))))
 ))
 (let (($x352 (forall ((input.ind-%var2020X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2020X)))
 (= $x46 false)))
 ))
 (let (($x220 (and $x352 $x178)))
 (let (($x283 (= $x220 true)))
 (let ((?x343 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x354 (bvneg ?x343)))
 (let (($x321 (= ?x354 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x321 true)))
 (let (($x233 (= $x98 true)))
 (let ((?x110 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x110)))
 (let (($x300 (= ?x151 input.dst.llvm-%n)))
 (let (($x28 (= $x300 true)))
 (let (($x287 (= $x28 true)))
 (let (($x121 (= ?x151 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x246 (= $x121 true)))
 (let (($x198 (= $x246 true)))
 (let (($x258 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x330 (= $x258 true)))
 (let (($x149 (= $x330 true)))
 (let (($x248 (= $x149 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x78 (bvsub ?x215 ?x331)))
 (let (($x144 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x78) (bvult ?x215 ?x78))))
 (let ((?x292 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x210 (bvmul (_ bv4 64) ?x292)))
 (let ((?x174 ((_ extract 63 32) ?x210)))
 (let (($x112 (= (_ bv0 32) ?x174)))
 (let (($x226 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x11 (and (and (and true $x226) $x112) $x144)))
 (let (($x241 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x294 (and $x241 $x11)))
 (let (($x176 (= true $x294)))
 (let (($x185 (=> $x221 $x176)))
 (let (($x88 (= $x185 true)))
 (let (($x267 (= $x88 true)))
 (let (($x133 (= $x267 true)))
 (let (($x109 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x323 (= $x109 true)))
 (let (($x280 (= $x323 true)))
 (let (($x100 (= $x280 true)))
 (let (($x30 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (= $x30 true)))
 (let (($x5 (= $x113 true)))
 (let (($x305 (= $x5 true)))
 (let (($x263 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x260 (= $x263 true)))
 (let (($x101 (= $x260 true)))
 (let (($x273 (= $x101 true)))
 (let (($x251 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x72 (= $x251 true)))
 (let (($x301 (= $x72 true)))
 (let (($x142 (= $x301 true)))
 (let (($x67 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x201 (= $x67 true)))
 (let (($x182 (= $x201 true)))
 (let (($x24 (= $x182 true)))
 (let (($x341 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x227 (= $x341 true)))
 (let (($x111 (= $x227 true)))
 (let (($x183 (= $x111 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x52)))
 (let ((?x199 (bvand symbol.1 (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x199)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x15 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x115 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x269 (and $x115 $x15)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x127 $x269)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x6 (and $x32 $x19)))
 (let (($x140 (not $x6)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x180 (and $x194 $x49)))
 (let (($x90 (and (not $x180) $x140)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x163 $x129)))
 (let (($x173 (not $x158)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x154 $x9)))
 (let (($x134 (and (not $x39) $x173)))
 (let (($x186 (and (and (and (and (and (and $x134 $x90) $x146) $x157) $x122) $x235) $x177)))
 (let (($x153 (and $x186 $x200)))
 (let (($x42 (= symbol.1 dst_symbol_addr.1)))
 (let (($x196 (and $x42 $x153)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x171 (or (bvugt input.memlabel-mem--symbol.1_begin ?x45) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x171) (or $x131 $x29)))))))
 (let (($x288 (and $x55 $x196)))
 (let (($x119 (= $x288 true)))
 (let (($x211 (= $x119 true)))
 (let (($x239 (= $x211 true)))
 (let (($x40 (and $x239 $x183)))
 (let (($x281 (and $x40 $x24)))
 (let (($x108 (and $x281 $x142)))
 (let (($x282 (and $x108 $x273)))
 (let (($x74 (and $x282 $x305)))
 (let (($x247 (and $x74 $x100)))
 (let (($x243 (and $x247 $x133)))
 (let (($x206 (and $x243 $x248)))
 (let (($x117 (and $x206 $x198)))
 (let (($x232 (and $x117 $x287)))
 (let (($x181 (and $x232 $x233)))
 (let (($x309 (and $x181 $x283)))
 (let (($x123 (and $x309 $x165)))
 (let (($x310 (and $x123 $x358)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x302 (and $x275 $x310)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x360 (and $x37 $x302)))
 (let (($x351 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x284 (and $x351 $x360)))
 (let (($x342 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x167 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x342)))))
 (let (($x79 (=> (and $x221 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x342)))))
 (let (($x355 (and $x79 $x284)))
 (let (($x166 (=> $x355 $x255)))
 (not $x166)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x221 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x229 (not $x221)))
 (let (($x191 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x286 (not $x191)))
 (let (($x296 (or $x286 $x229)))
 (let (($x208 (= $x296 true)))
 (let (($x255 (= $x208 true)))
 (let (($x299 (forall ((input.ind-%var2033X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2033X)))
 (=> $x46 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2033X) (_ bv0 32)))))
 ))
 (let (($x106 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2032X)))
 (= $x46 false)))
 ))
 (let (($x38 (and $x106 $x299)))
 (let (($x358 (= $x38 true)))
 (let (($x31 (forall ((input.ind-%var2027X (_ BitVec 32)) )(let ((?x265 (bvadd symbol.1 (bvmul input.ind-%var2027X (_ bv4 32)))))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x265))))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv2 32))) ?x56)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x265 (_ bv3 32))) ?x274)))
 (let ((?x219 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2027X)))
 (let (($x20 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2027X)))
 (=> $x20 (= ?x219 ?x317)))))))))
 ))
 (let (($x170 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let (($x137 (and (bvule (_ bv0 32) input.ind-%var2026X) (bvult input.ind-%var2026X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x20 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2026X)))
 (= $x20 $x137))))
 ))
 (let (($x291 (and $x170 $x31)))
 (let (($x165 (= $x291 true)))
 (let (($x178 (forall ((input.ind-%var2021X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2021X)))
 (=> $x46 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2021X) (_ bv0 32)))))
 ))
 (let (($x352 (forall ((input.ind-%var2020X (_ BitVec 32)) )(let (($x46 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2020X)))
 (= $x46 false)))
 ))
 (let (($x220 (and $x352 $x178)))
 (let (($x283 (= $x220 true)))
 (let ((?x343 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x354 (bvneg ?x343)))
 (let (($x321 (= ?x354 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x321 true)))
 (let (($x233 (= $x98 true)))
 (let ((?x110 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x151 (bvneg ?x110)))
 (let (($x300 (= ?x151 input.dst.llvm-%n)))
 (let (($x28 (= $x300 true)))
 (let (($x287 (= $x28 true)))
 (let (($x121 (= ?x151 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x246 (= $x121 true)))
 (let (($x198 (= $x246 true)))
 (let (($x258 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x330 (= $x258 true)))
 (let (($x149 (= $x330 true)))
 (let (($x248 (= $x149 true)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let ((?x78 (bvsub ?x215 ?x331)))
 (let (($x144 (ite (bvsge ?x331 (_ bv0 32)) (bvuge ?x215 ?x78) (bvult ?x215 ?x78))))
 (let ((?x292 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x210 (bvmul (_ bv4 64) ?x292)))
 (let ((?x174 ((_ extract 63 32) ?x210)))
 (let (($x112 (= (_ bv0 32) ?x174)))
 (let (($x226 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x11 (and (and (and true $x226) $x112) $x144)))
 (let (($x241 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x294 (and $x241 $x11)))
 (let (($x176 (= true $x294)))
 (let (($x185 (=> $x221 $x176)))
 (let (($x88 (= $x185 true)))
 (let (($x267 (= $x88 true)))
 (let (($x133 (= $x267 true)))
 (let (($x109 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x323 (= $x109 true)))
 (let (($x280 (= $x323 true)))
 (let (($x100 (= $x280 true)))
 (let (($x30 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (= $x30 true)))
 (let (($x5 (= $x113 true)))
 (let (($x305 (= $x5 true)))
 (let (($x263 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x260 (= $x263 true)))
 (let (($x101 (= $x260 true)))
 (let (($x273 (= $x101 true)))
 (let (($x251 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x72 (= $x251 true)))
 (let (($x301 (= $x72 true)))
 (let (($x142 (= $x301 true)))
 (let (($x67 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x201 (= $x67 true)))
 (let (($x182 (= $x201 true)))
 (let (($x24 (= $x182 true)))
 (let (($x341 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x227 (= $x341 true)))
 (let (($x111 (= $x227 true)))
 (let (($x183 (= $x111 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x52)))
 (let ((?x199 (bvand symbol.1 (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x199)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x128 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x15 (= input.memlabel-mem--symbol.1_end ?x128)))
 (let (($x115 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x269 (and $x115 $x15)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x127 $x269)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x6 (and $x32 $x19)))
 (let (($x140 (not $x6)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x180 (and $x194 $x49)))
 (let (($x90 (and (not $x180) $x140)))
 (let (($x129 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x163 $x129)))
 (let (($x173 (not $x158)))
 (let (($x9 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x154 $x9)))
 (let (($x134 (and (not $x39) $x173)))
 (let (($x186 (and (and (and (and (and (and $x134 $x90) $x146) $x157) $x122) $x235) $x177)))
 (let (($x153 (and $x186 $x200)))
 (let (($x42 (= symbol.1 dst_symbol_addr.1)))
 (let (($x196 (and $x42 $x153)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x171 (or (bvugt input.memlabel-mem--symbol.1_begin ?x45) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x171) (or $x131 $x29)))))))
 (let (($x288 (and $x55 $x196)))
 (let (($x119 (= $x288 true)))
 (let (($x211 (= $x119 true)))
 (let (($x239 (= $x211 true)))
 (let (($x40 (and $x239 $x183)))
 (let (($x281 (and $x40 $x24)))
 (let (($x108 (and $x281 $x142)))
 (let (($x282 (and $x108 $x273)))
 (let (($x74 (and $x282 $x305)))
 (let (($x247 (and $x74 $x100)))
 (let (($x243 (and $x247 $x133)))
 (let (($x206 (and $x243 $x248)))
 (let (($x117 (and $x206 $x198)))
 (let (($x232 (and $x117 $x287)))
 (let (($x181 (and $x232 $x233)))
 (let (($x309 (and $x181 $x283)))
 (let (($x123 (and $x309 $x165)))
 (let (($x310 (and $x123 $x358)))
 (let (($x275 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x302 (and $x275 $x310)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x360 (and $x37 $x302)))
 (let (($x351 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x284 (and $x351 $x360)))
 (let (($x342 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x167 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x342)))))
 (let (($x79 (=> (and $x221 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x342)))))
 (let (($x355 (and $x79 $x284)))
 (let (($x166 (=> $x355 $x255)))
 (not $x166)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 100
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x202 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x225 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (or $x225 $x202)))
 (let (($x223 (= $x86 true)))
 (let (($x326 (= $x223 true)))
 (let (($x192 (forall ((input.ind-%var2051X (_ BitVec 32)) )(let (($x300 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2051X)))
 (=> $x300 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2051X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var2050X (_ BitVec 32)) )(let (($x300 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2050X)))
 (= $x300 false)))
 ))
 (let (($x155 (and $x148 $x192)))
 (let (($x327 (= $x155 true)))
 (let (($x236 (forall ((input.ind-%var2045X (_ BitVec 32)) )(let ((?x360 (bvadd symbol.1 (bvmul input.ind-%var2045X (_ bv4 32)))))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x360))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv2 32))) ?x286)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv3 32))) ?x208)))
 (let ((?x81 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2045X)))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2045X)))
 (=> $x309 (= ?x81 ?x120)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var2044X (_ BitVec 32)) )(let (($x322 (and (bvule (_ bv0 32) input.ind-%var2044X) (bvult input.ind-%var2044X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2044X)))
 (= $x309 $x322))))
 ))
 (let (($x116 (and $x265 $x236)))
 (let (($x16 (= $x116 true)))
 (let (($x83 (forall ((input.ind-%var2039X (_ BitVec 32)) )(let (($x300 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2039X)))
 (=> $x300 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2039X) (_ bv0 32)))))
 ))
 (let (($x343 (forall ((input.ind-%var2038X (_ BitVec 32)) )(let (($x300 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2038X)))
 (= $x300 false)))
 ))
 (let (($x96 (and $x343 $x83)))
 (let (($x361 (= $x96 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x248)))
 (let (($x340 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x340 true)))
 (let (($x151 (= $x110 true)))
 (let ((?x294 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x294)))
 (let (($x243 (= ?x176 input.dst.llvm-%n)))
 (let (($x258 (= $x243 true)))
 (let (($x330 (= $x258 true)))
 (let (($x185 (= ?x176 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x185 true)))
 (let (($x267 (= $x88 true)))
 (let (($x324 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x78 (= $x324 true)))
 (let (($x298 (= $x78 true)))
 (let (($x104 (= $x298 true)))
 (let (($x292 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x210 (= $x292 true)))
 (let (($x174 (= $x210 true)))
 (let (($x112 (= $x174 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x297 true)))
 (let (($x226 (= $x147 true)))
 (let (($x193 (= $x226 true)))
 (let (($x356 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x189 (= $x356 true)))
 (let (($x241 (= $x189 true)))
 (let (($x114 (= $x241 true)))
 (let (($x109 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x323 (= $x109 true)))
 (let (($x280 (= $x323 true)))
 (let (($x100 (= $x280 true)))
 (let (($x30 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x113 (= $x30 true)))
 (let (($x5 (= $x113 true)))
 (let (($x305 (= $x5 true)))
 (let (($x108 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x263 (= $x108 true)))
 (let (($x260 (= $x263 true)))
 (let (($x101 (= $x260 true)))
 (let (($x201 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x182 (and true $x201)))
 (let (($x24 (= true $x182)))
 (let (($x111 (not $x202)))
 (let (($x281 (=> $x111 $x24)))
 (let (($x251 (= $x281 true)))
 (let (($x72 (= $x251 true)))
 (let (($x301 (= $x72 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x93)))
 (let ((?x152 (bvand symbol.1 (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x152)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let ((?x23 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x128 (= input.memlabel-mem--symbol.1_end ?x23)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x15 (and $x127 $x128)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x160 $x15)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x19 $x6)))
 (let (($x90 (not $x140)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (and $x180 $x203)))
 (let (($x146 (and (not $x32) $x90)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x129 $x158)))
 (let (($x134 (not $x173)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x39 $x25)))
 (let (($x49 (and (not $x163) $x134)))
 (let (($x196 (and (and (and (and (and (and $x49 $x146) $x80) $x157) $x269) $x190) $x235)))
 (let (($x288 (and $x196 $x199)))
 (let (($x45 (= symbol.1 dst_symbol_addr.1)))
 (let (($x119 (and $x45 $x288)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x131 (or (bvugt input.memlabel-mem--symbol.1_begin ?x171) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x131) (or $x51 $x68)))))))
 (let (($x211 (and $x9 $x119)))
 (let (($x239 (= $x211 true)))
 (let (($x341 (= $x239 true)))
 (let (($x227 (= $x341 true)))
 (let (($x142 (and $x227 $x301)))
 (let (($x273 (and $x142 $x101)))
 (let (($x74 (and $x273 $x305)))
 (let (($x247 (and $x74 $x100)))
 (let (($x130 (and $x247 $x114)))
 (let (($x53 (and $x130 $x193)))
 (let (($x33 (and $x53 $x112)))
 (let (($x144 (and $x33 $x104)))
 (let (($x133 (and $x144 $x267)))
 (let (($x149 (and $x133 $x330)))
 (let (($x121 (and $x149 $x151)))
 (let (($x178 (and $x121 $x361)))
 (let (($x336 (and $x178 $x16)))
 (let (($x150 (and $x336 $x327)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x313 (and $x77 $x150)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x348 (and $x228 $x313)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x47 $x348)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let (($x175 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x351 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x175)))))
 (let (($x35 (=> (and $x202 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x175)))))
 (let (($x311 (and $x35 $x105)))
 (let (($x242 (=> $x311 $x326)))
 (not $x242))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x202 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x225 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x86 (or $x225 $x202)))
 (let (($x223 (= $x86 true)))
 (let (($x326 (= $x223 true)))
 (let (($x192 (forall ((input.ind-%var2051X (_ BitVec 32)) )(let (($x300 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2051X)))
 (=> $x300 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2051X) (_ bv0 32)))))
 ))
 (let (($x148 (forall ((input.ind-%var2050X (_ BitVec 32)) )(let (($x300 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2050X)))
 (= $x300 false)))
 ))
 (let (($x155 (and $x148 $x192)))
 (let (($x327 (= $x155 true)))
 (let (($x236 (forall ((input.ind-%var2045X (_ BitVec 32)) )(let ((?x360 (bvadd symbol.1 (bvmul input.ind-%var2045X (_ bv4 32)))))
 (let ((?x286 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x360))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv2 32))) ?x286)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x360 (_ bv3 32))) ?x208)))
 (let ((?x81 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2045X)))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2045X)))
 (=> $x309 (= ?x81 ?x120)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var2044X (_ BitVec 32)) )(let (($x322 (and (bvule (_ bv0 32) input.ind-%var2044X) (bvult input.ind-%var2044X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))
 (let (($x309 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2044X)))
 (= $x309 $x322))))
 ))
 (let (($x116 (and $x265 $x236)))
 (let (($x16 (= $x116 true)))
 (let (($x83 (forall ((input.ind-%var2039X (_ BitVec 32)) )(let (($x300 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2039X)))
 (=> $x300 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2039X) (_ bv0 32)))))
 ))
 (let (($x343 (forall ((input.ind-%var2038X (_ BitVec 32)) )(let (($x300 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2038X)))
 (= $x300 false)))
 ))
 (let (($x96 (and $x343 $x83)))
 (let (($x361 (= $x96 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x248)))
 (let (($x340 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x340 true)))
 (let (($x151 (= $x110 true)))
 (let ((?x294 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x294)))
 (let (($x243 (= ?x176 input.dst.llvm-%n)))
 (let (($x258 (= $x243 true)))
 (let (($x330 (= $x258 true)))
 (let (($x185 (= ?x176 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x88 (= $x185 true)))
 (let (($x267 (= $x88 true)))
 (let (($x324 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x78 (= $x324 true)))
 (let (($x298 (= $x78 true)))
 (let (($x104 (= $x298 true)))
 (let (($x292 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x210 (= $x292 true)))
 (let (($x174 (= $x210 true)))
 (let (($x112 (= $x174 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (= $x297 true)))
 (let (($x226 (= $x147 true)))
 (let (($x193 (= $x226 true)))
 (let (($x356 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x189 (= $x356 true)))
 (let (($x241 (= $x189 true)))
 (let (($x114 (= $x241 true)))
 (let (($x109 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x323 (= $x109 true)))
 (let (($x280 (= $x323 true)))
 (let (($x100 (= $x280 true)))
 (let (($x30 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x113 (= $x30 true)))
 (let (($x5 (= $x113 true)))
 (let (($x305 (= $x5 true)))
 (let (($x108 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x263 (= $x108 true)))
 (let (($x260 (= $x263 true)))
 (let (($x101 (= $x260 true)))
 (let (($x201 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x182 (and true $x201)))
 (let (($x24 (= true $x182)))
 (let (($x111 (not $x202)))
 (let (($x281 (=> $x111 $x24)))
 (let (($x251 (= $x281 true)))
 (let (($x72 (= $x251 true)))
 (let (($x301 (= $x72 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x93)))
 (let ((?x152 (bvand symbol.1 (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x152)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let ((?x23 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x128 (= input.memlabel-mem--symbol.1_end ?x23)))
 (let (($x127 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x15 (and $x127 $x128)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x160 $x15)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x140 (and $x19 $x6)))
 (let (($x90 (not $x140)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x32 (and $x180 $x203)))
 (let (($x146 (and (not $x32) $x90)))
 (let (($x158 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x129 $x158)))
 (let (($x134 (not $x173)))
 (let (($x25 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x39 $x25)))
 (let (($x49 (and (not $x163) $x134)))
 (let (($x196 (and (and (and (and (and (and $x49 $x146) $x80) $x157) $x269) $x190) $x235)))
 (let (($x288 (and $x196 $x199)))
 (let (($x45 (= symbol.1 dst_symbol_addr.1)))
 (let (($x119 (and $x45 $x288)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x131 (or (bvugt input.memlabel-mem--symbol.1_begin ?x171) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x131) (or $x51 $x68)))))))
 (let (($x211 (and $x9 $x119)))
 (let (($x239 (= $x211 true)))
 (let (($x341 (= $x239 true)))
 (let (($x227 (= $x341 true)))
 (let (($x142 (and $x227 $x301)))
 (let (($x273 (and $x142 $x101)))
 (let (($x74 (and $x273 $x305)))
 (let (($x247 (and $x74 $x100)))
 (let (($x130 (and $x247 $x114)))
 (let (($x53 (and $x130 $x193)))
 (let (($x33 (and $x53 $x112)))
 (let (($x144 (and $x33 $x104)))
 (let (($x133 (and $x144 $x267)))
 (let (($x149 (and $x133 $x330)))
 (let (($x121 (and $x149 $x151)))
 (let (($x178 (and $x121 $x361)))
 (let (($x336 (and $x178 $x16)))
 (let (($x150 (and $x336 $x327)))
 (let (($x77 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x313 (and $x77 $x150)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x348 (and $x228 $x313)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x105 (and $x47 $x348)))
 (let ((?x331 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvadd symbol.1 ?x331)))
 (let (($x175 (and (bvule input.memlabel-mem--symbol.1_begin ?x215) (bvule (bvadd ?x215 (_ bv3 32)) input.memlabel-mem--symbol.1_end))))
 (let (($x351 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false $x175)))))
 (let (($x35 (=> (and $x202 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false $x175)))))
 (let (($x311 (and $x35 $x105)))
 (let (($x242 (=> $x311 $x326)))
 (not $x242))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
==query_number: 101
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x262 (forall ((input.ind-%var2075X (_ BitVec 32)) )(let ((?x326 (bvadd symbol.1 (bvmul input.ind-%var2075X (_ bv4 32)))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x326))))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv2 32))) ?x8)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv3 32))) ?x285)))
 (let ((?x286 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2075X)))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2075X)))
 (=> $x136 (= ?x286 ?x354)))))))))
 ))
 (let (($x310 (forall ((input.ind-%var2074X (_ BitVec 32)) )(let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2074X)))
 (= $x136 (and (bvule (_ bv0 32) input.ind-%var2074X) (bvult input.ind-%var2074X input.dst.llvm-%n)))))
 ))
 (let (($x264 (and $x310 $x262)))
 (let (($x283 (= true true)))
 (let (($x161 (and $x283 $x264)))
 (let (($x126 (= $x161 true)))
 (let (($x230 (forall ((input.ind-%var2069X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2069X)))
 (=> $x206 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2069X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var2068X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2068X)))
 (= $x206 false)))
 ))
 (let (($x274 (and $x56 $x230)))
 (let (($x307 (= $x274 true)))
 (let (($x7 (forall ((input.ind-%var2063X (_ BitVec 32)) )(let ((?x326 (bvadd symbol.1 (bvmul input.ind-%var2063X (_ bv4 32)))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x326))))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv2 32))) ?x8)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv3 32))) ?x285)))
 (let ((?x286 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2063X)))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2063X)))
 (=> $x136 (= ?x286 ?x354)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var2062X (_ BitVec 32)) )(let (($x166 (bvule (_ bv0 32) input.ind-%var2062X)))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2062X)))
 (= $x136 (and $x166 (bvult input.ind-%var2062X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x220 (and $x296 $x7)))
 (let (($x234 (= $x220 true)))
 (let (($x361 (forall ((input.ind-%var2057X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2057X)))
 (=> $x206 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2057X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var2056X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2056X)))
 (= $x206 false)))
 ))
 (let (($x178 (and $x121 $x361)))
 (let (($x309 (= $x178 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x29)))
 (let (($x267 (= ?x51 input.dst.llvm-%n)))
 (let (($x133 (= $x267 true)))
 (let (($x243 (= $x133 true)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x292)))
 (let ((?x193 (bvand symbol.1 (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x193)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x189 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x241 (= input.memlabel-mem--symbol.1_end ?x189)))
 (let (($x356 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (and $x356 $x241)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x247 $x114)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x323 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (and $x30 $x113)))
 (let (($x305 (not $x5)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x282 (and $x101 $x273)))
 (let (($x109 (and (not $x282) $x305)))
 (let (($x301 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x72 $x301)))
 (let (($x108 (not $x142)))
 (let (($x281 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x24 $x281)))
 (let (($x260 (and (not $x251) $x108)))
 (let (($x298 (and (and (and (and (and (and $x260 $x109) $x323) $x100) $x130) $x226) $x53)))
 (let (($x104 (and $x298 $x210)))
 (let (($x190 (= symbol.1 dst_symbol_addr.1)))
 (let (($x144 (and $x190 $x104)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x119 (or (bvugt input.memlabel-mem--symbol.1_begin ?x93) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x119) (or $x227 $x111)))))))
 (let (($x11 (and $x182 $x144)))
 (let (($x294 (= $x11 true)))
 (let (($x176 (= $x294 true)))
 (let (($x185 (= $x176 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (= $x127 true)))
 (let (($x23 (= $x115 true)))
 (let (($x128 (= $x23 true)))
 (let (($x173 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (not $x173)))
 (let (($x179 (= $x134 true)))
 (let (($x157 (= $x179 true)))
 (let (($x52 (= $x157 true)))
 (let (($x19 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x6 (and true $x19)))
 (let (($x140 (= true $x6)))
 (let (($x90 (=> $x134 $x140)))
 (let (($x146 (= $x90 true)))
 (let (($x177 (= $x146 true)))
 (let (($x80 (= $x177 true)))
 (let (($x39 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x25 (= $x39 true)))
 (let (($x163 (= $x25 true)))
 (let (($x194 (= $x163 true)))
 (let (($x217 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (= $x217 true)))
 (let (($x9 (= $x42 true)))
 (let (($x14 (= $x9 true)))
 (let (($x84 (= ?x51 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (= $x84 true)))
 (let (($x145 (= $x68 true)))
 (let (($x171 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x131 (= $x69 true)))
 (let ((?x328 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x275 (bvneg ?x328)))
 (let (($x77 (= ?x275 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x77 true)))
 (let (($x44 (= $x99 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x357 (= $x35 true)))
 (let (($x47 (= $x357 true)))
 (let (($x237 (= $x47 true)))
 (let (($x70 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x175 (= $x70 true)))
 (let (($x167 (= $x175 true)))
 (let (($x79 (= $x167 true)))
 (let (($x312 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x57 (= $x312 true)))
 (let (($x342 (= $x57 true)))
 (let (($x141 (= $x342 true)))
 (let (($x351 (and $x141 $x79)))
 (let (($x37 (and $x351 $x237)))
 (let (($x154 (and $x37 $x44)))
 (let (($x59 (and $x154 $x131)))
 (let (($x55 (and $x59 $x145)))
 (let (($x45 (and $x55 $x14)))
 (let (($x129 (and $x45 $x194)))
 (let (($x186 (and $x129 $x80)))
 (let (($x160 (and $x186 $x52)))
 (let (($x15 (and $x160 $x128)))
 (let (($x88 (and $x15 $x185)))
 (let (($x258 (and $x88 $x243)))
 (let (($x219 (and $x258 $x309)))
 (let (($x162 (and $x219 $x234)))
 (let (($x123 (and $x162 $x307)))
 (let (($x338 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (and $x338 $x123)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and $x64 $x38)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x222 $x276)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x339 (and $x277 $x287)))
 (let (($x103 (=> $x339 $x126)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun symbol.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lfor.cond%1%bbentry () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--symbol.1_end () (_ BitVec 32))
(declare-fun dst_symbol_addr.1 () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-n-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x262 (forall ((input.ind-%var2075X (_ BitVec 32)) )(let ((?x326 (bvadd symbol.1 (bvmul input.ind-%var2075X (_ bv4 32)))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x326))))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv2 32))) ?x8)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv3 32))) ?x285)))
 (let ((?x286 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2075X)))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2075X)))
 (=> $x136 (= ?x286 ?x354)))))))))
 ))
 (let (($x310 (forall ((input.ind-%var2074X (_ BitVec 32)) )(let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2074X)))
 (= $x136 (and (bvule (_ bv0 32) input.ind-%var2074X) (bvult input.ind-%var2074X input.dst.llvm-%n)))))
 ))
 (let (($x264 (and $x310 $x262)))
 (let (($x283 (= true true)))
 (let (($x161 (and $x283 $x264)))
 (let (($x126 (= $x161 true)))
 (let (($x230 (forall ((input.ind-%var2069X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2069X)))
 (=> $x206 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2069X) (_ bv0 32)))))
 ))
 (let (($x56 (forall ((input.ind-%var2068X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2068X)))
 (= $x206 false)))
 ))
 (let (($x274 (and $x56 $x230)))
 (let (($x307 (= $x274 true)))
 (let (($x7 (forall ((input.ind-%var2063X (_ BitVec 32)) )(let ((?x326 (bvadd symbol.1 (bvmul input.ind-%var2063X (_ bv4 32)))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv1 32))) (select input.dst.llvm-mem.Lfor.cond%1%bbentry ?x326))))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv2 32))) ?x8)))
 (let ((?x354 (concat (select input.dst.llvm-mem.Lfor.cond%1%bbentry (bvadd ?x326 (_ bv3 32))) ?x285)))
 (let ((?x286 (input.spec-%var-m-0.L3%6%bbentry.1.1 input.ind-%var2063X)))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2063X)))
 (=> $x136 (= ?x286 ?x354)))))))))
 ))
 (let (($x296 (forall ((input.ind-%var2062X (_ BitVec 32)) )(let (($x166 (bvule (_ bv0 32) input.ind-%var2062X)))
 (let (($x136 (input.spec-%var-m-0.L3%6%bbentry.0.1 input.ind-%var2062X)))
 (= $x136 (and $x166 (bvult input.ind-%var2062X input.dst.llvm-%i.0.Lfor.cond%1%bbentry))))))
 ))
 (let (($x220 (and $x296 $x7)))
 (let (($x234 (= $x220 true)))
 (let (($x361 (forall ((input.ind-%var2057X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2057X)))
 (=> $x206 (= (input.spec-%tmpvar-8.L3%6%bbentry.1.1 input.ind-%var2057X) (_ bv0 32)))))
 ))
 (let (($x121 (forall ((input.ind-%var2056X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-8.L3%6%bbentry.0.1 input.ind-%var2056X)))
 (= $x206 false)))
 ))
 (let (($x178 (and $x121 $x361)))
 (let (($x309 (= $x178 true)))
 (let ((?x29 (bvmul input.spec-%var-n-1 (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x29)))
 (let (($x267 (= ?x51 input.dst.llvm-%n)))
 (let (($x133 (= $x267 true)))
 (let (($x243 (= $x133 true)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x292)))
 (let ((?x193 (bvand symbol.1 (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x193)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x189 (bvadd input.memlabel-mem--symbol.1_begin (_ bv399 32))))
 (let (($x241 (= input.memlabel-mem--symbol.1_end ?x189)))
 (let (($x356 (bvule input.memlabel-mem--symbol.1_begin input.memlabel-mem--symbol.1_end)))
 (let (($x114 (and $x356 $x241)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x247 $x114)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x323 (= symbol.1 input.memlabel-mem--symbol.1_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.memlabel-mem--symbol.1_begin)))
 (let (($x5 (and $x30 $x113)))
 (let (($x305 (not $x5)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.memlabel-mem--symbol.1_begin)))
 (let (($x282 (and $x101 $x273)))
 (let (($x109 (and (not $x282) $x305)))
 (let (($x301 (bvule input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.memlabel-mem--symbol.1_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x72 $x301)))
 (let (($x108 (not $x142)))
 (let (($x281 (bvule input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.memlabel-mem--symbol.1_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x24 $x281)))
 (let (($x260 (and (not $x251) $x108)))
 (let (($x298 (and (and (and (and (and (and $x260 $x109) $x323) $x100) $x130) $x226) $x53)))
 (let (($x104 (and $x298 $x210)))
 (let (($x190 (= symbol.1 dst_symbol_addr.1)))
 (let (($x144 (and $x190 $x104)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x119 (or (bvugt input.memlabel-mem--symbol.1_begin ?x93) (bvugt (_ bv0 32) input.memlabel-mem--symbol.1_end))))
 (let (($x182 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x119) (or $x227 $x111)))))))
 (let (($x11 (and $x182 $x144)))
 (let (($x294 (= $x11 true)))
 (let (($x176 (= $x294 true)))
 (let (($x185 (= $x176 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (= $x127 true)))
 (let (($x23 (= $x115 true)))
 (let (($x128 (= $x23 true)))
 (let (($x173 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (not $x173)))
 (let (($x179 (= $x134 true)))
 (let (($x157 (= $x179 true)))
 (let (($x52 (= $x157 true)))
 (let (($x19 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge symbol.1 (bvsub symbol.1 (_ bv0 32))) (bvult symbol.1 (bvsub symbol.1 (_ bv0 32))))))
 (let (($x6 (and true $x19)))
 (let (($x140 (= true $x6)))
 (let (($x90 (=> $x134 $x140)))
 (let (($x146 (= $x90 true)))
 (let (($x177 (= $x146 true)))
 (let (($x80 (= $x177 true)))
 (let (($x39 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x25 (= $x39 true)))
 (let (($x163 (= $x25 true)))
 (let (($x194 (= $x163 true)))
 (let (($x217 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (= $x217 true)))
 (let (($x9 (= $x42 true)))
 (let (($x14 (= $x9 true)))
 (let (($x84 (= ?x51 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x68 (= $x84 true)))
 (let (($x145 (= $x68 true)))
 (let (($x171 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x62 (= $x171 true)))
 (let (($x69 (= $x62 true)))
 (let (($x131 (= $x69 true)))
 (let ((?x328 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x275 (bvneg ?x328)))
 (let (($x77 (= ?x275 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x77 true)))
 (let (($x44 (= $x99 true)))
 (let (($x35 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x357 (= $x35 true)))
 (let (($x47 (= $x357 true)))
 (let (($x237 (= $x47 true)))
 (let (($x70 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv399 32))))
 (let (($x175 (= $x70 true)))
 (let (($x167 (= $x175 true)))
 (let (($x79 (= $x167 true)))
 (let (($x312 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv399 32))))
 (let (($x57 (= $x312 true)))
 (let (($x342 (= $x57 true)))
 (let (($x141 (= $x342 true)))
 (let (($x351 (and $x141 $x79)))
 (let (($x37 (and $x351 $x237)))
 (let (($x154 (and $x37 $x44)))
 (let (($x59 (and $x154 $x131)))
 (let (($x55 (and $x59 $x145)))
 (let (($x45 (and $x55 $x14)))
 (let (($x129 (and $x45 $x194)))
 (let (($x186 (and $x129 $x80)))
 (let (($x160 (and $x186 $x52)))
 (let (($x15 (and $x160 $x128)))
 (let (($x88 (and $x15 $x185)))
 (let (($x258 (and $x88 $x243)))
 (let (($x219 (and $x258 $x309)))
 (let (($x162 (and $x219 $x234)))
 (let (($x123 (and $x162 $x307)))
 (let (($x338 (bvuge input.spec-%var-i-0.L3%6%bbentry input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x38 (and $x338 $x123)))
 (let (($x64 (= input.spec-%var-n-1 input.spec-%var-n-0.L3%6%bbentry)))
 (let (($x276 (and $x64 $x38)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x222 $x276)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x339 (and $x277 $x287)))
 (let (($x103 (=> $x339 $x126)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171544/query
