argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=fcall4.proof
argv[5] = --spec-iospecs=fcall4.iospecs
argv[6] = fcall4.spec
argv[7] = fcall4.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2890045
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/fcall4.c
argv[10] = -o
argv[11] = par_tmpdir/fcall4.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/fcall4.spec.etfg
argv[10] = par_tmpdir/fcall4.c.bc
argv[11] = -o
argv[12] = par_tmpdir/fcall4.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function bar</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 214 time spent: 0:0:0 [0.000374s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 257 time spent: 0:0:0 [0.000441s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2834 time spent: 0:0:0 [0.016545s total; 0.000006 per start]
expr_simplify_solver: num_starts 378 time spent: 0:0:0 [0.032084s total; 0.000085 per start]
expr_simplify_syntactic: num_starts 378 time spent: 0:0:0 [0.176432s total; 0.000467 per start]
expr_simplify_select_on_store: num_starts 8 time spent: 0:0:0 [0.020734s total; 0.002592 per start]
expr_simplify_using_lhs_set_helper: num_starts 263 time spent: 0:0:0 [0.218828s total; 0.000832 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 1613 time spent: 0:0:0 [0.217588s total; 0.000135 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 165 time spent: 0:0:0 [0.000633s total; 0.000004 per start]
expr_simplify_eq: num_starts 12 time spent: 0:0:0 [0.000131s total; 0.000011 per start]
expr_simplify_not: num_starts 4 time spent: 0:0:0 [0.000012s total; 0.000003 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000475s total; 0.000119 per start]
canonicalize_expr_tree: num_starts 161 time spent: 0:0:0 [0.002927s total; 0.000018 per start]
expr_simplify_memalloc_using_memlabel: num_starts 48 time spent: 0:0:0 [0.000115s total; 0.000002 per start]
expr_simplify_select_on_store_visit_function: num_starts 8 time spent: 0:0:0 [0.020161s total; 0.002520 per start]
get_arithmetic_addsub_atoms: num_starts 136 time spent: 0:0:0 [0.000115s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 303 time spent: 0:0:0 [0.004766s total; 0.000016 per start]
expr_is_consts_struct_constant: num_starts 3391 time spent: 0:0:0 [0.001928s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 6382 time spent: 0:0:0 [0.225121s total; 0.000035 per start]
expr_do_simplify_helper_cache: num_starts 6382 time spent: 0:0:0 [0.004548s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000010s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000161s total; 0.000004 per start]
array_constant_equals: num_starts 151 time spent: 0:0:0 [0.000312s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 238 time spent: 0:0:0 [0.381964s total; 0.001605 per start]
alias_val_xfer_and_meet: num_starts 238 time spent: 0:0:0 [0.126155s total; 0.000530 per start]
get_sprel_map_from_avail_exprs: num_starts 297 time spent: 0:0:0 [0.037258s total; 0.000125 per start]
update_memlabels_for_memslot_locs: num_starts 55 time spent: 0:0:0 [0.000276s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 472 time spent: 0:0:0 [0.025919s total; 0.000055 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1229 time spent: 0:0:0 [0.241696s total; 0.000197 per start]
compute_locs_definitely_written_on_edge: num_starts 472 time spent: 0:0:0 [0.000200s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 128 time spent: 0:0:0 [0.034430s total; 0.000269 per start]
edge_update_memlabel_map_for_mlvars: num_starts 236 time spent: 0:0:0 [0.004610s total; 0.000020 per start]
add_new_locs_based_on_edge: num_starts 236 time spent: 0:0:0 [0.046905s total; 0.000199 per start]
alias_val_meet: num_starts 1 time spent: 0:0:0 [0.000086s total; 0.000086 per start]
expand_locset_to_include_slots_for_memmask: num_starts 171 time spent: 0:0:0 [0.001105s total; 0.000006 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_execution_constructor.src.spec.bar.: 0s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 0s (num_starts 2; 0.0000s/start)
graph_with_ce_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 2; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 2e-06s (num_starts 3; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.bar.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 3e-06s (num_starts 2; 0.0000s/start)
graph_with_guessing_constructor.src.spec.bar.: 5e-06s (num_starts 1; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_loc_for_arg_expr.: 1.1e-05s (num_starts 6; 0.0000s/start)
context_constructor.solver.: 3.7e-05s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 4.3e-05s (num_starts 2; 0.0000s/start)
get_intersected_lr_status.: 4.4e-05s (num_starts 2; 0.0000s/start)
context_constructor.: 4.6e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 4.9e-05s (num_starts 2; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_locs_in_fcall_edge.: 8.7e-05s (num_starts 2; 0.0000s/start)
main.3.: 0.000103s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 0.000146s (num_starts 155; 0.0000s/start)
get_memlabel_set_from_mlvarnames.: 0.000152s (num_starts 4; 0.0000s/start)
expr_is_callee_save_const.: 0.000154s (num_starts 163; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000187s (num_starts 9; 0.0000s/start)
identify_farg_memlabels_at_pc.calling.compute_lr_status_for_expr.: 0.000237s (num_starts 6; 0.0000s/start)
compute_sprel_relations.: 0.000239s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000252s (num_starts 2; 0.0001s/start)
graph_locs_add_all_specvars.: 0.000274s (num_starts 2; 0.0001s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000274s (num_starts 4; 0.0001s/start)
determinize_value_expr_map.: 0.000322s (num_starts 429; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000329s (num_starts 88; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000388s (num_starts 88; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000391s (num_starts 2; 0.0002s/start)
compute_reachable_memlabels_map.: 0.000394s (num_starts 1; 0.0004s/start)
graph_locs_add_all_local_vars.: 0.000449s (num_starts 2; 0.0002s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000484s (num_starts 53; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000525s (num_starts 10; 0.0001s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_farg_memlabels_at_pc.: 0.000543s (num_starts 2; 0.0003s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000574s (num_starts 8; 0.0001s/start)
lr_status_meet.: 0.000575s (num_starts 189; 0.0000s/start)
populate_locid2expr_map.: 0.000622s (num_starts 4; 0.0002s/start)
tfg_get_write_memlabels.: 0.000671s (num_starts 2; 0.0003s/start)
graph_with_aliasing_constructor.src.spec.bar.: 0.000706s (num_starts 1; 0.0007s/start)
tfg::populate_loc_definedness.post_dfa.: 0.00076s (num_starts 4; 0.0002s/start)
expr_represents_llvm_undef.: 0.000917s (num_starts 167; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_convert_caller_pointsto_value_to_callee_pointsto_value.: 0.001006s (num_starts 2; 0.0005s/start)
tfg_get_read_memlabels.: 0.001024s (num_starts 2; 0.0005s/start)
graph_with_edge_structures_constructor.src.spec.bar.: 0.001041s (num_starts 1; 0.0010s/start)
graph_locs_add_all_llvmvars.: 0.001071s (num_starts 2; 0.0005s/start)
canonicalize_llvm_nextpcs.: 0.001217s (num_starts 2; 0.0006s/start)
graph_with_locs_constructor.src.spec.bar.: 0.001274s (num_starts 1; 0.0013s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.001393s (num_starts 236; 0.0000s/start)
graph_visit_exprs_const.const.: 0.001519s (num_starts 4; 0.0004s/start)
graph_with_simplified_assets_constructor.src.spec.bar.: 0.00152s (num_starts 1; 0.0015s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001558s (num_starts 2; 0.0008s/start)
def_analysis::xfer_and_meet.: 0.001651s (num_starts 176; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_update_callee_boundary_value.: 0.001721s (num_starts 2; 0.0009s/start)
get_summary_for_calling_functions.: 0.001724s (num_starts 2; 0.0009s/start)
ftmap_pointsto_analysis_combo_dfa_t.compute_summary_function.: 0.001736s (num_starts 2; 0.0009s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.001761s (num_starts 1; 0.0018s/start)
sp_version_relations_val_t::meet.: 0.001996s (num_starts 4350; 0.0000s/start)
tfg_constructor.src.spec.bar.after_transitive_closure.: 0.002089s (num_starts 1; 0.0021s/start)
tfg_constructor.src.spec.bar.post_parsing.: 0.002093s (num_starts 1; 0.0021s/start)
tfg_constructor.src.spec.bar.after_string_contents.: 0.0021s (num_starts 1; 0.0021s/start)
tfg_constructor.src.spec.bar.after_compute_max_memlabel_varnum.: 0.002104s (num_starts 1; 0.0021s/start)
tfg_constructor.src.spec.bar.: 0.002107s (num_starts 1; 0.0021s/start)
populate_exit_return_values_for_llvm_method.: 0.002308s (num_starts 2; 0.0012s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.002378s (num_starts 2; 0.0012s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.002694s (num_starts 236; 0.0000s/start)
graph_with_predicates_constructor.src.spec.bar.: 0.002713s (num_starts 1; 0.0027s/start)
tfg::collect_assumes_around_edge.: 0.002822s (num_starts 257; 0.0000s/start)
graph_with_locs_constructor.src.spec.foo.: 0.002948s (num_starts 1; 0.0029s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.003134s (num_starts 1; 0.0031s/start)
expr_linear_relation_holds::visit.var.: 0.003629s (num_starts 167; 0.0000s/start)
tfg_preprocess.dst.llvm.bar.: 0.004114s (num_starts 1; 0.0041s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.004355s (num_starts 236; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.004414s (num_starts 2; 0.0022s/start)
expr_substitute_using_available_exprs_submap.: 0.00475s (num_starts 160; 0.0000s/start)
graph_visit_exprs.: 0.005131s (num_starts 8; 0.0006s/start)
query:convert_from_z3.: 0.005415s (num_starts 156; 0.0000s/start)
compute_z3_expr.: 0.005443s (num_starts 156; 0.0000s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.005955s (num_starts 1; 0.0060s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.007474s (num_starts 2; 0.0037s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.007578s (num_starts 1; 0.0076s/start)
get_function_tfg_map.bar.: 0.008045s (num_starts 1; 0.0080s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.009794s (num_starts 1; 0.0098s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.009798s (num_starts 1; 0.0098s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.009801s (num_starts 1; 0.0098s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.009804s (num_starts 1; 0.0098s/start)
tfg_constructor.src.spec.foo.: 0.009808s (num_starts 1; 0.0098s/start)
compute_lr_status_for_expr.: 0.010437s (num_starts 154; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.010516s (num_starts 131; 0.0001s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.010613s (num_starts 175; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.010734s (num_starts 131; 0.0001s/start)
populate_transitive_closure.: 0.011275s (num_starts 2; 0.0056s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.011414s (num_starts 4377; 0.0000s/start)
query:convert_to_z3.: 0.01172s (num_starts 156; 0.0001s/start)
populate_dominator_and_postdominator_relations.: 0.011741s (num_starts 4; 0.0029s/start)
create_closure_matrix.: 0.012207s (num_starts 291; 0.0000s/start)
graph_identify_back_edges.: 0.014751s (num_starts 10; 0.0015s/start)
populate_simplified_to_state.: 0.015405s (num_starts 6; 0.0026s/start)
tfg::populate_loc_definedness.before_solve.: 0.01546s (num_starts 4; 0.0039s/start)
graph_identify_natural_loops.: 0.015562s (num_starts 10; 0.0016s/start)
tfg::populate_loc_definedness.before_initialize.: 0.016301s (num_starts 4; 0.0041s/start)
tfg::populate_loc_definedness.: 0.016894s (num_starts 4; 0.0042s/start)
graph_to_stream.: 0.017455s (num_starts 2; 0.0087s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.021181s (num_starts 2834; 0.0000s/start)
query:simplify-z3.: 0.021497s (num_starts 317; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.021789s (num_starts 238; 0.0001s/start)
populate_branch_affecting_locs.: 0.022013s (num_starts 4; 0.0055s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.023622s (num_starts 2; 0.0118s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.024074s (num_starts 2; 0.0120s/start)
populate_simplified_assets.: 0.024443s (num_starts 12; 0.0020s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.024676s (num_starts 2; 0.0123s/start)
find_dominators.: 0.024998s (num_starts 18; 0.0014s/start)
compute_regions.: 0.025302s (num_starts 10; 0.0025s/start)
tfg_preprocess.dst.llvm.foo.: 0.031316s (num_starts 1; 0.0313s/start)
tfg::tfg_preprocess.: 0.035435s (num_starts 2; 0.0177s/start)
get_function_tfg_map.foo.: 0.039059s (num_starts 1; 0.0391s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.043145s (num_starts 236; 0.0002s/start)
get_tfg.: 0.047014s (num_starts 2; 0.0235s/start)
get_function_tfg_map.: 0.047111s (num_starts 2; 0.0236s/start)
create_sp_version_relations_lattice_at_pc.: 0.055715s (num_starts 291; 0.0002s/start)
compute_new_lr_status_on_locs.: 0.072474s (num_starts 236; 0.0003s/start)
populate_locs_potentially_modified_on_edge.: 0.073406s (num_starts 6; 0.0122s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.076108s (num_starts 237; 0.0003s/start)
main.2.: 0.07913s (num_starts 1; 0.0791s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.088488s (num_starts 2834; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.091711s (num_starts 2834; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.097883s (num_starts 6; 0.0163s/start)
avail_exprs_create_submap.: 0.109772s (num_starts 710; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.112059s (num_starts 2834; 0.0000s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.116132s (num_starts 264; 0.0004s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.126519s (num_starts 238; 0.0005s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.135318s (num_starts 238; 0.0006s/start)
populate_loc_liveness.: 0.145223s (num_starts 4; 0.0363s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.219112s (num_starts 263; 0.0008s/start)
tfg_postprocess_after_pointsto_analysis.: 0.300785s (num_starts 2; 0.1504s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.32576s (num_starts 234; 0.0014s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.34562s (num_starts 2; 0.1728s/start)
ftmap_run_pointsto_analysis.: 0.77462s (num_starts 1; 0.7746s/start)
parse_consts_db.: 6.12411s (num_starts 1; 6.1241s/start)
main.: 7.10367s (num_starts 1; 7.1037s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:06 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:12 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:20 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:20 : Reading in SPEC-LLVM I/O specification from file fcall4.iospecs...</MSG>
<MSG>0:20 : Computing equivalence for function: bar...</MSG>
<MSG>0:20 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:20 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:20 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:20 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG bar (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:21 : product-TFG bar: Enumerating correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Considering 1 paths to src pc L4%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Attempting correlation of src pathset L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : Found 1 feasible correlations for paths to src pc L4%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : product-TFG bar: Found 1 correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:21 : product-TFG bar created 1 possibilities in group bar.A...</MSG>
<MSG>0:21 : Chose (for CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:21 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1...</MSG>
<MSG>0:21 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1...</MSG>
<MSG>0:21 : Creating ssa-path for the src-tfg path L0%0%d --> L4%1%fcallStart ending at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:21 : Adding a CG edge composition using the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:21 : Identifying common alloc-deallocs in the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart
</MSG>
<MSG>0:21 : Identified no common alloc-deallocs in the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:21 : Adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L4%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Updating dst fcall edge using src fcall edge for toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Computing loop hoisting select expressions at toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Computing loop hoisting non-linear expressions at toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Adding node L4%1%fcallStart_Lentry%1%fcallStart to the product-TFG...</MSG>
<MSG>0:21 : bar.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Adding edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:21 : bar.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:21 : bar.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:21 : bar.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart</MSG>
<MSG>0:21 : bar.A1: Added the 2 propagated CEs at PC L4%1%fcallStart_Lentry%1%fcallStart and propagated further.
</MSG>
<MSG>0:21 : bar.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:21 : bar.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:21 : bar.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : Done adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L4%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:21 : Done adding a CG edge composition using the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:21 : Added correlation to the product-TFG bar.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 1 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}]
<MSG>0:21 : bar.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:21 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:21 : bar.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:21 : bar.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: unchanged</MSG>
<MSG>0:21 : bar.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:21 : bar.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:21 : bar.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:21 : bar.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:21 : bar.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:25 : bar.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht16-prove_trivial0-prove16...</MSG>
<MSG>0:25 : bar.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:38 : bar.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht11-prove_trivial0-prove11...</MSG>
<MSG>0:38 : bar.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:38 : bar.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:38 : bar.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: changed ...</MSG>
<MSG>0:38 : bar.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>0:38 : bar.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:38 : bar.A1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:38 : product-TFG bar.A1: Enumerating correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:38 : Considering 1 paths to src pc L4%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:38 : Attempting correlation of src pathset L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:38 : Found 1 feasible correlations for paths to src pc L4%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:38 : product-TFG bar.A1: Found 1 correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:38 : product-TFG bar.A1 created 1 possibilities in group bar.A1.B...</MSG>
<MSG>0:38 : Chose (for CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:38 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:38 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:38 : Creating ssa-path for the src-tfg path L4%1%fcallStart --> L4%1%fcallEnd ending at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:38 : Adding a CG edge composition using the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:38 : Identifying common alloc-deallocs in the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd
</MSG>
<MSG>0:38 : Identified no common alloc-deallocs in the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:38 : Adding new edge to the product-TFG bar.A1.B1 for fromPC L4%1%fcallStart_Lentry%1%fcallStart and toPC L4%1%fcallEnd_Lentry%1%fcallEnd, src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:38 : bar.A1.B1: Computing loop hoisting select expressions at toPC L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:38 : bar.A1.B1: Computing loop hoisting non-linear expressions at toPC L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:38 : bar.A1.B1: Adding node L4%1%fcallEnd_Lentry%1%fcallEnd to the product-TFG...</MSG>
<MSG>0:38 : bar.A1.B1: Getting alloca-ptrs on edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:38 : bar.A1.B1: Found no alloca-ptrs on edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:38 : bar.A1.B1: Adding edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:38 : bar.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:38 : bar.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:38 : bar.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:38 : bar.A1.B1: Propagated 17 out of 17 counter-examples across edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd</MSG>
<MSG>0:38 : bar.A1.B1: Added the 17 propagated CEs at PC L4%1%fcallEnd_Lentry%1%fcallEnd and propagated further.
</MSG>
<MSG>0:38 : bar.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:38 : bar.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:38 : bar.A1.B1: Computing CG regions after the addition of the edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:38 : bar.A1.B1: Done computing CG regions after the addition of the edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:38 : Done adding new edge to the product-TFG bar.A1.B1 for fromPC L4%1%fcallStart_Lentry%1%fcallStart and toPC L4%1%fcallEnd_Lentry%1%fcallEnd, src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:38 : Done adding a CG edge composition using the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:38 : Added correlation to the product-TFG bar.A1.B1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:38 : Chose (after CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}]
<MSG>0:38 : bar.A1.B1: Updating invariants over the newly added edges in edge composition L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:38 : Constructed infer_invariants_dfa with initial worklist L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:38 : bar.A1.B1: Relaxing dst graph's memlabels for edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:38 : bar.A1.B1: Done relaxing dst graph's memlabels for edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: unchanged</MSG>
<MSG>0:38 : bar.A1.B1: Checking well-formedness assertions on outgoing edges from L4%1%fcallStart_Lentry%1%fcallStart ...</MSG>
<MSG>0:38 : bar.A1.B1: Relaxing invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:38 : bar.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:39 : bar.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:39 : bar.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 10 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:39 : bar.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>0:39 : bar.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 30 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>1:12 : bar.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 1 proof-stats=dht31-prove_trivial9-prove22...</MSG>
<MSG>1:12 : bar.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>1:12 : bar.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : bar.A1.B1: Done relaxing invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: changed ...</MSG>
<MSG>1:12 : bar.A1.B1: Done relaxing memlabels and invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>1:12 : bar.A1.B1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>1:12 : bar.A1.B1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:13 : product-TFG bar.A1.B1: Enumerating correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:13 : Considering 1 paths to src pc L4%2%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:13 : Attempting correlation of src pathset L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:13 : Found 1 feasible correlations for paths to src pc L4%2%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:13 : product-TFG bar.A1.B1: Found 1 correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:13 : product-TFG bar.A1.B1 created 1 possibilities in group bar.A1.B1.C...</MSG>
<MSG>1:13 : Chose (for CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:13 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>1:13 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>1:13 : Creating ssa-path for the src-tfg path L4%1%fcallEnd --> L4%2%fcallStart ending at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>1:13 : Adding a CG edge composition using the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:13 : Identifying common alloc-deallocs in the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart
</MSG>
<MSG>1:13 : Identified no common alloc-deallocs in the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:13 : Adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L4%1%fcallEnd_Lentry%1%fcallEnd and toPC L4%2%fcallStart_Lentry%2%fcallStart, src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Computing loop hoisting select expressions at toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Adding node L4%2%fcallStart_Lentry%2%fcallStart to the product-TFG...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Getting alloca-ptrs on edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Found no alloca-ptrs on edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Adding edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:13 : bar.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:13 : bar.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Propagated 0 out of 11 counter-examples across edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart</MSG>
<MSG>1:13 : bar.A1.B1.C1: Added the 0 propagated CEs at PC L4%2%fcallStart_Lentry%2%fcallStart and propagated further.
</MSG>
<MSG>1:13 : bar.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Computing CG regions after the addition of the edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Done computing CG regions after the addition of the edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:13 : Done adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L4%1%fcallEnd_Lentry%1%fcallEnd and toPC L4%2%fcallStart_Lentry%2%fcallStart, src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>1:13 : Done adding a CG edge composition using the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:13 : Added correlation to the product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>1:13 : Chose (after CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 0 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}]
<MSG>1:13 : bar.A1.B1.C1: Updating invariants over the newly added edges in edge composition L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>1:13 : Constructed infer_invariants_dfa with initial worklist L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: unchanged</MSG>
<MSG>1:13 : bar.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L4%1%fcallEnd_Lentry%1%fcallEnd ...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Relaxing invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:13 : bar.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 2 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht12-prove_trivial5-prove7...</MSG>
<MSG>1:16 : bar.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 39 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.2.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.0.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.4.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.1.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.7.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.2.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.10.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.3.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.12.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.4.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.13.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.5.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.14.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.6.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.16.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.7.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.17.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.8.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.19.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.9.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.23.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.10.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.24.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.11.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.27.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.12.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.30.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.13.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.31.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.14.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.32.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.15.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.33.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.16.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.34.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.17.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.35.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.18.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.36.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.19.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.37.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.20.gz
<MSG>2:39 : bar.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht40-prove_trivial9-prove31...</MSG>
<MSG>2:39 : bar.A1.B1.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>2:39 : bar.A1.B1.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:39 : bar.A1.B1.C1: Done relaxing invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: changed ...</MSG>
<MSG>2:39 : bar.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>2:39 : bar.A1.B1.C1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>2:39 : bar.A1.B1.C1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:40 : product-TFG bar.A1.B1.C1: Enumerating correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:40 : Considering 1 paths to src pc L4%2%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:40 : Attempting correlation of src pathset L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:40 : Found 1 feasible correlations for paths to src pc L4%2%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:40 : product-TFG bar.A1.B1.C1: Found 1 correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:40 : product-TFG bar.A1.B1.C1 created 1 possibilities in group bar.A1.B1.C1.D...</MSG>
<MSG>2:40 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:40 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>2:40 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>2:40 : Creating ssa-path for the src-tfg path L4%2%fcallStart --> L4%2%fcallEnd ending at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>2:40 : Adding a CG edge composition using the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:40 : Identifying common alloc-deallocs in the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd
</MSG>
<MSG>2:40 : Identified no common alloc-deallocs in the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:40 : Adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L4%2%fcallStart_Lentry%2%fcallStart and toPC L4%2%fcallEnd_Lentry%2%fcallEnd, src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Adding node L4%2%fcallEnd_Lentry%2%fcallEnd to the product-TFG...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Getting alloca-ptrs on edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Found no alloca-ptrs on edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Adding edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Propagated 11 out of 11 counter-examples across edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Added the 11 propagated CEs at PC L4%2%fcallEnd_Lentry%2%fcallEnd and propagated further.
</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Computing CG regions after the addition of the edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:40 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L4%2%fcallStart_Lentry%2%fcallStart and toPC L4%2%fcallEnd_Lentry%2%fcallEnd, src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>2:40 : Done adding a CG edge composition using the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:40 : Added correlation to the product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>2:40 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 10 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}]
<MSG>2:40 : bar.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>2:40 : Constructed infer_invariants_dfa with initial worklist L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: unchanged</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L4%2%fcallStart_Lentry%2%fcallStart ...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Relaxing invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 10 exprs and 7 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>2:40 : bar.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 53 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.1.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.0.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.5.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.1.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.7.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.2.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.10.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.3.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.14.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.4.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.15.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.5.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.16.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.6.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.17.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.7.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.23.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.8.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.28.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.9.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.30.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.10.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.31.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.11.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.33.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.12.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.36.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.13.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.37.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.14.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.38.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.15.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.42.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.16.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2890045/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.43.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2890045/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.17.gz
<MSG>3:47 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 1 proof-stats=dht54-prove_trivial15-prove39...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: changed ...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:47 : product-TFG bar.A1.B1.C1.D1: Enumerating correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:47 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:47 : Attempting correlation of src pathset L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:47 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:47 : product-TFG bar.A1.B1.C1.D1: Found 1 correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:47 : product-TFG bar.A1.B1.C1.D1 created 1 possibilities in group bar.A1.B1.C1.D1.E...</MSG>
<MSG>3:47 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 10 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:47 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>3:47 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>3:47 : Creating ssa-path for the src-tfg path L4%2%fcallEnd --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:47 : Adding a CG edge composition using the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:47 : Identifying common alloc-deallocs in the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d
</MSG>
<MSG>3:47 : Identified no common alloc-deallocs in the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:47 : Adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L4%2%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Adding edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Propagated 0 out of 10 counter-examples across edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Added the 0 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:47 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L4%2%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>3:47 : Done adding a CG edge composition using the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:47 : Added correlation to the product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>3:47 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L4%2%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 12 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 10 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Updating invariants over the newly added edges in edge composition L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>3:47 : Constructed infer_invariants_dfa with initial worklist L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L4%2%fcallEnd_Lentry%2%fcallEnd ...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Done relaxing memlabels and invariants across the edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:48 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>3:48 : Checking equivalence proof...</MSG>
<MSG>3:49 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L4%1%fcallStart_Lentry%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-3 ; 3-->input.spec-%var-m-3 ; 4-->input.dst.llvm-%arr1 ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%arr2 ; 7-->input.dst.llvm-%m ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.dst.llvm-%m
      1.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  bvextract(input.dst.llvm-%arr1, 1, 0)
     is_assumed_eqclass : 0
    15 visited ces:
      0.:z3v487.ce3      1.:z3.ce31      2.:z3.ce18      3.:z3v487.ce46      4.:z3v487.ce17      5.:z3.ce73      6.:z3.ce45      7.:z3v487.ce59      8.:z3v487.ce74      9.:z3v487.ce143      10.:z3.ce101      11.:z3v487.ce87      12.:z3.ce129      13.:z3.ce157      14.:z3v487.ce115
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [10]: 8-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 9-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 11-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141980](input.spec-%var-mat1-0, map[141898](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr1))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 12-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142109](input.spec-%var-mat1-0, map[142108](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142104](input.spec-%var-mat1-0, map[142103](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 14-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 15-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142168](input.spec-%var-mat2-0, map[142167](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142166](Lambda3Var, map[142165](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142164](Lambda2Var, select[142163](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142162](bvmul(Lambda2Var, 4), select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 16-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142177](input.spec-%var-mat2-0, map[142176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142175](Lambda3Var, map[142174](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142173](Lambda2Var, select[142172](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142171](bvmul(Lambda2Var, 4), select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 17-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142179](input.spec-%var-mat2-0, map[142178](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr1))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    4 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      3.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

L4%1%fcallEnd_Lentry%1%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [9]: 2-->input.spec-%var-n-3 ; 3-->input.spec-%var-m-3 ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%arr2 ; 7-->input.dst.llvm-%m ; 18-->input.spec-%tmpvar-27.L4%1%fcallEnd ; 19-->input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd ; 20-->input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd ; 21-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd
      1.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd
      2.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.dst.llvm-%m
      3.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
      4.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.dst.llvm-%n
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce3      1.:z3.ce31      2.:z3.ce18      3.:z3v487.ce46      4.:z3v487.ce17      5.:z3.ce73      6.:z3.ce45      7.:z3v487.ce59      8.:z3.ce101      9.:z3v487.ce87
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [30]: 8-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 9-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 12-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142109](input.spec-%var-mat1-0, map[142108](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142104](input.spec-%var-mat1-0, map[142103](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 14-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 15-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142168](input.spec-%var-mat2-0, map[142167](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142166](Lambda3Var, map[142165](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142164](Lambda2Var, select[142163](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142162](bvmul(Lambda2Var, 4), select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 16-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142177](input.spec-%var-mat2-0, map[142176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142175](Lambda3Var, map[142174](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142173](Lambda2Var, select[142172](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142171](bvmul(Lambda2Var, 4), select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 22-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163303](input.spec-%var-mat1-0, map[163254](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 23-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[171114](input.spec-%var-mat1-0, map[170856](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 24-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190915](input.spec-%var-mat2-0, map[190914](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190948](input.spec-%var-mat1-0, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190953](input.spec-%var-mat1-0, map[190952](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 27-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190960](input.spec-%var-mat1-0, map[190959](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190958](Lambda3Var, map[190957](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190956](Lambda2Var, select[190955](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190954](select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 28-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190961](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 29-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190970](input.spec-%var-mat2-0, map[190969](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190968](Lambda3Var, map[190967](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190966](Lambda2Var, select[190965](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190964](bvmul(Lambda2Var, 4), select[190963](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 30-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190972](input.spec-%var-mat1-0, map[190971](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 31-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190973](input.spec-%var-mat1-0, map[142167](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142166](Lambda3Var, map[142165](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142164](Lambda2Var, select[142163](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142162](bvmul(Lambda2Var, 4), select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 32-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190974](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 33-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190975](input.spec-%var-mat2-0, map[190959](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190958](Lambda3Var, map[190957](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190956](Lambda2Var, select[190955](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190954](select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 34-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190982](input.spec-%var-mat2-0, map[190981](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190980](Lambda3Var, map[190979](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190978](Lambda2Var, select[190977](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190976](select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 35-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190989](input.spec-%var-mat2-0, map[190988](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190987](Lambda3Var, map[190986](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190985](Lambda2Var, select[190984](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190983](select[190963](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 36-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190991](input.spec-%var-mat1-0, map[190990](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190993](input.spec-%var-mat1-0, map[190992](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190995](input.spec-%var-mat1-0, map[190994](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191003](input.spec-%var-mat1-0, map[191002](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191001](Lambda3Var, map[191000](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190999](Lambda2Var, select[190998](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190997](bvmul(Lambda2Var, 4), select[190996](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191004](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 41-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191005](input.spec-%var-mat2-0, map[191002](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191001](Lambda3Var, map[191000](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190999](Lambda2Var, select[190998](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190997](bvmul(Lambda2Var, 4), select[190996](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 42-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191013](input.spec-%var-mat2-0, map[191012](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191011](Lambda3Var, map[191010](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191009](Lambda2Var, select[191008](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191007](bvmul(Lambda2Var, 4), select[191006](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 43-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191021](input.spec-%var-mat2-0, map[191020](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191019](Lambda3Var, map[191018](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191017](Lambda2Var, select[191016](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191015](bvmul(Lambda2Var, 4), select[191014](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    9 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190948](input.spec-%var-mat1-0, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190915](input.spec-%var-mat2-0, map[190914](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      3.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      4.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      5.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      6.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190961](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      7.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190974](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      8.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191004](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

L4%2%fcallStart_Lentry%2%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce686
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [9]: 2-->input.spec-%var-n-3 ; 3-->input.spec-%var-m-3 ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%arr2 ; 7-->input.dst.llvm-%m ; 18-->input.spec-%tmpvar-27.L4%1%fcallEnd ; 19-->input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd ; 20-->input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd ; 21-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%tmpvar-27.L4%1%fcallEnd, 4294967295))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
      1.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd
      2.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd
      3.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.dst.llvm-%m
      4.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
      5.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.dst.llvm-%n
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce722      1.:z3v487.ce687      2.:z3.ce686      3.:z3.ce704      4.:z3v487.ce776      5.:z3.ce723      6.:z3v487.ce758      7.:z3v487.ce740      8.:z3.ce741      9.:z3v487.ce794
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [39]: 8-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 9-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 12-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142109](input.spec-%var-mat1-0, map[142108](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142104](input.spec-%var-mat1-0, map[142103](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 14-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 15-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142168](input.spec-%var-mat2-0, map[142167](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142166](Lambda3Var, map[142165](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142164](Lambda2Var, select[142163](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142162](bvmul(Lambda2Var, 4), select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 16-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142177](input.spec-%var-mat2-0, map[142176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142175](Lambda3Var, map[142174](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142173](Lambda2Var, select[142172](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142171](bvmul(Lambda2Var, 4), select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 22-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[163303](input.spec-%var-mat1-0, map[163254](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 23-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[171114](input.spec-%var-mat1-0, map[170856](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 24-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190915](input.spec-%var-mat2-0, map[190914](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190948](input.spec-%var-mat1-0, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190953](input.spec-%var-mat1-0, map[190952](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 27-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190960](input.spec-%var-mat1-0, map[190959](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190958](Lambda3Var, map[190957](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190956](Lambda2Var, select[190955](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190954](select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 28-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190961](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 29-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190970](input.spec-%var-mat2-0, map[190969](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190968](Lambda3Var, map[190967](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190966](Lambda2Var, select[190965](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190964](bvmul(Lambda2Var, 4), select[190963](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 30-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190972](input.spec-%var-mat1-0, map[190971](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 31-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190973](input.spec-%var-mat1-0, map[142167](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142166](Lambda3Var, map[142165](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142164](Lambda2Var, select[142163](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142162](bvmul(Lambda2Var, 4), select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 32-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190974](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 33-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190975](input.spec-%var-mat2-0, map[190959](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190958](Lambda3Var, map[190957](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190956](Lambda2Var, select[190955](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190954](select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 34-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190982](input.spec-%var-mat2-0, map[190981](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190980](Lambda3Var, map[190979](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190978](Lambda2Var, select[190977](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190976](select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 35-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190989](input.spec-%var-mat2-0, map[190988](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190987](Lambda3Var, map[190986](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190985](Lambda2Var, select[190984](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190983](select[190963](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 36-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190991](input.spec-%var-mat1-0, map[190990](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190993](input.spec-%var-mat1-0, map[190992](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190995](input.spec-%var-mat1-0, map[190994](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191003](input.spec-%var-mat1-0, map[191002](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191001](Lambda3Var, map[191000](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190999](Lambda2Var, select[190998](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190997](bvmul(Lambda2Var, 4), select[190996](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191004](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 41-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191005](input.spec-%var-mat2-0, map[191002](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191001](Lambda3Var, map[191000](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190999](Lambda2Var, select[190998](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190997](bvmul(Lambda2Var, 4), select[190996](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 42-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191013](input.spec-%var-mat2-0, map[191012](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191011](Lambda3Var, map[191010](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191009](Lambda2Var, select[191008](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191007](bvmul(Lambda2Var, 4), select[191006](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 43-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191021](input.spec-%var-mat2-0, map[191020](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191019](Lambda3Var, map[191018](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191017](Lambda2Var, select[191016](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191015](bvmul(Lambda2Var, 4), select[191014](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 44-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230630](input.spec-%var-mat1-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 45-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230678](input.spec-%var-mat1-0, map[142176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142175](Lambda3Var, map[142174](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142173](Lambda2Var, select[142172](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142171](bvmul(Lambda2Var, 4), select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 46-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230684](input.spec-%var-mat1-0, map[191012](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191011](Lambda3Var, map[191010](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191009](Lambda2Var, select[191008](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191007](bvmul(Lambda2Var, 4), select[191006](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 47-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230683](input.spec-%var-mat1-0, map[190914](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 48-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230685](input.spec-%var-mat1-0, map[191020](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191019](Lambda3Var, map[191018](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191017](Lambda2Var, select[191016](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191015](bvmul(Lambda2Var, 4), select[191014](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 49-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230682](input.spec-%var-mat1-0, map[190988](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190987](Lambda3Var, map[190986](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190985](Lambda2Var, select[190984](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190983](select[190963](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 50-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230681](input.spec-%var-mat1-0, map[190981](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190980](Lambda3Var, map[190979](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190978](Lambda2Var, select[190977](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190976](select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 51-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230680](input.spec-%var-mat1-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 52-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230679](input.spec-%var-mat1-0, map[190969](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190968](Lambda3Var, map[190967](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190966](Lambda2Var, select[190965](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190964](bvmul(Lambda2Var, 4), select[190963](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    9 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190948](input.spec-%var-mat1-0, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190915](input.spec-%var-mat2-0, map[190914](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      4.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      5.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190961](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      6.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190974](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      7.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      8.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191004](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce686
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce686

L4%2%fcallEnd_Lentry%2%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce686
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [10]: 2-->input.spec-%var-n-3 ; 3-->input.spec-%var-m-3 ; 18-->input.spec-%tmpvar-27.L4%1%fcallEnd ; 19-->input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd ; 20-->input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd ; 21-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 53-->input.spec-%tmpvar-28.L4%2%fcallEnd ; 54-->input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%2%fcallEnd ; 55-->input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%2%fcallEnd ; 56-->input.dst.llvm-%call1.Lentry%2%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%2%fcallEnd
      1.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%2%fcallEnd
      2.: bvneg(bvmul(input.spec-%tmpvar-27.L4%1%fcallEnd, 4294967295))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
      3.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd
      4.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce1217      1.:z3v487.ce722      2.:z3v487.ce687      3.:z3.ce686      4.:z3.ce704      5.:z3.ce723      6.:z3v487.ce740      7.:z3.ce741
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [53]: 8-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 9-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 14-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 24-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190915](input.spec-%var-mat2-0, map[190914](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190948](input.spec-%var-mat1-0, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190953](input.spec-%var-mat1-0, map[190952](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 28-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190961](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 29-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190970](input.spec-%var-mat2-0, map[190969](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190968](Lambda3Var, map[190967](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190966](Lambda2Var, select[190965](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190964](bvmul(Lambda2Var, 4), select[190963](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 30-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190972](input.spec-%var-mat1-0, map[190971](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 32-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190974](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 35-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190989](input.spec-%var-mat2-0, map[190988](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190987](Lambda3Var, map[190986](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190985](Lambda2Var, select[190984](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190983](select[190963](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 38-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190995](input.spec-%var-mat1-0, map[190994](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191004](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 43-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191021](input.spec-%var-mat2-0, map[191020](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191019](Lambda3Var, map[191018](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191017](Lambda2Var, select[191016](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191015](bvmul(Lambda2Var, 4), select[191014](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 48-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230685](input.spec-%var-mat1-0, map[191020](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191019](Lambda3Var, map[191018](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191017](Lambda2Var, select[191016](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191015](bvmul(Lambda2Var, 4), select[191014](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 49-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230682](input.spec-%var-mat1-0, map[190988](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190987](Lambda3Var, map[190986](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190985](Lambda2Var, select[190984](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190983](select[190963](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 52-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[230679](input.spec-%var-mat1-0, map[190969](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190968](Lambda3Var, map[190967](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190966](Lambda2Var, select[190965](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190964](bvmul(Lambda2Var, 4), select[190963](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 57-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246093](input.spec-%var-mat2-0, map[246092](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246091](Lambda3Var, map[246090](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246089](Lambda2Var, select[246088](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246087](bvmul(Lambda2Var, 4), select[246086](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 58-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246126](input.spec-%var-mat1-0, map[246125](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246124](Lambda3Var, map[246123](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246122](Lambda2Var, select[246121](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246120](bvmul(Lambda2Var, 4), select[246119](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 59-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246127](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 60-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246132](input.spec-%var-mat1-0, map[246131](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 61-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246141](input.spec-%var-mat1-0, map[246140](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246139](Lambda3Var, map[246138](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246137](Lambda2Var, select[246136](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[246135](select[246134](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 62-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246148](input.spec-%var-mat2-0, map[246147](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246146](Lambda3Var, map[246145](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246144](Lambda2Var, select[246143](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[246142](bvmul(Lambda2Var, 4), select[246134](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 63-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246150](input.spec-%var-mat2-0, map[246149](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 64-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246152](input.spec-%var-mat2-0, map[246151](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 65-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246153](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 66-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246155](input.spec-%var-mat1-0, map[246154](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 67-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246156](input.spec-%var-mat1-0, map[246147](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246146](Lambda3Var, map[246145](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246144](Lambda2Var, select[246143](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[246142](bvmul(Lambda2Var, 4), select[246134](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 68-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246157](input.spec-%var-mat2-0, map[246140](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246139](Lambda3Var, map[246138](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246137](Lambda2Var, select[246136](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[246135](select[246134](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 69-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246159](input.spec-%var-mat2-0, map[246158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 70-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246161](input.spec-%var-mat2-0, map[246160](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 71-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246162](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[190914](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 72-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246164](input.spec-%var-mat1-0, map[246163](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 73-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246172](input.spec-%var-mat1-0, map[246171](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246170](Lambda3Var, map[246169](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246168](Lambda2Var, select[246167](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246166](bvmul(Lambda2Var, 4), select[246165](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 74-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246173](input.spec-%var-mat2-0, map[246171](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246170](Lambda3Var, map[246169](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246168](Lambda2Var, select[246167](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246166](bvmul(Lambda2Var, 4), select[246165](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 75-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246175](input.spec-%var-mat2-0, map[246174](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 76-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246177](input.spec-%var-mat2-0, map[246176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 77-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246178](input.spec-%var-mat1-0, map[246149](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 78-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246179](input.spec-%var-mat1-0, map[246151](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 79-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246180](input.spec-%var-mat1-0, map[246158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 80-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246181](input.spec-%var-mat1-0, map[246160](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 81-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246182](input.spec-%var-mat1-0, map[246174](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 82-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246183](input.spec-%var-mat1-0, map[246176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 83-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246184](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[246092](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246091](Lambda3Var, map[246090](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246089](Lambda2Var, select[246088](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246087](bvmul(Lambda2Var, 4), select[246086](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 84-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246186](input.spec-%var-mat1-0, map[246185](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[246091](Lambda3Var, map[246090](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246089](Lambda2Var, select[246088](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246087](bvmul(Lambda2Var, 4), select[246086](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 85-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246188](input.spec-%var-mat1-0, map[246187](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[246091](Lambda3Var, map[246090](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246089](Lambda2Var, select[246088](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246087](bvmul(Lambda2Var, 4), select[246086](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 86-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246196](input.spec-%var-mat1-0, map[246195](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246194](Lambda3Var, map[246193](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246192](Lambda2Var, select[246191](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246190](bvmul(Lambda2Var, 4), select[246189](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 87-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246204](input.spec-%var-mat1-0, map[246203](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246202](Lambda3Var, map[246201](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246200](Lambda2Var, select[246199](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246198](bvmul(Lambda2Var, 4), select[246197](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 88-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246205](input.spec-%var-mat2-0, map[246195](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246194](Lambda3Var, map[246193](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246192](Lambda2Var, select[246191](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246190](bvmul(Lambda2Var, 4), select[246189](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 89-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246206](input.spec-%var-mat2-0, map[246203](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246202](Lambda3Var, map[246201](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246200](Lambda2Var, select[246199](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246198](bvmul(Lambda2Var, 4), select[246197](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 90-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246208](input.spec-%var-mat2-0, map[246207](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[246124](Lambda3Var, map[246123](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246122](Lambda2Var, select[246121](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246120](bvmul(Lambda2Var, 4), select[246119](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 91-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246210](input.spec-%var-mat2-0, map[246209](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[246124](Lambda3Var, map[246123](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246122](Lambda2Var, select[246121](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246120](bvmul(Lambda2Var, 4), select[246119](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    15 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246184](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[246092](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246091](Lambda3Var, map[246090](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246089](Lambda2Var, select[246088](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246087](bvmul(Lambda2Var, 4), select[246086](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246162](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[190914](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246093](input.spec-%var-mat2-0, map[246092](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246091](Lambda3Var, map[246090](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246089](Lambda2Var, select[246088](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246087](bvmul(Lambda2Var, 4), select[246086](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      4.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190974](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      5.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190961](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      6.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246126](input.spec-%var-mat1-0, map[246125](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[246124](Lambda3Var, map[246123](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[246122](Lambda2Var, select[246121](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[246120](bvmul(Lambda2Var, 4), select[246119](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      7.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190915](input.spec-%var-mat2-0, map[190914](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190913](Lambda3Var, map[190912](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190911](Lambda2Var, select[190910](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190909](bvmul(Lambda2Var, 4), select[190908](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      8.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142156](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142155](Lambda2Var, select[142154](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142153](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      9.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      10.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      11.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191004](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      12.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190948](input.spec-%var-mat1-0, map[190947](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190946](Lambda3Var, map[190945](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190944](Lambda2Var, select[190943](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190942](bvmul(Lambda2Var, 4), select[190941](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      13.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246127](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      14.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[246153](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce686
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce686

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L4%2%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 12 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 17 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 10 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function bar. 209.33s, query:smt.: 142.616s (num_starts 107; 1.3329s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 206.7s (num_starts 268; 0.7713s/start)ftmap_run_pointsto_analysis.: 0.271215s (num_starts 2; 0.1356s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 4e-06s (num_starts 4; 0.0000s/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 5e-06s (num_starts 5; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 7e-06s (num_starts 5; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 7e-06s (num_starts 5; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 8e-06s (num_starts 12; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 9e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.: 9e-06s (num_starts 1; 0.0000s/start)
compute_tfg_pred_eqclass.: 1e-05s (num_starts 4; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 1e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.: 1.1e-05s (num_starts 1; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.4e-05s (num_starts 5; 0.0000s/start)
prune_dst_memslots.: 2e-05s (num_starts 4; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 2.2e-05s (num_starts 5; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 3.3e-05s (num_starts 43; 0.0000s/start)
determinize_value_expr_map.: 3.3e-05s (num_starts 15; 0.0000s/start)
get_intersected_lr_status.: 3.9e-05s (num_starts 2; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 4.7e-05s (num_starts 5; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.7e-05s (num_starts 3; 0.0000s/start)
prove_trivial.: 5.8e-05s (num_starts 103; 0.0000s/start)
lr_status_meet.: 5.9e-05s (num_starts 106; 0.0000s/start)
remove_complex_bv_exprs.: 6.3e-05s (num_starts 4; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 7.8e-05s (num_starts 1; 0.0001s/start)
sp_version_relations_val_t::meet.: 7.9e-05s (num_starts 182; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 8.6e-05s (num_starts 4; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart.: 8.9e-05s (num_starts 2; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 9.9e-05s (num_starts 5; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 9.9e-05s (num_starts 3; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000103s (num_starts 30; 0.0000s/start)
expr_is_hidden_reg.: 0.000113s (num_starts 143; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000118s (num_starts 10; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.00012s (num_starts 129; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000127s (num_starts 2; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000132s (num_starts 10; 0.0000s/start)
expr_is_callee_save_const.: 0.000139s (num_starts 155; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000141s (num_starts 5; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000143s (num_starts 3; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000182s (num_starts 10; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000187s (num_starts 25; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000191s (num_starts 2; 0.0001s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000193s (num_starts 4; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000231s (num_starts 2; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.000243s (num_starts 15; 0.0000s/start)
compute_sprel_relations.: 0.000284s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000293s (num_starts 2; 0.0001s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000299s (num_starts 268; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.0003s (num_starts 25; 0.0000s/start)
pth_collect_preds_using_atom_func.: 0.000309s (num_starts 20; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%2%fcallEnd_Lentry%2%fcallEnd.inductive-invariants.: 0.000314s (num_starts 2; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000315s (num_starts 1; 0.0003s/start)
removeMostPromising.: 0.000325s (num_starts 16; 0.0000s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.000339s (num_starts 10; 0.0000s/start)
tfg_edge_composition_get_assumes.: 0.000358s (num_starts 20; 0.0000s/start)
collect_dst_to_src_submap_preds.: 0.000382s (num_starts 268; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.00045s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000451s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000453s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000455s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000468s (num_starts 1; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000472s (num_starts 1; 0.0005s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.000483s (num_starts 10; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000502s (num_starts 1; 0.0005s/start)
graph_locs_add_all_llvmvars.: 0.000504s (num_starts 2; 0.0003s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.00052s (num_starts 20; 0.0000s/start)
expr_represents_llvm_undef.: 0.000531s (num_starts 159; 0.0000s/start)
populate_locid2expr_map.: 0.000543s (num_starts 2; 0.0003s/start)
graph_locs_add_all_specvars.: 0.00055s (num_starts 2; 0.0003s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000562s (num_starts 1; 0.0006s/start)
populate_branch_affecting_locs.: 0.000629s (num_starts 3; 0.0002s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000676s (num_starts 191; 0.0000s/start)
tfg::populate_loc_definedness.before_solve.: 0.00068s (num_starts 3; 0.0002s/start)
compute_ssa_vars_renaming_map.: 0.000707s (num_starts 2; 0.0004s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000738s (num_starts 4; 0.0002s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000744s (num_starts 11; 0.0001s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000754s (num_starts 38; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000766s (num_starts 151; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000766s (num_starts 1; 0.0008s/start)
compute_bv_bool_eqclass.: 0.000775s (num_starts 4; 0.0002s/start)
aliasing_constraints.convert_to_expr.: 0.000778s (num_starts 165; 0.0000s/start)
proof_query_is_trivial_helper.: 0.000804s (num_starts 268; 0.0000s/start)
graph_visit_exprs.: 0.000813s (num_starts 3; 0.0003s/start)
create_closure_matrix.: 0.000822s (num_starts 27; 0.0000s/start)
compute_vars_reaching_definitions.: 0.000831s (num_starts 2; 0.0004s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000855s (num_starts 208; 0.0000s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000925s (num_starts 165; 0.0000s/start)
tfg_suffixpath_get_expr_helper.: 0.000942s (num_starts 24; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.00095s (num_starts 4; 0.0002s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000961s (num_starts 10; 0.0001s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.000964s (num_starts 21; 0.0000s/start)
collect_assumes_around_edge.: 0.001s (num_starts 5; 0.0002s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.001003s (num_starts 20; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.001022s (num_starts 3; 0.0003s/start)
graph_visit_exprs_and_keys.: 0.001059s (num_starts 2; 0.0005s/start)
populate_transitive_closure.: 0.001091s (num_starts 17; 0.0001s/start)
tfg::populate_loc_definedness.: 0.001102s (num_starts 3; 0.0004s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.00115s (num_starts 4; 0.0003s/start)
generate_aliasing_constraints_from_expr.: 0.001184s (num_starts 247; 0.0000s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.001232s (num_starts 313; 0.0000s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.001237s (num_starts 5; 0.0002s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001248s (num_starts 10; 0.0001s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001291s (num_starts 10; 0.0001s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.001424s (num_starts 165; 0.0000s/start)
find_dominators.: 0.001605s (num_starts 29; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001629s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001632s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001634s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001641s (num_starts 1; 0.0016s/start)
identify_address_taken_local_variables.: 0.001707s (num_starts 3; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001802s (num_starts 1; 0.0018s/start)
graph_identify_back_edges.: 0.001817s (num_starts 25; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.001846s (num_starts 57; 0.0000s/start)
graph_identify_natural_loops.: 0.00188s (num_starts 25; 0.0001s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001885s (num_starts 4; 0.0005s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.00222s (num_starts 24; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002224s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002227s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00223s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002237s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002259s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002264s (num_starts 1; 0.0023s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.002292s (num_starts 24; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.002309s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002362s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002366s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002369s (num_starts 1; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002377s (num_starts 1; 0.0024s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.002405s (num_starts 197; 0.0000s/start)
proof_query_is_trivial.: 0.002413s (num_starts 268; 0.0000s/start)
parse_yices_model.: 0.002589s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002643s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002643s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002649s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.002654s (num_starts 1; 0.0027s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.002751s (num_starts 313; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.002785s (num_starts 5; 0.0006s/start)
populate_locs_potentially_modified_on_edge.: 0.00286s (num_starts 3; 0.0010s/start)
set_result_and_counter_example.: 0.002928s (num_starts 107; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00309s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003093s (num_starts 1; 0.0031s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.003097s (num_starts 26; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.003111s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.003116s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00312s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.003128s (num_starts 1; 0.0031s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.003216s (num_starts 4; 0.0008s/start)
collect_aliasing_constraints_around_path_helper.: 0.003228s (num_starts 134; 0.0000s/start)
do_ssa_transformation.: 0.003435s (num_starts 2; 0.0017s/start)
graph_with_guessing_sync_preds.: 0.003602s (num_starts 268; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003801s (num_starts 1; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003805s (num_starts 1; 0.0038s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.003832s (num_starts 29; 0.0001s/start)
check_node_stability_after_CE_addition.: 0.003925s (num_starts 159; 0.0000s/start)
collect_aliasing_constraints_around_path.: 0.003944s (num_starts 86; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.003948s (num_starts 183; 0.0000s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.004221s (num_starts 165; 0.0000s/start)
compute_regions.: 0.00432s (num_starts 25; 0.0002s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.004383s (num_starts 5; 0.0009s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.004584s (num_starts 151; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004896s (num_starts 2; 0.0024s/start)
cg_src_dst_tfg_copy.: 0.004933s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.004934s (num_starts 2; 0.0025s/start)
get_next_potential_correlations.: 0.005118s (num_starts 5; 0.0010s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.005183s (num_starts 20; 0.0003s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.005228s (num_starts 2; 0.0026s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.005677s (num_starts 208; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.005931s (num_starts 448; 0.0000s/start)
create_sp_version_relations_lattice_at_pc.: 0.006198s (num_starts 27; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007098s (num_starts 1; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.007101s (num_starts 1; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007102s (num_starts 1; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.00711s (num_starts 1; 0.0071s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.007465s (num_starts 8; 0.0009s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.008084s (num_starts 208; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008619s (num_starts 1; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008621s (num_starts 1; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.008624s (num_starts 1; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.008631s (num_starts 1; 0.0086s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.008855s (num_starts 156; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009144s (num_starts 3; 0.0030s/start)
get_unrolled_paths_from.: 0.009166s (num_starts 36; 0.0003s/start)
construct_linear_combination_exprs.: 0.009377s (num_starts 361; 0.0000s/start)
populate_simplified_to_state.: 0.009586s (num_starts 3; 0.0032s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.: 0.009713s (num_starts 1; 0.0097s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.009783s (num_starts 5; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.009788s (num_starts 5; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities..: 0.009826s (num_starts 5; 0.0020s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.009841s (num_starts 5; 0.0020s/start)
bv_expr_pair_ranges_merge_adjacent.: 0.009891s (num_starts 182; 0.0001s/start)
populate_simplified_assets.: 0.010143s (num_starts 6; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010191s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.010224s (num_starts 2; 0.0051s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.010366s (num_starts 20; 0.0005s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.010632s (num_starts 678; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.: 0.011065s (num_starts 1; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.011294s (num_starts 5; 0.0023s/start)
expr_substitute_using_available_exprs_submap.: 0.011314s (num_starts 106; 0.0001s/start)
get_sprel_map_pair_at_pc.: 0.011598s (num_starts 165; 0.0001s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.012019s (num_starts 678; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012418s (num_starts 2; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.012456s (num_starts 2; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear;-trivial.: 0.012824s (num_starts 3; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.012829s (num_starts 3; 0.0043s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.013016s (num_starts 3; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear;-trivial.: 0.014519s (num_starts 3; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.014527s (num_starts 3; 0.0048s/start)
ldr_decomposition.: 0.01504s (num_starts 151; 0.0001s/start)
avail_exprs_create_submap.: 0.015329s (num_starts 60; 0.0003s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.01741s (num_starts 20; 0.0009s/start)
get_mask_ranges_for_memlabel.: 0.017722s (num_starts 91; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.018381s (num_starts 9; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 0.018403s (num_starts 9; 0.0020s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.018705s (num_starts 453; 0.0000s/start)
bv_const_ref_map2expr_map.: 0.019151s (num_starts 361; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.019673s (num_starts 448; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.020407s (num_starts 9; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 0.020452s (num_starts 9; 0.0023s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.020839s (num_starts 975; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-trivial.: 0.021241s (num_starts 5; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.021254s (num_starts 5; 0.0043s/start)
counter_example_satisfies_preds.: 0.022919s (num_starts 474; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.023771s (num_starts 151; 0.0002s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.024498s (num_starts 656; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.024733s (num_starts 151; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.02503s (num_starts 448; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.026593s (num_starts 955; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.027513s (num_starts 6; 0.0046s/start)
pth_collect_simplified_preds_using_atom_func.: 0.029296s (num_starts 935; 0.0000s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.03041s (num_starts 5; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-trivial.: 0.03146s (num_starts 1; 0.0315s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear;-trivial.: 0.031466s (num_starts 1; 0.0315s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-trivial.: 0.031469s (num_starts 1; 0.0315s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.032492s (num_starts 10; 0.0032s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.032595s (num_starts 20; 0.0016s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.037886s (num_starts 2844; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.038004s (num_starts 1; 0.0380s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.038007s (num_starts 1; 0.0380s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-trivial.: 0.038008s (num_starts 1; 0.0380s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.038011s (num_starts 1; 0.0380s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.040909s (num_starts 15; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 0.040963s (num_starts 15; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.043001s (num_starts 1; 0.0430s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.043005s (num_starts 1; 0.0430s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.043006s (num_starts 1; 0.0430s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.044152s (num_starts 3; 0.0147s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.044159s (num_starts 3; 0.0147s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.044945s (num_starts 347; 0.0001s/start)
collect_assumes_around_path_helper.: 0.045077s (num_starts 313; 0.0001s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-trivial.: 0.045367s (num_starts 2; 0.0227s/start)
graph_with_paths::collect_assumes_around_path.: 0.045939s (num_starts 313; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.045947s (num_starts 4; 0.0115s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);-trivial.: 0.047567s (num_starts 5; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.049084s (num_starts 5; 0.0098s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.049099s (num_starts 5; 0.0098s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.05062s (num_starts 347; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.051731s (num_starts 1; 0.0517s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.051737s (num_starts 1; 0.0517s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.053213s (num_starts 15; 0.0035s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-trivial.: 0.053277s (num_starts 1; 0.0533s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.053278s (num_starts 1; 0.0533s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.053282s (num_starts 1; 0.0533s/start)
predicate_canonicalized.: 0.053282s (num_starts 361; 0.0001s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-trivial.: 0.054838s (num_starts 2; 0.0274s/start)
populate_loc_liveness.: 0.058222s (num_starts 3; 0.0194s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.061876s (num_starts 8; 0.0077s/start)
query:convert_from_z3.: 0.062467s (num_starts 951; 0.0001s/start)
tfg_relax_pointsto_vals_on_edge.: 0.062538s (num_starts 10; 0.0063s/start)
ldr_decompose_and_linear_solve.: 0.066257s (num_starts 151; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown;-trivial.: 0.069671s (num_starts 2; 0.0348s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.069676s (num_starts 2; 0.0348s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.071927s (num_starts 2; 0.0360s/start)
bv_linear_solve.: 0.071958s (num_starts 151; 0.0005s/start)
query:bv_solve.: 0.072852s (num_starts 151; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.074118s (num_starts 3; 0.0247s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.074129s (num_starts 3; 0.0247s/start)
tfg_postprocess_after_pointsto_analysis.: 0.074561s (num_starts 2; 0.0373s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.075049s (num_starts 1; 0.0750s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.076412s (num_starts 4; 0.0191s/start)
gen_pred_from_coeff_row.simplify.: 0.078602s (num_starts 361; 0.0002s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);-trivial.: 0.078631s (num_starts 5; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.080303s (num_starts 5; 0.0161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.080322s (num_starts 5; 0.0161s/start)
compute_expr_eqclasses_at_pc.: 0.081111s (num_starts 4; 0.0203s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.082647s (num_starts 6; 0.0138s/start)
cg_add_node.: 0.082988s (num_starts 6; 0.0138s/start)
graph_ec_apply_trans_funs_helper.0.: 0.089171s (num_starts 720; 0.0001s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.090579s (num_starts 165; 0.0005s/start)
graph_ec_apply_trans_funs_helper.: 0.092257s (num_starts 730; 0.0001s/start)
create_new_corr_graph_edge.new_node.: 0.092669s (num_starts 5; 0.0185s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.093783s (num_starts 730; 0.0001s/start)
bv_solve_returning_intermediate_structures.: 0.093845s (num_starts 151; 0.0006s/start)
create_new_corr_graph_edge.: 0.094525s (num_starts 5; 0.0189s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.094738s (num_starts 2; 0.0474s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.094739s (num_starts 2; 0.0474s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.094783s (num_starts 8; 0.0118s/start)
query:convert_to_z3.: 0.094893s (num_starts 951; 0.0001s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.095835s (num_starts 730; 0.0001s/start)
computeWP_for_pred_across_ec.: 0.097591s (num_starts 730; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.102586s (num_starts 1; 0.1026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.106098s (num_starts 1; 0.1061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.106109s (num_starts 1; 0.1061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.106116s (num_starts 1; 0.1061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.10613s (num_starts 1; 0.1061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond.: 0.106135s (num_starts 1; 0.1061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.106417s (num_starts 1; 0.1064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.106425s (num_starts 1; 0.1064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.106435s (num_starts 1; 0.1064s/start)
bvsolve_cache_query.miss1.: 0.10795s (num_starts 151; 0.0007s/start)
bvsolve_cache_query.: 0.113539s (num_starts 151; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 0.11392s (num_starts 6; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess.: 0.115613s (num_starts 4; 0.0289s/start)
edge_composition_apply_trans_funs_on_pred.: 0.117175s (num_starts 268; 0.0004s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.119323s (num_starts 347; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124876s (num_starts 1; 0.1249s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124886s (num_starts 1; 0.1249s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124891s (num_starts 1; 0.1249s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-trivial.: 0.140666s (num_starts 15; 0.0094s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.14158s (num_starts 4; 0.0354s/start)
compute_lr_status_for_expr.: 0.142659s (num_starts 109; 0.0013s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.143077s (num_starts 106; 0.0013s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.143252s (num_starts 106; 0.0014s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146859s (num_starts 1; 0.1469s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146865s (num_starts 1; 0.1469s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.146886s (num_starts 1; 0.1469s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.149165s (num_starts 2; 0.0746s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%1%fcallEnd_Lentry%1%fcallEnd.inductive-invariants.: 0.150383s (num_starts 26; 0.0058s/start)
check_wfconds_on_edge.L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart.: 0.151011s (num_starts 2; 0.0755s/start)
solve_for_bv_points.: 0.154819s (num_starts 151; 0.0010s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.158469s (num_starts 165; 0.0010s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.169517s (num_starts 10; 0.0170s/start)
gen_pred_from_coeff_row.: 0.172594s (num_starts 361; 0.0005s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);-trivial.: 0.173029s (num_starts 5; 0.0346s/start)
counter_example_falsifies_preds.: 0.173521s (num_starts 116; 0.0015s/start)
compute_preds_for_bv_points.: 0.17562s (num_starts 60; 0.0029s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.175935s (num_starts 64; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.176642s (num_starts 2; 0.0883s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.176662s (num_starts 2; 0.0883s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.185332s (num_starts 35; 0.0053s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.188229s (num_starts 151; 0.0012s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.189347s (num_starts 10; 0.0189s/start)
counter_example_evaluate_preds.: 0.194992s (num_starts 590; 0.0003s/start)
compute_new_lr_status_on_locs.: 0.197086s (num_starts 20; 0.0099s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199648s (num_starts 2; 0.0998s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199683s (num_starts 2; 0.0998s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199731s (num_starts 2; 0.0999s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.200196s (num_starts 2; 0.1001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.200227s (num_starts 2; 0.1001s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d).: 0.200242s (num_starts 2; 0.1001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.204185s (num_starts 2; 0.1021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.204232s (num_starts 2; 0.1021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.206057s (num_starts 3; 0.0687s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.209698s (num_starts 604; 0.0003s/start)
query:simplify-z3.: 0.211515s (num_starts 2095; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.212599s (num_starts 5; 0.0425s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear.: 0.212622s (num_starts 5; 0.0425s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.: 0.213848s (num_starts 1; 0.2138s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond.: 0.219664s (num_starts 3; 0.0732s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.220649s (num_starts 27; 0.0082s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.223331s (num_starts 2; 0.1117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.22338s (num_starts 2; 0.1117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.223959s (num_starts 2; 0.1120s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.22572s (num_starts 3; 0.0752s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.226836s (num_starts 2; 0.1134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.226868s (num_starts 2; 0.1134s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.226887s (num_starts 2; 0.1134s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.226996s (num_starts 1; 0.2270s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.227007s (num_starts 1; 0.2270s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.227019s (num_starts 1; 0.2270s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess.: 0.227023s (num_starts 1; 0.2270s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.228071s (num_starts 1; 0.2281s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.230983s (num_starts 2; 0.1155s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.23773s (num_starts 1; 0.2377s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.237734s (num_starts 1; 0.2377s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.237737s (num_starts 1; 0.2377s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.237749s (num_starts 1; 0.2377s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate.: 0.237753s (num_starts 1; 0.2378s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.237759s (num_starts 1; 0.2378s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.241458s (num_starts 5; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear.: 0.241481s (num_starts 5; 0.0483s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.: 0.242509s (num_starts 1; 0.2425s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.250274s (num_starts 6; 0.0417s/start)
check_wfconds_on_edge.L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd.: 0.252779s (num_starts 2; 0.1264s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.254699s (num_starts 1; 0.2547s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.254704s (num_starts 1; 0.2547s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.254708s (num_starts 1; 0.2547s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.254722s (num_starts 1; 0.2547s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate.: 0.254726s (num_starts 1; 0.2547s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.254731s (num_starts 1; 0.2547s/start)
get_masked_array_constant.: 0.257904s (num_starts 91; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.261794s (num_starts 10; 0.0262s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268535s (num_starts 1; 0.2685s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268565s (num_starts 1; 0.2686s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268575s (num_starts 1; 0.2686s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.268597s (num_starts 1; 0.2686s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate.: 0.268602s (num_starts 1; 0.2686s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.268608s (num_starts 1; 0.2686s/start)
ftmap_run_pointsto_analysis.: 0.271215s (num_starts 2; 0.1356s/start)
tfg_run_pointsto_analysis.: 0.271437s (num_starts 2; 0.1357s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.273981s (num_starts 1; 0.2740s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.273981s (num_starts 1; 0.2740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.273985s (num_starts 1; 0.2740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.273993s (num_starts 1; 0.2740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false.: 0.274003s (num_starts 1; 0.2740s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.274008s (num_starts 1; 0.2740s/start)
tfg_populate_structs_after_ssa_construction.: 0.275596s (num_starts 2; 0.1378s/start)
lhs_set_sort.: 0.278436s (num_starts 165; 0.0017s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.280337s (num_starts 2; 0.1402s/start)
evaluate_memmask.: 0.280674s (num_starts 91; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.284902s (num_starts 1; 0.2849s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.284903s (num_starts 1; 0.2849s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.284903s (num_starts 1; 0.2849s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 0.295918s (num_starts 4; 0.0740s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.299902s (num_starts 6; 0.0500s/start)
put_smtlib_string_in_file.: 0.302067s (num_starts 214; 0.0014s/start)
check_wfconds_on_edge.L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd.: 0.302231s (num_starts 2; 0.1511s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 0.303747s (num_starts 1; 0.3037s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%2%fcallStart_Lentry%2%fcallStart.inductive-invariants.: 0.311903s (num_starts 32; 0.0097s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.321872s (num_starts 10; 0.0322s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.322942s (num_starts 2; 0.1615s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate.: 0.322951s (num_starts 2; 0.1615s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.322967s (num_starts 2; 0.1615s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-trivial.: 0.323097s (num_starts 42; 0.0077s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.325813s (num_starts 4; 0.0815s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.333354s (num_starts 2; 0.1667s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.333371s (num_starts 2; 0.1667s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.333482s (num_starts 2; 0.1667s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.361068s (num_starts 8; 0.0451s/start)
corr_graph::add_edge().: 0.370297s (num_starts 5; 0.0741s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.370813s (num_starts 3; 0.1236s/start)
check_wfconds_on_edge.L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d.: 0.379501s (num_starts 2; 0.1898s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.383122s (num_starts 1; 0.3831s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.383127s (num_starts 1; 0.3831s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.383129s (num_starts 1; 0.3831s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.383142s (num_starts 1; 0.3831s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false.: 0.383145s (num_starts 1; 0.3831s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.38315s (num_starts 1; 0.3831s/start)
evaluate_function_call.: 0.392544s (num_starts 91; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.401848s (num_starts 4; 0.1005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 0.401894s (num_starts 4; 0.1005s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410333s (num_starts 1; 0.4103s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410334s (num_starts 1; 0.4103s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410338s (num_starts 1; 0.4103s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410339s (num_starts 1; 0.4103s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.410351s (num_starts 1; 0.4104s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false.: 0.410354s (num_starts 1; 0.4104s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.410358s (num_starts 1; 0.4104s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.410832s (num_starts 2; 0.2054s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%1%fcallStart_Lentry%1%fcallStart.inductive-invariants.: 0.411841s (num_starts 34; 0.0121s/start)
output_lhs_set_guard_etc_and_src_dst_to_file.: 0.419834s (num_starts 39; 0.0108s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.422838s (num_starts 151; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.424957s (num_starts 1; 0.4250s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.424963s (num_starts 1; 0.4250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.424964s (num_starts 1; 0.4250s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.424993s (num_starts 1; 0.4250s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false.: 0.424998s (num_starts 1; 0.4250s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.425005s (num_starts 1; 0.4250s/start)
graph_to_stream.: 0.436295s (num_starts 121; 0.0036s/start)
prove_dump_to_file.: 0.440556s (num_starts 39; 0.0113s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.466039s (num_starts 5; 0.0932s/start)
corr_graph_add_correlation.: 0.466199s (num_starts 5; 0.0932s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.466288s (num_starts 5; 0.0933s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.478145s (num_starts 3; 0.1594s/start)
collect_inductive_preds_around_path.: 0.485261s (num_starts 268; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.504399s (num_starts 5; 0.1009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.516526s (num_starts 23; 0.0225s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-trivial.: 0.518283s (num_starts 24; 0.0216s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-trivial.: 0.525838s (num_starts 19; 0.0277s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.525867s (num_starts 19; 0.0277s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon).: 0.525949s (num_starts 8; 0.0657s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.534763s (num_starts 32; 0.0167s/start)
guarded_predicate_set_and.: 0.543652s (num_starts 165; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.546152s (num_starts 28; 0.0195s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.549822s (num_starts 2; 0.2749s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.556145s (num_starts 443; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.581102s (num_starts 1; 0.5811s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.581106s (num_starts 1; 0.5811s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.58111s (num_starts 1; 0.5811s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.581121s (num_starts 1; 0.5811s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false.: 0.581124s (num_starts 1; 0.5811s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.581132s (num_starts 1; 0.5811s/start)
counter_example_translate_on_edge_composition_helper.: 0.59106s (num_starts 771; 0.0008s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon).: 0.604813s (num_starts 4; 0.1512s/start)
apply_mask_and_overlay_array_constant.: 0.606362s (num_starts 443; 0.0014s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.606429s (num_starts 3; 0.2021s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);-trivial.: 0.606745s (num_starts 42; 0.0144s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);-trivial.: 0.621471s (num_starts 41; 0.0152s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear.: 0.645306s (num_starts 20; 0.0323s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon).: 0.685315s (num_starts 8; 0.0857s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.687158s (num_starts 2; 0.3436s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown.: 0.694338s (num_starts 45; 0.0154s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon).: 0.732693s (num_starts 4; 0.1832s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.892838s (num_starts 33; 0.0271s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-trivial.: 0.895096s (num_starts 34; 0.0263s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.933513s (num_starts 48; 0.0194s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.01673s (num_starts 165; 0.0062s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);-trivial.: 1.04062s (num_starts 58; 0.0179s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.04589s (num_starts 4; 0.2615s/start)
add_fresh_counterexample_at_pc_and_propagate.: 1.06074s (num_starts 129; 0.0082s/start)
decide_hoare_triple_with_alias_cons.ce.: 1.06375s (num_starts 184; 0.0058s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 1.08405s (num_starts 5; 0.2168s/start)
check_wfconds_on_edge.: 1.08573s (num_starts 10; 0.1086s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.14296s (num_starts 165; 0.0069s/start)
check_equivalence_proof.: 1.48184s (num_starts 1; 1.4818s/start)
compute_z3_expr.: 1.79947s (num_starts 1058; 0.0017s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.94079s (num_starts 745; 0.0026s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.07351s (num_starts 5; 0.4147s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 2.07364s (num_starts 5; 0.4147s/start)
decide_hoare_triple.: 2.08621s (num_starts 10; 0.2086s/start)
dst_edge_composition_proves_false.: 2.10875s (num_starts 5; 0.4218s/start)
get_next_dst_edge_composition_to_correlate.: 2.11635s (num_starts 6; 0.3527s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 2.22965s (num_starts 79; 0.0282s/start)
check_preds_on_edge_compositions.: 2.24604s (num_starts 15; 0.1497s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 2.33181s (num_starts 121; 0.0193s/start)
decide_hoare_triple_helper;-trivial.: 2.72899s (num_starts 162; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.73386s (num_starts 7; 0.3906s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.73388s (num_starts 7; 0.3906s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 2.7553s (num_starts 12; 0.2296s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear.: 2.75534s (num_starts 12; 0.2296s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.83636s (num_starts 8; 0.3545s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 2.84441s (num_starts 1; 2.8444s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 2.86936s (num_starts 18; 0.1594s/start)
parse_z3_model.: 3.41547s (num_starts 93; 0.0367s/start)
read_counter_examples_from_channel.: 3.44175s (num_starts 57; 0.0604s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.00888s (num_starts 15; 0.2673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.00892s (num_starts 15; 0.2673s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 4.04056s (num_starts 16; 0.2525s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear.: 4.0406s (num_starts 16; 0.2525s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 4.1778s (num_starts 1; 4.1778s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.41058s (num_starts 19; 0.2321s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 4.44267s (num_starts 20; 0.2221s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.67355s (num_starts 31; 0.2475s/start)
decide_hoare_triple_helper;per-query-type;linear.: 7.89552s (num_starts 58; 0.1361s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.8981s (num_starts 8; 1.4873s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.8981s (num_starts 8; 1.4873s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 11.9679s (num_starts 10; 1.1968s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown.: 11.9679s (num_starts 10; 1.1968s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 12.122s (num_starts 10; 1.2122s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 12.264s (num_starts 14; 0.8760s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 12.3004s (num_starts 1; 12.3004s/start)
decide_hoare_triple_dump_to_file.: 14.3366s (num_starts 39; 0.3676s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 17.1343s (num_starts 32; 0.5354s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart).: 17.3089s (num_starts 37; 0.4678s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 32.1383s (num_starts 7; 4.5912s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 32.1383s (num_starts 7; 4.5912s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 32.3425s (num_starts 9; 3.5936s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 32.5756s (num_starts 10; 3.2576s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 32.6551s (num_starts 30; 1.0885s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 32.6738s (num_starts 39; 0.8378s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown.: 32.8612s (num_starts 33; 0.9958s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd).: 33.1837s (num_starts 52; 0.6381s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.: 33.3147s (num_starts 1; 33.3147s/start)
ce_reconcile_sorts.: 35.7844s (num_starts 94; 0.3807s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 57.9671s (num_starts 20; 2.8984s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 57.9673s (num_starts 20; 2.8984s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 58.1906s (num_starts 22; 2.6450s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 58.4485s (num_starts 23; 2.5412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 65.8196s (num_starts 53; 1.2419s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 65.8611s (num_starts 68; 0.9685s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown.: 66.0455s (num_starts 56; 1.1794s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.: 66.4026s (num_starts 1; 66.4026s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd).: 66.4503s (num_starts 81; 0.8204s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 75.4613s (num_starts 20; 3.7731s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 75.4614s (num_starts 20; 3.7731s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 75.4615s (num_starts 20; 3.7731s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 78.5824s (num_starts 29; 2.7097s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 83.3655s (num_starts 39; 2.1376s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown.: 83.3656s (num_starts 39; 2.1376s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 83.3864s (num_starts 48; 1.7372s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 83.4722s (num_starts 1; 83.4722s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart).: 86.5838s (num_starts 70; 1.2369s/start)
query:smt.: 142.616s (num_starts 107; 1.3329s/start)
spawn_smt_query.: 146.059s (num_starts 107; 1.3650s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 178.263s (num_starts 62; 2.8752s/start)
solver_provable.: 184.173s (num_starts 165; 1.1162s/start)
solver_satisfiable-cache-miss.: 184.246s (num_starts 107; 1.7219s/start)
solver_satisfiable.: 184.249s (num_starts 166; 1.1099s/start)
expr_is_provable.: 184.428s (num_starts 165; 1.1177s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 184.432s (num_starts 165; 1.1178s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 184.441s (num_starts 165; 1.1178s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 184.445s (num_starts 165; 1.1178s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 185.003s (num_starts 165; 1.1212s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 185.015s (num_starts 165; 1.1213s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 185.018s (num_starts 165; 1.1213s/start)
is_expr_equal_using_lhs_set_and_precond.: 188.901s (num_starts 165; 1.1449s/start)
prove.: 188.903s (num_starts 165; 1.1449s/start)
prove_spawn_and_join_helper.: 188.904s (num_starts 165; 1.1449s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 189.624s (num_starts 106; 1.7889s/start)
prove_spawn_and_join.: 190.883s (num_starts 165; 1.1569s/start)
prove_wrapper.proof_query_not_trivial.: 191.348s (num_starts 165; 1.1597s/start)
prove_wrapper.: 191.658s (num_starts 268; 0.7151s/start)
decide_hoare_triple_check_ub.: 191.791s (num_starts 268; 0.7156s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 194.935s (num_starts 183; 1.0652s/start)
update_invariant_state_for_edges.: 204.373s (num_starts 5; 40.8745s/start)
cg_check_new_cg_ec.: 204.373s (num_starts 5; 40.8746s/start)
correl_entry_apply.: 204.373s (num_starts 5; 40.8746s/start)
expandProductCFG.: 206.495s (num_starts 6; 34.4158s/start)
decide_hoare_triple_helper.: 206.7s (num_starts 268; 0.7713s/start)
bestFirstSearch.: 207.069s (num_starts 1; 207.0692s/start)
decide_hoare_triple_with_alias_cons.: 207.767s (num_starts 268; 0.7752s/start)
Time taken for equivalence check.: 208.616s (num_starts 1; 208.6161s/start)

counters:
# of assume sat failures for cg-edge-assume-unknown.: 21
# of paths enumerated.: 5
# of paths expanded.: 5
# of queries to linear solver.: 151
# of smt-solver-queries.: 107
L0%0%d=>Lentry%1%fcallStart-src_ecs.: 1
L0%0%d=>Lentry%1%fcallStart-src_to_pcs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_ecs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_to_pcs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_ecs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_to_pcs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_ecs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_to_pcs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_ecs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_to_pcs.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 12
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 16
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 2
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 8
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 11
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 32
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 31
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 23
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 22
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 40
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 39
smt-queries-cache-hits.: 59
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 93
total-correlation-possibilities.: 6
total-correlation-possibilities-mod-lsprels.: 6
total-correlations-explored.: 6

flags:
dst-aloc.: 0
dst-edges.: 5
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L4%1%fcallEnd_Lentry%1%fcallEnd.: 0
final-CG-counterexamples-generated-at-L4%1%fcallStart_Lentry%1%fcallStart.: 14
final-CG-counterexamples-generated-at-L4%2%fcallEnd_Lentry%2%fcallEnd.: 1
final-CG-counterexamples-generated-at-L4%2%fcallStart_Lentry%2%fcallStart.: 10
final-CG-counterexamples-total-at-L4%1%fcallEnd_Lentry%1%fcallEnd.: 11
final-CG-counterexamples-total-at-L4%1%fcallStart_Lentry%1%fcallStart.: 17
final-CG-counterexamples-total-at-L4%2%fcallEnd_Lentry%2%fcallEnd.: 10
final-CG-counterexamples-total-at-L4%2%fcallStart_Lentry%2%fcallStart.: 11
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 6
final-CG-num-invariants.: 61
final-CG-super-edges.: 0
src-edges.: 5
src-nodes.: 6
timeout-occured.: 1

info:
eq-state.: find_correlation
final-CG-time-secs.: 204.84
final-CG-time-to-total-time-ratio.: 0.99
query-time-to-total-time-ratio.: 0.69

Context stats:
exprs: count: 265769
sorts: count: 170
num_proof_queries: 165
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	15321
	        hit ratio:	0.972913
m_simplify_solver:
	----------- total:	5794
	        hit ratio:	0.802554
m_z3_solver_substitution:
	----------- total:	1144
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1144
	        hit ratio:	0
m_expr_size:
	----------- total:	13531
	        hit ratio:	0.904294
m_expr_evaluates_to_constant_visitor:
	----------- total:	261706
	        hit ratio:	0.452741

z3_solver expr_query_cache entry size: 107
	----------- total:	166
	             hits:	59
	        hit ratio:	0.355422
histogram (time taken by solver in ms):
[  37.8160,   61.6849) (avg.   48.4984)  : 27
[  61.6849,  100.6197) (avg.   83.3577)  : 3
[ 100.6197,  164.1294) (avg.  124.8552)  : 26
[ 164.1294,  267.7257) (avg.  193.7647)  : 4
[ 267.7257,  436.7105) (avg.  339.2965)  : 11
[ 436.7105,  712.3563) (avg.  573.9668)  : 5
[ 712.3563, 1161.9859) (avg.  951.0914)  : 5
[1161.9859, 1895.4157) (avg.    0.0000)  : 0
[1895.4157, 3091.7765) (avg. 2403.4465)  : 2
[3091.7765, 5043.2640) (avg. 5036.2005)  : 24
histogram (number of quantifiers in query)
[ 0,  6) (avg.  0)                       : 1
[ 6, 11) (avg.  0)                       : 0
[11, 17) (avg.  0)                       : 0
[17, 22) (avg.  0)                       : 0
[22, 28) (avg. 25)                       : 45
[28, 33) (avg. 28)                       : 1
[33, 39) (avg. 36)                       : 57
[39, 44) (avg.  0)                       : 0
[44, 50) (avg. 45)                       : 3
[50, 55) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[176, 226) (avg. 176)                    : 1
[226, 276) (avg.   0)                    : 0
[276, 326) (avg.   0)                    : 0
[326, 376) (avg.   0)                    : 0
[376, 426) (avg.   0)                    : 0
[426, 476) (avg. 459)                    : 32
[476, 526) (avg. 485)                    : 14
[526, 576) (avg. 560)                    : 43
[576, 626) (avg. 601)                    : 14
[626, 675) (avg. 655)                    : 3
Top 10 highest time taking queries:
1. [5.042s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallStart_Lentry%1%fcallStart.cond_apply_set_elem0_of_1.4
2. [5.042s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.37
3. [5.042s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.1
4. [5.040s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.30
5. [5.038s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.14
6. [5.038s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.12
7. [5.037s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.16
8. [5.037s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.23
9. [5.037s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.2
10. [5.037s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.4

<MSG>3:50 : Successfully computed equivalence for function: bar.</MSG>
<MSG>3:50 : Computing equivalence for function: foo...</MSG>
<MSG>3:50 : Constructing SSA for SPEC TFG...</MSG>
<MSG>3:50 : Constructing SSA for LLVM TFG...</MSG>
<MSG>3:51 : Finished SSA construction for both TFGs...</MSG>
<MSG>3:51 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>3:51 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>3:51 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Attempting correlation of src pathset L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Attempting correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Considering 1 paths to src pc L3%18%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Attempting correlation of src pathset L0%0%d=>L3%18%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Found 1 feasible correlations for paths to src pc L3%18%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Considering 1 paths to src pc L3%21%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Attempting correlation of src pathset L0%0%d=>L3%21%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Found 1 feasible correlations for paths to src pc L3%21%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : product-TFG foo: Found 4 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : product-TFG foo created 4 possibilities in group foo.A...</MSG>
<MSG>3:51 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:51 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>3:51 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>3:51 : Creating ssa-path for the src-tfg path L0%0%d --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:51 : Adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:51 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>3:51 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:51 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Adding node L3%7%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>3:51 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Adding edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:51 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:51 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:51 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>3:51 : foo.A1: Added the 2 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>3:51 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:51 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>3:51 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : Done adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:51 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>3:51 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>3:51 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:51 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:51 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:51 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>3:51 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:51 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:51 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:51 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:53 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht14-prove_trivial4-prove10...</MSG>
<MSG>3:53 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:53 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:53 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:54 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:54 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:54 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:54 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:54 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:54 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:54 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:54 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:54 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:54 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:54 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:54 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:55 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>3:55 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:55 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:55 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>3:55 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>3:55 : foo.A1 (d:1, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:55 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>3:55 : Chosen product-TFG foo.A1 will be explored later...</MSG>
<MSG>3:55 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>3:55 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:55 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>3:55 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>3:55 : Creating ssa-path for the src-tfg path L0%0%d --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:55 : Adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:55 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>3:55 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:55 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:55 : foo.A2: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A2: Adding node L3%10%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>3:56 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:56 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:56 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:56 : foo.A2: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140278 : 1 { 0x1 } : BOOL                          : true
164675 : not(140278) : BOOL                        : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140304 : input.spec-%var-n-2 : BV:32               : 0
140753 : bvuge(140290, 140304) : BOOL              : true
164666 : not(140753) : BOOL                        : false
164676 : or(164675, 164666) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1295 d09162caea7f8331727af12fb178031
=input.spec-%var-mat-2
1 : Lambda41273Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41274Var : BV:32
11 : Lambda41275Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41276Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda41307Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41308Var : BV:32
11 : Lambda41309Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41310Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 268743743 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 268743744; 268743747 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 268743748; 285520911 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 285520912; 285520915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 285520916; 2600593539 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2600593540; 2600593543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2600593544; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2600593540 { 0x9b01e884 -1694373756 -1.1490831e183 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 285520912 { 0x1104b410 +1.3674507e163 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 268743744 { 0x1004b440 +1.3675079e161 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2600593540 { 0x9b01e884 -1694373756 -1.1490831e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2600593543 { 0x9b01e887 -1694373753 -1.1490867e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 285520912 { 0x1104b410 +1.3674507e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 285520915 { 0x1104b413 +1.3674542e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 268743744 { 0x1004b440 +1.3675079e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 268743747 { 0x1004b443 +1.3675115e161 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda41290Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41291Var : BV:32
11 : Lambda41292Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41293Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
201799829
=counter_example_end


failcond-expr = or(not(true), not(bvuge(0, input.spec-%var-n-2))):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-n-2 : BV:32
5 : bvuge(3, 4) : BOOL
6 : not(5) : BOOL
7 : or(2, 6) : BOOL
</MSG>
<MSG>3:56 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:56 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>3:56 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : Done adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:56 : Failed correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140278 : 1 { 0x1 } : BOOL                          : true
164675 : not(140278) : BOOL                        : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140304 : input.spec-%var-n-2 : BV:32               : 0
140753 : bvuge(140290, 140304) : BOOL              : true
164666 : not(140753) : BOOL                        : false
164676 : or(164675, 164666) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1295 d09162caea7f8331727af12fb178031
=input.spec-%var-mat-2
1 : Lambda41273Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41274Var : BV:32
11 : Lambda41275Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41276Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda41307Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41308Var : BV:32
11 : Lambda41309Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41310Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 268743743 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 268743744; 268743747 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 268743748; 285520911 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 285520912; 285520915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 285520916; 2600593539 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2600593540; 2600593543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2600593544; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2600593540 { 0x9b01e884 -1694373756 -1.1490831e183 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 285520912 { 0x1104b410 +1.3674507e163 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 268743744 { 0x1004b440 +1.3675079e161 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2600593540 { 0x9b01e884 -1694373756 -1.1490831e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2600593543 { 0x9b01e887 -1694373753 -1.1490867e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 285520912 { 0x1104b410 +1.3674507e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 285520915 { 0x1104b413 +1.3674542e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 268743744 { 0x1004b440 +1.3675079e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 268743747 { 0x1004b443 +1.3675115e161 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda41290Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41291Var : BV:32
11 : Lambda41292Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41293Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
201799829
=counter_example_end


</MSG>
<MSG>3:56 : Discovered that the correlation was useless for the product-TFG foo.A2 (d:0, s:0, sp: 0)...</MSG>
<MSG>3:56 : Chose (after CE propagation) product-TFG foo.A1 (d:1, s:0, sp: 5) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 11 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>3:56 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:56 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:56 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:56 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:56 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 7 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial4-prove5...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>3:56 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:56 : foo.A1 (d:1, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>3:56 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:56 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Considering 2 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Found 2 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Attempting correlation of src pathset L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Considering 1 paths to src pc L3%18%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Attempting correlation of src pathset L3%7%bbentry=>L3%18%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Found 1 feasible correlations for paths to src pc L3%18%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Considering 1 paths to src pc L3%21%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Attempting correlation of src pathset L3%7%bbentry=>L3%21%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : Found 1 feasible correlations for paths to src pc L3%21%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : product-TFG foo.A1: Found 5 correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:56 : product-TFG foo.A1 created 5 possibilities in group foo.A1.B...</MSG>
<MSG>3:56 : Chose (for CE propagation) product-TFG foo.A1.B3 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:56 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3...</MSG>
<MSG>3:56 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3...</MSG>
<MSG>3:56 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>3:56 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>3:56 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>3:56 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>3:56 : Adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>3:56 : foo.A1.B3: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:56 : foo.A1.B3: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:56 : foo.A1.B3: Adding node L3%10%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>3:56 : foo.A1.B3: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:56 : foo.A1.B3: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:56 : foo.A1.B3: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:56 : foo.A1.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:56 : foo.A1.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:56 : foo.A1.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:56 : foo.A1.B3: Propagated 5 out of 13 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>3:56 : foo.A1.B3: Added the 5 propagated CEs at PC L3%10%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>3:56 : foo.A1.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:56 : foo.A1.B3: Finished executing CG's add edge function...</MSG>
<MSG>3:56 : foo.A1.B3: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:56 : foo.A1.B3: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:56 : Done adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>3:56 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>3:56 : Added correlation to the product-TFG foo.A1.B3 (d:1, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>3:56 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 3 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>3:56 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:56 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:56 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>3:56 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>3:56 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>3:56 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>3:56 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:56 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht19-prove_trivial10-prove9...</MSG>
<MSG>3:58 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:58 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:58 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:59 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:59 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:59 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:59 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:59 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:59 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:00 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:00 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht11-prove_trivial2-prove9...</MSG>
<MSG>4:03 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:03 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:03 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:03 : foo.A1.B3 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:03 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:03 : Chosen product-TFG foo.A1.B3 will be explored later...</MSG>
<MSG>4:03 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:03 : Chose (for CE propagation) product-TFG foo.A1.B4 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%18%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:03 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4...</MSG>
<MSG>4:03 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4...</MSG>
<MSG>4:03 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%18%bbentry ending at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:03 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:03 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:03 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:03 : Adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%18%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:03 : foo.A1.B4: Computing loop hoisting select expressions at toPC L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:03 : foo.A1.B4: Computing loop hoisting non-linear expressions at toPC L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:03 : foo.A1.B4: Adding node L3%18%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:03 : foo.A1.B4: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:03 : foo.A1.B4: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:03 : foo.A1.B4: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:03 : foo.A1.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:03 : foo.A1.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:03 : foo.A1.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:03 : foo.A1.B4: Propagated 5 out of 13 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:03 : foo.A1.B4: Added the 5 propagated CEs at PC L3%18%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:03 : foo.A1.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:03 : foo.A1.B4: Finished executing CG's add edge function...</MSG>
<MSG>4:03 : foo.A1.B4: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:03 : foo.A1.B4: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:03 : Done adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%18%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:03 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:03 : Added correlation to the product-TFG foo.A1.B4 (d:1, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>4:03 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 3 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%18%bbentry[mu 1, delta {1,0}]
<MSG>4:03 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:03 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:03 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht24-prove_trivial15-prove9...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:03 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:03 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:04 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial3-prove9...</MSG>
<MSG>4:04 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:04 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:04 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:04 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:04 : foo.A1.B4 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:04 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:04 : Chosen product-TFG foo.A1.B4 will be explored later...</MSG>
<MSG>4:04 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:04 : Chose (for CE propagation) product-TFG foo.A1.B5 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%21%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:04 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B5...</MSG>
<MSG>4:04 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B5...</MSG>
<MSG>4:04 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%21%bbentry ending at L3%21%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%21%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Computing loop hoisting select expressions at toPC L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Computing loop hoisting non-linear expressions at toPC L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Adding node L3%21%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:04 : foo.A1.B5: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:04 : foo.A1.B5: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%21%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141015 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140457 : input.dst.llvm-%n : BV:32                 : 268435456
141016 : bvult(141015, 140457) : BOOL              : true
141322 : not(141016) : BOOL                        : false
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 268435456
140696 : bvuge(140694, 140695) : BOOL              : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
188426 : bvuge(140290, 140710) : BOOL              : true
188430 : not(188426) : BOOL                        : false
188463 : andnot1(140696, 188430) : BOOL            : false
188467 : or(141322, 188463) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1725 669e521c36862d492d803924ef6d
=input.spec-%var-mat-2
1 : Lambda47105Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47106Var : BV:32
18 : Lambda47107Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda47108Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda47139Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47140Var : BV:32
18 : Lambda47141Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda47142Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 143 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 144; 147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 148; 92276355 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 92276356; 92276359 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 92276360; 359662975 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 359662976; 359662979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 359662980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 144 { 0x90 +1.1716e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 92276356 { 0x5800684 +1.19884e140 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 359662976 { 0x15700580 +1.87516784e171 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 144 { 0x90 +1.1716e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 147 { 0x93 +1.1752e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 92276356 { 0x5800684 +1.19884e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 92276359 { 0x5800687 +1.19919e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 359662976 { 0x15700580 +1.87516784e171 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 359662979 { 0x15700583 +1.87516820e171 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda47122Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47123Var : BV:32
18 : Lambda47124Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda47125Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1363963655
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), not(bvuge(0, input.spec-%var-m-1.L3%7%bbentry)))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : not(10) : BOOL
12 : andnot1(7, 11) : BOOL
13 : or(4, 12) : BOOL
</MSG>
<MSG>4:04 : foo.A1.B5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:04 : foo.A1.B5: Finished executing CG's add edge function...</MSG>
<MSG>4:04 : foo.A1.B5: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B5: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%21%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Failed correlation of src pathset L3%7%bbentry=>L3%21%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%21%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141015 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140457 : input.dst.llvm-%n : BV:32                 : 268435456
141016 : bvult(141015, 140457) : BOOL              : true
141322 : not(141016) : BOOL                        : false
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 268435456
140696 : bvuge(140694, 140695) : BOOL              : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
188426 : bvuge(140290, 140710) : BOOL              : true
188430 : not(188426) : BOOL                        : false
188463 : andnot1(140696, 188430) : BOOL            : false
188467 : or(141322, 188463) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1725 669e521c36862d492d803924ef6d
=input.spec-%var-mat-2
1 : Lambda47105Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47106Var : BV:32
18 : Lambda47107Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda47108Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda47139Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47140Var : BV:32
18 : Lambda47141Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda47142Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 143 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 144; 147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 148; 92276355 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 92276356; 92276359 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 92276360; 359662975 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 359662976; 359662979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 359662980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 144 { 0x90 +1.1716e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 92276356 { 0x5800684 +1.19884e140 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 359662976 { 0x15700580 +1.87516784e171 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 144 { 0x90 +1.1716e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 147 { 0x93 +1.1752e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 92276356 { 0x5800684 +1.19884e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 92276359 { 0x5800687 +1.19919e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 359662976 { 0x15700580 +1.87516784e171 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 359662979 { 0x15700583 +1.87516820e171 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda47122Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47123Var : BV:32
18 : Lambda47124Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda47125Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1363963655
=counter_example_end


</MSG>
<MSG>4:04 : Discovered that the correlation was useless for the product-TFG foo.A1.B5 (d:1, s:0, sp: 5)...</MSG>
<MSG>4:04 : Chose (for CE propagation) product-TFG foo.A1.B2 (d:1, s:0, sp: 5) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:04 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B2...</MSG>
<MSG>4:04 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B2...</MSG>
<MSG>4:04 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:04 : foo.A1.B2: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:04 : foo.A1.B2: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141015 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140457 : input.dst.llvm-%n : BV:32                 : 17317889
141016 : bvult(141015, 140457) : BOOL              : true
141322 : not(141016) : BOOL                        : false
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 17317889
140696 : bvuge(140694, 140695) : BOOL              : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 16875521
188426 : bvuge(140290, 140710) : BOOL              : false
188474 : andnot1(140696, 188426) : BOOL            : false
188476 : or(141322, 188474) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1434 d06e7b72faa648e64f5ff987f70fffc
=input.spec-%var-mat-2
1 : Lambda43183Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43184Var : BV:32
18 : Lambda43185Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda43186Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : lambda(58, 266) : FUNCTION[BV:32 -> BV:32]
268 : map(57, 267) : MAP[BV:32 -> BV:32]
269 : lambda(17, 268) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
270 : map(16, 269) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
271 : sym_const(270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-m-2
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda43183Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43184Var : BV:32
18 : Lambda43185Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda43186Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : lambda(58, 266) : FUNCTION[BV:32 -> BV:32]
268 : map(57, 267) : MAP[BV:32 -> BV:32]
269 : lambda(17, 268) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
270 : map(16, 269) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
271 : sym_const(270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 226707968 ] -> 1, [ 226707969; 226707969 ] -> 64, [ 226707970; 226707970 ] -> 8, [ 226707971; 390935556 ] -> 1, [ 390935557; 390935557 ] -> 128, [ 390935558; 1805021711 ] -> 1, [ 1805021712; 1805021715 ] -> 0, [ 1805021716; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 226707967 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 226707968; 226707971 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 226707972; 390935555 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 390935556; 390935559 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 390935560; 1805021711 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 1805021712; 1805021715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1805021716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.dst.llvm-%m
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1452121412 { 0x568d9d44 +1.10636186e46 } : COUNT
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 390935556 { 0x174d3404 +1.60314989e175 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1452121412 { 0x568d9d44 +1.10636186e46 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 390935556 { 0x174d3404 +1.60314989e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 390935559 { 0x174d3407 +1.60315024e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 226707971 { 0xd834a03 +1.2569615e156 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%18%bbentry
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : Lambda43100Var : BV:32
2 : Lambda43101Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : Lambda43102Var : BV:32
2 : Lambda43103Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : ite(6, 3, 211) : BV:32
213 : lambda(1, 2, 212) : FUNCTION[BV:32,BV:32 -> BV:32]
214 : sym_const(213) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : Lambda43104Var : BV:32
2 : Lambda43105Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : ite(6, 3, 211) : BV:32
213 : lambda(1, 2, 212) : FUNCTION[BV:32,BV:32 -> BV:32]
214 : sym_const(213) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : Lambda43106Var : BV:32
2 : Lambda43107Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : Lambda43111Var : BV:32
2 : Lambda43112Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : Lambda43116Var : BV:32
2 : Lambda43117Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda43196Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43197Var : BV:32
18 : Lambda43198Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda43199Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : ite(61, 2, 266) : BV:32
268 : lambda(58, 267) : FUNCTION[BV:32 -> BV:32]
269 : map(57, 268) : MAP[BV:32 -> BV:32]
270 : lambda(17, 269) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
271 : map(16, 270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
272 : sym_const(271) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4047785361
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), bvuge(0, input.spec-%var-m-1.L3%7%bbentry))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : andnot1(7, 10) : BOOL
12 : or(4, 11) : BOOL
</MSG>
<MSG>4:04 : foo.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:04 : foo.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>4:04 : foo.A1.B2: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B2: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Failed correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141015 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140457 : input.dst.llvm-%n : BV:32                 : 17317889
141016 : bvult(141015, 140457) : BOOL              : true
141322 : not(141016) : BOOL                        : false
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 17317889
140696 : bvuge(140694, 140695) : BOOL              : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 16875521
188426 : bvuge(140290, 140710) : BOOL              : false
188474 : andnot1(140696, 188426) : BOOL            : false
188476 : or(141322, 188474) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1434 d06e7b72faa648e64f5ff987f70fffc
=input.spec-%var-mat-2
1 : Lambda43183Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43184Var : BV:32
18 : Lambda43185Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda43186Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : lambda(58, 266) : FUNCTION[BV:32 -> BV:32]
268 : map(57, 267) : MAP[BV:32 -> BV:32]
269 : lambda(17, 268) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
270 : map(16, 269) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
271 : sym_const(270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-m-2
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda43183Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43184Var : BV:32
18 : Lambda43185Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda43186Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : lambda(58, 266) : FUNCTION[BV:32 -> BV:32]
268 : map(57, 267) : MAP[BV:32 -> BV:32]
269 : lambda(17, 268) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
270 : map(16, 269) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
271 : sym_const(270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 226707968 ] -> 1, [ 226707969; 226707969 ] -> 64, [ 226707970; 226707970 ] -> 8, [ 226707971; 390935556 ] -> 1, [ 390935557; 390935557 ] -> 128, [ 390935558; 1805021711 ] -> 1, [ 1805021712; 1805021715 ] -> 0, [ 1805021716; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 226707967 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 226707968; 226707971 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 226707972; 390935555 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 390935556; 390935559 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 390935560; 1805021711 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 1805021712; 1805021715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1805021716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.dst.llvm-%m
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1452121412 { 0x568d9d44 +1.10636186e46 } : COUNT
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 390935556 { 0x174d3404 +1.60314989e175 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1452121412 { 0x568d9d44 +1.10636186e46 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 390935556 { 0x174d3404 +1.60314989e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 390935559 { 0x174d3407 +1.60315024e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 226707971 { 0xd834a03 +1.2569615e156 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%18%bbentry
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : Lambda43100Var : BV:32
2 : Lambda43101Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : Lambda43102Var : BV:32
2 : Lambda43103Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : ite(6, 3, 211) : BV:32
213 : lambda(1, 2, 212) : FUNCTION[BV:32,BV:32 -> BV:32]
214 : sym_const(213) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : Lambda43104Var : BV:32
2 : Lambda43105Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : ite(6, 3, 211) : BV:32
213 : lambda(1, 2, 212) : FUNCTION[BV:32,BV:32 -> BV:32]
214 : sym_const(213) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : Lambda43106Var : BV:32
2 : Lambda43107Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : Lambda43111Var : BV:32
2 : Lambda43112Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : Lambda43116Var : BV:32
2 : Lambda43117Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda43196Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43197Var : BV:32
18 : Lambda43198Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda43199Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : ite(61, 2, 266) : BV:32
268 : lambda(58, 267) : FUNCTION[BV:32 -> BV:32]
269 : map(57, 268) : MAP[BV:32 -> BV:32]
270 : lambda(17, 269) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
271 : map(16, 270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
272 : sym_const(271) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4047785361
=counter_example_end


</MSG>
<MSG>4:04 : Discovered that the correlation was useless for the product-TFG foo.A1.B2 (d:1, s:0, sp: 5)...</MSG>
<MSG>4:04 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:04 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>4:04 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>4:04 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B1: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:04 : foo.A1.B1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:04 : foo.A1.B1: Propagated 5 out of 13 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : foo.A1.B1: Added the 5 propagated CEs at PC L3%7%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:04 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:04 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>4:04 : foo.A1.B1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Added correlation to the product-TFG foo.A1.B1 (d:1, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>4:04 : Chose (after CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%7%bbentry at mu 0 delta {0,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
            L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry, A (line 4 at column 28))
                L3%7%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 13 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
<MSG>4:04 : foo.A1.B1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:04 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:04 : foo.A1.B1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:04 : foo.A1.B1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:04 : foo.A1.B1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:04 : foo.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:04 : foo.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:04 : foo.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 13 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:07 : foo.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht23-prove_trivial13-prove10...</MSG>
<MSG>4:07 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:07 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:07 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:07 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:07 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:08 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:08 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:08 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:08 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:08 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:09 : foo.A1.B1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:09 : foo.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial2-prove10...</MSG>
<MSG>4:12 : foo.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:12 : foo.A1.B1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:12 : foo.A1.B1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:12 : foo.A1.B1 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:12 : foo.A1.B1 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:12 : Chosen product-TFG foo.A1.B1 will be explored later...</MSG>
<MSG>4:12 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:12 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>4:12 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:12 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:12 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht12-prove_trivial10-prove2...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:12 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:12 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:12 : foo.A1.B3 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:12 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:12 : product-TFG foo.A1.B3: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:12 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:12 : Attempting correlation of src pathset L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:12 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:12 : product-TFG foo.A1.B3: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:12 : product-TFG foo.A1.B3 created 1 possibilities in group foo.A1.B3.C...</MSG>
<MSG>4:12 : Chose (for CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:12 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>4:12 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>4:12 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:12 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:12 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>4:12 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:12 : Adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:12 : foo.A1.B3.C1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:12 : foo.A1.B3.C1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:12 : foo.A1.B3.C1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:12 : foo.A1.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:12 : foo.A1.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:12 : foo.A1.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:12 : foo.A1.B3.C1: Propagated 13 out of 16 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>4:12 : foo.A1.B3.C1: Added the 13 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>4:12 : foo.A1.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:12 : foo.A1.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:12 : foo.A1.B3.C1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:12 : foo.A1.B3.C1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:12 : Done adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:12 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:12 : Added correlation to the product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:12 : Chose (after CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 27 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>4:12 : foo.A1.B3.C1: Updating invariants over the newly added edges in edge composition L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:12 : Constructed infer_invariants_dfa with initial worklist L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:12 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:12 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:12 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 13 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:13 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:14 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 8 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 8 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:16 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 13 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:17 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 8 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:17 : foo.A1.B3.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:17 : foo.A1.B3.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:17 : product-TFG foo.A1.B3.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:17 : Considering 2 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:17 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:17 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:17 : Found 2 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:17 : product-TFG foo.A1.B3.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:17 : product-TFG foo.A1.B3.C1 created 2 possibilities in group foo.A1.B3.C1.D...</MSG>
<MSG>4:17 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 23 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:17 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>4:17 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>4:17 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:17 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:17 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:17 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:17 : Adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: marking unstable at L3%10%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141017 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140461 : input.dst.llvm-%m : BV:32                 : 16777216
141019 : bvult(141017, 140461) : BOOL              : true
215696 : not(141019) : BOOL                        : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 16777216
188426 : bvuge(140290, 140710) : BOOL              : false
140345 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 470286340
140797 : bvadd(140345, 140694) : BV:32             : 470286341
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 1142949889
221293 : bvuge(140797, 140695) : BOOL              : false
221302 : andnot2(188426, 221293) : BOOL            : false
221936 : or(215696, 221302) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce5382 73311b5c27bc1c4371c2aa4ca8e18934
=input.spec-%var-mat-2
1 : Lambda70057Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda70058Var : BV:32
18 : Lambda70059Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16777216 { 0x1000000 +1.0e131 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 16777217 { 0x1000001 +1.11e131 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda70060Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
82 : eq(80, 81) : BOOL
83 : 128 { 0x80 -128 } : BV:8
84 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
85 : eq(80, 84) : BOOL
86 : 32 { 0x20 } : BV:8
87 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
88 : eq(80, 87) : BOOL
89 : 16 { 0x10 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : eq(95, 84) : BOOL
98 : eq(95, 87) : BOOL
99 : ite(98, 89, 90) : BV:8
100 : ite(97, 86, 99) : BV:8
101 : ite(96, 83, 100) : BV:8
102 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : eq(103, 87) : BOOL
107 : ite(106, 89, 90) : BV:8
108 : ite(105, 86, 107) : BV:8
109 : ite(104, 83, 108) : BV:8
110 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
111 : bvadd(110, 79) : BV:32
112 : eq(111, 81) : BOOL
113 : eq(111, 84) : BOOL
114 : eq(111, 87) : BOOL
115 : ite(114, 89, 90) : BV:8
116 : ite(113, 86, 115) : BV:8
117 : ite(112, 83, 116) : BV:8
118 : bvconcat(93, 101, 109, 117) : BV:32
119 : bvadd(75, 77, 118) : BV:32
120 : eq(119, 81) : BOOL
121 : eq(119, 84) : BOOL
122 : eq(119, 87) : BOOL
123 : ite(122, 89, 90) : BV:8
124 : ite(121, 86, 123) : BV:8
125 : ite(120, 83, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 77, 118) : BV:32
128 : eq(127, 81) : BOOL
129 : eq(127, 84) : BOOL
130 : eq(127, 87) : BOOL
131 : ite(130, 89, 90) : BV:8
132 : ite(129, 86, 131) : BV:8
133 : ite(128, 83, 132) : BV:8
134 : 1 { 0x1 +1.11e129 } : BV:32
135 : bvadd(134, 77, 118) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 84) : BOOL
138 : eq(135, 87) : BOOL
139 : ite(138, 89, 90) : BV:8
140 : ite(137, 86, 139) : BV:8
141 : ite(136, 83, 140) : BV:8
142 : bvadd(77, 118) : BV:32
143 : eq(142, 81) : BOOL
144 : eq(142, 84) : BOOL
145 : eq(142, 87) : BOOL
146 : ite(145, 89, 90) : BV:8
147 : ite(144, 86, 146) : BV:8
148 : ite(143, 83, 147) : BV:8
149 : bvconcat(125, 133, 141, 148) : BV:32
150 : ite(55, 2, 149) : BV:32
151 : ite(74, 149, 150) : BV:32
152 : ite(55, 2, 151) : BV:32
153 : lambda(52, 152) : FUNCTION[BV:32 -> BV:32]
154 : map(51, 153) : MAP[BV:32 -> BV:32]
155 : lambda(17, 154) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
156 : map(16, 155) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
157 : sym_const(156) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
=input.spec-%var-m-2
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda70083Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda70084Var : BV:32
18 : Lambda70085Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16777216 { 0x1000000 +1.0e131 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 16777217 { 0x1000001 +1.11e131 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda70086Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
63 : eq(61, 62) : BOOL
64 : 128 { 0x80 -128 } : BV:8
65 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
66 : eq(61, 65) : BOOL
67 : 32 { 0x20 } : BV:8
68 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
69 : eq(61, 68) : BOOL
70 : 16 { 0x10 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
76 : bvadd(75, 60) : BV:32
77 : eq(76, 62) : BOOL
78 : eq(76, 65) : BOOL
79 : eq(76, 68) : BOOL
80 : ite(79, 70, 71) : BV:8
81 : ite(78, 67, 80) : BV:8
82 : ite(77, 64, 81) : BV:8
83 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
84 : bvadd(83, 60) : BV:32
85 : eq(84, 62) : BOOL
86 : eq(84, 65) : BOOL
87 : eq(84, 68) : BOOL
88 : ite(87, 70, 71) : BV:8
89 : ite(86, 67, 88) : BV:8
90 : ite(85, 64, 89) : BV:8
91 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
92 : bvadd(91, 60) : BV:32
93 : eq(92, 62) : BOOL
94 : eq(92, 65) : BOOL
95 : eq(92, 68) : BOOL
96 : ite(95, 70, 71) : BV:8
97 : ite(94, 67, 96) : BV:8
98 : ite(93, 64, 97) : BV:8
99 : bvconcat(74, 82, 90, 98) : BV:32
100 : bvadd(56, 58, 99) : BV:32
101 : eq(100, 62) : BOOL
102 : eq(100, 65) : BOOL
103 : eq(100, 68) : BOOL
104 : ite(103, 70, 71) : BV:8
105 : ite(102, 67, 104) : BV:8
106 : ite(101, 64, 105) : BV:8
107 : 2 { 0x2 +1.23e129 } : BV:32
108 : bvadd(107, 58, 99) : BV:32
109 : eq(108, 62) : BOOL
110 : eq(108, 65) : BOOL
111 : eq(108, 68) : BOOL
112 : ite(111, 70, 71) : BV:8
113 : ite(110, 67, 112) : BV:8
114 : ite(109, 64, 113) : BV:8
115 : 1 { 0x1 +1.11e129 } : BV:32
116 : bvadd(115, 58, 99) : BV:32
117 : eq(116, 62) : BOOL
118 : eq(116, 65) : BOOL
119 : eq(116, 68) : BOOL
120 : ite(119, 70, 71) : BV:8
121 : ite(118, 67, 120) : BV:8
122 : ite(117, 64, 121) : BV:8
123 : bvadd(58, 99) : BV:32
124 : eq(123, 62) : BOOL
125 : eq(123, 65) : BOOL
126 : eq(123, 68) : BOOL
127 : ite(126, 70, 71) : BV:8
128 : ite(125, 67, 127) : BV:8
129 : ite(124, 64, 128) : BV:8
130 : bvconcat(106, 114, 122, 129) : BV:32
131 : ite(55, 2, 130) : BV:32
132 : lambda(52, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(51, 132) : MAP[BV:32 -> BV:32]
134 : lambda(17, 133) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
135 : map(16, 134) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
136 : sym_const(135) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3057676448 ] -> 0, [ 3057676449; 3057676449 ] -> 32, [ 3057676450; 3057676450 ] -> 16, [ 3057676451; 3057676451 ] -> 128, [ 3057676452; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 9441667 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 9441668; 9441671 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 9441672; 806359683 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 806359684; 806359687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 806359688; 1346638207 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 1346638208; 1346638211 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1346638212; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
=input.dst.llvm-%m
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 806359684 { 0x30101284 +1.12556505e225 } : BV:32
=input.dst.llvm-%arr
1 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1346638208 { 0x50441180 +1.53178405e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 9441668 { 0x901184 +1.12553453e130 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 470286340 { 0x1c080004 +1.6250047e185 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 806359684 { 0x30101284 +1.12556505e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 806359687 { 0x30101287 +1.12556540e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1346638208 { 0x50441180 +1.53178405e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1346638211 { 0x50441183 +1.53178441e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 9441668 { 0x901184 +1.12553453e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 9441671 { 0x901187 +1.12553489e130 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 470286340 { 0x1c080004 +1.6250047e185 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 1142949888 ] -> true, [ 1142949889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%18%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 1142949888 ] -> true, [ 1142949889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : Lambda69916Var : BV:32
2 : Lambda69917Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 16777216 { 0x1000000 +1.0e131 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 16777217 { 0x1000001 +1.11e131 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
55 : eq(53, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
58 : eq(53, 57) : BOOL
59 : 32 { 0x20 } : BV:8
60 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
61 : eq(53, 60) : BOOL
62 : 16 { 0x10 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : eq(68, 57) : BOOL
71 : eq(68, 60) : BOOL
72 : ite(71, 62, 63) : BV:8
73 : ite(70, 59, 72) : BV:8
74 : ite(69, 56, 73) : BV:8
75 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : eq(76, 60) : BOOL
80 : ite(79, 62, 63) : BV:8
81 : ite(78, 59, 80) : BV:8
82 : ite(77, 56, 81) : BV:8
83 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
84 : bvadd(83, 52) : BV:32
85 : eq(84, 54) : BOOL
86 : eq(84, 57) : BOOL
87 : eq(84, 60) : BOOL
88 : ite(87, 62, 63) : BV:8
89 : ite(86, 59, 88) : BV:8
90 : ite(85, 56, 89) : BV:8
91 : bvconcat(66, 74, 82, 90) : BV:32
92 : bvadd(48, 50, 91) : BV:32
93 : eq(92, 54) : BOOL
94 : eq(92, 57) : BOOL
95 : eq(92, 60) : BOOL
96 : ite(95, 62, 63) : BV:8
97 : ite(94, 59, 96) : BV:8
98 : ite(93, 56, 97) : BV:8
99 : 2 { 0x2 +1.23e129 } : BV:32
100 : bvadd(99, 50, 91) : BV:32
101 : eq(100, 54) : BOOL
102 : eq(100, 57) : BOOL
103 : eq(100, 60) : BOOL
104 : ite(103, 62, 63) : BV:8
105 : ite(102, 59, 104) : BV:8
106 : ite(101, 56, 105) : BV:8
107 : 1 { 0x1 +1.11e129 } : BV:32
108 : bvadd(107, 50, 91) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 57) : BOOL
111 : eq(108, 60) : BOOL
112 : ite(111, 62, 63) : BV:8
113 : ite(110, 59, 112) : BV:8
114 : ite(109, 56, 113) : BV:8
115 : bvadd(50, 91) : BV:32
116 : eq(115, 54) : BOOL
117 : eq(115, 57) : BOOL
118 : eq(115, 60) : BOOL
119 : ite(118, 62, 63) : BV:8
120 : ite(117, 59, 119) : BV:8
121 : ite(116, 56, 120) : BV:8
122 : bvconcat(98, 106, 114, 121) : BV:32
123 : ite(6, 3, 122) : BV:32
124 : ite(47, 122, 123) : BV:32
125 : ite(6, 3, 124) : BV:32
126 : lambda(1, 2, 125) : FUNCTION[BV:32,BV:32 -> BV:32]
127 : sym_const(126) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : Lambda69923Var : BV:32
2 : Lambda69924Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
14 : eq(12, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
17 : eq(12, 16) : BOOL
18 : 32 { 0x20 } : BV:8
19 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
20 : eq(12, 19) : BOOL
21 : 16 { 0x10 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : eq(27, 16) : BOOL
30 : eq(27, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : ite(29, 18, 31) : BV:8
33 : ite(28, 15, 32) : BV:8
34 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : ite(38, 21, 22) : BV:8
40 : ite(37, 18, 39) : BV:8
41 : ite(36, 15, 40) : BV:8
42 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
43 : bvadd(42, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : ite(45, 18, 47) : BV:8
49 : ite(44, 15, 48) : BV:8
50 : bvconcat(25, 33, 41, 49) : BV:32
51 : bvadd(7, 9, 50) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 19) : BOOL
55 : ite(54, 21, 22) : BV:8
56 : ite(53, 18, 55) : BV:8
57 : ite(52, 15, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 9, 50) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : ite(62, 21, 22) : BV:8
64 : ite(61, 18, 63) : BV:8
65 : ite(60, 15, 64) : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : bvadd(66, 9, 50) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 16) : BOOL
70 : eq(67, 19) : BOOL
71 : ite(70, 21, 22) : BV:8
72 : ite(69, 18, 71) : BV:8
73 : ite(68, 15, 72) : BV:8
74 : bvadd(9, 50) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : ite(77, 21, 22) : BV:8
79 : ite(76, 18, 78) : BV:8
80 : ite(75, 15, 79) : BV:8
81 : bvconcat(57, 65, 73, 80) : BV:32
82 : ite(6, 3, 81) : BV:32
83 : lambda(1, 2, 82) : FUNCTION[BV:32,BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : Lambda69925Var : BV:32
2 : Lambda69926Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 16777216 { 0x1000000 +1.0e131 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 16777217 { 0x1000001 +1.11e131 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
55 : eq(53, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
58 : eq(53, 57) : BOOL
59 : 32 { 0x20 } : BV:8
60 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
61 : eq(53, 60) : BOOL
62 : 16 { 0x10 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : eq(68, 57) : BOOL
71 : eq(68, 60) : BOOL
72 : ite(71, 62, 63) : BV:8
73 : ite(70, 59, 72) : BV:8
74 : ite(69, 56, 73) : BV:8
75 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : eq(76, 60) : BOOL
80 : ite(79, 62, 63) : BV:8
81 : ite(78, 59, 80) : BV:8
82 : ite(77, 56, 81) : BV:8
83 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
84 : bvadd(83, 52) : BV:32
85 : eq(84, 54) : BOOL
86 : eq(84, 57) : BOOL
87 : eq(84, 60) : BOOL
88 : ite(87, 62, 63) : BV:8
89 : ite(86, 59, 88) : BV:8
90 : ite(85, 56, 89) : BV:8
91 : bvconcat(66, 74, 82, 90) : BV:32
92 : bvadd(48, 50, 91) : BV:32
93 : eq(92, 54) : BOOL
94 : eq(92, 57) : BOOL
95 : eq(92, 60) : BOOL
96 : ite(95, 62, 63) : BV:8
97 : ite(94, 59, 96) : BV:8
98 : ite(93, 56, 97) : BV:8
99 : 2 { 0x2 +1.23e129 } : BV:32
100 : bvadd(99, 50, 91) : BV:32
101 : eq(100, 54) : BOOL
102 : eq(100, 57) : BOOL
103 : eq(100, 60) : BOOL
104 : ite(103, 62, 63) : BV:8
105 : ite(102, 59, 104) : BV:8
106 : ite(101, 56, 105) : BV:8
107 : 1 { 0x1 +1.11e129 } : BV:32
108 : bvadd(107, 50, 91) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 57) : BOOL
111 : eq(108, 60) : BOOL
112 : ite(111, 62, 63) : BV:8
113 : ite(110, 59, 112) : BV:8
114 : ite(109, 56, 113) : BV:8
115 : bvadd(50, 91) : BV:32
116 : eq(115, 54) : BOOL
117 : eq(115, 57) : BOOL
118 : eq(115, 60) : BOOL
119 : ite(118, 62, 63) : BV:8
120 : ite(117, 59, 119) : BV:8
121 : ite(116, 56, 120) : BV:8
122 : bvconcat(98, 106, 114, 121) : BV:32
123 : ite(6, 3, 122) : BV:32
124 : ite(47, 122, 123) : BV:32
125 : ite(6, 3, 124) : BV:32
126 : ite(6, 3, 125) : BV:32
127 : lambda(1, 2, 126) : FUNCTION[BV:32,BV:32 -> BV:32]
128 : sym_const(127) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : Lambda69927Var : BV:32
2 : Lambda69928Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16777216 { 0x1000000 +1.0e131 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 16777217 { 0x1000001 +1.11e131 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : Lambda69931Var : BV:32
2 : Lambda69932Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16777216 { 0x1000000 +1.0e131 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 16777217 { 0x1000001 +1.11e131 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 1142949888 ] -> true, [ 1142949889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : Lambda69918Var : BV:32
2 : Lambda69919Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16777216 { 0x1000000 +1.0e131 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 16777217 { 0x1000001 +1.11e131 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda70070Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda70071Var : BV:32
18 : Lambda70072Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16777216 { 0x1000000 +1.0e131 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 16777217 { 0x1000001 +1.11e131 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda70073Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
82 : eq(80, 81) : BOOL
83 : 128 { 0x80 -128 } : BV:8
84 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
85 : eq(80, 84) : BOOL
86 : 32 { 0x20 } : BV:8
87 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
88 : eq(80, 87) : BOOL
89 : 16 { 0x10 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : eq(95, 84) : BOOL
98 : eq(95, 87) : BOOL
99 : ite(98, 89, 90) : BV:8
100 : ite(97, 86, 99) : BV:8
101 : ite(96, 83, 100) : BV:8
102 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : eq(103, 87) : BOOL
107 : ite(106, 89, 90) : BV:8
108 : ite(105, 86, 107) : BV:8
109 : ite(104, 83, 108) : BV:8
110 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
111 : bvadd(110, 79) : BV:32
112 : eq(111, 81) : BOOL
113 : eq(111, 84) : BOOL
114 : eq(111, 87) : BOOL
115 : ite(114, 89, 90) : BV:8
116 : ite(113, 86, 115) : BV:8
117 : ite(112, 83, 116) : BV:8
118 : bvconcat(93, 101, 109, 117) : BV:32
119 : bvadd(75, 77, 118) : BV:32
120 : eq(119, 81) : BOOL
121 : eq(119, 84) : BOOL
122 : eq(119, 87) : BOOL
123 : ite(122, 89, 90) : BV:8
124 : ite(121, 86, 123) : BV:8
125 : ite(120, 83, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 77, 118) : BV:32
128 : eq(127, 81) : BOOL
129 : eq(127, 84) : BOOL
130 : eq(127, 87) : BOOL
131 : ite(130, 89, 90) : BV:8
132 : ite(129, 86, 131) : BV:8
133 : ite(128, 83, 132) : BV:8
134 : 1 { 0x1 +1.11e129 } : BV:32
135 : bvadd(134, 77, 118) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 84) : BOOL
138 : eq(135, 87) : BOOL
139 : ite(138, 89, 90) : BV:8
140 : ite(137, 86, 139) : BV:8
141 : ite(136, 83, 140) : BV:8
142 : bvadd(77, 118) : BV:32
143 : eq(142, 81) : BOOL
144 : eq(142, 84) : BOOL
145 : eq(142, 87) : BOOL
146 : ite(145, 89, 90) : BV:8
147 : ite(144, 86, 146) : BV:8
148 : ite(143, 83, 147) : BV:8
149 : bvconcat(125, 133, 141, 148) : BV:32
150 : ite(55, 2, 149) : BV:32
151 : ite(74, 149, 150) : BV:32
152 : ite(55, 2, 151) : BV:32
153 : ite(55, 2, 152) : BV:32
154 : lambda(52, 153) : FUNCTION[BV:32 -> BV:32]
155 : map(51, 154) : MAP[BV:32 -> BV:32]
156 : lambda(17, 155) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
157 : map(16, 156) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
158 : sym_const(157) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2938383866
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)), andnot2(bvuge(0, input.spec-%var-m-1.L3%7%bbentry), bvuge(bvadd(1, input.spec-%var-i-1.L3%7%bbentry), input.spec-%var-n-1.L3%7%bbentry))):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.spec-%var-m-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : input.spec-%var-i-1.L3%7%bbentry : BV:32
10 : bvadd(8, 9) : BV:32
11 : input.spec-%var-n-1.L3%7%bbentry : BV:32
12 : bvuge(10, 11) : BOOL
13 : andnot2(7, 12) : BOOL
14 : or(4, 13) : BOOL
</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D2: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : Done adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:17 : Failed correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141017 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140461 : input.dst.llvm-%m : BV:32                 : 16777216
141019 : bvult(141017, 140461) : BOOL              : true
215696 : not(141019) : BOOL                        : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 16777216
188426 : bvuge(140290, 140710) : BOOL              : false
140345 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 470286340
140797 : bvadd(140345, 140694) : BV:32             : 470286341
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 1142949889
221293 : bvuge(140797, 140695) : BOOL              : false
221302 : andnot2(188426, 221293) : BOOL            : false
221936 : or(215696, 221302) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce5382 73311b5c27bc1c4371c2aa4ca8e18934
=input.spec-%var-mat-2
1 : Lambda70057Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda70058Var : BV:32
18 : Lambda70059Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16777216 { 0x1000000 +1.0e131 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 16777217 { 0x1000001 +1.11e131 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda70060Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
82 : eq(80, 81) : BOOL
83 : 128 { 0x80 -128 } : BV:8
84 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
85 : eq(80, 84) : BOOL
86 : 32 { 0x20 } : BV:8
87 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
88 : eq(80, 87) : BOOL
89 : 16 { 0x10 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : eq(95, 84) : BOOL
98 : eq(95, 87) : BOOL
99 : ite(98, 89, 90) : BV:8
100 : ite(97, 86, 99) : BV:8
101 : ite(96, 83, 100) : BV:8
102 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : eq(103, 87) : BOOL
107 : ite(106, 89, 90) : BV:8
108 : ite(105, 86, 107) : BV:8
109 : ite(104, 83, 108) : BV:8
110 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
111 : bvadd(110, 79) : BV:32
112 : eq(111, 81) : BOOL
113 : eq(111, 84) : BOOL
114 : eq(111, 87) : BOOL
115 : ite(114, 89, 90) : BV:8
116 : ite(113, 86, 115) : BV:8
117 : ite(112, 83, 116) : BV:8
118 : bvconcat(93, 101, 109, 117) : BV:32
119 : bvadd(75, 77, 118) : BV:32
120 : eq(119, 81) : BOOL
121 : eq(119, 84) : BOOL
122 : eq(119, 87) : BOOL
123 : ite(122, 89, 90) : BV:8
124 : ite(121, 86, 123) : BV:8
125 : ite(120, 83, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 77, 118) : BV:32
128 : eq(127, 81) : BOOL
129 : eq(127, 84) : BOOL
130 : eq(127, 87) : BOOL
131 : ite(130, 89, 90) : BV:8
132 : ite(129, 86, 131) : BV:8
133 : ite(128, 83, 132) : BV:8
134 : 1 { 0x1 +1.11e129 } : BV:32
135 : bvadd(134, 77, 118) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 84) : BOOL
138 : eq(135, 87) : BOOL
139 : ite(138, 89, 90) : BV:8
140 : ite(137, 86, 139) : BV:8
141 : ite(136, 83, 140) : BV:8
142 : bvadd(77, 118) : BV:32
143 : eq(142, 81) : BOOL
144 : eq(142, 84) : BOOL
145 : eq(142, 87) : BOOL
146 : ite(145, 89, 90) : BV:8
147 : ite(144, 86, 146) : BV:8
148 : ite(143, 83, 147) : BV:8
149 : bvconcat(125, 133, 141, 148) : BV:32
150 : ite(55, 2, 149) : BV:32
151 : ite(74, 149, 150) : BV:32
152 : ite(55, 2, 151) : BV:32
153 : lambda(52, 152) : FUNCTION[BV:32 -> BV:32]
154 : map(51, 153) : MAP[BV:32 -> BV:32]
155 : lambda(17, 154) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
156 : map(16, 155) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
157 : sym_const(156) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
=input.spec-%var-m-2
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda70083Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda70084Var : BV:32
18 : Lambda70085Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16777216 { 0x1000000 +1.0e131 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 16777217 { 0x1000001 +1.11e131 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda70086Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
63 : eq(61, 62) : BOOL
64 : 128 { 0x80 -128 } : BV:8
65 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
66 : eq(61, 65) : BOOL
67 : 32 { 0x20 } : BV:8
68 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
69 : eq(61, 68) : BOOL
70 : 16 { 0x10 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
76 : bvadd(75, 60) : BV:32
77 : eq(76, 62) : BOOL
78 : eq(76, 65) : BOOL
79 : eq(76, 68) : BOOL
80 : ite(79, 70, 71) : BV:8
81 : ite(78, 67, 80) : BV:8
82 : ite(77, 64, 81) : BV:8
83 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
84 : bvadd(83, 60) : BV:32
85 : eq(84, 62) : BOOL
86 : eq(84, 65) : BOOL
87 : eq(84, 68) : BOOL
88 : ite(87, 70, 71) : BV:8
89 : ite(86, 67, 88) : BV:8
90 : ite(85, 64, 89) : BV:8
91 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
92 : bvadd(91, 60) : BV:32
93 : eq(92, 62) : BOOL
94 : eq(92, 65) : BOOL
95 : eq(92, 68) : BOOL
96 : ite(95, 70, 71) : BV:8
97 : ite(94, 67, 96) : BV:8
98 : ite(93, 64, 97) : BV:8
99 : bvconcat(74, 82, 90, 98) : BV:32
100 : bvadd(56, 58, 99) : BV:32
101 : eq(100, 62) : BOOL
102 : eq(100, 65) : BOOL
103 : eq(100, 68) : BOOL
104 : ite(103, 70, 71) : BV:8
105 : ite(102, 67, 104) : BV:8
106 : ite(101, 64, 105) : BV:8
107 : 2 { 0x2 +1.23e129 } : BV:32
108 : bvadd(107, 58, 99) : BV:32
109 : eq(108, 62) : BOOL
110 : eq(108, 65) : BOOL
111 : eq(108, 68) : BOOL
112 : ite(111, 70, 71) : BV:8
113 : ite(110, 67, 112) : BV:8
114 : ite(109, 64, 113) : BV:8
115 : 1 { 0x1 +1.11e129 } : BV:32
116 : bvadd(115, 58, 99) : BV:32
117 : eq(116, 62) : BOOL
118 : eq(116, 65) : BOOL
119 : eq(116, 68) : BOOL
120 : ite(119, 70, 71) : BV:8
121 : ite(118, 67, 120) : BV:8
122 : ite(117, 64, 121) : BV:8
123 : bvadd(58, 99) : BV:32
124 : eq(123, 62) : BOOL
125 : eq(123, 65) : BOOL
126 : eq(123, 68) : BOOL
127 : ite(126, 70, 71) : BV:8
128 : ite(125, 67, 127) : BV:8
129 : ite(124, 64, 128) : BV:8
130 : bvconcat(106, 114, 122, 129) : BV:32
131 : ite(55, 2, 130) : BV:32
132 : lambda(52, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(51, 132) : MAP[BV:32 -> BV:32]
134 : lambda(17, 133) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
135 : map(16, 134) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
136 : sym_const(135) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3057676448 ] -> 0, [ 3057676449; 3057676449 ] -> 32, [ 3057676450; 3057676450 ] -> 16, [ 3057676451; 3057676451 ] -> 128, [ 3057676452; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 9441667 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 9441668; 9441671 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 9441672; 806359683 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 806359684; 806359687 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 806359688; 1346638207 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 1346638208; 1346638211 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1346638212; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
=input.dst.llvm-%m
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 806359684 { 0x30101284 +1.12556505e225 } : BV:32
=input.dst.llvm-%arr
1 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1346638208 { 0x50441180 +1.53178405e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 9441668 { 0x901184 +1.12553453e130 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 470286340 { 0x1c080004 +1.6250047e185 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 806359684 { 0x30101284 +1.12556505e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 806359687 { 0x30101287 +1.12556540e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1346638208 { 0x50441180 +1.53178405e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1346638211 { 0x50441183 +1.53178441e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 9441668 { 0x901184 +1.12553453e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 9441671 { 0x901187 +1.12553489e130 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 470286340 { 0x1c080004 +1.6250047e185 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 1142949888 ] -> true, [ 1142949889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.L3%18%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 1142949888 ] -> true, [ 1142949889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : Lambda69916Var : BV:32
2 : Lambda69917Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 16777216 { 0x1000000 +1.0e131 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 16777217 { 0x1000001 +1.11e131 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
55 : eq(53, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
58 : eq(53, 57) : BOOL
59 : 32 { 0x20 } : BV:8
60 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
61 : eq(53, 60) : BOOL
62 : 16 { 0x10 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : eq(68, 57) : BOOL
71 : eq(68, 60) : BOOL
72 : ite(71, 62, 63) : BV:8
73 : ite(70, 59, 72) : BV:8
74 : ite(69, 56, 73) : BV:8
75 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : eq(76, 60) : BOOL
80 : ite(79, 62, 63) : BV:8
81 : ite(78, 59, 80) : BV:8
82 : ite(77, 56, 81) : BV:8
83 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
84 : bvadd(83, 52) : BV:32
85 : eq(84, 54) : BOOL
86 : eq(84, 57) : BOOL
87 : eq(84, 60) : BOOL
88 : ite(87, 62, 63) : BV:8
89 : ite(86, 59, 88) : BV:8
90 : ite(85, 56, 89) : BV:8
91 : bvconcat(66, 74, 82, 90) : BV:32
92 : bvadd(48, 50, 91) : BV:32
93 : eq(92, 54) : BOOL
94 : eq(92, 57) : BOOL
95 : eq(92, 60) : BOOL
96 : ite(95, 62, 63) : BV:8
97 : ite(94, 59, 96) : BV:8
98 : ite(93, 56, 97) : BV:8
99 : 2 { 0x2 +1.23e129 } : BV:32
100 : bvadd(99, 50, 91) : BV:32
101 : eq(100, 54) : BOOL
102 : eq(100, 57) : BOOL
103 : eq(100, 60) : BOOL
104 : ite(103, 62, 63) : BV:8
105 : ite(102, 59, 104) : BV:8
106 : ite(101, 56, 105) : BV:8
107 : 1 { 0x1 +1.11e129 } : BV:32
108 : bvadd(107, 50, 91) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 57) : BOOL
111 : eq(108, 60) : BOOL
112 : ite(111, 62, 63) : BV:8
113 : ite(110, 59, 112) : BV:8
114 : ite(109, 56, 113) : BV:8
115 : bvadd(50, 91) : BV:32
116 : eq(115, 54) : BOOL
117 : eq(115, 57) : BOOL
118 : eq(115, 60) : BOOL
119 : ite(118, 62, 63) : BV:8
120 : ite(117, 59, 119) : BV:8
121 : ite(116, 56, 120) : BV:8
122 : bvconcat(98, 106, 114, 121) : BV:32
123 : ite(6, 3, 122) : BV:32
124 : ite(47, 122, 123) : BV:32
125 : ite(6, 3, 124) : BV:32
126 : lambda(1, 2, 125) : FUNCTION[BV:32,BV:32 -> BV:32]
127 : sym_const(126) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : Lambda69923Var : BV:32
2 : Lambda69924Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
14 : eq(12, 13) : BOOL
15 : 128 { 0x80 -128 } : BV:8
16 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
17 : eq(12, 16) : BOOL
18 : 32 { 0x20 } : BV:8
19 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
20 : eq(12, 19) : BOOL
21 : 16 { 0x10 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : eq(27, 16) : BOOL
30 : eq(27, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : ite(29, 18, 31) : BV:8
33 : ite(28, 15, 32) : BV:8
34 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
35 : bvadd(34, 11) : BV:32
36 : eq(35, 13) : BOOL
37 : eq(35, 16) : BOOL
38 : eq(35, 19) : BOOL
39 : ite(38, 21, 22) : BV:8
40 : ite(37, 18, 39) : BV:8
41 : ite(36, 15, 40) : BV:8
42 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
43 : bvadd(42, 11) : BV:32
44 : eq(43, 13) : BOOL
45 : eq(43, 16) : BOOL
46 : eq(43, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : ite(45, 18, 47) : BV:8
49 : ite(44, 15, 48) : BV:8
50 : bvconcat(25, 33, 41, 49) : BV:32
51 : bvadd(7, 9, 50) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 19) : BOOL
55 : ite(54, 21, 22) : BV:8
56 : ite(53, 18, 55) : BV:8
57 : ite(52, 15, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 9, 50) : BV:32
60 : eq(59, 13) : BOOL
61 : eq(59, 16) : BOOL
62 : eq(59, 19) : BOOL
63 : ite(62, 21, 22) : BV:8
64 : ite(61, 18, 63) : BV:8
65 : ite(60, 15, 64) : BV:8
66 : 1 { 0x1 +1.11e129 } : BV:32
67 : bvadd(66, 9, 50) : BV:32
68 : eq(67, 13) : BOOL
69 : eq(67, 16) : BOOL
70 : eq(67, 19) : BOOL
71 : ite(70, 21, 22) : BV:8
72 : ite(69, 18, 71) : BV:8
73 : ite(68, 15, 72) : BV:8
74 : bvadd(9, 50) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 19) : BOOL
78 : ite(77, 21, 22) : BV:8
79 : ite(76, 18, 78) : BV:8
80 : ite(75, 15, 79) : BV:8
81 : bvconcat(57, 65, 73, 80) : BV:32
82 : ite(6, 3, 81) : BV:32
83 : lambda(1, 2, 82) : FUNCTION[BV:32,BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : Lambda69925Var : BV:32
2 : Lambda69926Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 16777216 { 0x1000000 +1.0e131 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 16777217 { 0x1000001 +1.11e131 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
55 : eq(53, 54) : BOOL
56 : 128 { 0x80 -128 } : BV:8
57 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
58 : eq(53, 57) : BOOL
59 : 32 { 0x20 } : BV:8
60 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
61 : eq(53, 60) : BOOL
62 : 16 { 0x10 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
68 : bvadd(67, 52) : BV:32
69 : eq(68, 54) : BOOL
70 : eq(68, 57) : BOOL
71 : eq(68, 60) : BOOL
72 : ite(71, 62, 63) : BV:8
73 : ite(70, 59, 72) : BV:8
74 : ite(69, 56, 73) : BV:8
75 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
76 : bvadd(75, 52) : BV:32
77 : eq(76, 54) : BOOL
78 : eq(76, 57) : BOOL
79 : eq(76, 60) : BOOL
80 : ite(79, 62, 63) : BV:8
81 : ite(78, 59, 80) : BV:8
82 : ite(77, 56, 81) : BV:8
83 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
84 : bvadd(83, 52) : BV:32
85 : eq(84, 54) : BOOL
86 : eq(84, 57) : BOOL
87 : eq(84, 60) : BOOL
88 : ite(87, 62, 63) : BV:8
89 : ite(86, 59, 88) : BV:8
90 : ite(85, 56, 89) : BV:8
91 : bvconcat(66, 74, 82, 90) : BV:32
92 : bvadd(48, 50, 91) : BV:32
93 : eq(92, 54) : BOOL
94 : eq(92, 57) : BOOL
95 : eq(92, 60) : BOOL
96 : ite(95, 62, 63) : BV:8
97 : ite(94, 59, 96) : BV:8
98 : ite(93, 56, 97) : BV:8
99 : 2 { 0x2 +1.23e129 } : BV:32
100 : bvadd(99, 50, 91) : BV:32
101 : eq(100, 54) : BOOL
102 : eq(100, 57) : BOOL
103 : eq(100, 60) : BOOL
104 : ite(103, 62, 63) : BV:8
105 : ite(102, 59, 104) : BV:8
106 : ite(101, 56, 105) : BV:8
107 : 1 { 0x1 +1.11e129 } : BV:32
108 : bvadd(107, 50, 91) : BV:32
109 : eq(108, 54) : BOOL
110 : eq(108, 57) : BOOL
111 : eq(108, 60) : BOOL
112 : ite(111, 62, 63) : BV:8
113 : ite(110, 59, 112) : BV:8
114 : ite(109, 56, 113) : BV:8
115 : bvadd(50, 91) : BV:32
116 : eq(115, 54) : BOOL
117 : eq(115, 57) : BOOL
118 : eq(115, 60) : BOOL
119 : ite(118, 62, 63) : BV:8
120 : ite(117, 59, 119) : BV:8
121 : ite(116, 56, 120) : BV:8
122 : bvconcat(98, 106, 114, 121) : BV:32
123 : ite(6, 3, 122) : BV:32
124 : ite(47, 122, 123) : BV:32
125 : ite(6, 3, 124) : BV:32
126 : ite(6, 3, 125) : BV:32
127 : lambda(1, 2, 126) : FUNCTION[BV:32,BV:32 -> BV:32]
128 : sym_const(127) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : Lambda69927Var : BV:32
2 : Lambda69928Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16777216 { 0x1000000 +1.0e131 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 16777217 { 0x1000001 +1.11e131 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : Lambda69931Var : BV:32
2 : Lambda69932Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16777216 { 0x1000000 +1.0e131 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 16777217 { 0x1000001 +1.11e131 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 1142949888 ] -> true, [ 1142949889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : Lambda69918Var : BV:32
2 : Lambda69919Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16777216 { 0x1000000 +1.0e131 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 16777217 { 0x1000001 +1.11e131 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda70070Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1142949888 { 0x44200800 +1.25024414e9 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1142949889 { 0x44200801 +1.25024425e9 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda70071Var : BV:32
18 : Lambda70072Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1142949890 { 0x44200802 +1.25024437e9 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16777216 { 0x1000000 +1.0e131 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 16777217 { 0x1000001 +1.11e131 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda70073Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1176531091 { 0x46207093 +1.25343549e13 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 3057676451 { 0xb64070a3 -1237290845 -1.50343739e237 } : BV:32
82 : eq(80, 81) : BOOL
83 : 128 { 0x80 -128 } : BV:8
84 : 3057676449 { 0xb64070a1 -1237290847 -1.50343716e237 } : BV:32
85 : eq(80, 84) : BOOL
86 : 32 { 0x20 } : BV:8
87 : 3057676450 { 0xb64070a2 -1237290846 -1.50343728e237 } : BV:32
88 : eq(80, 87) : BOOL
89 : 16 { 0x10 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : 1176531090 { 0x46207092 +1.25343537e13 } : BV:32
95 : bvadd(94, 79) : BV:32
96 : eq(95, 81) : BOOL
97 : eq(95, 84) : BOOL
98 : eq(95, 87) : BOOL
99 : ite(98, 89, 90) : BV:8
100 : ite(97, 86, 99) : BV:8
101 : ite(96, 83, 100) : BV:8
102 : 1176531089 { 0x46207091 +1.25343525e13 } : BV:32
103 : bvadd(102, 79) : BV:32
104 : eq(103, 81) : BOOL
105 : eq(103, 84) : BOOL
106 : eq(103, 87) : BOOL
107 : ite(106, 89, 90) : BV:8
108 : ite(105, 86, 107) : BV:8
109 : ite(104, 83, 108) : BV:8
110 : 1176531088 { 0x46207090 +1.25343513e13 } : BV:32
111 : bvadd(110, 79) : BV:32
112 : eq(111, 81) : BOOL
113 : eq(111, 84) : BOOL
114 : eq(111, 87) : BOOL
115 : ite(114, 89, 90) : BV:8
116 : ite(113, 86, 115) : BV:8
117 : ite(112, 83, 116) : BV:8
118 : bvconcat(93, 101, 109, 117) : BV:32
119 : bvadd(75, 77, 118) : BV:32
120 : eq(119, 81) : BOOL
121 : eq(119, 84) : BOOL
122 : eq(119, 87) : BOOL
123 : ite(122, 89, 90) : BV:8
124 : ite(121, 86, 123) : BV:8
125 : ite(120, 83, 124) : BV:8
126 : 2 { 0x2 +1.23e129 } : BV:32
127 : bvadd(126, 77, 118) : BV:32
128 : eq(127, 81) : BOOL
129 : eq(127, 84) : BOOL
130 : eq(127, 87) : BOOL
131 : ite(130, 89, 90) : BV:8
132 : ite(129, 86, 131) : BV:8
133 : ite(128, 83, 132) : BV:8
134 : 1 { 0x1 +1.11e129 } : BV:32
135 : bvadd(134, 77, 118) : BV:32
136 : eq(135, 81) : BOOL
137 : eq(135, 84) : BOOL
138 : eq(135, 87) : BOOL
139 : ite(138, 89, 90) : BV:8
140 : ite(137, 86, 139) : BV:8
141 : ite(136, 83, 140) : BV:8
142 : bvadd(77, 118) : BV:32
143 : eq(142, 81) : BOOL
144 : eq(142, 84) : BOOL
145 : eq(142, 87) : BOOL
146 : ite(145, 89, 90) : BV:8
147 : ite(144, 86, 146) : BV:8
148 : ite(143, 83, 147) : BV:8
149 : bvconcat(125, 133, 141, 148) : BV:32
150 : ite(55, 2, 149) : BV:32
151 : ite(74, 149, 150) : BV:32
152 : ite(55, 2, 151) : BV:32
153 : ite(55, 2, 152) : BV:32
154 : lambda(52, 153) : FUNCTION[BV:32 -> BV:32]
155 : map(51, 154) : MAP[BV:32 -> BV:32]
156 : lambda(17, 155) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
157 : map(16, 156) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
158 : sym_const(157) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2938383866
=counter_example_end


</MSG>
<MSG>4:17 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14)...</MSG>
<MSG>4:17 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 23 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:17 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>4:17 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>4:17 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:17 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:17 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:17 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:17 : Adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: Propagated 3 out of 23 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: Added the 3 propagated CEs at PC L3%10%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B3.C1.D1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : Done adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:17 : Added correlation to the product-TFG foo.A1.B3.C1.D1 (d:4, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:17 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%18%bbentry[mu 1, delta {1,0}]
<MSG>4:17 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:17 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:17 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 12 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial15-prove2...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:17 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:18 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:18 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:18 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:18 : foo.A1.B4 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:18 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:18 : product-TFG foo.A1.B4: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:18 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:18 : Attempting correlation of src pathset L3%18%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:18 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:18 : product-TFG foo.A1.B4: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:18 : product-TFG foo.A1.B4 created 1 possibilities in group foo.A1.B4.C...</MSG>
<MSG>4:18 : Chose (for CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%18%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:18 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>4:18 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>4:18 : Creating ssa-path for the src-tfg path L3%18%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:18 : Adding a CG edge composition using the src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:18 : Identifying common alloc-deallocs in the src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>4:18 : Identified no common alloc-deallocs in the src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:18 : Adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%18%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Getting alloca-ptrs on edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Found no alloca-ptrs on edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Adding edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:18 : foo.A1.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:18 : foo.A1.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Propagated 13 out of 16 counter-examples across edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>4:18 : foo.A1.B4.C1: Added the 13 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>4:18 : foo.A1.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Computing CG regions after the addition of the edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Done computing CG regions after the addition of the edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:18 : Done adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%18%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:18 : Done adding a CG edge composition using the src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:18 : Added correlation to the product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:18 : Chose (after CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 27 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%18%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>4:18 : foo.A1.B4.C1: Updating invariants over the newly added edges in edge composition L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:18 : Constructed infer_invariants_dfa with initial worklist L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:18 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 13 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht16-prove_trivial13-prove3...</MSG>
<MSG>4:18 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:19 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:19 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 8 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 8 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:21 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 13 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht16-prove_trivial13-prove3...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:22 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 8 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:22 : foo.A1.B4.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:22 : foo.A1.B4.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:23 : product-TFG foo.A1.B4.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:23 : Considering 2 paths to src pc L3%18%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:23 : Attempting correlation of src pathset L3%18%bbentry=>L3%18%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:23 : Attempting correlation of src pathset L3%18%bbentry=>L3%18%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:23 : Found 2 feasible correlations for paths to src pc L3%18%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:23 : product-TFG foo.A1.B4.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:23 : product-TFG foo.A1.B4.C1 created 2 possibilities in group foo.A1.B4.C1.D...</MSG>
<MSG>4:23 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 23 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%18%bbentry=>L3%18%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>4:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>4:23 : Creating ssa-path for the src-tfg path L3%18%bbentry --> L3%18%bbentry ending at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:23 : Adding a CG edge composition using the src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:23 : Identifying common alloc-deallocs in the src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:23 : Identified no common alloc-deallocs in the src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:23 : Adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%18%bbentry_Lfor.cond1%1%bbentry and toPC L3%18%bbentry_Lfor.cond1%1%bbentry, src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:23 : foo.A1.B4.C1.D2: Getting alloca-ptrs on edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:23 : foo.A1.B4.C1.D2: Found no alloca-ptrs on edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:23 : foo.A1.B4.C1.D2: Adding edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:23 : foo.A1.B4.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:23 : foo.A1.B4.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:23 : foo.A1.B4.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:27 : foo.A1.B4.C1.D2: Propagated 2 out of 23 counter-examples across edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Added the 2 propagated CEs at PC L3%18%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Computing CG regions after the addition of the edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Done computing CG regions after the addition of the edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:35 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%18%bbentry_Lfor.cond1%1%bbentry and toPC L3%18%bbentry_Lfor.cond1%1%bbentry, src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:35 : Done adding a CG edge composition using the src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:35 : Added correlation to the product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:35 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 34 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 29 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%18%bbentry=>L3%18%bbentry[mu 1, delta {1,0}]
<MSG>4:35 : foo.A1.B4.C1.D2: Updating invariants over the newly added edges in edge composition L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:35 : Constructed infer_invariants_dfa with initial worklist L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 15 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht15-prove_trivial14-prove10...</MSG>
<MSG>4:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>4:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:38 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:38 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove4...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>4:56 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:56 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:56 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 16 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove9...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:57 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:58 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:58 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:05 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>5:05 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:05 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>5:05 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:05 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:05 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:05 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:05 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 16 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove9...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:06 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 16 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove9...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:07 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 8 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial6-prove2...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 9 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 17 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht13-prove_trivial10-prove3...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 17 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht13-prove_trivial13-prove8...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:12 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 9 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 9 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>5:13 : product-TFG foo.A1.B4.C1.D2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:13 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:13 : Attempting correlation of src pathset L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:13 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:13 : product-TFG foo.A1.B4.C1.D2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:13 : product-TFG foo.A1.B4.C1.D2 created 1 possibilities in group foo.A1.B4.C1.D2.E...</MSG>
<MSG>5:13 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>5:13 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>5:13 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>5:13 : Creating ssa-path for the src-tfg path L3%7%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>5:13 : Adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:13 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>5:13 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:13 : Adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Propagated 11 out of 31 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Added the 11 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:13 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>5:13 : Done adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:13 : Added correlation to the product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>5:13 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 19 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 9 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>5:13 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>5:14 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>5:14 : Checking equivalence proof...</MSG>
<MSG>5:15 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%7%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (11 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1294
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [11]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-x-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%n ; 9-->input.dst.llvm-%m ; 10-->input.dst.llvm-%arr ; 11-->input.dst.llvm-%x.0.Lfor.cond%1%bbentry ; 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4294967295, input.spec-%var-x-1.L3%7%bbentry))  ==  input.dst.llvm-%x.0.Lfor.cond%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      3.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      4.: 0                     ==  bvextract(input.dst.llvm-%arr, 1, 0)
      5.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      6.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce1294      1.:z3v487.ce1351      2.:z3.ce1322      3.:z3.ce1350      4.:z3.ce1406      5.:z3.ce1378      6.:z3v487.ce1434      7.:z3.ce5614      8.:z3.ce7342
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-i-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1294      1.:z3.ce5614      2.:z3v487.ce6161      3.:z3v487.ce6234      4.:z3v487.ce6346      5.:z3.ce6531      6.:z3.ce6419
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1294      1.:z3.ce1462      2.:z3v487.ce1434      3.:z3.ce1490
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1294      1.:z3.ce1350      2.:z3v487.ce1518      3.:z3v487.ce1546
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1294      1.:z3.ce1462      2.:z3v487.ce1434      3.:z3.ce1490
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1294      1.:z3.ce1350      2.:z3v487.ce1518      3.:z3v487.ce1546
    eqclass 7:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1294      1.:z3.ce5614      2.:z3v487.ce6161      3.:z3v487.ce6234      4.:z3v487.ce6346      5.:z3.ce6531      6.:z3.ce6419
    eqclass 8:
    smallest point cover name dst-ineq, type HOUDINI, exprs [24]: 13-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 14-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 15-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 16-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 17-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 18-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 19-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 20-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 21-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 25-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 29-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 33-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1294      1.:z3.ce1462      2.:z3.ce1350      3.:z3v487.ce1434      4.:z3v487.ce1518      5.:z3.ce5614
    eqclass 9:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 37-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141540](input.spec-%var-mat-2, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142716](input.spec-%var-mat-1.L3%7%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142747](input.spec-%var-mat-1.L3%7%bbentry, map[142746](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142753](input.spec-%var-mat-1.L3%7%bbentry, map[142752](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 41-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142758](input.spec-%var-mat-1.L3%7%bbentry, map[142757](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 42-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142769](input.spec-%var-mat-1.L3%7%bbentry, map[142768](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%x.0.Lfor.cond%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    2 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142716](input.spec-%var-mat-1.L3%7%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141540](input.spec-%var-mat-2, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1294
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1294

L3%18%bbentry_Lfor.cond1%1%bbentry: (d:1, s:0, sp: 9)
  Invariant state (15 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1434
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [19]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-x-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%n ; 9-->input.dst.llvm-%m ; 10-->input.dst.llvm-%arr ; 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 43-->input.spec-%tmpvar-14.L3%8%d ; 44-->input.spec-%var-j-0.L3%18%bbentry ; 45-->input.spec-%var-m-0.L3%18%bbentry ; 46-->input.spec-%var-i-0.L3%18%bbentry ; 47-->input.spec-%var-x-0.L3%18%bbentry ; 48-->input.spec-%var-n-0.L3%18%bbentry ; 49-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 50-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 51-->input.dst.llvm-%x.1.Lfor.cond1%1%bbentry ; 
    13 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.spec-%var-i-0.L3%18%bbentry
      2.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-0.L3%18%bbentry
      3.: 0                     ==  bvzero_ext(bool_to_bv(input.spec-%tmpvar-14.L3%8%d), 31)
      4.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      5.: bvneg(bvmul(4294967295, input.spec-%var-j-0.L3%18%bbentry))  ==  input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
      6.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      7.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-0.L3%18%bbentry
      8.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      9.: 0                     ==  bvextract(input.dst.llvm-%arr, 1, 0)
      10.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      11.: bvneg(bvmul(4294967295, input.spec-%var-x-0.L3%18%bbentry))  ==  input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
      12.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
     is_assumed_eqclass : 0
    17 visited ces:
      0.:z3.ce1462      1.:z3v487.ce1434      2.:z3.ce1490      3.:z3.ce5732      4.:z3v487.ce6741      5.:z3.ce6817      6.:z3v487.ce6868      7.:z3.ce7375      8.:z3.ce2864      9.:z3.ce2768      10.:z3.ce2816      11.:z3v487.ce2720      12.:z3v487.ce2817      13.:z3v487.ce2769      14.:z3.ce2912      15.:z3.ce2960      16.:z3v487.ce3008
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-i-1.L3%7%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-1.L3%7%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1434      1.:z3.ce6452      2.:z3.ce5732      3.:z3.ce5775      4.:z3v487.ce6294      5.:z3v487.ce6267
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1.L3%7%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1462      1.:z3v487.ce1434      2.:z3.ce1490      3.:z3v487.ce2769
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 44-->input.spec-%var-j-0.L3%18%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-j-0.L3%18%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-j-0.L3%18%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce1434      1.:z3v487.ce6741      2.:z3v487.ce7036      3.:z3.ce6934
    eqclass 5:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 45-->input.spec-%var-m-0.L3%18%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1462      1.:z3v487.ce1434      2.:z3.ce3056      3.:z3.ce3104
    eqclass 6:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 46-->input.spec-%var-i-0.L3%18%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%18%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1434      1.:z3.ce6452      2.:z3.ce5732      3.:z3.ce5775      4.:z3v487.ce6294      5.:z3v487.ce6267
    eqclass 7:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1462      1.:z3v487.ce1434      2.:z3.ce3056      3.:z3.ce3104
    eqclass 8:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%n ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1462      1.:z3v487.ce1434      2.:z3.ce1490      3.:z3v487.ce2769
    eqclass 9:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1462      1.:z3v487.ce1434      2.:z3.ce3056      3.:z3.ce3104
    eqclass 10:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1434      1.:z3.ce6452      2.:z3.ce5732      3.:z3.ce5775      4.:z3v487.ce6294      5.:z3v487.ce6267
    eqclass 11:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, type BV_CONST_INEQ, exprs [1]: 50-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce1434      1.:z3v487.ce6741      2.:z3v487.ce7036      3.:z3.ce6934
    eqclass 12:
    smallest point cover name dst-ineq, type HOUDINI, exprs [48]: 13-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 14-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 15-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 16-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 17-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 18-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 19-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 20-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 21-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 25-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 29-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 33-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 52-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 53-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 54-->bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 55-->bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 56-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 57-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 58-->bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 59-->bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 60-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 61-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 62-->bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 63-->bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 64-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 65-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 66-->bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 67-->bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 68-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 69-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 70-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 71-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 72-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 73-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 74-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 75-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 
    3 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce1462      1.:z3v487.ce1434      2.:z3.ce6452      3.:z3.ce5732      4.:z3v487.ce6741      5.:z3.ce7138      6.:z3.ce7240      7.:z3.ce3056
    eqclass 13:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 37-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141540](input.spec-%var-mat-2, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142716](input.spec-%var-mat-1.L3%7%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142747](input.spec-%var-mat-1.L3%7%bbentry, map[142746](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142753](input.spec-%var-mat-1.L3%7%bbentry, map[142752](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 76-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[187576](input.spec-%var-mat-0.L3%18%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 77-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[161103](input.spec-%var-mat-2, map[142752](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 78-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[161722](input.spec-%var-mat-2, map[142746](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 79-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[165968](input.spec-%var-mat-1.L3%7%bbentry, map[165967](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 80-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[165973](input.spec-%var-mat-1.L3%7%bbentry, map[165972](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%x.1.Lfor.cond1%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 81-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[165974](input.spec-%var-mat-2, map[165967](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 82-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[165975](input.spec-%var-mat-2, map[165972](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%x.1.Lfor.cond1%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    3 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142716](input.spec-%var-mat-1.L3%7%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141540](input.spec-%var-mat-2, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[187576](input.spec-%var-mat-0.L3%18%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1434
    eqclass 14:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1434

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 19 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 9 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 86.01s, query:smt.: 20.2341s (num_starts 248; 0.0816s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 46.852s (num_starts 888; 0.0528s/start)ftmap_run_pointsto_analysis.: 0.514946s (num_starts 2; 0.2575s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 7e-06s (num_starts 8; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.3e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.: 1.4e-05s (num_starts 2; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.6e-05s (num_starts 7; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 1.7e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 1.7e-05s (num_starts 2; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.4e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.4e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.5e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.6e-05s (num_starts 3; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.4e-05s (num_starts 13; 0.0000s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry.: 3.7e-05s (num_starts 1; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 4e-05s (num_starts 46; 0.0000s/start)
prune_dst_memslots.: 4.6e-05s (num_starts 7; 0.0000s/start)
get_intersected_lr_status.: 4.7e-05s (num_starts 2; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 5.2e-05s (num_starts 86; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 6.5e-05s (num_starts 9; 0.0000s/start)
determinize_value_expr_map.: 8.3e-05s (num_starts 43; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 8.9e-05s (num_starts 10; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 9.8e-05s (num_starts 3; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.000102s (num_starts 111; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.000114s (num_starts 12; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000116s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.000126s (num_starts 12; 0.0000s/start)
remove_complex_bv_exprs.: 0.000128s (num_starts 7; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000134s (num_starts 189; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.00014s (num_starts 7; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000164s (num_starts 13; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000167s (num_starts 72; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000168s (num_starts 57; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000203s (num_starts 10; 0.0000s/start)
compute_sprel_relations.: 0.000222s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000234s (num_starts 2; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000242s (num_starts 3; 0.0001s/start)
populate_locid2expr_map.: 0.000266s (num_starts 2; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000331s (num_starts 32; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.00035s (num_starts 2; 0.0002s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.00037s (num_starts 1; 0.0004s/start)
lr_status_meet.: 0.000377s (num_starts 659; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000387s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000387s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000388s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000389s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000391s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000394s (num_starts 1; 0.0004s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000394s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000409s (num_starts 1; 0.0004s/start)
graph_locs_add_local_vars_for_edge.: 0.000416s (num_starts 32; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000417s (num_starts 7; 0.0001s/start)
graph_locs_add_all_local_vars.: 0.000436s (num_starts 2; 0.0002s/start)
expr_is_hidden_reg.: 0.00047s (num_starts 721; 0.0000s/start)
prove_trivial.: 0.000473s (num_starts 585; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000537s (num_starts 16; 0.0000s/start)
expr_is_callee_save_const.: 0.000609s (num_starts 733; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000679s (num_starts 75; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000691s (num_starts 45; 0.0000s/start)
get_sprel_map_pair.: 0.000751s (num_starts 78; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.00087s (num_starts 2041; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000879s (num_starts 153; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000927s (num_starts 2; 0.0005s/start)
graph_locs_add_all_llvmvars.: 0.000973s (num_starts 2; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001072s (num_starts 1; 0.0011s/start)
populate_simplified_to_state.: 0.001152s (num_starts 3; 0.0004s/start)
graph_ec_apply_trans_funs_helper.1.: 0.00118s (num_starts 9; 0.0001s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.001348s (num_starts 970; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.00137s (num_starts 178; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001394s (num_starts 9; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001431s (num_starts 9; 0.0002s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001476s (num_starts 23; 0.0001s/start)
graph_locs_add_all_specvars.: 0.001524s (num_starts 2; 0.0008s/start)
collect_dst_to_src_submap_preds.: 0.001621s (num_starts 888; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.001627s (num_starts 11; 0.0001s/start)
identify_address_taken_local_variables.: 0.001744s (num_starts 1; 0.0017s/start)
parse_yices_model.: 0.001809s (num_starts 1; 0.0018s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.001905s (num_starts 7; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002057s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002058s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002058s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002062s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.002066s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002073s (num_starts 1; 0.0021s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.002093s (num_starts 397; 0.0000s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.00214s (num_starts 4; 0.0005s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.002193s (num_starts 11; 0.0002s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.002305s (num_starts 385; 0.0000s/start)
pth_collect_preds_using_atom_func.: 0.002392s (num_starts 107; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.0024s (num_starts 1; 0.0024s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002528s (num_starts 2; 0.0013s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002534s (num_starts 1; 0.0025s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002607s (num_starts 1; 0.0026s/start)
tfg::populate_loc_definedness.before_solve.: 0.002638s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.002874s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.00288s (num_starts 2; 0.0014s/start)
collect_assumes_around_edge.: 0.002919s (num_starts 13; 0.0002s/start)
tfg_edge_composition_get_assumes.: 0.002976s (num_starts 107; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.003014s (num_starts 3; 0.0010s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.003096s (num_starts 238; 0.0000s/start)
tfg::populate_loc_definedness.: 0.003155s (num_starts 3; 0.0011s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.003256s (num_starts 147; 0.0000s/start)
graph_visit_exprs.: 0.003312s (num_starts 3; 0.0011s/start)
create_closure_matrix.: 0.003385s (num_starts 268; 0.0000s/start)
populate_simplified_assets.: 0.003389s (num_starts 6; 0.0006s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.003406s (num_starts 231; 0.0000s/start)
expr_represents_llvm_undef.: 0.003413s (num_starts 737; 0.0000s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.003466s (num_starts 385; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.003489s (num_starts 7; 0.0005s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.003498s (num_starts 60; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003501s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-trivial.: 0.003504s (num_starts 2; 0.0018s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.003506s (num_starts 78; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003507s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003532s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003538s (num_starts 1; 0.0035s/start)
compute_bv_bool_eqclass.: 0.003565s (num_starts 7; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003625s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.003626s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.00363s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003689s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003693s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004059s (num_starts 2; 0.0020s/start)
proof_query_is_trivial_helper.: 0.004096s (num_starts 1022; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.004111s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.004123s (num_starts 4; 0.0010s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.004137s (num_starts 60; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.004161s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004177s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.004189s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004216s (num_starts 4; 0.0011s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.004237s (num_starts 7; 0.0006s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.004307s (num_starts 981; 0.0000s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.004349s (num_starts 29; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.004391s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.004404s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.004412s (num_starts 4; 0.0011s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.004417s (num_starts 404; 0.0000s/start)
removeMostPromising.: 0.004543s (num_starts 36; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.004549s (num_starts 153; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.004596s (num_starts 60; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.004637s (num_starts 2; 0.0023s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.004677s (num_starts 7; 0.0007s/start)
graph_visit_exprs_and_keys.: 0.004752s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.004888s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.0049s (num_starts 2; 0.0024s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.004997s (num_starts 128; 0.0000s/start)
graph_identify_back_edges.: 0.005078s (num_starts 43; 0.0001s/start)
find_dominators.: 0.00517s (num_starts 47; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-trivial.: 0.005295s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.005299s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.005431s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.005438s (num_starts 3; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-trivial.: 0.005438s (num_starts 3; 0.0018s/start)
set_result_and_counter_example.: 0.005578s (num_starts 248; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.005579s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.005591s (num_starts 2; 0.0028s/start)
graph_identify_natural_loops.: 0.005668s (num_starts 43; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.005685s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.005696s (num_starts 2; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.005799s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.005807s (num_starts 3; 0.0019s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.00581s (num_starts 2977; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.005936s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.005945s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00613s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006133s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006141s (num_starts 2; 0.0031s/start)
corr_graph_enumerate_correlations.: 0.006146s (num_starts 13; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess.: 0.006146s (num_starts 2; 0.0031s/start)
populate_locs_potentially_modified_on_edge.: 0.006203s (num_starts 3; 0.0021s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.006232s (num_starts 6; 0.0010s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.006372s (num_starts 981; 0.0000s/start)
compute_ssa_vars_renaming_map.: 0.006389s (num_starts 2; 0.0032s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.006602s (num_starts 153; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-trivial.: 0.007345s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.007351s (num_starts 4; 0.0018s/start)
populate_branch_affecting_locs.: 0.007518s (num_starts 3; 0.0025s/start)
tfg_suffixpath_get_expr_helper.: 0.007519s (num_starts 28; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007778s (num_starts 1; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.007784s (num_starts 1; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.008133s (num_starts 2; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008355s (num_starts 1; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.008363s (num_starts 1; 0.0084s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-trivial.: 0.008955s (num_starts 2; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.008969s (num_starts 2; 0.0045s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.009199s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed;-trivial.: 0.009204s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.009207s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.009226s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed.: 0.009243s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.009268s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.009328s (num_starts 4; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.009343s (num_starts 4; 0.0023s/start)
proof_query_is_trivial.: 0.009395s (num_starts 970; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-trivial.: 0.009466s (num_starts 6; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.009472s (num_starts 6; 0.0016s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.009602s (num_starts 3; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.009877s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-trivial.: 0.009892s (num_starts 3; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.009902s (num_starts 3; 0.0033s/start)
aliasing_constraints.convert_to_expr.: 0.010357s (num_starts 385; 0.0000s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.010424s (num_starts 385; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-trivial.: 0.010659s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.010699s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.010724s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed.: 0.010741s (num_starts 6; 0.0018s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.011074s (num_starts 456; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011087s (num_starts 2; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01109s (num_starts 2; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.011095s (num_starts 2; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess.: 0.011108s (num_starts 2; 0.0056s/start)
get_unrolled_loop_paths_from.: 0.011383s (num_starts 7; 0.0016s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.012188s (num_starts 456; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.012201s (num_starts 737; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01235s (num_starts 2; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.012357s (num_starts 2; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.012658s (num_starts 5; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-trivial.: 0.012682s (num_starts 5; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.012719s (num_starts 5; 0.0025s/start)
graph_with_guessing_sync_preds.: 0.012742s (num_starts 888; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.013048s (num_starts 6; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-trivial.: 0.013049s (num_starts 6; 0.0022s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.013331s (num_starts 143; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.013733s (num_starts 2; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.01375s (num_starts 2; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.013761s (num_starts 6; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.01378s (num_starts 6; 0.0023s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.013821s (num_starts 8; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-trivial.: 0.014069s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.014106s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.014139s (num_starts 4; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.014375s (num_starts 3; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.014393s (num_starts 3; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-trivial.: 0.014879s (num_starts 10; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.014892s (num_starts 10; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.014929s (num_starts 10; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed.: 0.01495s (num_starts 10; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015019s (num_starts 3; 0.0050s/start)
populate_transitive_closure.: 0.01514s (num_starts 59; 0.0003s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.015157s (num_starts 1; 0.0152s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.015159s (num_starts 1; 0.0152s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.015164s (num_starts 1; 0.0152s/start)
compute_regions.: 0.015413s (num_starts 43; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015575s (num_starts 1; 0.0156s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015577s (num_starts 1; 0.0156s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01558s (num_starts 1; 0.0156s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.015675s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.015679s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.01578s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.015933s (num_starts 8; 0.0020s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.016324s (num_starts 84; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.016426s (num_starts 1; 0.0164s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.016427s (num_starts 1; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate;-trivial.: 0.016429s (num_starts 1; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.01643s (num_starts 1; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.016441s (num_starts 1; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate.: 0.016444s (num_starts 1; 0.0164s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.01645s (num_starts 1; 0.0164s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.016652s (num_starts 8; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-trivial.: 0.016766s (num_starts 1; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.016767s (num_starts 1; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.017855s (num_starts 3; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.017885s (num_starts 3; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-trivial.: 0.018068s (num_starts 7; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.018097s (num_starts 7; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.018138s (num_starts 7; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01826s (num_starts 3; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018262s (num_starts 3; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.018268s (num_starts 3; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.018276s (num_starts 3; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.018278s (num_starts 3; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.018321s (num_starts 3; 0.0061s/start)
expr_substitute_using_available_exprs_submap.: 0.019211s (num_starts 621; 0.0000s/start)
compute_vars_reaching_definitions.: 0.019224s (num_starts 2; 0.0096s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.019422s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.019439s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.019473s (num_starts 6; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.01953s (num_starts 6; 0.0033s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.019653s (num_starts 265; 0.0001s/start)
generate_aliasing_constraints_from_expr.: 0.019845s (num_starts 2754; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.020411s (num_starts 13; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-trivial.: 0.020451s (num_starts 13; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.02047s (num_starts 13; 0.0016s/start)
construct_linear_combination_exprs.: 0.021039s (num_starts 1146; 0.0000s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.021406s (num_starts 3; 0.0071s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.021809s (num_starts 3; 0.0073s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.021973s (num_starts 8; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.022001s (num_starts 1; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.022003s (num_starts 1; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.022255s (num_starts 1; 0.0223s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.022261s (num_starts 1; 0.0223s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.022706s (num_starts 2; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-trivial.: 0.022714s (num_starts 2; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.022718s (num_starts 2; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.022793s (num_starts 6; 0.0038s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.022837s (num_starts 12; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.022846s (num_starts 6; 0.0038s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.023498s (num_starts 10; 0.0023s/start)
ldr_decomposition.: 0.023956s (num_starts 238; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.023958s (num_starts 4; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.023982s (num_starts 4; 0.0060s/start)
create_sp_version_relations_lattice_at_pc.: 0.02441s (num_starts 268; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.024816s (num_starts 4; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.024922s (num_starts 4; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-trivial.: 0.025035s (num_starts 5; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.025053s (num_starts 5; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.025402s (num_starts 8; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.025456s (num_starts 8; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.025614s (num_starts 10; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.02726s (num_starts 3; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.028202s (num_starts 1; 0.0282s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-trivial.: 0.028757s (num_starts 10; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown.: 0.028851s (num_starts 10; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.029559s (num_starts 2; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.030206s (num_starts 5; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess.: 0.030271s (num_starts 5; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.030533s (num_starts 6; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.030659s (num_starts 6; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.030886s (num_starts 2; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.030892s (num_starts 2; 0.0154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-trivial.: 0.031811s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.031829s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.031877s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-trivial.: 0.031899s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed.: 0.03191s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.031916s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.031965s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned.: 0.031989s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.031996s (num_starts 5; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-trivial.: 0.032001s (num_starts 2; 0.0160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.032005s (num_starts 2; 0.0160s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess.: 0.032064s (num_starts 5; 0.0064s/start)
graph_to_stream.: 0.032172s (num_starts 4; 0.0080s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.032199s (num_starts 1917; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.033383s (num_starts 2; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-trivial.: 0.033388s (num_starts 2; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.033392s (num_starts 2; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond;-trivial.: 0.03345s (num_starts 2; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.033451s (num_starts 2; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.03346s (num_starts 2; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond.: 0.033468s (num_starts 2; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.034145s (num_starts 7; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.034185s (num_starts 7; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned;-trivial.: 0.036456s (num_starts 4; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned.: 0.036495s (num_starts 4; 0.0091s/start)
get_next_potential_correlations.: 0.036525s (num_starts 7; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-trivial.: 0.03654s (num_starts 12; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown.: 0.036669s (num_starts 12; 0.0031s/start)
do_ssa_transformation.: 0.037398s (num_starts 2; 0.0187s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.037839s (num_starts 18; 0.0021s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.039851s (num_starts 2; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.039864s (num_starts 2; 0.0199s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.039882s (num_starts 15; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.040147s (num_starts 3; 0.0134s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.040165s (num_starts 3; 0.0134s/start)
get_sprel_map_pair_at_pc.: 0.041128s (num_starts 385; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.043116s (num_starts 2; 0.0216s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.043127s (num_starts 2; 0.0216s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.044067s (num_starts 231; 0.0002s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.044651s (num_starts 659; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.04492s (num_starts 651; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.045189s (num_starts 1446; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.045339s (num_starts 8; 0.0057s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.045481s (num_starts 659; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.045505s (num_starts 8; 0.0057s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.045757s (num_starts 231; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.045777s (num_starts 5; 0.0092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.045809s (num_starts 5; 0.0092s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.046234s (num_starts 85; 0.0005s/start)
query:convert_from_z3.: 0.046651s (num_starts 823; 0.0001s/start)
pth_collect_simplified_preds_using_atom_func.: 0.048818s (num_starts 1339; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.049315s (num_starts 2; 0.0247s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.049498s (num_starts 5; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.049514s (num_starts 5; 0.0099s/start)
compute_lr_status_for_expr.: 0.051501s (num_starts 815; 0.0001s/start)
gen_pred_from_coeff_row.simplify.: 0.05151s (num_starts 1146; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.052498s (num_starts 231; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-trivial.: 0.052657s (num_starts 10; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.052676s (num_starts 10; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.052767s (num_starts 10; 0.0053s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.052968s (num_starts 16; 0.0033s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.053366s (num_starts 16; 0.0033s/start)
populate_loc_liveness.: 0.053409s (num_starts 3; 0.0178s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.053553s (num_starts 6; 0.0089s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.053664s (num_starts 6; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-trivial.: 0.055616s (num_starts 6; 0.0093s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.056756s (num_starts 231; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.058207s (num_starts 12; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.058355s (num_starts 22; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.058515s (num_starts 12; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.058793s (num_starts 22; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.062889s (num_starts 2; 0.0314s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.063047s (num_starts 30; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.06374s (num_starts 13; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.063776s (num_starts 13; 0.0049s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.063934s (num_starts 10; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.064069s (num_starts 2; 0.0320s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.064082s (num_starts 2; 0.0320s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.064556s (num_starts 72; 0.0009s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.064776s (num_starts 72; 0.0009s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.065023s (num_starts 1; 0.0650s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-trivial.: 0.065102s (num_starts 3; 0.0217s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.065107s (num_starts 3; 0.0217s/start)
compute_expr_eqclasses_at_pc.: 0.066292s (num_starts 7; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed;-trivial.: 0.066935s (num_starts 4; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed.: 0.066972s (num_starts 4; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.06723s (num_starts 3; 0.0224s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-trivial.: 0.067295s (num_starts 4; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.067301s (num_starts 4; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.067319s (num_starts 4; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned.: 0.067329s (num_starts 4; 0.0168s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.067537s (num_starts 10; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.067938s (num_starts 13; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.067965s (num_starts 13; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-trivial.: 0.06836s (num_starts 22; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.068394s (num_starts 22; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-trivial.: 0.06841s (num_starts 10; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-trivial.: 0.068563s (num_starts 4; 0.0171s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.06915s (num_starts 30; 0.0023s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.070059s (num_starts 9; 0.0078s/start)
cg_add_node.: 0.070401s (num_starts 9; 0.0078s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.071934s (num_starts 15; 0.0048s/start)
query:convert_to_z3.: 0.072404s (num_starts 823; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.072668s (num_starts 4; 0.0182s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.072962s (num_starts 63; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.073679s (num_starts 8; 0.0092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.074239s (num_starts 15; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.074324s (num_starts 15; 0.0050s/start)
collect_aliasing_constraints_around_path_helper.: 0.074395s (num_starts 384; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.075554s (num_starts 22; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.075673s (num_starts 22; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075874s (num_starts 1; 0.0759s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.076479s (num_starts 11; 0.0070s/start)
avail_exprs_create_submap.: 0.077123s (num_starts 693; 0.0001s/start)
collect_aliasing_constraints_around_path.: 0.07745s (num_starts 240; 0.0003s/start)
tfg_postprocess_after_pointsto_analysis.: 0.077871s (num_starts 2; 0.0389s/start)
collect_assumes_around_path_helper.: 0.07794s (num_starts 981; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.078091s (num_starts 10; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess.: 0.07821s (num_starts 10; 0.0078s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078589s (num_starts 1; 0.0786s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078625s (num_starts 1; 0.0786s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078629s (num_starts 1; 0.0786s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.078637s (num_starts 1; 0.0786s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078639s (num_starts 1; 0.0786s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.07865s (num_starts 1; 0.0786s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.078654s (num_starts 1; 0.0787s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.079053s (num_starts 4; 0.0198s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.079055s (num_starts 4; 0.0198s/start)
predicate_canonicalized.: 0.079253s (num_starts 1146; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079494s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079504s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.079514s (num_starts 1; 0.0795s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.080656s (num_starts 7; 0.0115s/start)
compute_new_lr_status_on_locs.: 0.080841s (num_starts 231; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.081186s (num_starts 1; 0.0812s/start)
graph_with_paths::collect_assumes_around_path.: 0.08153s (num_starts 981; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.082346s (num_starts 28; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084126s (num_starts 1; 0.0841s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.084138s (num_starts 1; 0.0841s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084246s (num_starts 1; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084279s (num_starts 1; 0.0843s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.084301s (num_starts 1; 0.0843s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.084316s (num_starts 1; 0.0843s/start)
create_new_corr_graph_edge.new_node.: 0.084328s (num_starts 8; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.084491s (num_starts 22; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084533s (num_starts 1; 0.0845s/start)
create_new_corr_graph_edge.: 0.084832s (num_starts 13; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085326s (num_starts 1; 0.0853s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085335s (num_starts 1; 0.0853s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085953s (num_starts 1; 0.0860s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085976s (num_starts 1; 0.0860s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085993s (num_starts 1; 0.0860s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086777s (num_starts 1; 0.0868s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086787s (num_starts 1; 0.0868s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.08697s (num_starts 505; 0.0002s/start)
bv_const_ref_map2expr_map.: 0.087407s (num_starts 1146; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.08852s (num_starts 18; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-trivial.: 0.088603s (num_starts 8; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.088617s (num_starts 8; 0.0111s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.088843s (num_starts 18; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.089341s (num_starts 3; 0.0298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.091572s (num_starts 2; 0.0458s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.094574s (num_starts 4; 0.0236s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.095431s (num_starts 6; 0.0159s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.095437s (num_starts 6; 0.0159s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.096575s (num_starts 26; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098051s (num_starts 1; 0.0981s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.098078s (num_starts 1; 0.0981s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.098371s (num_starts 23; 0.0043s/start)
get_unrolled_paths_from.: 0.099308s (num_starts 40; 0.0025s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.099598s (num_starts 12; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.101173s (num_starts 2; 0.0506s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.101213s (num_starts 2; 0.0506s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.101227s (num_starts 2; 0.0506s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.103575s (num_starts 2; 0.0518s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond.: 0.103583s (num_starts 2; 0.0518s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.104006s (num_starts 1; 0.1040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-trivial.: 0.105368s (num_starts 15; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.105395s (num_starts 15; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-trivial.: 0.1055s (num_starts 26; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown.: 0.105799s (num_starts 26; 0.0041s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.106022s (num_starts 40; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.107244s (num_starts 5; 0.0214s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.112211s (num_starts 1; 0.1122s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.112748s (num_starts 2; 0.0564s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-trivial.: 0.113435s (num_starts 40; 0.0028s/start)
counter_example_satisfies_preds.: 0.114685s (num_starts 2474; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.114913s (num_starts 3; 0.0383s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.116548s (num_starts 14; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.117565s (num_starts 5; 0.0235s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.117613s (num_starts 5; 0.0235s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.121033s (num_starts 19; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-trivial.: 0.12295s (num_starts 10; 0.0123s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.126936s (num_starts 4; 0.0317s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.130153s (num_starts 8; 0.0163s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.130826s (num_starts 12; 0.0109s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13086s (num_starts 1; 0.1309s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.130867s (num_starts 1; 0.1309s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%10%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 0.132125s (num_starts 14; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.137977s (num_starts 3; 0.0460s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.138008s (num_starts 3; 0.0460s/start)
invariant_inference_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.138388s (num_starts 3; 0.0461s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.138762s (num_starts 6; 0.0231s/start)
tfg_relax_pointsto_vals_on_edge.: 0.138829s (num_starts 84; 0.0017s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.141333s (num_starts 231; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.14646s (num_starts 2; 0.0732s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.146466s (num_starts 2; 0.0732s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.147449s (num_starts 2; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.148016s (num_starts 2; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.148033s (num_starts 2; 0.0740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-trivial.: 0.151802s (num_starts 16; 0.0095s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.153021s (num_starts 33; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond.: 0.158059s (num_starts 5; 0.0316s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess.: 0.159385s (num_starts 8; 0.0199s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160255s (num_starts 2; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160299s (num_starts 2; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.160342s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.160372s (num_starts 2; 0.0802s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.16055s (num_starts 9; 0.0178s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.161565s (num_starts 3; 0.0539s/start)
check_wfconds_on_edge.L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.161591s (num_starts 2; 0.0808s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162857s (num_starts 2; 0.0814s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162882s (num_starts 2; 0.0814s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities..: 0.163351s (num_starts 3; 0.0545s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.163366s (num_starts 3; 0.0545s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.164439s (num_starts 4157; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.165046s (num_starts 2; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.165074s (num_starts 2; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-trivial.: 0.166737s (num_starts 50; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned;-trivial.: 0.167046s (num_starts 10; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned.: 0.167152s (num_starts 10; 0.0167s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.167693s (num_starts 385; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.170267s (num_starts 1; 0.1703s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.170271s (num_starts 1; 0.1703s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.170275s (num_starts 1; 0.1703s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.170285s (num_starts 1; 0.1703s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.170289s (num_starts 1; 0.1703s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.170296s (num_starts 1; 0.1703s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.170514s (num_starts 2; 0.0853s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.170777s (num_starts 4; 0.0427s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.170789s (num_starts 4; 0.0427s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.171278s (num_starts 4; 0.0428s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.171396s (num_starts 2; 0.0857s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.174403s (num_starts 2; 0.0872s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.174436s (num_starts 2; 0.0872s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.174455s (num_starts 2; 0.0872s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.17449s (num_starts 2; 0.0872s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned.: 0.1745s (num_starts 2; 0.0872s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.174521s (num_starts 2; 0.0873s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176495s (num_starts 2; 0.0882s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176511s (num_starts 2; 0.0883s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.176533s (num_starts 2; 0.0883s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177111s (num_starts 2; 0.0886s/start)
query:simplify-z3.: 0.177437s (num_starts 1714; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.17902s (num_starts 2; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.179044s (num_starts 2; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.179063s (num_starts 2; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.17908s (num_starts 2; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.179381s (num_starts 2; 0.0897s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.179399s (num_starts 2; 0.0897s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.180305s (num_starts 2; 0.0902s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181465s (num_starts 2; 0.0907s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181523s (num_starts 2; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess;-trivial.: 0.184929s (num_starts 20; 0.0092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.184967s (num_starts 20; 0.0092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.18505s (num_starts 20; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess.: 0.185085s (num_starts 20; 0.0093s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.186728s (num_starts 2; 0.0934s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.186756s (num_starts 2; 0.0934s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.186769s (num_starts 2; 0.0934s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.18705s (num_starts 30; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.189023s (num_starts 2; 0.0945s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.189045s (num_starts 2; 0.0945s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.18906s (num_starts 2; 0.0945s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.189798s (num_starts 2; 0.0949s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.190165s (num_starts 29; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.194402s (num_starts 4; 0.0486s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed.: 0.194431s (num_starts 4; 0.0486s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.19717s (num_starts 27; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202636s (num_starts 1; 0.2026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.20264s (num_starts 1; 0.2026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.202663s (num_starts 1; 0.2027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false.: 0.202667s (num_starts 1; 0.2027s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.204373s (num_starts 2; 0.1022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.204409s (num_starts 5; 0.0409s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-trivial.: 0.204978s (num_starts 14; 0.0146s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.204998s (num_starts 14; 0.0146s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.205112s (num_starts 14; 0.0147s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown.: 0.205141s (num_starts 14; 0.0147s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.205256s (num_starts 10; 0.0205s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210321s (num_starts 2; 0.1052s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210336s (num_starts 2; 0.1052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.211105s (num_starts 4; 0.0528s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned.: 0.211126s (num_starts 4; 0.0528s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.211871s (num_starts 7; 0.0303s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed.: 0.2119s (num_starts 7; 0.0303s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.212839s (num_starts 4; 0.0532s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned.: 0.212854s (num_starts 4; 0.0532s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.213151s (num_starts 1; 0.2132s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.213151s (num_starts 1; 0.2132s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.213153s (num_starts 1; 0.2132s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.213172s (num_starts 1; 0.2132s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.213192s (num_starts 1; 0.2132s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.214929s (num_starts 55; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.216165s (num_starts 2; 0.1081s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.217908s (num_starts 43; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.219484s (num_starts 1; 0.2195s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.219485s (num_starts 1; 0.2195s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.219485s (num_starts 1; 0.2195s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.219509s (num_starts 1; 0.2195s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.219519s (num_starts 385; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.219529s (num_starts 1; 0.2195s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.221761s (num_starts 22; 0.0101s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.224917s (num_starts 3; 0.0750s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.226016s (num_starts 3; 0.0753s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.226574s (num_starts 3; 0.0755s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.226949s (num_starts 17; 0.0133s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.227266s (num_starts 6; 0.0379s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed.: 0.227344s (num_starts 5; 0.0455s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.229303s (num_starts 2781; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned.: 0.229367s (num_starts 12; 0.0191s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.2295s (num_starts 35; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.230329s (num_starts 12; 0.0192s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.230399s (num_starts 26; 0.0089s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.230832s (num_starts 26; 0.0089s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-trivial.: 0.231256s (num_starts 41; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.231325s (num_starts 41; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.231538s (num_starts 41; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear.: 0.231607s (num_starts 41; 0.0056s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.234658s (num_starts 4310; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.234918s (num_starts 4157; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed.: 0.237684s (num_starts 8; 0.0297s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown.: 0.239079s (num_starts 12; 0.0199s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.239219s (num_starts 1; 0.2392s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.239223s (num_starts 1; 0.2392s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.239226s (num_starts 1; 0.2392s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.239243s (num_starts 1; 0.2392s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate.: 0.239247s (num_starts 1; 0.2392s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.239254s (num_starts 1; 0.2393s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24239s (num_starts 1; 0.2424s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.242395s (num_starts 1; 0.2424s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.242398s (num_starts 1; 0.2424s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.242414s (num_starts 1; 0.2424s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate.: 0.242418s (num_starts 1; 0.2424s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.242424s (num_starts 1; 0.2424s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.24751s (num_starts 13; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.247591s (num_starts 13; 0.0190s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.249496s (num_starts 5; 0.0499s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250813s (num_starts 1; 0.2508s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250817s (num_starts 1; 0.2508s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.250843s (num_starts 1; 0.2508s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false.: 0.250846s (num_starts 1; 0.2508s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.252022s (num_starts 147; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.254866s (num_starts 3; 0.0850s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.257397s (num_starts 24; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-trivial.: 0.257578s (num_starts 15; 0.0172s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.257591s (num_starts 24; 0.0107s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.260008s (num_starts 3; 0.0867s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.260874s (num_starts 3; 0.0870s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.262799s (num_starts 12; 0.0219s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.265042s (num_starts 24; 0.0110s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond.: 0.270671s (num_starts 4; 0.0677s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.2707s (num_starts 4; 0.0677s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.271977s (num_starts 1; 0.2720s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.271977s (num_starts 1; 0.2720s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.27198s (num_starts 1; 0.2720s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.271982s (num_starts 1; 0.2720s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.271992s (num_starts 1; 0.2720s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.271995s (num_starts 1; 0.2720s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.271999s (num_starts 1; 0.2720s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.272418s (num_starts 2; 0.1362s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.272715s (num_starts 459; 0.0006s/start)
gen_pred_from_coeff_row.: 0.275456s (num_starts 1146; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.278482s (num_starts 10; 0.0278s/start)
compute_preds_for_bv_points.: 0.279451s (num_starts 89; 0.0031s/start)
ldr_decompose_and_linear_solve.: 0.279646s (num_starts 238; 0.0012s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.27998s (num_starts 116; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.284826s (num_starts 33; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.286569s (num_starts 13; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.287277s (num_starts 1; 0.2873s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.287278s (num_starts 1; 0.2873s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.287294s (num_starts 1; 0.2873s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.287298s (num_starts 1; 0.2873s/start)
bv_linear_solve.: 0.28982s (num_starts 238; 0.0012s/start)
query:bv_solve.: 0.291142s (num_starts 238; 0.0012s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.291742s (num_starts 4157; 0.0001s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.297835s (num_starts 501; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.309512s (num_starts 4; 0.0774s/start)
check_wfconds_on_edge.L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.317763s (num_starts 4; 0.0794s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.318506s (num_starts 4; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.325316s (num_starts 4; 0.0813s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond.: 0.325444s (num_starts 4; 0.0814s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.33638s (num_starts 10578; 0.0000s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.344063s (num_starts 1079; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 0.347503s (num_starts 22; 0.0158s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.347854s (num_starts 17; 0.0205s/start)
bv_solve_returning_intermediate_structures.: 0.348785s (num_starts 238; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-trivial.: 0.349389s (num_starts 35; 0.0100s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.35518s (num_starts 8; 0.0444s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.355474s (num_starts 4; 0.0889s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.358145s (num_starts 4; 0.0895s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.36313s (num_starts 99; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.366814s (num_starts 4; 0.0917s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.367193s (num_starts 6; 0.0612s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.371159s (num_starts 4; 0.0928s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.371195s (num_starts 4; 0.0928s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.371255s (num_starts 4; 0.0928s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned.: 0.371287s (num_starts 4; 0.0928s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.375775s (num_starts 4; 0.0939s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.381817s (num_starts 5; 0.0764s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.381854s (num_starts 5; 0.0764s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.385976s (num_starts 7; 0.0551s/start)
bvsolve_cache_query.miss1.: 0.392241s (num_starts 238; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.394596s (num_starts 1; 0.3946s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.394603s (num_starts 1; 0.3946s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.394607s (num_starts 1; 0.3946s/start)
bvsolve_cache_query.: 0.398815s (num_starts 238; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.40102s (num_starts 32; 0.0125s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.401052s (num_starts 31; 0.0129s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.402559s (num_starts 92; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.402859s (num_starts 1; 0.4029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.402859s (num_starts 1; 0.4029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.404118s (num_starts 7; 0.0577s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed.: 0.404138s (num_starts 7; 0.0577s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.414443s (num_starts 147; 0.0028s/start)
check_wfconds_on_edge.L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.414922s (num_starts 6; 0.0692s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.415952s (num_starts 7; 0.0594s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned.: 0.415986s (num_starts 7; 0.0594s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.418376s (num_starts 11; 0.0380s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.420157s (num_starts 5; 0.0840s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.420233s (num_starts 5; 0.0840s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.420277s (num_starts 5; 0.0841s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.429785s (num_starts 1; 0.4298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.42979s (num_starts 1; 0.4298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.429802s (num_starts 1; 0.4298s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false.: 0.429806s (num_starts 1; 0.4298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.430186s (num_starts 5; 0.0860s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.433112s (num_starts 10; 0.0433s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess.: 0.433155s (num_starts 10; 0.0433s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.433228s (num_starts 10; 0.0433s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.436943s (num_starts 5; 0.0874s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.436986s (num_starts 5; 0.0874s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.445573s (num_starts 34; 0.0131s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.45095s (num_starts 46; 0.0098s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.451821s (num_starts 85; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.458762s (num_starts 5; 0.0918s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.466372s (num_starts 2; 0.2332s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.466387s (num_starts 2; 0.2332s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.466396s (num_starts 2; 0.2332s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.470064s (num_starts 6; 0.0783s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.470083s (num_starts 6; 0.0783s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.470114s (num_starts 6; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.480872s (num_starts 6; 0.0801s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.485989s (num_starts 12; 0.0405s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.49097s (num_starts 6; 0.0818s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.497002s (num_starts 6; 0.0828s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.498743s (num_starts 6; 0.0831s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.503976s (num_starts 13; 0.0388s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.51123s (num_starts 6; 0.0852s/start)
ftmap_run_pointsto_analysis.: 0.514946s (num_starts 2; 0.2575s/start)
tfg_run_pointsto_analysis.: 0.515354s (num_starts 2; 0.2577s/start)
lhs_set_sort.: 0.524257s (num_starts 385; 0.0014s/start)
solve_for_bv_points.: 0.526348s (num_starts 238; 0.0022s/start)
guarded_predicate_set_and.: 0.527174s (num_starts 385; 0.0014s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.533967s (num_starts 82; 0.0065s/start)
tfg_populate_structs_after_ssa_construction.: 0.537074s (num_starts 2; 0.2685s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.539456s (num_starts 1; 0.5395s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.53946s (num_starts 1; 0.5395s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.539479s (num_starts 1; 0.5395s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false.: 0.539483s (num_starts 1; 0.5395s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.542345s (num_starts 6; 0.0904s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.542542s (num_starts 20; 0.0271s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess.: 0.542604s (num_starts 20; 0.0271s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.542841s (num_starts 6; 0.0905s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.550441s (num_starts 6; 0.0917s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.554998s (num_starts 2; 0.2775s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.555005s (num_starts 2; 0.2775s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.555009s (num_starts 2; 0.2775s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.564711s (num_starts 31; 0.0182s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.564973s (num_starts 5; 0.1130s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned.: 0.565s (num_starts 5; 0.1130s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond.: 0.565044s (num_starts 7; 0.0807s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.565049s (num_starts 5; 0.1130s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.57135s (num_starts 994; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-trivial.: 0.572942s (num_starts 82; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.579188s (num_starts 7; 0.0827s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.5798s (num_starts 2; 0.2899s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.581325s (num_starts 59; 0.0099s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.584228s (num_starts 8; 0.0730s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.592891s (num_starts 12; 0.0494s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear.: 0.605051s (num_starts 46; 0.0132s/start)
put_smtlib_string_in_file.: 0.605431s (num_starts 496; 0.0012s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.606849s (num_starts 10; 0.0607s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.612692s (num_starts 2; 0.3063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.612703s (num_starts 2; 0.3064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.61271s (num_starts 2; 0.3064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.617161s (num_starts 6; 0.1029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.61718s (num_starts 6; 0.1029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.61722s (num_starts 6; 0.1029s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.631517s (num_starts 10; 0.0632s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.637628s (num_starts 7; 0.0911s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.651881s (num_starts 3; 0.2173s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.664277s (num_starts 599; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess.: 0.6656s (num_starts 16; 0.0416s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear.: 0.666209s (num_starts 56; 0.0119s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.668412s (num_starts 4; 0.1671s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.698107s (num_starts 59; 0.0118s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.699114s (num_starts 3; 0.2330s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.7032s (num_starts 10; 0.0703s/start)
apply_mask_and_overlay_array_constant.: 0.713745s (num_starts 599; 0.0012s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.714232s (num_starts 238; 0.0030s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.717048s (num_starts 2; 0.3585s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.717114s (num_starts 2; 0.3586s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear.: 0.731657s (num_starts 40; 0.0183s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 0.736535s (num_starts 81; 0.0091s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.742066s (num_starts 2; 0.3710s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.742161s (num_starts 2; 0.3711s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.755779s (num_starts 9; 0.0840s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.760889s (num_starts 5; 0.1522s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.771717s (num_starts 13; 0.0594s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.783343s (num_starts 13; 0.0603s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.795919s (num_starts 29; 0.0274s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.796964s (num_starts 39; 0.0204s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.85377s (num_starts 10; 0.0854s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.855111s (num_starts 2; 0.4276s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.855119s (num_starts 2; 0.4276s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.855126s (num_starts 2; 0.4276s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.860611s (num_starts 5; 0.1721s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed.: 0.860629s (num_starts 5; 0.1721s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.860654s (num_starts 5; 0.1721s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.8777s (num_starts 1; 0.8777s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.877704s (num_starts 1; 0.8777s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.877726s (num_starts 1; 0.8777s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false.: 0.877729s (num_starts 1; 0.8777s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.879285s (num_starts 5; 0.1759s/start)
graph_ec_apply_trans_funs_helper.0.: 0.895122s (num_starts 2264; 0.0004s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.902295s (num_starts 4; 0.2256s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 0.902553s (num_starts 4; 0.2256s/start)
graph_ec_apply_trans_funs_helper.: 0.903464s (num_starts 2273; 0.0004s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.908637s (num_starts 2273; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess.: 0.909785s (num_starts 16; 0.0569s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.91419s (num_starts 2262; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.91912s (num_starts 4; 0.2298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.919129s (num_starts 4; 0.2298s/start)
computeWP_for_pred_across_ec.: 0.921091s (num_starts 2262; 0.0004s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.953049s (num_starts 3019; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.955691s (num_starts 5; 0.1911s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.95576s (num_starts 5; 0.1912s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.955869s (num_starts 5; 0.1912s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.955921s (num_starts 5; 0.1912s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.983589s (num_starts 99; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.998244s (num_starts 8; 0.1248s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 0.998277s (num_starts 8; 0.1248s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.00361s (num_starts 5; 0.2007s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.01089s (num_starts 1356; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.03431s (num_starts 5; 0.2069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.03438s (num_starts 5; 0.2069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.03451s (num_starts 5; 0.2069s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.03456s (num_starts 5; 0.2069s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 1.07593s (num_starts 9; 0.1195s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07927s (num_starts 8; 0.1349s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07937s (num_starts 8; 0.1349s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07943s (num_starts 8; 0.1349s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.0804s (num_starts 12; 0.0900s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 1.087s (num_starts 994; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.0956s (num_starts 60; 0.0183s/start)
edge_composition_apply_trans_funs_on_pred.: 1.09823s (num_starts 888; 0.0012s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.10981s (num_starts 385; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 1.11112s (num_starts 10; 0.1111s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%7%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 1.11184s (num_starts 120; 0.0093s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 1.12425s (num_starts 5; 0.2249s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1285s (num_starts 2; 0.5643s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.12859s (num_starts 2; 0.5643s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 1.14193s (num_starts 6; 0.1903s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 1.14252s (num_starts 10; 0.1143s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.14794s (num_starts 385; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed.: 1.1483s (num_starts 12; 0.0957s/start)
collect_inductive_preds_around_path.: 1.15231s (num_starts 888; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.19243s (num_starts 14; 0.0852s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 1.20682s (num_starts 12; 0.1006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.22414s (num_starts 7; 0.1749s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 1.22766s (num_starts 2; 0.6138s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.29256s (num_starts 9; 0.1436s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.29499s (num_starts 15; 0.0863s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 1.30311s (num_starts 34; 0.0383s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned.: 1.31306s (num_starts 15; 0.0875s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31384s (num_starts 9; 0.1460s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.31465s (num_starts 33; 0.0398s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned.: 1.32312s (num_starts 11; 0.1203s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon).: 1.38873s (num_starts 15; 0.0926s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);-trivial.: 1.38993s (num_starts 230; 0.0060s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.4483s (num_starts 9; 0.1609s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 1.45637s (num_starts 24; 0.0607s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);-trivial.: 1.48945s (num_starts 130; 0.0115s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 1.58997s (num_starts 296; 0.0054s/start)
check_wfconds_on_edge.: 1.59704s (num_starts 28; 0.0570s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 1.60271s (num_starts 42; 0.0382s/start)
check_equivalence_proof.: 1.70447s (num_starts 1; 1.7045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.82688s (num_starts 10; 0.1827s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.82691s (num_starts 10; 0.1827s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.8503s (num_starts 10; 0.1850s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.86799s (num_starts 9; 0.2076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.86803s (num_starts 9; 0.2076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.89504s (num_starts 23; 0.0824s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 1.8951s (num_starts 23; 0.0824s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.91617s (num_starts 13; 0.1474s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 1.93667s (num_starts 31; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear.: 1.93675s (num_starts 31; 0.0625s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 1.9858s (num_starts 2; 0.9929s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.99922s (num_starts 23; 0.0869s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.17732s (num_starts 13; 0.1675s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.2085s (num_starts 15; 0.1472s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 2.28135s (num_starts 30; 0.0760s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 2.28459s (num_starts 53; 0.0431s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.34915s (num_starts 13; 0.1807s/start)
compute_z3_expr.: 2.45295s (num_starts 1071; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.49787s (num_starts 10; 0.2498s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.49793s (num_starts 10; 0.2498s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.49798s (num_starts 10; 0.2498s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 2.51867s (num_starts 23; 0.1095s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear.: 2.51872s (num_starts 23; 0.1095s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 2.51882s (num_starts 23; 0.1095s/start)
invariant_inference_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 2.53896s (num_starts 10; 0.2539s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.63125s (num_starts 8; 0.3289s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.63129s (num_starts 8; 0.3289s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.63131s (num_starts 8; 0.3289s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.6388s (num_starts 12; 0.2199s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown.: 2.63884s (num_starts 12; 0.2199s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.64831s (num_starts 16; 0.1655s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.752s (num_starts 9; 0.3058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.75206s (num_starts 9; 0.3058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.75209s (num_starts 9; 0.3058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.75575s (num_starts 11; 0.2505s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown.: 2.75579s (num_starts 11; 0.2505s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.75587s (num_starts 11; 0.2505s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.77815s (num_starts 7; 0.3969s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.77826s (num_starts 7; 0.3969s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 2.80404s (num_starts 98; 0.0286s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.85498s (num_starts 18; 0.1586s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.85961s (num_starts 7; 0.4085s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 2.85985s (num_starts 7; 0.4085s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.89542s (num_starts 21; 0.1379s/start)
dst_edge_composition_proves_false.: 2.92033s (num_starts 7; 0.4172s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.96338s (num_starts 9; 0.3293s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 2.96629s (num_starts 106; 0.0280s/start)
get_next_dst_edge_composition_to_correlate.: 2.97291s (num_starts 8; 0.3716s/start)
check_preds_on_edge_compositions.: 3.01765s (num_starts 33; 0.0914s/start)
decide_hoare_triple.: 3.03543s (num_starts 10; 0.3035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess.: 3.11574s (num_starts 25; 0.1246s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.14967s (num_starts 15; 0.2100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.15003s (num_starts 15; 0.2100s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.22804s (num_starts 15; 0.2152s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.32701s (num_starts 17; 0.1957s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 3.38077s (num_starts 27; 0.1252s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry).: 3.39563s (num_starts 253; 0.0134s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 3.44726s (num_starts 58; 0.0594s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 3.49878s (num_starts 32; 0.1093s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned.: 3.58535s (num_starts 32; 0.1120s/start)
parse_z3_model.: 3.68163s (num_starts 153; 0.0241s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 3.72019s (num_starts 45; 0.0827s/start)
read_counter_examples_from_channel.: 3.72134s (num_starts 77; 0.0483s/start)
decide_hoare_triple_helper;-trivial.: 4.34442s (num_starts 653; 0.0067s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.72092s (num_starts 24; 0.1967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.72151s (num_starts 24; 0.1967s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.89817s (num_starts 30; 0.1633s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry).: 5.13006s (num_starts 65; 0.0789s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 5.17335s (num_starts 70; 0.0739s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 5.42173s (num_starts 83; 0.0653s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.443s (num_starts 38; 0.1432s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.68124s (num_starts 30; 0.1894s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 6.18254s (num_starts 119; 0.0520s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear.: 6.25622s (num_starts 112; 0.0559s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 6.27995s (num_starts 10; 0.6280s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.47291s (num_starts 23; 0.2814s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 6.6308s (num_starts 10; 0.6631s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 7.00878s (num_starts 105; 0.0668s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.43529s (num_starts 38; 0.1957s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.49359s (num_starts 31; 0.2417s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry).: 7.55898s (num_starts 61; 0.1239s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 8.01923s (num_starts 97; 0.0827s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.13802s (num_starts 50; 0.1628s/start)
ce_reconcile_sorts.: 8.35907s (num_starts 154; 0.0543s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry).: 8.50672s (num_starts 149; 0.0571s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 8.91638s (num_starts 12; 0.7430s/start)
check_node_stability_after_CE_addition.: 9.73463s (num_starts 311; 0.0313s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.7276s (num_starts 54; 0.2172s/start)
propagate_nodece_across_edge.: 12.5532s (num_starts 97; 0.1294s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 12.5754s (num_starts 51; 0.2466s/start)
corr_graph::add_edge().: 12.8603s (num_starts 13; 0.9893s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 12.9485s (num_starts 13; 0.9960s/start)
corr_graph_add_correlation.: 12.9488s (num_starts 13; 0.9961s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 12.9495s (num_starts 13; 0.9961s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry).: 13.2248s (num_starts 184; 0.0719s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 13.245s (num_starts 76; 0.1743s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 13.5146s (num_starts 255; 0.0530s/start)
src_tfg_counter_example_translate_on_edge_composition.: 13.5164s (num_starts 312; 0.0433s/start)
decide_hoare_triple_helper;per-query-type;linear.: 14.8423s (num_starts 372; 0.0399s/start)
invariant_inference_xfer.dst-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 15.1305s (num_starts 12; 1.2609s/start)
counter_example_translate_on_edge_composition_helper.: 17.1936s (num_starts 2412; 0.0071s/start)
query:smt.: 20.2341s (num_starts 248; 0.0816s/start)
counter_example_falsifies_preds.: 21.0245s (num_starts 482; 0.0436s/start)
counter_example_evaluate_preds.: 21.1333s (num_starts 2956; 0.0071s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%18%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 22.7355s (num_starts 25; 0.9094s/start)
spawn_smt_query.: 23.9584s (num_starts 248; 0.0966s/start)
add_fresh_counterexample_at_pc_and_propagate.: 24.1676s (num_starts 189; 0.1279s/start)
decide_hoare_triple_with_alias_cons.ce.: 24.1718s (num_starts 779; 0.0310s/start)
solver_provable.: 35.9594s (num_starts 385; 0.0934s/start)
solver_satisfiable-cache-miss.: 36.0076s (num_starts 248; 0.1452s/start)
solver_satisfiable.: 36.0114s (num_starts 386; 0.0933s/start)
expr_is_provable.: 36.354s (num_starts 385; 0.0944s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 36.362s (num_starts 385; 0.0944s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 36.3813s (num_starts 385; 0.0945s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 36.3994s (num_starts 385; 0.0945s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 36.9865s (num_starts 385; 0.0961s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 37.0802s (num_starts 385; 0.0963s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 37.0861s (num_starts 385; 0.0963s/start)
is_expr_equal_using_lhs_set_and_precond.: 42.0445s (num_starts 385; 0.1092s/start)
prove.: 42.05s (num_starts 385; 0.1092s/start)
prove_spawn_and_join_helper.: 42.0524s (num_starts 385; 0.1092s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 42.4705s (num_starts 235; 0.1807s/start)
prove_spawn_and_join.: 44.087s (num_starts 385; 0.1145s/start)
prove_wrapper.proof_query_not_trivial.: 44.1587s (num_starts 385; 0.1147s/start)
prove_wrapper.: 44.2749s (num_starts 970; 0.0456s/start)
decide_hoare_triple_check_ub.: 45.443s (num_starts 888; 0.0512s/start)
decide_hoare_triple_helper.: 46.852s (num_starts 888; 0.0528s/start)
update_invariant_state_for_edges.: 66.9s (num_starts 11; 6.0818s/start)
cg_check_new_cg_ec.: 66.9001s (num_starts 11; 6.0818s/start)
correl_entry_apply.: 66.9011s (num_starts 11; 6.0819s/start)
expandProductCFG.: 69.9124s (num_starts 12; 5.8260s/start)
decide_hoare_triple_with_alias_cons.: 71.0311s (num_starts 888; 0.0800s/start)
bestFirstSearch.: 82.9515s (num_starts 1; 82.9515s/start)
Time taken for equivalence check.: 84.671s (num_starts 1; 84.6710s/start)

counters:
# of Paths Prunned through CE propagation.: 4
# of assume sat failures for undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry.: 5
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 4
# of paths enumerated.: 41
# of paths expanded.: 11
# of queries to linear solver.: 238
# of smt-solver-queries.: 248
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 4
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 4
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 5
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 4
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 2
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 4
removed-siblings.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 12
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 10
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 14
smallest_point_cover_xfer.dst-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 15
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 44
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 15
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 14
smallest_point_cover_xfer.expr-group-bvs.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 53
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 33
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 45
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 12
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 37
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 28
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 6
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 27
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 27
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 38
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 29
smt-queries-cache-hits.: 138
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 153
total-correlation-possibilities.: 17
total-correlation-possibilities-mod-lsprels.: 17
total-correlations-explored.: 12

flags:
dst-aloc.: 0
dst-edges.: 11
dst-nodes.: 10
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%18%bbentry_Lfor.cond1%1%bbentry.: 21
final-CG-counterexamples-generated-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 18
final-CG-counterexamples-total-at-L3%18%bbentry_Lfor.cond1%1%bbentry.: 41
final-CG-counterexamples-total-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 37
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 4
final-CG-num-invariants.: 40
final-CG-super-edges.: 0
src-edges.: 21
src-nodes.: 18
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 60.34
final-CG-time-to-total-time-ratio.: 0.73
query-time-to-total-time-ratio.: 0.24

Context stats:
exprs: count: 260958
sorts: count: 176
num_proof_queries: 550
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	66894
	        hit ratio:	0.99124
m_simplify_solver:
	----------- total:	4546
	        hit ratio:	0.804004
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	60
	        hit ratio:	0.333333
m_z3_solver_substitution:
	----------- total:	891
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	891
	        hit ratio:	0
m_expr_size:
	----------- total:	16868
	        hit ratio:	0.937574
m_contains_only_constants_or_sp_versions:
	----------- total:	24
	        hit ratio:	0.791667
m_expr_evaluates_to_constant_visitor:
	----------- total:	198059
	        hit ratio:	0.479312

z3_solver expr_query_cache entry size: 248
	----------- total:	552
	             hits:	138
	        hit ratio:	0.25
histogram (time taken by solver in ms):
[ 36.5290,  48.1192) (avg.  44.6004)     : 49
[ 48.1192,  63.3869) (avg.  52.6717)     : 91
[ 63.3869,  83.4989) (avg.  73.2146)     : 32
[ 83.4989, 109.9922) (avg.  97.7037)     : 43
[109.9922, 144.8915) (avg. 124.0117)     : 14
[144.8915, 190.8640) (avg. 168.6839)     : 7
[190.8640, 251.4230) (avg. 219.8668)     : 6
[251.4230, 331.1967) (avg. 301.5610)     : 2
[331.1967, 436.2817) (avg. 409.8110)     : 2
[436.2817, 574.7090) (avg. 524.1535)     : 2
histogram (number of quantifiers in query)
[ 0,  5) (avg.  0)                       : 1
[ 5,  9) (avg.  0)                       : 0
[ 9, 13) (avg.  0)                       : 0
[13, 17) (avg.  0)                       : 0
[17, 21) (avg. 18)                       : 31
[21, 25) (avg. 24)                       : 110
[25, 29) (avg. 26)                       : 16
[29, 33) (avg. 31)                       : 90
[33, 37) (avg.  0)                       : 0
[37, 41) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[103, 160) (avg. 103)                    : 1
[160, 216) (avg.   0)                    : 0
[216, 272) (avg.   0)                    : 0
[272, 329) (avg.   0)                    : 0
[329, 385) (avg. 357)                    : 56
[385, 441) (avg. 418)                    : 88
[441, 498) (avg. 476)                    : 12
[498, 554) (avg. 523)                    : 10
[554, 610) (avg. 582)                    : 20
[610, 666) (avg. 630)                    : 61
Top 10 highest time taking queries:
1. [0.574s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-1-free_var_idx.44.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
2. [0.475s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.5
3. [0.427s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.1
4. [0.393s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.9
5. [0.330s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%18%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%18%b.0
6. [0.274s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.11.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.3
7. [0.246s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.2
8. [0.224s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%10%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%10%b.0
9. [0.216s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.lb-signed.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.7
10. [0.214s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.0

<MSG>5:16 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 259 time spent: 0:0:0 [0.004663s total; 0.000018 per start]
tfg_computeWP: num_starts 8422 time spent: 0:0:0 [0.870826s total; 0.000103 per start]
tfg_get_simplified_to_state_for_edge: num_starts 18306 time spent: 0:0:0 [0.032667s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 11549 time spent: 0:0:0 [0.020081s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 9000 time spent: 0:0:0 [0.014080s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 332 time spent: 0:0:25 [25.018390s total; 0.075357 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 36 time spent: 0:0:13 [13.200753s total; 0.366688 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 2359 time spent: 0:0:14 [14.177012s total; 0.006010 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 745 time spent: 0:0:21 [21.285081s total; 0.028571 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 2146 time spent: 0:0:8 [8.803852s total; 0.004102 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 10065 time spent: 0:0:35 [35.171118s total; 0.003494 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 2151 time spent: 0:0:0 [0.110835s total; 0.000052 per start]
tfg_graph_get_vars_written_on_edge: num_starts 2146 time spent: 0:0:0 [0.048225s total; 0.000022 per start]
cg_with_rank_add_CE_at_pc: num_starts 470 time spent: 0:0:12 [12.461894s total; 0.026515 per start]
graph_with_ce_add_CE_at_pc: num_starts 215 time spent: 0:0:0 [0.009673s total; 0.000045 per start]
graph_with_guessing_add_CE_at_pc: num_starts 470 time spent: 0:0:12 [12.451681s total; 0.026493 per start]
point_set_add_point_using_CE: num_starts 3234 time spent: 0:0:1 [1.058791s total; 0.000327 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 3234 time spent: 0:0:1 [1.065337s total; 0.000329 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 391 time spent: 0:0:2 [2.700667s total; 0.006907 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 391 time spent: 0:0:1 [1.623610s total; 0.004152 per start]
expr_label_memlabels_using_memlabel_map: num_starts 68122 time spent: 0:0:1 [1.989132s total; 0.000029 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 14878 time spent: 0:0:0 [0.567134s total; 0.000038 per start]
expr_simplify_solver: num_starts 10533 time spent: 0:0:0 [0.910971s total; 0.000086 per start]
expr_simplify_syntactic: num_starts 11525 time spent: 0:0:1 [1.902492s total; 0.000165 per start]
expr_simplify_select_on_store: num_starts 653 time spent: 0:0:1 [1.560546s total; 0.002390 per start]
expr_simplify_using_lhs_set_helper: num_starts 2253 time spent: 0:0:3 [3.044134s total; 0.001351 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 20533 time spent: 0:0:3 [3.023247s total; 0.000147 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 14741 time spent: 0:0:0 [0.045790s total; 0.000003 per start]
expr_simplify_eq: num_starts 1165 time spent: 0:0:0 [0.010260s total; 0.000009 per start]
expr_simplify_or: num_starts 85 time spent: 0:0:0 [0.000098s total; 0.000001 per start]
expr_simplify_and: num_starts 1264 time spent: 0:0:0 [0.010566s total; 0.000008 per start]
expr_simplify_andnot1: num_starts 175 time spent: 0:0:0 [0.002018s total; 0.000012 per start]
expr_simplify_andnot2: num_starts 12 time spent: 0:0:0 [0.000475s total; 0.000040 per start]
expr_simplify_not: num_starts 194 time spent: 0:0:0 [0.000525s total; 0.000003 per start]
expr_simplify_implies: num_starts 131 time spent: 0:0:0 [0.001167s total; 0.000009 per start]
expr_simplify_ite: num_starts 14 time spent: 0:0:0 [0.001084s total; 0.000077 per start]
canonicalize_expr_tree: num_starts 2125 time spent: 0:0:0 [0.207518s total; 0.000098 per start]
expr_simplify_memalloc_using_memlabel: num_starts 62 time spent: 0:0:0 [0.000159s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 661 time spent: 0:0:1 [1.521158s total; 0.002301 per start]
get_arithmetic_addsub_atoms: num_starts 19362 time spent: 0:0:0 [0.012236s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 2156 time spent: 0:0:0 [0.020969s total; 0.000010 per start]
expr_is_consts_struct_constant: num_starts 6743 time spent: 0:0:0 [0.003618s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 82999 time spent: 0:0:2 [2.238917s total; 0.000027 per start]
expr_do_simplify_helper_cache: num_starts 82999 time spent: 0:0:0 [0.078834s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 72 time spent: 0:0:0 [0.000014s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 72 time spent: 0:0:0 [0.000324s total; 0.000005 per start]
evaluate_expr_and_check_bounds: num_starts 20644 time spent: 0:0:35 [35.735594s total; 0.001731 per start]
array_constant_equals: num_starts 108526 time spent: 0:0:0 [0.097035s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 157 time spent: 0:0:0 [0.603634s total; 0.003845 per start]
alias_val_xfer_and_meet: num_starts 157 time spent: 0:0:0 [0.421267s total; 0.002683 per start]
get_sprel_map_from_avail_exprs: num_starts 205 time spent: 0:0:0 [0.023166s total; 0.000113 per start]
update_memlabels_for_memslot_locs: num_starts 44 time spent: 0:0:0 [0.000199s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 502 time spent: 0:0:0 [0.078915s total; 0.000157 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1080 time spent: 0:0:0 [0.332197s total; 0.000308 per start]
compute_locs_definitely_written_on_edge: num_starts 502 time spent: 0:0:0 [0.000771s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 134 time spent: 0:0:0 [0.033009s total; 0.000246 per start]
edge_update_memlabel_map_for_mlvars: num_starts 251 time spent: 0:0:0 [0.053847s total; 0.000215 per start]
add_new_locs_based_on_edge: num_starts 157 time spent: 0:0:0 [0.178202s total; 0.001135 per start]
expand_locset_to_include_slots_for_memmask: num_starts 232 time spent: 0:0:0 [0.001372s total; 0.000006 per start]
total: num_starts 1 time spent: 0:5:22 [322.407261s total; 322.407261 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 295.71s.
ftmap_run_pointsto_analysis.: 0.514946s (num_starts 2; 0.2575s/start)s.
EQ Time after pointsto analysis: 295.196s.
EQ Time after pointsto analysis and smt_query: 250.921s.
EQ Time after pointsto analysis and smt_query and bv-solve: 250.522s.
Equivalence proof found. The programs are equivalent.
