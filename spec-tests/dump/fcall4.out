argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=fcall4.proof
argv[5] = --spec-iospecs=fcall4.iospecs
argv[6] = fcall4.spec
argv[7] = fcall4.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2710254
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/repos/superopt-project/superopt-tests/spec-tests/fcall4.c
argv[10] = -o
argv[11] = par_tmpdir/fcall4.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/fcall4.spec.etfg
argv[10] = par_tmpdir/fcall4.c.bc
argv[11] = -o
argv[12] = par_tmpdir/fcall4.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function bar</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 214 time spent: 0:0:0 [0.000382s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 257 time spent: 0:0:0 [0.000405s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 2834 time spent: 0:0:0 [0.016935s total; 0.000006 per start]
expr_simplify_solver: num_starts 378 time spent: 0:0:0 [0.039462s total; 0.000104 per start]
expr_simplify_syntactic: num_starts 378 time spent: 0:0:0 [0.175979s total; 0.000466 per start]
expr_simplify_select_on_store: num_starts 8 time spent: 0:0:0 [0.021016s total; 0.002627 per start]
expr_simplify_using_lhs_set_helper: num_starts 263 time spent: 0:0:0 [0.226260s total; 0.000860 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 1613 time spent: 0:0:0 [0.225013s total; 0.000139 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 165 time spent: 0:0:0 [0.000793s total; 0.000005 per start]
expr_simplify_eq: num_starts 12 time spent: 0:0:0 [0.000137s total; 0.000011 per start]
expr_simplify_not: num_starts 4 time spent: 0:0:0 [0.000010s total; 0.000003 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000546s total; 0.000137 per start]
canonicalize_expr_tree: num_starts 161 time spent: 0:0:0 [0.003015s total; 0.000019 per start]
expr_simplify_memalloc_using_memlabel: num_starts 48 time spent: 0:0:0 [0.000111s total; 0.000002 per start]
expr_simplify_select_on_store_visit_function: num_starts 8 time spent: 0:0:0 [0.020460s total; 0.002557 per start]
get_arithmetic_addsub_atoms: num_starts 136 time spent: 0:0:0 [0.000114s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 303 time spent: 0:0:0 [0.004844s total; 0.000016 per start]
expr_is_consts_struct_constant: num_starts 3391 time spent: 0:0:0 [0.001916s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 6382 time spent: 0:0:0 [0.232618s total; 0.000036 per start]
expr_do_simplify_helper_cache: num_starts 6382 time spent: 0:0:0 [0.004568s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000008s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000169s total; 0.000005 per start]
array_constant_equals: num_starts 151 time spent: 0:0:0 [0.000314s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 238 time spent: 0:0:0 [0.388311s total; 0.001632 per start]
alias_val_xfer_and_meet: num_starts 238 time spent: 0:0:0 [0.132008s total; 0.000555 per start]
get_sprel_map_from_avail_exprs: num_starts 297 time spent: 0:0:0 [0.037231s total; 0.000125 per start]
update_memlabels_for_memslot_locs: num_starts 55 time spent: 0:0:0 [0.000281s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 472 time spent: 0:0:0 [0.026081s total; 0.000055 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1229 time spent: 0:0:0 [0.245161s total; 0.000199 per start]
compute_locs_definitely_written_on_edge: num_starts 472 time spent: 0:0:0 [0.000204s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 128 time spent: 0:0:0 [0.034300s total; 0.000268 per start]
edge_update_memlabel_map_for_mlvars: num_starts 236 time spent: 0:0:0 [0.004760s total; 0.000020 per start]
add_new_locs_based_on_edge: num_starts 236 time spent: 0:0:0 [0.051739s total; 0.000219 per start]
alias_val_meet: num_starts 1 time spent: 0:0:0 [0.000087s total; 0.000087 per start]
expand_locset_to_include_slots_for_memmask: num_starts 171 time spent: 0:0:0 [0.001083s total; 0.000006 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_proofs_constructor.src.spec.bar.: 0s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.bar.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.bar.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 2e-06s (num_starts 3; 0.0000s/start)
graph_with_ce_constructor.src.spec.bar.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.bar.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 3e-06s (num_starts 2; 0.0000s/start)
remove_function_name_from_symbols.: 4e-06s (num_starts 2; 0.0000s/start)
graph_with_guessing_constructor.src.spec.bar.: 8e-06s (num_starts 1; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_loc_for_arg_expr.: 9e-06s (num_starts 6; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1.2e-05s (num_starts 2; 0.0000s/start)
context_constructor.solver.: 4e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 4.3e-05s (num_starts 2; 0.0000s/start)
context_constructor.: 4.6e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 5e-05s (num_starts 2; 0.0000s/start)
add_extra_node_at_start_pc.: 6.1e-05s (num_starts 2; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_arg_locs_in_fcall_edge.: 8e-05s (num_starts 2; 0.0000s/start)
main.3.: 0.000111s (num_starts 1; 0.0001s/start)
expr_is_hidden_reg.: 0.000121s (num_starts 155; 0.0000s/start)
expr_is_callee_save_const.: 0.000156s (num_starts 163; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000188s (num_starts 9; 0.0000s/start)
get_memlabel_set_from_mlvarnames.: 0.000192s (num_starts 4; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000232s (num_starts 4; 0.0001s/start)
compute_sprel_relations.: 0.000234s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000244s (num_starts 2; 0.0001s/start)
identify_farg_memlabels_at_pc.calling.compute_lr_status_for_expr.: 0.000262s (num_starts 6; 0.0000s/start)
graph_locs_add_all_specvars.: 0.000274s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000347s (num_starts 429; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000358s (num_starts 88; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000413s (num_starts 88; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000416s (num_starts 2; 0.0002s/start)
compute_reachable_memlabels_map.: 0.000418s (num_starts 1; 0.0004s/start)
graph_locs_add_all_local_vars.: 0.000474s (num_starts 2; 0.0002s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.00048s (num_starts 53; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000542s (num_starts 10; 0.0001s/start)
ftmap_pointsto_analysis_combo_dfa_t.identify_farg_memlabels_at_pc.: 0.000593s (num_starts 2; 0.0003s/start)
lr_status_meet.: 0.000595s (num_starts 189; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000618s (num_starts 8; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000646s (num_starts 4; 0.0002s/start)
graph_with_aliasing_constructor.src.spec.bar.: 0.000649s (num_starts 1; 0.0006s/start)
tfg_get_write_memlabels.: 0.000734s (num_starts 2; 0.0004s/start)
expr_represents_llvm_undef.: 0.000931s (num_starts 167; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.bar.: 0.000965s (num_starts 1; 0.0010s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_convert_caller_pointsto_value_to_callee_pointsto_value.: 0.001001s (num_starts 2; 0.0005s/start)
tfg_get_read_memlabels.: 0.001191s (num_starts 2; 0.0006s/start)
graph_locs_add_all_llvmvars.: 0.001215s (num_starts 2; 0.0006s/start)
populate_locid2expr_map.: 0.001225s (num_starts 4; 0.0003s/start)
canonicalize_llvm_nextpcs.: 0.001266s (num_starts 2; 0.0006s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.001447s (num_starts 236; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001601s (num_starts 2; 0.0008s/start)
graph_with_simplified_assets_constructor.src.spec.bar.: 0.001632s (num_starts 1; 0.0016s/start)
def_analysis::xfer_and_meet.: 0.00164s (num_starts 176; 0.0000s/start)
graph_visit_exprs_const.const.: 0.001707s (num_starts 4; 0.0004s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_update_callee_boundary_value.: 0.001741s (num_starts 2; 0.0009s/start)
graph_with_locs_constructor.src.spec.bar.: 0.001784s (num_starts 1; 0.0018s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.001884s (num_starts 1; 0.0019s/start)
get_summary_for_calling_functions.: 0.001955s (num_starts 2; 0.0010s/start)
ftmap_pointsto_analysis_combo_dfa_t.compute_summary_function.: 0.00197s (num_starts 2; 0.0010s/start)
sp_version_relations_val_t::meet.: 0.002074s (num_starts 4350; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.002507s (num_starts 2; 0.0013s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.002699s (num_starts 2; 0.0013s/start)
tfg_constructor.src.spec.bar.after_transitive_closure.: 0.002742s (num_starts 1; 0.0027s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.002743s (num_starts 236; 0.0000s/start)
tfg_constructor.src.spec.bar.post_parsing.: 0.002746s (num_starts 1; 0.0027s/start)
tfg_constructor.src.spec.bar.after_string_contents.: 0.002756s (num_starts 1; 0.0028s/start)
tfg_constructor.src.spec.bar.after_compute_max_memlabel_varnum.: 0.00276s (num_starts 1; 0.0028s/start)
tfg_constructor.src.spec.bar.: 0.002764s (num_starts 1; 0.0028s/start)
tfg::collect_assumes_around_edge.: 0.002817s (num_starts 257; 0.0000s/start)
graph_with_locs_constructor.src.spec.foo.: 0.002965s (num_starts 1; 0.0030s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.003055s (num_starts 1; 0.0031s/start)
graph_with_predicates_constructor.src.spec.bar.: 0.003457s (num_starts 1; 0.0035s/start)
populate_exit_return_values_for_llvm_method.: 0.003461s (num_starts 2; 0.0017s/start)
expr_linear_relation_holds::visit.var.: 0.003688s (num_starts 167; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.004502s (num_starts 236; 0.0000s/start)
tfg_preprocess.dst.llvm.bar.: 0.004532s (num_starts 1; 0.0045s/start)
expr_substitute_using_available_exprs_submap.: 0.004963s (num_starts 160; 0.0000s/start)
graph_visit_exprs.: 0.005424s (num_starts 8; 0.0007s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.00585s (num_starts 1; 0.0059s/start)
query:convert_from_z3.: 0.007078s (num_starts 156; 0.0000s/start)
compute_z3_expr.: 0.007449s (num_starts 156; 0.0000s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.007846s (num_starts 2; 0.0039s/start)
get_function_tfg_map.bar.: 0.009249s (num_starts 1; 0.0092s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.010259s (num_starts 1; 0.0103s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.010679s (num_starts 175; 0.0001s/start)
compute_lr_status_for_expr.: 0.010687s (num_starts 154; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.010719s (num_starts 131; 0.0001s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.0109s (num_starts 1; 0.0109s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.010904s (num_starts 1; 0.0109s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.01091s (num_starts 1; 0.0109s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.010915s (num_starts 1; 0.0109s/start)
tfg_constructor.src.spec.foo.: 0.010918s (num_starts 1; 0.0109s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.010949s (num_starts 131; 0.0001s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.011207s (num_starts 4377; 0.0000s/start)
populate_transitive_closure.: 0.011653s (num_starts 2; 0.0058s/start)
populate_dominator_and_postdominator_relations.: 0.012143s (num_starts 4; 0.0030s/start)
create_closure_matrix.: 0.012178s (num_starts 291; 0.0000s/start)
query:convert_to_z3.: 0.014201s (num_starts 156; 0.0001s/start)
graph_identify_back_edges.: 0.01508s (num_starts 10; 0.0015s/start)
populate_simplified_to_state.: 0.015228s (num_starts 6; 0.0025s/start)
tfg::populate_loc_definedness.before_solve.: 0.015297s (num_starts 4; 0.0038s/start)
graph_to_stream.: 0.015932s (num_starts 2; 0.0080s/start)
graph_identify_natural_loops.: 0.015953s (num_starts 10; 0.0016s/start)
tfg::populate_loc_definedness.before_initialize.: 0.016134s (num_starts 4; 0.0040s/start)
tfg::populate_loc_definedness.: 0.016728s (num_starts 4; 0.0042s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.021629s (num_starts 2834; 0.0000s/start)
populate_branch_affecting_locs.: 0.021751s (num_starts 4; 0.0054s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.021906s (num_starts 238; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.023922s (num_starts 2; 0.0120s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.024373s (num_starts 2; 0.0122s/start)
populate_simplified_assets.: 0.024545s (num_starts 12; 0.0020s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.024986s (num_starts 2; 0.0125s/start)
find_dominators.: 0.02562s (num_starts 18; 0.0014s/start)
compute_regions.: 0.025759s (num_starts 10; 0.0026s/start)
query:simplify-z3.: 0.026322s (num_starts 317; 0.0001s/start)
tfg_preprocess.dst.llvm.foo.: 0.03273s (num_starts 1; 0.0327s/start)
tfg::tfg_preprocess.: 0.037268s (num_starts 2; 0.0186s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.043419s (num_starts 236; 0.0002s/start)
get_function_tfg_map.foo.: 0.044141s (num_starts 1; 0.0441s/start)
get_tfg.: 0.053272s (num_starts 2; 0.0266s/start)
get_function_tfg_map.: 0.053397s (num_starts 2; 0.0267s/start)
create_sp_version_relations_lattice_at_pc.: 0.056011s (num_starts 291; 0.0002s/start)
main.2.: 0.065428s (num_starts 1; 0.0654s/start)
populate_locs_potentially_modified_on_edge.: 0.072519s (num_starts 6; 0.0121s/start)
compute_new_lr_status_on_locs.: 0.073267s (num_starts 236; 0.0003s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.075555s (num_starts 237; 0.0003s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.094497s (num_starts 2834; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.097098s (num_starts 6; 0.0162s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.097712s (num_starts 2834; 0.0000s/start)
avail_exprs_create_submap.: 0.109337s (num_starts 710; 0.0002s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.118567s (num_starts 2834; 0.0000s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.119611s (num_starts 264; 0.0005s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.132375s (num_starts 238; 0.0006s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.135277s (num_starts 238; 0.0006s/start)
populate_loc_liveness.: 0.148036s (num_starts 4; 0.0370s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.22654s (num_starts 263; 0.0009s/start)
tfg_postprocess_after_pointsto_analysis.: 0.301203s (num_starts 2; 0.1506s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.330888s (num_starts 234; 0.0014s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.345176s (num_starts 2; 0.1726s/start)
ftmap_run_pointsto_analysis.: 0.78258s (num_starts 1; 0.7826s/start)
parse_consts_db.: 6.27705s (num_starts 1; 6.2770s/start)
main.: 7.26954s (num_starts 1; 7.2695s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:13 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:20 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:20 : Reading in SPEC-LLVM I/O specification from file fcall4.iospecs...</MSG>
<MSG>0:21 : Computing equivalence for function: bar...</MSG>
<MSG>0:21 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:21 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:21 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:21 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:21 : Chose (after CE propagation) product-TFG bar (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:22 : product-TFG bar: Enumerating correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Considering 1 paths to src pc L4%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Attempting correlation of src pathset L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : Found 1 feasible correlations for paths to src pc L4%1%fcallStart as correlation candidates for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : product-TFG bar: Found 1 correlations for L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:22 : product-TFG bar created 1 possibilities in group bar.A...</MSG>
<MSG>0:22 : Chose (for CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:22 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1...</MSG>
<MSG>0:22 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1...</MSG>
<MSG>0:22 : Creating ssa-path for the src-tfg path L0%0%d --> L4%1%fcallStart ending at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:22 : Adding a CG edge composition using the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:22 : Identifying common alloc-deallocs in the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart
</MSG>
<MSG>0:22 : Identified no common alloc-deallocs in the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:22 : Adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L4%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Updating dst fcall edge using src fcall edge for toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Computing loop hoisting select expressions at toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Computing loop hoisting non-linear expressions at toPC L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Adding node L4%1%fcallStart_Lentry%1%fcallStart to the product-TFG...</MSG>
<MSG>0:22 : bar.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Adding edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:22 : bar.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:22 : bar.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:22 : bar.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart</MSG>
<MSG>0:22 : bar.A1: Added the 2 propagated CEs at PC L4%1%fcallStart_Lentry%1%fcallStart and propagated further.
</MSG>
<MSG>0:22 : bar.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:22 : bar.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:22 : bar.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : Done adding new edge to the product-TFG bar.A1 for fromPC L0%0%d_L0%0%d and toPC L4%1%fcallStart_Lentry%1%fcallStart, src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart...</MSG>
<MSG>0:22 : Done adding a CG edge composition using the src path L0%0%d --> L4%1%fcallStart and dst path L0%0%d --> Lentry%1%fcallStart</MSG>
<MSG>0:22 : Added correlation to the product-TFG bar.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG bar.A1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 1 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lentry%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L4%1%fcallStart[mu 1, delta {1,0}]
<MSG>0:22 : bar.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:22 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart...</MSG>
<MSG>0:22 : bar.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:22 : bar.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: unchanged</MSG>
<MSG>0:22 : bar.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:22 : bar.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart) ...</MSG>
<MSG>0:22 : bar.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:22 : bar.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:22 : bar.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:26 : bar.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht15-prove_trivial0-prove15...</MSG>
<MSG>0:26 : bar.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:39 : bar.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 1 proof-stats=dht11-prove_trivial0-prove11...</MSG>
<MSG>0:39 : bar.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart)...</MSG>
<MSG>0:39 : bar.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:39 : bar.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: changed ...</MSG>
<MSG>0:39 : bar.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>0:39 : bar.A1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:39 : bar.A1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:39 : product-TFG bar.A1: Enumerating correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:39 : Considering 1 paths to src pc L4%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:39 : Attempting correlation of src pathset L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:39 : Found 1 feasible correlations for paths to src pc L4%1%fcallEnd as correlation candidates for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:39 : product-TFG bar.A1: Found 1 correlations for Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}] starting at L4%1%fcallStart_Lentry%1%fcallStart
</MSG>
<MSG>0:39 : product-TFG bar.A1 created 1 possibilities in group bar.A1.B...</MSG>
<MSG>0:39 : Chose (for CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:39 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:39 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1...</MSG>
<MSG>0:39 : Creating ssa-path for the src-tfg path L4%1%fcallStart --> L4%1%fcallEnd ending at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>0:39 : Adding a CG edge composition using the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:39 : Identifying common alloc-deallocs in the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd
</MSG>
<MSG>0:39 : Identified no common alloc-deallocs in the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:39 : Adding new edge to the product-TFG bar.A1.B1 for fromPC L4%1%fcallStart_Lentry%1%fcallStart and toPC L4%1%fcallEnd_Lentry%1%fcallEnd, src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:39 : bar.A1.B1: Computing loop hoisting select expressions at toPC L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:39 : bar.A1.B1: Computing loop hoisting non-linear expressions at toPC L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:39 : bar.A1.B1: Adding node L4%1%fcallEnd_Lentry%1%fcallEnd to the product-TFG...</MSG>
<MSG>0:39 : bar.A1.B1: Getting alloca-ptrs on edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:39 : bar.A1.B1: Found no alloca-ptrs on edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:39 : bar.A1.B1: Adding edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:39 : bar.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:39 : bar.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:39 : bar.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:39 : bar.A1.B1: Propagated 18 out of 18 counter-examples across edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd</MSG>
<MSG>0:39 : bar.A1.B1: Added the 18 propagated CEs at PC L4%1%fcallEnd_Lentry%1%fcallEnd and propagated further.
</MSG>
<MSG>0:39 : bar.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:39 : bar.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:39 : bar.A1.B1: Computing CG regions after the addition of the edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:39 : bar.A1.B1: Done computing CG regions after the addition of the edge L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:39 : Done adding new edge to the product-TFG bar.A1.B1 for fromPC L4%1%fcallStart_Lentry%1%fcallStart and toPC L4%1%fcallEnd_Lentry%1%fcallEnd, src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd...</MSG>
<MSG>0:39 : Done adding a CG edge composition using the src path L4%1%fcallStart --> L4%1%fcallEnd and dst path Lentry%1%fcallStart --> Lentry%1%fcallEnd</MSG>
<MSG>0:39 : Added correlation to the product-TFG bar.A1.B1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:39 : Chose (after CE propagation) product-TFG bar.A1.B1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 10 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallStart=>Lentry%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallStart=>L4%1%fcallEnd[mu 1, delta {1,0}]
<MSG>0:39 : bar.A1.B1: Updating invariants over the newly added edges in edge composition L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>0:39 : Constructed infer_invariants_dfa with initial worklist L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd...</MSG>
<MSG>0:39 : bar.A1.B1: Relaxing dst graph's memlabels for edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:39 : bar.A1.B1: Done relaxing dst graph's memlabels for edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: unchanged</MSG>
<MSG>0:39 : bar.A1.B1: Checking well-formedness assertions on outgoing edges from L4%1%fcallStart_Lentry%1%fcallStart ...</MSG>
<MSG>0:39 : bar.A1.B1: Relaxing invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd) ...</MSG>
<MSG>0:39 : bar.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:39 : bar.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:39 : bar.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 10 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>0:39 : bar.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>0:39 : bar.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 30 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>1:01 : bar.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 1 proof-stats=dht31-prove_trivial9-prove22...</MSG>
<MSG>1:01 : bar.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd)...</MSG>
<MSG>1:01 : bar.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : bar.A1.B1: Done relaxing invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: changed ...</MSG>
<MSG>1:01 : bar.A1.B1: Done relaxing memlabels and invariants across the edge composition (L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>1:01 : bar.A1.B1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>1:01 : bar.A1.B1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:02 : product-TFG bar.A1.B1: Enumerating correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:02 : Considering 1 paths to src pc L4%2%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:02 : Attempting correlation of src pathset L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}] as correlation candidate for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:02 : Found 1 feasible correlations for paths to src pc L4%2%fcallStart as correlation candidates for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:02 : product-TFG bar.A1.B1: Found 1 correlations for Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}] starting at L4%1%fcallEnd_Lentry%1%fcallEnd
</MSG>
<MSG>1:02 : product-TFG bar.A1.B1 created 1 possibilities in group bar.A1.B1.C...</MSG>
<MSG>1:02 : Chose (for CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:02 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>1:02 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1...</MSG>
<MSG>1:02 : Creating ssa-path for the src-tfg path L4%1%fcallEnd --> L4%2%fcallStart ending at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>1:02 : Adding a CG edge composition using the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:02 : Identifying common alloc-deallocs in the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart
</MSG>
<MSG>1:02 : Identified no common alloc-deallocs in the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:02 : Adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L4%1%fcallEnd_Lentry%1%fcallEnd and toPC L4%2%fcallStart_Lentry%2%fcallStart, src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Computing loop hoisting select expressions at toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Adding node L4%2%fcallStart_Lentry%2%fcallStart to the product-TFG...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Getting alloca-ptrs on edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Found no alloca-ptrs on edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Adding edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:02 : bar.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:02 : bar.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Propagated 0 out of 12 counter-examples across edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart</MSG>
<MSG>1:02 : bar.A1.B1.C1: Added the 0 propagated CEs at PC L4%2%fcallStart_Lentry%2%fcallStart and propagated further.
</MSG>
<MSG>1:02 : bar.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Computing CG regions after the addition of the edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Done computing CG regions after the addition of the edge L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:02 : Done adding new edge to the product-TFG bar.A1.B1.C1 for fromPC L4%1%fcallEnd_Lentry%1%fcallEnd and toPC L4%2%fcallStart_Lentry%2%fcallStart, src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart...</MSG>
<MSG>1:02 : Done adding a CG edge composition using the src path L4%1%fcallEnd --> L4%2%fcallStart and dst path Lentry%1%fcallEnd --> Lentry%2%fcallStart</MSG>
<MSG>1:02 : Added correlation to the product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>1:02 : Chose (after CE propagation) product-TFG bar.A1.B1.C1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 0 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%1%fcallEnd=>Lentry%2%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L4%1%fcallEnd=>L4%2%fcallStart[mu 1, delta {1,0}]
<MSG>1:02 : bar.A1.B1.C1: Updating invariants over the newly added edges in edge composition L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>1:02 : Constructed infer_invariants_dfa with initial worklist L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: unchanged</MSG>
<MSG>1:02 : bar.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L4%1%fcallEnd_Lentry%1%fcallEnd ...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Relaxing invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart) ...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:02 : bar.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 9 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>1:05 : bar.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht13-prove_trivial5-prove8...</MSG>
<MSG>1:05 : bar.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 39 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.0.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.0.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.1.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.1.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.5.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.2.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.7.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.3.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.8.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.4.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.9.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.5.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.10.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.6.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.12.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.7.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.15.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.8.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.17.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.9.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.20.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.10.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.21.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.11.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.27.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.12.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.30.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.13.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.32.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.14.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.33.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.15.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.34.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.16.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.35.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.17.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.37.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.path_hashe97da2cfdb5881aa96bc422594dfeb25.pre0.18.gz
<MSG>2:37 : bar.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 1 proof-stats=dht40-prove_trivial9-prove31...</MSG>
<MSG>2:37 : bar.A1.B1.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart)...</MSG>
<MSG>2:37 : bar.A1.B1.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:37 : bar.A1.B1.C1: Done relaxing invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: changed ...</MSG>
<MSG>2:37 : bar.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>2:37 : bar.A1.B1.C1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>2:37 : bar.A1.B1.C1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:37 : product-TFG bar.A1.B1.C1: Enumerating correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:37 : Considering 1 paths to src pc L4%2%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:37 : Attempting correlation of src pathset L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:37 : Found 1 feasible correlations for paths to src pc L4%2%fcallEnd as correlation candidates for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:37 : product-TFG bar.A1.B1.C1: Found 1 correlations for Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}] starting at L4%2%fcallStart_Lentry%2%fcallStart
</MSG>
<MSG>2:37 : product-TFG bar.A1.B1.C1 created 1 possibilities in group bar.A1.B1.C1.D...</MSG>
<MSG>2:37 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:37 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>2:37 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1...</MSG>
<MSG>2:37 : Creating ssa-path for the src-tfg path L4%2%fcallStart --> L4%2%fcallEnd ending at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>2:37 : Adding a CG edge composition using the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:37 : Identifying common alloc-deallocs in the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd
</MSG>
<MSG>2:37 : Identified no common alloc-deallocs in the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:37 : Adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L4%2%fcallStart_Lentry%2%fcallStart and toPC L4%2%fcallEnd_Lentry%2%fcallEnd, src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>2:37 : bar.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:37 : bar.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:37 : bar.A1.B1.C1.D1: Adding node L4%2%fcallEnd_Lentry%2%fcallEnd to the product-TFG...</MSG>
<MSG>2:37 : bar.A1.B1.C1.D1: Getting alloca-ptrs on edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:37 : bar.A1.B1.C1.D1: Found no alloca-ptrs on edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:37 : bar.A1.B1.C1.D1: Adding edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:37 : bar.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:37 : bar.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:37 : bar.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:37 : bar.A1.B1.C1.D1: Propagated 11 out of 11 counter-examples across edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Added the 11 propagated CEs at PC L4%2%fcallEnd_Lentry%2%fcallEnd and propagated further.
</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Computing CG regions after the addition of the edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:38 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1 for fromPC L4%2%fcallStart_Lentry%2%fcallStart and toPC L4%2%fcallEnd_Lentry%2%fcallEnd, src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd...</MSG>
<MSG>2:38 : Done adding a CG edge composition using the src path L4%2%fcallStart --> L4%2%fcallEnd and dst path Lentry%2%fcallStart --> Lentry%2%fcallEnd</MSG>
<MSG>2:38 : Added correlation to the product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>2:38 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 7 counterexamples (for correlating 10 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallStart=>Lentry%2%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallStart=>L4%2%fcallEnd[mu 1, delta {1,0}]
<MSG>2:38 : bar.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>2:38 : Constructed infer_invariants_dfa with initial worklist L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: unchanged</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L4%2%fcallStart_Lentry%2%fcallStart ...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Relaxing invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd) ...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 10 exprs and 7 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht5-prove_trivial3-prove2...</MSG>
<MSG>2:38 : bar.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 53 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.2.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.0.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.10.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.1.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.13.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.2.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.14.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.3.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.15.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.4.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.16.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.5.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.18.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.6.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.19.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.7.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.27.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.8.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.30.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.9.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.33.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.10.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.36.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.11.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.37.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.12.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.39.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.13.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.40.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.14.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.41.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.15.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.42.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.16.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.46.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.17.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.47.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.18.gz
WARNING : Solver timeout
WARNING: query timeout with no counterexamples: prove filename /tmp/smt-solver-tmp-files/indrajit.2710254/prove.decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.49.gz
decide_hoare_triple query timed out! filename /tmp/smt-solver-tmp-files/indrajit.2710254/decide_hoare_triple.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.path_hashdcd4e23dd6884c66d0d19d178d94b555.pre0.19.gz
<MSG>3:47 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 1 proof-stats=dht54-prove_trivial15-prove39...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd)...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: changed ...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:47 : bar.A1.B1.C1.D1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:48 : product-TFG bar.A1.B1.C1.D1: Enumerating correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:48 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:48 : Attempting correlation of src pathset L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:48 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:48 : product-TFG bar.A1.B1.C1.D1: Found 1 correlations for Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}] starting at L4%2%fcallEnd_Lentry%2%fcallEnd
</MSG>
<MSG>3:48 : product-TFG bar.A1.B1.C1.D1 created 1 possibilities in group bar.A1.B1.C1.D1.E...</MSG>
<MSG>3:48 : Chose (for CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 10 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:48 : Finished adding lsprel-assumes for allocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>3:48 : Finished adding lsprel-assumes for deallocation to the product-TFG bar.A1.B1.C1.D1.E1...</MSG>
<MSG>3:48 : Creating ssa-path for the src-tfg path L4%2%fcallEnd --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>3:48 : Adding a CG edge composition using the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:48 : Identifying common alloc-deallocs in the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d
</MSG>
<MSG>3:48 : Identified no common alloc-deallocs in the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:48 : Adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L4%2%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Adding edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Propagated 0 out of 12 counter-examples across edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Added the 0 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : Done adding new edge to the product-TFG bar.A1.B1.C1.D1.E1 for fromPC L4%2%fcallEnd_Lentry%2%fcallEnd and toPC E0%0%d_E0%0%d, src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d...</MSG>
<MSG>3:48 : Done adding a CG edge composition using the src path L4%2%fcallEnd --> E0%0%d and dst path Lentry%2%fcallEnd --> E0%0%d</MSG>
<MSG>3:48 : Added correlation to the product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>3:48 : Chose (after CE propagation) product-TFG bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L4%2%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 12 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 10 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lentry%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L4%2%fcallEnd=>E0%0%d[mu 1, delta {1,0}]
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Updating invariants over the newly added edges in edge composition L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>3:48 : Constructed infer_invariants_dfa with initial worklist L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L4%2%fcallEnd_Lentry%2%fcallEnd ...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1: Done relaxing memlabels and invariants across the edge composition (L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:48 : bar.A1.B1.C1.D1.E1 (d:0, s:0, sp: 0): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:48 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>3:48 : Checking equivalence proof...</MSG>
<MSG>3:49 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L4%1%fcallStart_Lentry%1%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-n-3 ; 3-->input.spec-%var-m-3 ; 4-->input.dst.llvm-%arr1 ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%arr2 ; 7-->input.dst.llvm-%m ; 
    4 preds:
      0.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.dst.llvm-%m
      1.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.dst.llvm-%n
      3.: 0                     ==  bvextract(input.dst.llvm-%arr1, 1, 0)
     is_assumed_eqclass : 0
    16 visited ces:
      0.:z3.ce3      1.:z3.ce31      2.:z3.ce18      3.:z3v487.ce17      4.:z3.ce143      5.:z3v487.ce73      6.:z3.ce74      7.:z3v487.ce45      8.:z3v487.ce59      9.:z3v487.ce87      10.:z3v487.ce116      11.:z3v487.ce101      12.:z3.ce115      13.:z3.ce157      14.:z3v487.ce144      15.:z3.ce129
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [10]: 8-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 9-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 11-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142017](input.spec-%var-mat1-0, map[141898](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr1))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 12-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142109](input.spec-%var-mat1-0, map[142108](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142104](input.spec-%var-mat1-0, map[142074](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 14-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 15-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142168](input.spec-%var-mat2-0, map[142167](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142166](Lambda3Var, map[142165](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142164](Lambda2Var, select[142163](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142162](bvmul(Lambda2Var, 4), select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 16-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142177](input.spec-%var-mat2-0, map[142176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142175](Lambda3Var, map[142174](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142173](Lambda2Var, select[142172](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142171](bvmul(Lambda2Var, 4), select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 17-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142179](input.spec-%var-mat2-0, map[142178](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr1))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    4 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      3.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

L4%1%fcallEnd_Lentry%1%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [9]: 2-->input.spec-%var-n-3 ; 3-->input.spec-%var-m-3 ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%arr2 ; 7-->input.dst.llvm-%m ; 18-->input.spec-%tmpvar-27.L4%1%fcallEnd ; 19-->input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd ; 20-->input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd ; 21-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.dst.llvm-%m
      1.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd
      3.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd
      4.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.dst.llvm-%n
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce3      1.:z3.ce31      2.:z3.ce18      3.:z3v487.ce17      4.:z3.ce143      5.:z3v487.ce73      6.:z3v487.ce45      7.:z3v487.ce59      8.:z3.ce157      9.:z3v487.ce144
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [30]: 8-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 9-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 12-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142109](input.spec-%var-mat1-0, map[142108](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142104](input.spec-%var-mat1-0, map[142074](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 14-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 15-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142168](input.spec-%var-mat2-0, map[142167](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142166](Lambda3Var, map[142165](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142164](Lambda2Var, select[142163](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142162](bvmul(Lambda2Var, 4), select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 16-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142177](input.spec-%var-mat2-0, map[142176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142175](Lambda3Var, map[142174](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142173](Lambda2Var, select[142172](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142171](bvmul(Lambda2Var, 4), select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 22-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[162322](input.spec-%var-mat1-0, map[162319](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 23-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[171110](input.spec-%var-mat1-0, map[170852](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 24-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190911](input.spec-%var-mat2-0, map[190910](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190944](input.spec-%var-mat1-0, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190949](input.spec-%var-mat1-0, map[190948](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 27-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190956](input.spec-%var-mat1-0, map[190955](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190954](Lambda3Var, map[190953](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190952](Lambda2Var, select[190951](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190950](select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 28-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190957](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 29-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190966](input.spec-%var-mat2-0, map[190965](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190964](Lambda3Var, map[190963](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190962](Lambda2Var, select[190961](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190960](bvmul(Lambda2Var, 4), select[190959](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 30-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190968](input.spec-%var-mat1-0, map[190967](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 31-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190969](input.spec-%var-mat1-0, map[142167](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142166](Lambda3Var, map[142165](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142164](Lambda2Var, select[142163](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142162](bvmul(Lambda2Var, 4), select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 32-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190970](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 33-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190971](input.spec-%var-mat2-0, map[190955](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190954](Lambda3Var, map[190953](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190952](Lambda2Var, select[190951](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190950](select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 34-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190978](input.spec-%var-mat2-0, map[190977](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190976](Lambda3Var, map[190975](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190974](Lambda2Var, select[190973](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190972](select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 35-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190985](input.spec-%var-mat2-0, map[190984](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190983](Lambda3Var, map[190982](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190981](Lambda2Var, select[190980](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190979](select[190959](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 36-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190987](input.spec-%var-mat1-0, map[190986](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190989](input.spec-%var-mat1-0, map[190988](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190991](input.spec-%var-mat1-0, map[190990](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190999](input.spec-%var-mat1-0, map[190998](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190997](Lambda3Var, map[190996](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190995](Lambda2Var, select[190994](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190993](bvmul(Lambda2Var, 4), select[190992](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191000](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 41-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191001](input.spec-%var-mat2-0, map[190998](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190997](Lambda3Var, map[190996](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190995](Lambda2Var, select[190994](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190993](bvmul(Lambda2Var, 4), select[190992](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 42-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191009](input.spec-%var-mat2-0, map[191008](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191007](Lambda3Var, map[191006](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191005](Lambda2Var, select[191004](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191003](bvmul(Lambda2Var, 4), select[191002](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 43-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191017](input.spec-%var-mat2-0, map[191016](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191015](Lambda3Var, map[191014](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191013](Lambda2Var, select[191012](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191011](bvmul(Lambda2Var, 4), select[191010](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    9 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190911](input.spec-%var-mat2-0, map[190910](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190944](input.spec-%var-mat1-0, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      3.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      4.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      5.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      6.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190957](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      7.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190970](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      8.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191000](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

L4%2%fcallStart_Lentry%2%fcallStart: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce696
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [9]: 2-->input.spec-%var-n-3 ; 3-->input.spec-%var-m-3 ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%arr2 ; 7-->input.dst.llvm-%m ; 18-->input.spec-%tmpvar-27.L4%1%fcallEnd ; 19-->input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd ; 20-->input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd ; 21-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 
    6 preds:
      0.: bvneg(bvmul(input.spec-%tmpvar-27.L4%1%fcallEnd, 4294967295))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
      1.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd
      2.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd
      3.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.dst.llvm-%m
      4.: 0                     ==  bvextract(input.dst.llvm-%arr2, 1, 0)
      5.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.dst.llvm-%n
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce696      1.:z3v487.ce706      2.:z3v487.ce759      3.:z3.ce723      4.:z3.ce705      5.:z3.ce768      6.:z3v487.ce795      7.:z3.ce777      8.:z3v487.ce741
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [39]: 8-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 9-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 12-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142109](input.spec-%var-mat1-0, map[142108](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 13-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142104](input.spec-%var-mat1-0, map[142074](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 14-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 15-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142168](input.spec-%var-mat2-0, map[142167](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142166](Lambda3Var, map[142165](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142164](Lambda2Var, select[142163](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142162](bvmul(Lambda2Var, 4), select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 16-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142177](input.spec-%var-mat2-0, map[142176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142175](Lambda3Var, map[142174](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142173](Lambda2Var, select[142172](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142171](bvmul(Lambda2Var, 4), select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 22-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[162322](input.spec-%var-mat1-0, map[162319](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 23-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[171110](input.spec-%var-mat1-0, map[170852](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 24-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190911](input.spec-%var-mat2-0, map[190910](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190944](input.spec-%var-mat1-0, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190949](input.spec-%var-mat1-0, map[190948](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 27-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190956](input.spec-%var-mat1-0, map[190955](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190954](Lambda3Var, map[190953](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190952](Lambda2Var, select[190951](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190950](select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 28-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190957](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 29-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190966](input.spec-%var-mat2-0, map[190965](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190964](Lambda3Var, map[190963](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190962](Lambda2Var, select[190961](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190960](bvmul(Lambda2Var, 4), select[190959](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 30-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190968](input.spec-%var-mat1-0, map[190967](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 31-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190969](input.spec-%var-mat1-0, map[142167](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142166](Lambda3Var, map[142165](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142164](Lambda2Var, select[142163](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142162](bvmul(Lambda2Var, 4), select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 32-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190970](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 33-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190971](input.spec-%var-mat2-0, map[190955](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190954](Lambda3Var, map[190953](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190952](Lambda2Var, select[190951](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190950](select[142161](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 34-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190978](input.spec-%var-mat2-0, map[190977](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190976](Lambda3Var, map[190975](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190974](Lambda2Var, select[190973](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190972](select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 35-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190985](input.spec-%var-mat2-0, map[190984](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190983](Lambda3Var, map[190982](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190981](Lambda2Var, select[190980](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190979](select[190959](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 36-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190987](input.spec-%var-mat1-0, map[190986](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr2))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 37-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190989](input.spec-%var-mat1-0, map[190988](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190991](input.spec-%var-mat1-0, map[190990](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190999](input.spec-%var-mat1-0, map[190998](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190997](Lambda3Var, map[190996](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190995](Lambda2Var, select[190994](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190993](bvmul(Lambda2Var, 4), select[190992](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191000](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 41-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191001](input.spec-%var-mat2-0, map[190998](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190997](Lambda3Var, map[190996](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190995](Lambda2Var, select[190994](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190993](bvmul(Lambda2Var, 4), select[190992](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%n, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 42-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191009](input.spec-%var-mat2-0, map[191008](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191007](Lambda3Var, map[191006](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191005](Lambda2Var, select[191004](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191003](bvmul(Lambda2Var, 4), select[191002](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 43-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191017](input.spec-%var-mat2-0, map[191016](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191015](Lambda3Var, map[191014](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191013](Lambda2Var, select[191012](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191011](bvmul(Lambda2Var, 4), select[191010](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 44-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225465](input.spec-%var-mat1-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 45-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225500](input.spec-%var-mat1-0, map[142176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142175](Lambda3Var, map[142174](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142173](Lambda2Var, select[142172](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142171](bvmul(Lambda2Var, 4), select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 46-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225506](input.spec-%var-mat1-0, map[191008](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191007](Lambda3Var, map[191006](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191005](Lambda2Var, select[191004](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191003](bvmul(Lambda2Var, 4), select[191002](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 47-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225505](input.spec-%var-mat1-0, map[190910](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 48-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225501](input.spec-%var-mat1-0, map[190965](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190964](Lambda3Var, map[190963](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190962](Lambda2Var, select[190961](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190960](bvmul(Lambda2Var, 4), select[190959](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 49-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225502](input.spec-%var-mat1-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 50-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225503](input.spec-%var-mat1-0, map[190977](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190976](Lambda3Var, map[190975](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190974](Lambda2Var, select[190973](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190972](select[142170](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%m, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 51-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225504](input.spec-%var-mat1-0, map[190984](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190983](Lambda3Var, map[190982](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190981](Lambda2Var, select[190980](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190979](select[190959](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 52-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225507](input.spec-%var-mat1-0, map[191016](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191015](Lambda3Var, map[191014](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191013](Lambda2Var, select[191012](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191011](bvmul(Lambda2Var, 4), select[191010](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    9 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190911](input.spec-%var-mat2-0, map[190910](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190944](input.spec-%var-mat1-0, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      3.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      4.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      5.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      6.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190957](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      7.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190970](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      8.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191000](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce696
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce696

L4%2%fcallEnd_Lentry%2%fcallEnd: (d:0, s:0, sp: 0)
  Invariant state (4 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(and(and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_end)))))), and(and(and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(and(and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum3=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum3=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce696
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [10]: 2-->input.spec-%var-n-3 ; 3-->input.spec-%var-m-3 ; 18-->input.spec-%tmpvar-27.L4%1%fcallEnd ; 19-->input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd ; 20-->input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd ; 21-->input.dst.llvm-%call.Lentry%1%fcallEnd ; 53-->input.spec-%tmpvar-28.L4%2%fcallEnd ; 54-->input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%2%fcallEnd ; 55-->input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%2%fcallEnd ; 56-->input.dst.llvm-%call1.Lentry%2%fcallEnd ; 
    5 preds:
      0.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%2%fcallEnd
      1.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%2%fcallEnd
      2.: bvneg(bvmul(input.spec-%tmpvar-27.L4%1%fcallEnd, 4294967295))  ==  input.dst.llvm-%call.Lentry%1%fcallEnd
      3.: bvneg(bvmul(input.spec-%var-m-3, 4294967295))  ==  input.spec-fcall_arg_copy.2.spec-%var-m-3.L4%1%fcallEnd
      4.: bvneg(bvmul(input.spec-%var-n-3, 4294967295))  ==  input.spec-fcall_arg_copy.1.spec-%var-n-3.L4%1%fcallEnd
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce1191      1.:z3v487.ce1246      2.:z3.ce1245      3.:z3.ce696      4.:z3v487.ce706      5.:z3v487.ce759      6.:z3.ce723      7.:z3.ce705      8.:z3.ce768      9.:z3v487.ce741
    eqclass 2:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [53]: 8-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 9-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 10-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 14-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 24-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190911](input.spec-%var-mat2-0, map[190910](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 25-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190944](input.spec-%var-mat1-0, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 26-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190949](input.spec-%var-mat1-0, map[190948](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 28-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190957](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 29-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190966](input.spec-%var-mat2-0, map[190965](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190964](Lambda3Var, map[190963](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190962](Lambda2Var, select[190961](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190960](bvmul(Lambda2Var, 4), select[190959](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 30-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190968](input.spec-%var-mat1-0, map[190967](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 32-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190970](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 35-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190985](input.spec-%var-mat2-0, map[190984](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190983](Lambda3Var, map[190982](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190981](Lambda2Var, select[190980](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190979](select[190959](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 38-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190991](input.spec-%var-mat1-0, map[190990](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191000](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 43-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191017](input.spec-%var-mat2-0, map[191016](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191015](Lambda3Var, map[191014](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191013](Lambda2Var, select[191012](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191011](bvmul(Lambda2Var, 4), select[191010](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 48-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225501](input.spec-%var-mat1-0, map[190965](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190964](Lambda3Var, map[190963](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190962](Lambda2Var, select[190961](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190960](bvmul(Lambda2Var, 4), select[190959](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 51-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225504](input.spec-%var-mat1-0, map[190984](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190983](Lambda3Var, map[190982](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190981](Lambda2Var, select[190980](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[190979](select[190959](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 52-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[225507](input.spec-%var-mat1-0, map[191016](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[191015](Lambda3Var, map[191014](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[191013](Lambda2Var, select[191012](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[191011](bvmul(Lambda2Var, 4), select[191010](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 57-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253739](input.spec-%var-mat2-0, map[253738](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253737](Lambda3Var, map[253736](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253735](Lambda2Var, select[253734](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253733](bvmul(Lambda2Var, 4), select[253732](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 58-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253772](input.spec-%var-mat1-0, map[253771](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253770](Lambda3Var, map[253769](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253768](Lambda2Var, select[253767](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253766](bvmul(Lambda2Var, 4), select[253765](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 59-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253773](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 60-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253778](input.spec-%var-mat1-0, map[253777](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 61-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253787](input.spec-%var-mat1-0, map[253786](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253785](Lambda3Var, map[253784](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253783](Lambda2Var, select[253782](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[253781](select[253780](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 62-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253794](input.spec-%var-mat2-0, map[253793](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253792](Lambda3Var, map[253791](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253790](Lambda2Var, select[253789](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[253788](bvmul(Lambda2Var, 4), select[253780](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 63-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253796](input.spec-%var-mat2-0, map[253795](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 64-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253798](input.spec-%var-mat2-0, map[253797](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 65-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253799](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 66-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253801](input.spec-%var-mat1-0, map[253800](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 67-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253802](input.spec-%var-mat1-0, map[253793](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253792](Lambda3Var, map[253791](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253790](Lambda2Var, select[253789](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[253788](bvmul(Lambda2Var, 4), select[253780](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 68-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253803](input.spec-%var-mat2-0, map[253786](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253785](Lambda3Var, map[253784](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253783](Lambda2Var, select[253782](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[253781](select[253780](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 69-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253805](input.spec-%var-mat2-0, map[253804](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 70-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253807](input.spec-%var-mat2-0, map[253806](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 71-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253808](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[190910](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 72-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253810](input.spec-%var-mat1-0, map[253809](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 73-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253818](input.spec-%var-mat1-0, map[253817](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253816](Lambda3Var, map[253815](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253814](Lambda2Var, select[253813](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253812](bvmul(Lambda2Var, 4), select[253811](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 74-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253819](input.spec-%var-mat2-0, map[253817](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253816](Lambda3Var, map[253815](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253814](Lambda2Var, select[253813](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253812](bvmul(Lambda2Var, 4), select[253811](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 75-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253821](input.spec-%var-mat2-0, map[253820](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 76-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253823](input.spec-%var-mat2-0, map[253822](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 77-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253824](input.spec-%var-mat1-0, map[253795](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 78-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253825](input.spec-%var-mat1-0, map[253797](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 79-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253826](input.spec-%var-mat1-0, map[253804](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 80-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253827](input.spec-%var-mat1-0, map[253806](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false)))))) ; 81-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253828](input.spec-%var-mat1-0, map[253820](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 82-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253829](input.spec-%var-mat1-0, map[253822](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 83-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253830](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[253738](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253737](Lambda3Var, map[253736](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253735](Lambda2Var, select[253734](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253733](bvmul(Lambda2Var, 4), select[253732](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 84-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253832](input.spec-%var-mat1-0, map[253831](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[253737](Lambda3Var, map[253736](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253735](Lambda2Var, select[253734](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253733](bvmul(Lambda2Var, 4), select[253732](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 85-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253834](input.spec-%var-mat1-0, map[253833](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[253737](Lambda3Var, map[253736](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253735](Lambda2Var, select[253734](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253733](bvmul(Lambda2Var, 4), select[253732](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 86-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253842](input.spec-%var-mat1-0, map[253841](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253840](Lambda3Var, map[253839](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253838](Lambda2Var, select[253837](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253836](bvmul(Lambda2Var, 4), select[253835](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 87-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253850](input.spec-%var-mat1-0, map[253849](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253848](Lambda3Var, map[253847](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253846](Lambda2Var, select[253845](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253844](bvmul(Lambda2Var, 4), select[253843](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 88-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253851](input.spec-%var-mat2-0, map[253841](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253840](Lambda3Var, map[253839](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253838](Lambda2Var, select[253837](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253836](bvmul(Lambda2Var, 4), select[253835](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call.Lentry%1%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 89-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253852](input.spec-%var-mat2-0, map[253849](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253848](Lambda3Var, map[253847](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253846](Lambda2Var, select[253845](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253844](bvmul(Lambda2Var, 4), select[253843](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%call1.Lentry%2%fcallEnd, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 90-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253854](input.spec-%var-mat2-0, map[253853](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call.Lentry%1%fcallEnd))), lambda[253770](Lambda3Var, map[253769](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253768](Lambda2Var, select[253767](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253766](bvmul(Lambda2Var, 4), select[253765](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 91-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253856](input.spec-%var-mat2-0, map[253855](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%call1.Lentry%2%fcallEnd))), lambda[253770](Lambda3Var, map[253769](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253768](Lambda2Var, select[253767](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253766](bvmul(Lambda2Var, 4), select[253765](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    15 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253830](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[253738](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253737](Lambda3Var, map[253736](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253735](Lambda2Var, select[253734](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253733](bvmul(Lambda2Var, 4), select[253732](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141439](input.spec-%var-mat2-0, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190957](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      3.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253739](input.spec-%var-mat2-0, map[253738](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253737](Lambda3Var, map[253736](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253735](Lambda2Var, select[253734](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253733](bvmul(Lambda2Var, 4), select[253732](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      4.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190944](input.spec-%var-mat1-0, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      5.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142159](input.spec-%var-mat1-0, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      6.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190970](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[142158](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142157](Lambda3Var, map[142113](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[142112](Lambda2Var, select[142111](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[142110](select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      7.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141082](input.spec-%var-mat1-0, map[141081](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141080](Lambda3Var, map[141079](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141078](Lambda2Var, select[141077](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141076](bvmul(Lambda2Var, 4), select[141075](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      8.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141047](input.spec-%var-mat2-0, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      9.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191000](input.spec-fcall_arg_copy.0.spec-%var-mat1-0.L4%1%fcallEnd, map[190943](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190942](Lambda3Var, map[190941](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190940](Lambda2Var, select[190939](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190938](bvmul(Lambda2Var, 4), select[190937](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      10.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253772](input.spec-%var-mat1-0, map[253771](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[253770](Lambda3Var, map[253769](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[253768](Lambda2Var, select[253767](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[253766](bvmul(Lambda2Var, 4), select[253765](input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr1, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      11.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[190911](input.spec-%var-mat2-0, map[190910](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      12.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253773](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[141046](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141045](Lambda3Var, map[141044](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141043](Lambda2Var, select[141042](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141041](select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false), bvmul(Lambda2Var, 4)), 4, false))))))  ==  true
      13.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253808](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[190910](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[190909](Lambda3Var, map[190908](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[190907](Lambda2Var, select[190906](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd[190905](bvmul(Lambda2Var, 4), select[190904](input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      14.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[253799](input.spec-fcall_arg_copy.0.spec-%var-mat2-0.L4%2%fcallEnd, map[141431](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141430](Lambda3Var, map[141427](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141426](Lambda2Var, select[141424](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141421](bvmul(Lambda2Var, 4), select[141040](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr2, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce696
    eqclass 3:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce696

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart (C L0%0%d => C L4%1%fcallStart at mu 1 delta {1,0}, A L0%0%d => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallStart => C L4%1%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart (C L4%1%fcallEnd => C L4%2%fcallStart at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallStart => C L4%2%fcallEnd at mu 1 delta {1,0}, A (line 12 at column 10) => A (line 12 at column 10) at mu 1 delta {1,0})
            L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d (C L4%2%fcallEnd => C E0%0%d at mu 1 delta {1,0}, A (line 12 at column 10) => A E0%0%d at mu 1 delta {1,0})
  Nodes[6]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L4%1%fcallStart_Lentry%1%fcallStart (C L4%1%fcallStart, A (line 12 at column 10))
                L4%1%fcallStart_Lentry%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L4%1%fcallEnd_Lentry%1%fcallEnd (C L4%1%fcallEnd, A (line 12 at column 10))
                L4%1%fcallEnd_Lentry%1%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallStart_Lentry%2%fcallStart (C L4%2%fcallStart, A (line 12 at column 10))
                L4%2%fcallStart_Lentry%2%fcallStart [inductive-invariants] contains 11 counterexamples (for correlating 9 bv exprs)
            L4%2%fcallEnd_Lentry%2%fcallEnd (C L4%2%fcallEnd, A (line 12 at column 10))
                L4%2%fcallEnd_Lentry%2%fcallEnd [inductive-invariants] contains 12 counterexamples (for correlating 10 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function bar. 208.87s, query:smt.: 148.699s (num_starts 108; 1.3768s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 206.338s (num_starts 268; 0.7699s/start)ftmap_run_pointsto_analysis.: 0.27934s (num_starts 2; 0.1397s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 4e-06s (num_starts 5; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 4e-06s (num_starts 4; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 4e-06s (num_starts 5; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 6e-06s (num_starts 12; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 7e-06s (num_starts 5; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 9e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 9e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.: 9e-06s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.: 9e-06s (num_starts 1; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.1e-05s (num_starts 4; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.5e-05s (num_starts 5; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 1.6e-05s (num_starts 5; 0.0000s/start)
prune_dst_memslots.: 2.2e-05s (num_starts 4; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 3.3e-05s (num_starts 43; 0.0000s/start)
determinize_value_expr_map.: 3.6e-05s (num_starts 15; 0.0000s/start)
get_intersected_lr_status.: 3.8e-05s (num_starts 2; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 4.1e-05s (num_starts 5; 0.0000s/start)
lr_status_meet.: 5.6e-05s (num_starts 106; 0.0000s/start)
prove_trivial.: 5.7e-05s (num_starts 103; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 5.7e-05s (num_starts 3; 0.0000s/start)
remove_complex_bv_exprs.: 5.9e-05s (num_starts 4; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 7.6e-05s (num_starts 1; 0.0001s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 7.8e-05s (num_starts 3; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart.: 8.4e-05s (num_starts 2; 0.0000s/start)
sp_version_relations_val_t::meet.: 9.3e-05s (num_starts 182; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 9.7e-05s (num_starts 4; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000103s (num_starts 5; 0.0000s/start)
expr_is_hidden_reg.: 0.000105s (num_starts 143; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000107s (num_starts 30; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000116s (num_starts 130; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000121s (num_starts 10; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000122s (num_starts 10; 0.0000s/start)
expr_is_callee_save_const.: 0.000126s (num_starts 155; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000133s (num_starts 2; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.00014s (num_starts 3; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000142s (num_starts 5; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000179s (num_starts 10; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000188s (num_starts 2; 0.0001s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000196s (num_starts 4; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.0002s (num_starts 25; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000233s (num_starts 2; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.00025s (num_starts 15; 0.0000s/start)
compute_sprel_relations.: 0.000289s (num_starts 2; 0.0001s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000296s (num_starts 268; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000296s (num_starts 25; 0.0000s/start)
propagate_sprels.: 0.000298s (num_starts 2; 0.0001s/start)
pth_collect_preds_using_atom_func.: 0.000304s (num_starts 20; 0.0000s/start)
removeMostPromising.: 0.000308s (num_starts 16; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%2%fcallEnd_Lentry%2%fcallEnd.inductive-invariants.: 0.000315s (num_starts 2; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000316s (num_starts 1; 0.0003s/start)
tfg_edge_composition_get_assumes.: 0.000352s (num_starts 20; 0.0000s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.000354s (num_starts 10; 0.0000s/start)
collect_dst_to_src_submap_preds.: 0.000384s (num_starts 268; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000406s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000407s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000407s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000409s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000421s (num_starts 1; 0.0004s/start)
expr_represents_llvm_undef.: 0.000465s (num_starts 159; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000466s (num_starts 1; 0.0005s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.000476s (num_starts 10; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.000495s (num_starts 1; 0.0005s/start)
graph_locs_add_all_llvmvars.: 0.0005s (num_starts 2; 0.0003s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000549s (num_starts 20; 0.0000s/start)
populate_locid2expr_map.: 0.000559s (num_starts 2; 0.0003s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000561s (num_starts 1; 0.0006s/start)
graph_locs_add_all_specvars.: 0.000564s (num_starts 2; 0.0003s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.000622s (num_starts 11; 0.0001s/start)
populate_branch_affecting_locs.: 0.000642s (num_starts 3; 0.0002s/start)
aliasing_constraints.convert_to_expr.: 0.000681s (num_starts 165; 0.0000s/start)
compute_ssa_vars_renaming_map.: 0.000707s (num_starts 2; 0.0004s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000713s (num_starts 4; 0.0002s/start)
tfg::populate_loc_definedness.before_solve.: 0.000715s (num_starts 3; 0.0002s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000722s (num_starts 38; 0.0000s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000736s (num_starts 191; 0.0000s/start)
compute_bv_bool_eqclass.: 0.000747s (num_starts 4; 0.0002s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000756s (num_starts 151; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.00076s (num_starts 1; 0.0008s/start)
proof_query_is_trivial_helper.: 0.000778s (num_starts 268; 0.0000s/start)
graph_visit_exprs.: 0.000791s (num_starts 3; 0.0003s/start)
compute_vars_reaching_definitions.: 0.000809s (num_starts 2; 0.0004s/start)
create_closure_matrix.: 0.000858s (num_starts 27; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000875s (num_starts 208; 0.0000s/start)
tfg_suffixpath_get_expr_helper.: 0.000907s (num_starts 24; 0.0000s/start)
collect_assumes_around_edge.: 0.000911s (num_starts 5; 0.0002s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000917s (num_starts 165; 0.0000s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.000918s (num_starts 21; 0.0000s/start)
get_unrolled_loop_paths_from.: 0.000988s (num_starts 4; 0.0002s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000995s (num_starts 10; 0.0001s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.001013s (num_starts 20; 0.0001s/start)
graph_visit_exprs_and_keys.: 0.001038s (num_starts 2; 0.0005s/start)
tfg::populate_loc_definedness.before_initialize.: 0.001058s (num_starts 3; 0.0004s/start)
populate_transitive_closure.: 0.001064s (num_starts 17; 0.0001s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.001098s (num_starts 4; 0.0003s/start)
generate_aliasing_constraints_from_expr.: 0.001109s (num_starts 247; 0.0000s/start)
tfg::populate_loc_definedness.: 0.001134s (num_starts 3; 0.0004s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.001138s (num_starts 313; 0.0000s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.001191s (num_starts 5; 0.0002s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001292s (num_starts 10; 0.0001s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001342s (num_starts 10; 0.0001s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.001358s (num_starts 165; 0.0000s/start)
find_dominators.: 0.001534s (num_starts 29; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.001687s (num_starts 57; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001694s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001697s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001699s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001706s (num_starts 1; 0.0017s/start)
identify_address_taken_local_variables.: 0.001713s (num_starts 3; 0.0006s/start)
graph_identify_back_edges.: 0.001721s (num_starts 25; 0.0001s/start)
graph_identify_natural_loops.: 0.001779s (num_starts 25; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.001784s (num_starts 1; 0.0018s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001829s (num_starts 4; 0.0005s/start)
parse_yices_model.: 0.001848s (num_starts 1; 0.0018s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.002009s (num_starts 24; 0.0001s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.002079s (num_starts 24; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002219s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002222s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002225s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002232s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.002256s (num_starts 1; 0.0023s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.002259s (num_starts 197; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002264s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002269s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.002335s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00234s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.002343s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00235s (num_starts 1; 0.0024s/start)
proof_query_is_trivial.: 0.00241s (num_starts 268; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002563s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002564s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.00257s (num_starts 1; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.002574s (num_starts 1; 0.0026s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.002691s (num_starts 313; 0.0000s/start)
populate_locs_potentially_modified_on_edge.: 0.002771s (num_starts 3; 0.0009s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.002807s (num_starts 26; 0.0001s/start)
set_result_and_counter_example.: 0.002835s (num_starts 108; 0.0000s/start)
collect_aliasing_constraints_around_path_helper.: 0.002927s (num_starts 134; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.003076s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.003078s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.003082s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003087s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003089s (num_starts 1; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.003091s (num_starts 1; 0.0031s/start)
corr_graph_enumerate_correlations.: 0.003111s (num_starts 5; 0.0006s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.00339s (num_starts 4; 0.0008s/start)
do_ssa_transformation.: 0.003394s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.003422s (num_starts 29; 0.0001s/start)
graph_with_guessing_sync_preds.: 0.003542s (num_starts 268; 0.0000s/start)
collect_aliasing_constraints_around_path.: 0.003546s (num_starts 86; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.00364s (num_starts 183; 0.0000s/start)
check_node_stability_after_CE_addition.: 0.003684s (num_starts 161; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00386s (num_starts 1; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.003864s (num_starts 1; 0.0039s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.00393s (num_starts 165; 0.0000s/start)
compute_regions.: 0.004122s (num_starts 25; 0.0002s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.004534s (num_starts 151; 0.0000s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.004597s (num_starts 5; 0.0009s/start)
cg_src_dst_tfg_copy.: 0.004683s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.004821s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.004858s (num_starts 2; 0.0024s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.004983s (num_starts 2; 0.0025s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.005108s (num_starts 208; 0.0000s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.005193s (num_starts 20; 0.0003s/start)
get_next_potential_correlations.: 0.005446s (num_starts 5; 0.0011s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.006156s (num_starts 448; 0.0000s/start)
create_sp_version_relations_lattice_at_pc.: 0.006217s (num_starts 27; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006279s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006279s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.006284s (num_starts 1; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.006292s (num_starts 1; 0.0063s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.006895s (num_starts 8; 0.0009s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.007469s (num_starts 208; 0.0000s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.008251s (num_starts 156; 0.0001s/start)
construct_linear_combination_exprs.: 0.00842s (num_starts 381; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.: 0.008487s (num_starts 1; 0.0085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008598s (num_starts 1; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008599s (num_starts 1; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.008602s (num_starts 1; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.008609s (num_starts 1; 0.0086s/start)
get_unrolled_paths_from.: 0.008618s (num_starts 36; 0.0002s/start)
bv_expr_pair_ranges_merge_adjacent.: 0.008954s (num_starts 182; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009208s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009359s (num_starts 2; 0.0047s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.009401s (num_starts 2; 0.0047s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.009736s (num_starts 5; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.00974s (num_starts 5; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;outgoing_edges_cover_all_possibilities..: 0.009777s (num_starts 5; 0.0020s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.009789s (num_starts 5; 0.0020s/start)
populate_simplified_to_state.: 0.009911s (num_starts 3; 0.0033s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.010216s (num_starts 680; 0.0000s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.010293s (num_starts 20; 0.0005s/start)
populate_simplified_assets.: 0.010455s (num_starts 6; 0.0017s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.: 0.010703s (num_starts 1; 0.0107s/start)
expr_substitute_using_available_exprs_submap.: 0.011396s (num_starts 106; 0.0001s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.011493s (num_starts 680; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.011572s (num_starts 5; 0.0023s/start)
get_sprel_map_pair_at_pc.: 0.011822s (num_starts 165; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear;-trivial.: 0.011866s (num_starts 3; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.011885s (num_starts 3; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.012456s (num_starts 2; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.01249s (num_starts 2; 0.0062s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.01324s (num_starts 3; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear;-trivial.: 0.013902s (num_starts 3; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.01391s (num_starts 3; 0.0046s/start)
ldr_decomposition.: 0.014299s (num_starts 151; 0.0001s/start)
avail_exprs_create_submap.: 0.015126s (num_starts 60; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-trivial.: 0.015801s (num_starts 5; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.015807s (num_starts 5; 0.0032s/start)
get_mask_ranges_for_memlabel.: 0.016363s (num_starts 91; 0.0002s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.017287s (num_starts 20; 0.0009s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.017706s (num_starts 453; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.018096s (num_starts 9; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 0.018117s (num_starts 9; 0.0020s/start)
bv_const_ref_map2expr_map.: 0.018287s (num_starts 381; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.020237s (num_starts 448; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.020666s (num_starts 977; 0.0000s/start)
counter_example_satisfies_preds.: 0.021901s (num_starts 477; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.022371s (num_starts 151; 0.0001s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.023292s (num_starts 151; 0.0002s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.024513s (num_starts 656; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.025342s (num_starts 448; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.026308s (num_starts 957; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.026645s (num_starts 6; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-trivial.: 0.027332s (num_starts 10; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.028133s (num_starts 9; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 0.028187s (num_starts 9; 0.0031s/start)
pth_collect_simplified_preds_using_atom_func.: 0.028769s (num_starts 937; 0.0000s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.029494s (num_starts 5; 0.0059s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.032274s (num_starts 20; 0.0016s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.035745s (num_starts 2859; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.036659s (num_starts 1; 0.0367s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.036661s (num_starts 1; 0.0367s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-trivial.: 0.036665s (num_starts 1; 0.0367s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-trivial.: 0.036665s (num_starts 1; 0.0367s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.036708s (num_starts 1; 0.0367s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.036713s (num_starts 1; 0.0367s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.036717s (num_starts 1; 0.0367s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-trivial.: 0.03904s (num_starts 2; 0.0195s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.040682s (num_starts 15; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 0.040739s (num_starts 15; 0.0027s/start)
collect_assumes_around_path_helper.: 0.043721s (num_starts 313; 0.0001s/start)
graph_with_paths::collect_assumes_around_path.: 0.04455s (num_starts 313; 0.0001s/start)
predicate_canonicalized.: 0.044785s (num_starts 381; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.04519s (num_starts 3; 0.0151s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.045199s (num_starts 3; 0.0151s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.046958s (num_starts 4; 0.0117s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);-trivial.: 0.048628s (num_starts 5; 0.0097s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.048709s (num_starts 5; 0.0097s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.048724s (num_starts 5; 0.0097s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.049069s (num_starts 347; 0.0001s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.049967s (num_starts 347; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.05205s (num_starts 1; 0.0520s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.052054s (num_starts 1; 0.0521s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-trivial.: 0.052562s (num_starts 1; 0.0526s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.052565s (num_starts 1; 0.0526s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.052569s (num_starts 1; 0.0526s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.054362s (num_starts 15; 0.0036s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-trivial.: 0.055123s (num_starts 2; 0.0276s/start)
gen_pred_from_coeff_row.simplify.: 0.057339s (num_starts 381; 0.0002s/start)
query:convert_from_z3.: 0.05772s (num_starts 900; 0.0001s/start)
tfg_relax_pointsto_vals_on_edge.: 0.059051s (num_starts 10; 0.0059s/start)
populate_loc_liveness.: 0.05948s (num_starts 3; 0.0198s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-trivial.: 0.060538s (num_starts 8; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown;-trivial.: 0.063898s (num_starts 2; 0.0319s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.063901s (num_starts 2; 0.0320s/start)
ldr_decompose_and_linear_solve.: 0.064626s (num_starts 151; 0.0004s/start)
bv_linear_solve.: 0.069799s (num_starts 151; 0.0005s/start)
query:bv_solve.: 0.070643s (num_starts 151; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.0731s (num_starts 2; 0.0365s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.074573s (num_starts 3; 0.0249s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.074584s (num_starts 3; 0.0249s/start)
compute_expr_eqclasses_at_pc.: 0.075221s (num_starts 4; 0.0188s/start)
tfg_postprocess_after_pointsto_analysis.: 0.076071s (num_starts 2; 0.0380s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.076466s (num_starts 1; 0.0765s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.076718s (num_starts 6; 0.0128s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-trivial.: 0.076816s (num_starts 4; 0.0192s/start)
cg_add_node.: 0.077093s (num_starts 6; 0.0128s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);-trivial.: 0.079032s (num_starts 5; 0.0158s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.079494s (num_starts 5; 0.0159s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.079513s (num_starts 5; 0.0159s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085589s (num_starts 1; 0.0856s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085613s (num_starts 1; 0.0856s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.085622s (num_starts 1; 0.0856s/start)
create_new_corr_graph_edge.new_node.: 0.086735s (num_starts 5; 0.0173s/start)
create_new_corr_graph_edge.: 0.088479s (num_starts 5; 0.0177s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.08876s (num_starts 2; 0.0444s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.088765s (num_starts 2; 0.0444s/start)
bv_solve_returning_intermediate_structures.: 0.090771s (num_starts 151; 0.0006s/start)
query:convert_to_z3.: 0.091208s (num_starts 900; 0.0001s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.091344s (num_starts 165; 0.0006s/start)
graph_ec_apply_trans_funs_helper.0.: 0.092639s (num_starts 720; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-trivial.: 0.093371s (num_starts 8; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;abstract-memlabel-asserts-houdini-guess.: 0.094859s (num_starts 4; 0.0237s/start)
graph_ec_apply_trans_funs_helper.: 0.095617s (num_starts 730; 0.0001s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.097121s (num_starts 730; 0.0001s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.099142s (num_starts 730; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.099801s (num_starts 1; 0.0998s/start)
computeWP_for_pred_across_ec.: 0.1009s (num_starts 730; 0.0001s/start)
bvsolve_cache_query.miss1.: 0.104691s (num_starts 151; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.106565s (num_starts 1; 0.1066s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.106583s (num_starts 1; 0.1066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10659s (num_starts 1; 0.1066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.106603s (num_starts 1; 0.1066s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;-dst-edgecond-implies-src-edgecond.: 0.10661s (num_starts 1; 0.1066s/start)
bvsolve_cache_query.: 0.109698s (num_starts 151; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 0.111411s (num_starts 6; 0.0186s/start)
edge_composition_apply_trans_funs_on_pred.: 0.119925s (num_starts 268; 0.0004s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.121787s (num_starts 347; 0.0004s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.132184s (num_starts 1; 0.1322s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13219s (num_starts 1; 0.1322s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.132204s (num_starts 1; 0.1322s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.133731s (num_starts 1; 0.1337s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.133744s (num_starts 1; 0.1337s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.133753s (num_starts 1; 0.1338s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);-trivial.: 0.136973s (num_starts 4; 0.0342s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-trivial.: 0.136982s (num_starts 4; 0.0342s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-trivial.: 0.139755s (num_starts 15; 0.0093s/start)
gen_pred_from_coeff_row.: 0.140455s (num_starts 381; 0.0004s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%1%fcallEnd_Lentry%1%fcallEnd.inductive-invariants.: 0.142178s (num_starts 27; 0.0053s/start)
compute_lr_status_for_expr.: 0.142994s (num_starts 109; 0.0013s/start)
compute_preds_for_bv_points.: 0.143171s (num_starts 63; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.143346s (num_starts 2; 0.0717s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.143412s (num_starts 106; 0.0014s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.143475s (num_starts 67; 0.0021s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.143593s (num_starts 106; 0.0014s/start)
check_wfconds_on_edge.L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart.: 0.14433s (num_starts 2; 0.0722s/start)
solve_for_bv_points.: 0.149524s (num_starts 151; 0.0010s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.158545s (num_starts 165; 0.0010s/start)
counter_example_falsifies_preds.: 0.160407s (num_starts 116; 0.0014s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.175586s (num_starts 10; 0.0176s/start)
counter_example_evaluate_preds.: 0.180933s (num_starts 593; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.181287s (num_starts 26; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181469s (num_starts 2; 0.0907s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181499s (num_starts 2; 0.0907s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.181515s (num_starts 2; 0.0908s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.182017s (num_starts 35; 0.0052s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.18215s (num_starts 151; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.1848s (num_starts 2; 0.0924s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d);pred-type-unknown.: 0.184829s (num_starts 2; 0.0924s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d).: 0.184839s (num_starts 2; 0.0924s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.185516s (num_starts 2; 0.0928s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.185555s (num_starts 2; 0.0928s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.185824s (num_starts 2; 0.0929s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.185844s (num_starts 2; 0.0929s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.187363s (num_starts 3; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.193432s (num_starts 5; 0.0387s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;linear.: 0.193452s (num_starts 5; 0.0387s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.193798s (num_starts 2; 0.0969s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.: 0.194434s (num_starts 1; 0.1944s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.195983s (num_starts 10; 0.0196s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.199673s (num_starts 1; 0.1997s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.19968s (num_starts 1; 0.1997s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.19968s (num_starts 1; 0.1997s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.199693s (num_starts 1; 0.1997s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;false-predicate.: 0.199697s (num_starts 1; 0.1997s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);false-predicate.: 0.199702s (num_starts 1; 0.1997s/start)
query:simplify-z3.: 0.199992s (num_starts 1993; 0.0001s/start)
compute_new_lr_status_on_locs.: 0.200123s (num_starts 20; 0.0100s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.202509s (num_starts 604; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210666s (num_starts 2; 0.1053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21071s (num_starts 2; 0.1054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210993s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210998s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.211001s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.211012s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;dst_edge_composition_proves_false.: 0.211016s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.211022s (num_starts 1; 0.2110s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.212197s (num_starts 2; 0.1061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21223s (num_starts 2; 0.1061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.212246s (num_starts 2; 0.1061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.212992s (num_starts 3; 0.0710s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond.: 0.222552s (num_starts 3; 0.0742s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.226197s (num_starts 5; 0.0452s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;linear.: 0.226217s (num_starts 5; 0.0452s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.: 0.227152s (num_starts 1; 0.2272s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.227589s (num_starts 1; 0.2276s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.227599s (num_starts 1; 0.2276s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.22761s (num_starts 1; 0.2276s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;abstract-memlabel-asserts-houdini-guess.: 0.227614s (num_starts 1; 0.2276s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228321s (num_starts 1; 0.2283s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228325s (num_starts 1; 0.2283s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.228328s (num_starts 1; 0.2283s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.22834s (num_starts 1; 0.2283s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;false-predicate.: 0.228343s (num_starts 1; 0.2283s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);false-predicate.: 0.228349s (num_starts 1; 0.2283s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.228513s (num_starts 1; 0.2285s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);pred-type-unknown.: 0.232611s (num_starts 6; 0.0388s/start)
check_wfconds_on_edge.L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd.: 0.235017s (num_starts 2; 0.1175s/start)
get_masked_array_constant.: 0.23615s (num_starts 91; 0.0026s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24031s (num_starts 2; 0.1202s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);linear.: 0.24224s (num_starts 10; 0.0242s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.246794s (num_starts 1; 0.2468s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.246803s (num_starts 1; 0.2468s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.246805s (num_starts 1; 0.2468s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.24682s (num_starts 1; 0.2468s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;false-predicate.: 0.246824s (num_starts 1; 0.2468s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);false-predicate.: 0.246829s (num_starts 1; 0.2468s/start)
evaluate_memmask.: 0.257233s (num_starts 91; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 0.266926s (num_starts 4; 0.0667s/start)
ftmap_run_pointsto_analysis.: 0.27934s (num_starts 2; 0.1397s/start)
tfg_run_pointsto_analysis.: 0.279537s (num_starts 2; 0.1398s/start)
tfg_populate_structs_after_ssa_construction.: 0.283687s (num_starts 2; 0.1418s/start)
lhs_set_sort.: 0.285262s (num_starts 165; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);pred-type-unknown.: 0.287626s (num_starts 6; 0.0479s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.288307s (num_starts 2; 0.1442s/start)
check_wfconds_on_edge.L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd.: 0.289808s (num_starts 2; 0.1449s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%2%fcallStart_Lentry%2%fcallStart.inductive-invariants.: 0.304436s (num_starts 32; 0.0095s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);linear.: 0.305806s (num_starts 10; 0.0306s/start)
put_smtlib_string_in_file.: 0.306361s (num_starts 216; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.313123s (num_starts 2; 0.1566s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.313137s (num_starts 2; 0.1566s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.313258s (num_starts 2; 0.1566s/start)
corr_graph::add_edge().: 0.320251s (num_starts 5; 0.0641s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.325965s (num_starts 3; 0.1087s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.329176s (num_starts 4; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown;-trivial.: 0.33224s (num_starts 42; 0.0079s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.339981s (num_starts 8; 0.0425s/start)
evaluate_function_call.: 0.365313s (num_starts 91; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.365336s (num_starts 4; 0.0913s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 0.365375s (num_starts 4; 0.0913s/start)
check_wfconds_on_edge.L4%2%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d.: 0.373155s (num_starts 2; 0.1866s/start)
add_fresh_counterexample_at_pc_and_propagate.L4%1%fcallStart_Lentry%1%fcallStart.inductive-invariants.: 0.375436s (num_starts 34; 0.0110s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.387124s (num_starts 1; 0.3871s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.387126s (num_starts 1; 0.3871s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.387135s (num_starts 1; 0.3871s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.393281s (num_starts 151; 0.0026s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.396485s (num_starts 3; 0.1322s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 0.399072s (num_starts 1; 0.3991s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.409915s (num_starts 5; 0.0820s/start)
corr_graph_add_correlation.: 0.410094s (num_starts 5; 0.0820s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.410178s (num_starts 5; 0.0820s/start)
output_lhs_set_guard_etc_and_src_dst_to_file.: 0.422834s (num_starts 39; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.423811s (num_starts 2; 0.2119s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;false-predicate.: 0.423823s (num_starts 2; 0.2119s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);false-predicate.: 0.423846s (num_starts 2; 0.2119s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.425208s (num_starts 1; 0.4252s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.425212s (num_starts 1; 0.4252s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.425214s (num_starts 1; 0.4252s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.425229s (num_starts 1; 0.4252s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;dst_edge_composition_proves_false.: 0.425233s (num_starts 1; 0.4252s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.42524s (num_starts 1; 0.4252s/start)
prove_dump_to_file.: 0.444296s (num_starts 39; 0.0114s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(epsilon).: 0.445364s (num_starts 8; 0.0557s/start)
graph_to_stream.: 0.451292s (num_starts 121; 0.0037s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.452017s (num_starts 1; 0.4520s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.452018s (num_starts 1; 0.4520s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.452022s (num_starts 1; 0.4520s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.452024s (num_starts 1; 0.4520s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.452035s (num_starts 1; 0.4520s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar;dst_edge_composition_proves_false.: 0.452037s (num_starts 1; 0.4520s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.452041s (num_starts 1; 0.4520s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.45247s (num_starts 2; 0.2262s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.465107s (num_starts 5; 0.0930s/start)
collect_inductive_preds_around_path.: 0.484772s (num_starts 268; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.50135s (num_starts 23; 0.0218s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-trivial.: 0.503099s (num_starts 24; 0.0210s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-trivial.: 0.51782s (num_starts 19; 0.0273s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.517849s (num_starts 19; 0.0273s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.519099s (num_starts 1; 0.5191s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.519112s (num_starts 1; 0.5191s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.519118s (num_starts 1; 0.5191s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.519142s (num_starts 1; 0.5191s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;dst_edge_composition_proves_false.: 0.519147s (num_starts 1; 0.5191s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.519154s (num_starts 1; 0.5192s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-trivial.: 0.519313s (num_starts 32; 0.0162s/start)
guarded_predicate_set_and.: 0.524604s (num_starts 165; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-trivial.: 0.545854s (num_starts 28; 0.0195s/start)
counter_example_translate_on_edge_composition_helper.: 0.549997s (num_starts 770; 0.0007s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.552003s (num_starts 455; 0.0012s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.558924s (num_starts 2; 0.2795s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);-trivial.: 0.589149s (num_starts 42; 0.0140s/start)
apply_mask_and_overlay_array_constant.: 0.599644s (num_starts 455; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;linear.: 0.60508s (num_starts 20; 0.0303s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallEnd_Lentry%2%fcallEnd;(epsilon).: 0.614189s (num_starts 4; 0.1535s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);-trivial.: 0.614596s (num_starts 41; 0.0150s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1.E1;pred-type-unknown.: 0.658662s (num_starts 45; 0.0146s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.672008s (num_starts 1; 0.6720s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.672017s (num_starts 1; 0.6720s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.672019s (num_starts 1; 0.6720s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.672033s (num_starts 1; 0.6720s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;dst_edge_composition_proves_false.: 0.672037s (num_starts 1; 0.6720s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 0.672043s (num_starts 1; 0.6720s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.729746s (num_starts 3; 0.2432s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.77856s (num_starts 2; 0.3893s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(epsilon).: 0.80904s (num_starts 8; 0.1011s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(epsilon).: 0.817754s (num_starts 4; 0.2044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.905624s (num_starts 33; 0.0274s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-trivial.: 0.907828s (num_starts 34; 0.0267s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-trivial.: 0.946059s (num_starts 48; 0.0197s/start)
add_fresh_counterexample_at_pc_and_propagate.: 1.00529s (num_starts 130; 0.0077s/start)
decide_hoare_triple_with_alias_cons.ce.: 1.00803s (num_starts 184; 0.0055s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.02975s (num_starts 165; 0.0062s/start)
check_wfconds_on_edge.: 1.04249s (num_starts 10; 0.1042s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);-trivial.: 1.05182s (num_starts 58; 0.0181s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.06193s (num_starts 4; 0.2655s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 1.09871s (num_starts 5; 0.2197s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.14023s (num_starts 165; 0.0069s/start)
check_equivalence_proof.: 1.39294s (num_starts 1; 1.3929s/start)
compute_z3_expr.: 1.78794s (num_starts 1008; 0.0018s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.8857s (num_starts 733; 0.0026s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 2.10487s (num_starts 79; 0.0266s/start)
check_preds_on_edge_compositions.: 2.12006s (num_starts 15; 0.1413s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.27935s (num_starts 5; 0.4559s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 2.27949s (num_starts 5; 0.4559s/start)
decide_hoare_triple.: 2.29227s (num_starts 10; 0.2292s/start)
dst_edge_composition_proves_false.: 2.31218s (num_starts 5; 0.4624s/start)
get_next_dst_edge_composition_to_correlate.: 2.3189s (num_starts 6; 0.3865s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 2.32472s (num_starts 121; 0.0192s/start)
decide_hoare_triple_helper;-trivial.: 2.67422s (num_starts 161; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.98217s (num_starts 8; 0.3728s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.9822s (num_starts 8; 0.3728s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 2.99817s (num_starts 13; 0.2306s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;linear.: 2.9982s (num_starts 13; 0.2306s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.08189s (num_starts 9; 0.3424s/start)
invariant_inference_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 3.08444s (num_starts 1; 3.0844s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);linear.: 3.10972s (num_starts 19; 0.1637s/start)
parse_z3_model.: 3.51282s (num_starts 95; 0.0370s/start)
read_counter_examples_from_channel.: 3.53908s (num_starts 58; 0.0610s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.02019s (num_starts 15; 0.2680s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.02023s (num_starts 15; 0.2680s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 4.02041s (num_starts 15; 0.2680s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;linear.: 4.02046s (num_starts 15; 0.2680s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 4.15738s (num_starts 1; 4.1574s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.38538s (num_starts 19; 0.2308s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);linear.: 4.38601s (num_starts 19; 0.2308s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.86107s (num_starts 32; 0.2457s/start)
decide_hoare_triple_helper;per-query-type;linear.: 8.0436s (num_starts 58; 0.1387s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 12.0863s (num_starts 8; 1.5108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 12.0863s (num_starts 8; 1.5108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 12.1503s (num_starts 10; 1.2150s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1;pred-type-unknown.: 12.1504s (num_starts 10; 1.2150s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 12.28s (num_starts 10; 1.2280s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 12.4107s (num_starts 1; 12.4107s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);pred-type-unknown.: 12.4174s (num_starts 14; 0.8870s/start)
decide_hoare_triple_dump_to_file.: 14.179s (num_starts 39; 0.3636s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 17.1781s (num_starts 32; 0.5368s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L4%1%fcallStart_Lentry%1%fcallStart).: 17.3165s (num_starts 36; 0.4810s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 20.5008s (num_starts 7; 2.9287s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 20.5009s (num_starts 7; 2.9287s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 20.6864s (num_starts 9; 2.2985s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 20.9106s (num_starts 10; 2.0911s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 21.0025s (num_starts 30; 0.7001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd);pred-type-unknown.: 21.0209s (num_starts 39; 0.5390s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1;pred-type-unknown.: 21.1899s (num_starts 33; 0.6421s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallStart_Lentry%1%fcallStart;(L4%1%fcallStart_Lentry%1%fcallStart=>L4%1%fcallEnd_Lentry%1%fcallEnd).: 21.501s (num_starts 52; 0.4135s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.: 21.6165s (num_starts 1; 21.6165s/start)
ce_reconcile_sorts.: 29.4389s (num_starts 96; 0.3067s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 59.9836s (num_starts 20; 2.9992s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 59.9839s (num_starts 20; 2.9992s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 60.1944s (num_starts 22; 2.7361s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 60.4424s (num_starts 23; 2.6279s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1.D1;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 68.6243s (num_starts 53; 1.2948s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd);pred-type-unknown.: 68.6655s (num_starts 68; 1.0098s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1.D1;pred-type-unknown.: 68.8375s (num_starts 56; 1.2292s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.: 69.1914s (num_starts 1; 69.1914s/start)
decide_hoare_triple_helper;per-path;L4%2%fcallStart_Lentry%2%fcallStart;(L4%2%fcallStart_Lentry%2%fcallStart=>L4%2%fcallEnd_Lentry%2%fcallEnd).: 69.2308s (num_starts 81; 0.8547s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 84.4216s (num_starts 20; 4.2211s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 84.4218s (num_starts 20; 4.2211s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 84.4218s (num_starts 20; 4.2211s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 87.8904s (num_starts 30; 2.9297s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;bar.A1.B1.C1;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 91.385s (num_starts 39; 2.3432s/start)
decide_hoare_triple_helper;per-graph-per-query-type;bar.A1.B1.C1;pred-type-unknown.: 91.3851s (num_starts 39; 2.3432s/start)
decide_hoare_triple_helper;per-path-and-query-type;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart);pred-type-unknown.: 91.4135s (num_starts 48; 1.9044s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.: 91.4912s (num_starts 1; 91.4912s/start)
decide_hoare_triple_helper;per-path;L4%1%fcallEnd_Lentry%1%fcallEnd;(L4%1%fcallEnd_Lentry%1%fcallEnd=>L4%2%fcallStart_Lentry%2%fcallStart).: 94.9521s (num_starts 71; 1.3374s/start)
query:smt.: 148.699s (num_starts 108; 1.3768s/start)
spawn_smt_query.: 152.239s (num_starts 108; 1.4096s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 177.715s (num_starts 62; 2.8664s/start)
solver_provable.: 184.006s (num_starts 165; 1.1152s/start)
solver_satisfiable-cache-miss.: 184.077s (num_starts 108; 1.7044s/start)
solver_satisfiable.: 184.08s (num_starts 166; 1.1089s/start)
expr_is_provable.: 184.262s (num_starts 165; 1.1167s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 184.266s (num_starts 165; 1.1168s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 184.274s (num_starts 165; 1.1168s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 184.278s (num_starts 165; 1.1168s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 184.816s (num_starts 165; 1.1201s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 184.827s (num_starts 165; 1.1202s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 184.829s (num_starts 165; 1.1202s/start)
is_expr_equal_using_lhs_set_and_precond.: 188.691s (num_starts 165; 1.1436s/start)
prove.: 188.693s (num_starts 165; 1.1436s/start)
prove_spawn_and_join_helper.: 188.693s (num_starts 165; 1.1436s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 189.474s (num_starts 107; 1.7708s/start)
prove_spawn_and_join.: 190.66s (num_starts 165; 1.1555s/start)
prove_wrapper.proof_query_not_trivial.: 191.129s (num_starts 165; 1.1584s/start)
prove_wrapper.: 191.453s (num_starts 268; 0.7144s/start)
decide_hoare_triple_check_ub.: 191.588s (num_starts 268; 0.7149s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 194.222s (num_starts 183; 1.0613s/start)
update_invariant_state_for_edges.: 203.833s (num_starts 5; 40.7666s/start)
cg_check_new_cg_ec.: 203.833s (num_starts 5; 40.7666s/start)
correl_entry_apply.: 203.833s (num_starts 5; 40.7667s/start)
expandProductCFG.: 206.158s (num_starts 6; 34.3597s/start)
decide_hoare_triple_helper.: 206.338s (num_starts 268; 0.7699s/start)
bestFirstSearch.: 206.673s (num_starts 1; 206.6731s/start)
decide_hoare_triple_with_alias_cons.: 207.349s (num_starts 268; 0.7737s/start)
Time taken for equivalence check.: 208.132s (num_starts 1; 208.1318s/start)

counters:
# of assume sat failures for cg-edge-assume-unknown.: 24
# of paths enumerated.: 5
# of paths expanded.: 5
# of queries to linear solver.: 151
# of smt-solver-queries.: 108
L0%0%d=>Lentry%1%fcallStart-src_ecs.: 1
L0%0%d=>Lentry%1%fcallStart-src_to_pcs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_ecs.: 1
Lentry%1%fcallEnd=>Lentry%2%fcallStart-src_to_pcs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_ecs.: 1
Lentry%1%fcallStart=>Lentry%1%fcallEnd-src_to_pcs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_ecs.: 1
Lentry%2%fcallEnd=>E0%0%d-src_to_pcs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_ecs.: 1
Lentry%2%fcallStart=>Lentry%2%fcallEnd-src_to_pcs.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 12
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 15
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 8
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 8
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 2
smallest_point_cover_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 2
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 8
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 11
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.iters.: 32
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallEnd_Lentry%1%fcallEnd.prove_queries.: 31
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.iters.: 23
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%1%fcallStart_Lentry%1%fcallStart.prove_queries.: 22
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.iters.: 40
smallest_point_cover_xfer.spec-coupling-invariants.from.L4%2%fcallStart_Lentry%2%fcallStart.prove_queries.: 39
smt-queries-cache-hits.: 58
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 95
total-correlation-possibilities.: 6
total-correlation-possibilities-mod-lsprels.: 6
total-correlations-explored.: 6

flags:
dst-aloc.: 0
dst-edges.: 5
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L4%1%fcallEnd_Lentry%1%fcallEnd.: 0
final-CG-counterexamples-generated-at-L4%1%fcallStart_Lentry%1%fcallStart.: 15
final-CG-counterexamples-generated-at-L4%2%fcallEnd_Lentry%2%fcallEnd.: 3
final-CG-counterexamples-generated-at-L4%2%fcallStart_Lentry%2%fcallStart.: 9
final-CG-counterexamples-total-at-L4%1%fcallEnd_Lentry%1%fcallEnd.: 12
final-CG-counterexamples-total-at-L4%1%fcallStart_Lentry%1%fcallStart.: 18
final-CG-counterexamples-total-at-L4%2%fcallEnd_Lentry%2%fcallEnd.: 12
final-CG-counterexamples-total-at-L4%2%fcallStart_Lentry%2%fcallStart.: 11
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 6
final-CG-num-invariants.: 61
final-CG-super-edges.: 0
src-edges.: 5
src-nodes.: 6
timeout-occured.: 1

info:
eq-state.: find_correlation
final-CG-time-secs.: 204.24
final-CG-time-to-total-time-ratio.: 0.99
query-time-to-total-time-ratio.: 0.72

Context stats:
exprs: count: 270803
sorts: count: 169
num_proof_queries: 165
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	15482
	        hit ratio:	0.97397
m_simplify_solver:
	----------- total:	5664
	        hit ratio:	0.807027
m_z3_solver_substitution:
	----------- total:	1093
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1093
	        hit ratio:	0
m_expr_size:
	----------- total:	13271
	        hit ratio:	0.907844
m_expr_evaluates_to_constant_visitor:
	----------- total:	278581
	        hit ratio:	0.45306

z3_solver expr_query_cache entry size: 108
	----------- total:	166
	             hits:	58
	        hit ratio:	0.349398
histogram (time taken by solver in ms):
[  35.0520,   57.6139) (avg.   43.3386)  : 27
[  57.6139,   94.6981) (avg.   85.1286)  : 7
[  94.6981,  155.6522) (avg.  123.7687)  : 19
[ 155.6522,  255.8405) (avg.  182.8858)  : 5
[ 255.8405,  420.5169) (avg.  316.5261)  : 14
[ 420.5169,  691.1902) (avg.  534.1730)  : 5
[ 691.1902, 1136.0873) (avg.  910.0340)  : 3
[1136.0873, 1867.3505) (avg. 1191.5390)  : 1
[1867.3505, 3069.3045) (avg. 2320.1940)  : 1
[3069.3045, 5044.9180) (avg. 5012.3514)  : 26
histogram (number of quantifiers in query)
[ 0,  6) (avg.  0)                       : 1
[ 6, 11) (avg.  0)                       : 0
[11, 17) (avg.  0)                       : 0
[17, 22) (avg.  0)                       : 0
[22, 28) (avg. 25)                       : 45
[28, 33) (avg. 28)                       : 1
[33, 39) (avg. 36)                       : 58
[39, 44) (avg.  0)                       : 0
[44, 50) (avg. 45)                       : 3
[50, 55) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[176, 226) (avg. 176)                    : 1
[226, 276) (avg.   0)                    : 0
[276, 326) (avg.   0)                    : 0
[326, 376) (avg.   0)                    : 0
[376, 426) (avg.   0)                    : 0
[426, 476) (avg. 459)                    : 32
[476, 526) (avg. 485)                    : 14
[526, 576) (avg. 560)                    : 44
[576, 626) (avg. 601)                    : 14
[626, 675) (avg. 655)                    : 3
Top 10 highest time taking queries:
1. [5.044s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.38
2. [5.043s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.31
3. [5.042s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.0
4. [5.041s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.5
5. [5.041s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.33
6. [5.040s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.12
7. [5.040s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.2
8. [5.039s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.8
9. [5.038s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%1%fcallEnd_Lentry%1%fcallEnd.cond_apply_set_elem0_of_1.37
10. [5.038s] SOLVER_RES_TIMEOUT decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL4%2%fcallStart_Lentry%2%fcallStart.cond_apply_set_elem0_of_1.10

<MSG>3:50 : Successfully computed equivalence for function: bar.</MSG>
<MSG>3:50 : Computing equivalence for function: foo...</MSG>
<MSG>3:50 : Constructing SSA for SPEC TFG...</MSG>
<MSG>3:50 : Constructing SSA for LLVM TFG...</MSG>
<MSG>3:51 : Finished SSA construction for both TFGs...</MSG>
<MSG>3:51 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>3:51 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>3:51 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Attempting correlation of src pathset L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Attempting correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Considering 1 paths to src pc L3%18%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Attempting correlation of src pathset L0%0%d=>L3%18%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Found 1 feasible correlations for paths to src pc L3%18%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Considering 1 paths to src pc L3%21%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Attempting correlation of src pathset L0%0%d=>L3%21%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : Found 1 feasible correlations for paths to src pc L3%21%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : product-TFG foo: Found 4 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>3:51 : product-TFG foo created 4 possibilities in group foo.A...</MSG>
<MSG>3:51 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:51 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>3:51 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>3:51 : Creating ssa-path for the src-tfg path L0%0%d --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:51 : Adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:51 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>3:51 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:51 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Adding node L3%7%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>3:51 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Adding edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:51 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:51 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:51 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>3:51 : foo.A1: Added the 2 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>3:51 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:51 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>3:51 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : Done adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:51 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>3:51 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>3:51 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:51 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:51 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:51 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:51 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>3:51 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:51 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:51 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:51 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:55 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht19-prove_trivial4-prove15...</MSG>
<MSG>3:55 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:55 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:55 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:55 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:55 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:56 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:56 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>3:57 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>3:57 : foo.A1 (d:1, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>3:57 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>3:57 : Chosen product-TFG foo.A1 will be explored later...</MSG>
<MSG>3:57 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>3:57 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:57 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>3:57 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>3:57 : Creating ssa-path for the src-tfg path L0%0%d --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:57 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:57 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:57 : foo.A2: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:57 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:57 : foo.A2: Adding node L3%10%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>3:57 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:57 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:57 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:57 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:57 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:57 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:57 : foo.A2: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140278 : 1 { 0x1 } : BOOL                          : true
168429 : not(140278) : BOOL                        : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140304 : input.spec-%var-n-2 : BV:32               : 0
140753 : bvuge(140290, 140304) : BOOL              : true
168410 : not(140753) : BOOL                        : false
168430 : or(168429, 168410) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1299 f18a3cb14acd06a82f185ee4e7bdf25
=input.spec-%var-mat-2
1 : Lambda41805Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41806Var : BV:32
11 : Lambda41807Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41808Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda41839Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41840Var : BV:32
11 : Lambda41841Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41842Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 268743743 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 268743744; 268743747 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 268743748; 285520911 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 285520912; 285520915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 285520916; 2600593539 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2600593540; 2600593543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2600593544; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2600593540 { 0x9b01e884 -1694373756 -1.1490831e183 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 285520912 { 0x1104b410 +1.3674507e163 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 268743744 { 0x1004b440 +1.3675079e161 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2600593540 { 0x9b01e884 -1694373756 -1.1490831e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2600593543 { 0x9b01e887 -1694373753 -1.1490867e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 285520912 { 0x1104b410 +1.3674507e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 285520915 { 0x1104b413 +1.3674542e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 268743744 { 0x1004b440 +1.3675079e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 268743747 { 0x1004b443 +1.3675115e161 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda41822Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41823Var : BV:32
11 : Lambda41824Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41825Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1646469985
=counter_example_end


failcond-expr = or(not(true), not(bvuge(0, input.spec-%var-n-2))):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-n-2 : BV:32
5 : bvuge(3, 4) : BOOL
6 : not(5) : BOOL
7 : or(2, 6) : BOOL
</MSG>
<MSG>3:57 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:57 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>3:57 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:57 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:57 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:57 : Done adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>3:57 : Failed correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140278 : 1 { 0x1 } : BOOL                          : true
168429 : not(140278) : BOOL                        : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140304 : input.spec-%var-n-2 : BV:32               : 0
140753 : bvuge(140290, 140304) : BOOL              : true
168410 : not(140753) : BOOL                        : false
168430 : or(168429, 168410) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1299 f18a3cb14acd06a82f185ee4e7bdf25
=input.spec-%var-mat-2
1 : Lambda41805Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41806Var : BV:32
11 : Lambda41807Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41808Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda41839Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41840Var : BV:32
11 : Lambda41841Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41842Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 268743743 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 268743744; 268743747 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 268743748; 285520911 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 285520912; 285520915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 285520916; 2600593539 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 2600593540; 2600593543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2600593544; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2600593540 { 0x9b01e884 -1694373756 -1.1490831e183 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 285520912 { 0x1104b410 +1.3674507e163 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 268743744 { 0x1004b440 +1.3675079e161 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2600593540 { 0x9b01e884 -1694373756 -1.1490831e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2600593543 { 0x9b01e887 -1694373753 -1.1490867e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 285520912 { 0x1104b410 +1.3674507e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 285520915 { 0x1104b413 +1.3674542e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 268743744 { 0x1004b440 +1.3675079e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 268743747 { 0x1004b443 +1.3675115e161 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda41822Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda41823Var : BV:32
11 : Lambda41824Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda41825Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1646469985
=counter_example_end


</MSG>
<MSG>3:57 : Discovered that the correlation was useless for the product-TFG foo.A2 (d:0, s:0, sp: 0)...</MSG>
<MSG>3:57 : Chose (after CE propagation) product-TFG foo.A1 (d:1, s:0, sp: 5) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>3:57 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:57 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:57 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:57 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:57 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 12 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial4-prove5...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>3:57 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:57 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>3:57 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:57 : foo.A1 (d:1, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>3:57 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:57 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Considering 2 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Found 2 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Attempting correlation of src pathset L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Considering 1 paths to src pc L3%18%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Attempting correlation of src pathset L3%7%bbentry=>L3%18%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Found 1 feasible correlations for paths to src pc L3%18%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Considering 1 paths to src pc L3%21%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Attempting correlation of src pathset L3%7%bbentry=>L3%21%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : Found 1 feasible correlations for paths to src pc L3%21%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : product-TFG foo.A1: Found 5 correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:57 : product-TFG foo.A1 created 5 possibilities in group foo.A1.B...</MSG>
<MSG>3:57 : Chose (for CE propagation) product-TFG foo.A1.B3 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:57 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3...</MSG>
<MSG>3:57 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3...</MSG>
<MSG>3:57 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>3:57 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>3:57 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>3:57 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>3:57 : Adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>3:57 : foo.A1.B3: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:57 : foo.A1.B3: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:57 : foo.A1.B3: Adding node L3%10%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>3:57 : foo.A1.B3: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:57 : foo.A1.B3: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:57 : foo.A1.B3: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:57 : foo.A1.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:57 : foo.A1.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:57 : foo.A1.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:57 : foo.A1.B3: Propagated 5 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>3:57 : foo.A1.B3: Added the 5 propagated CEs at PC L3%10%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>3:57 : foo.A1.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:57 : foo.A1.B3: Finished executing CG's add edge function...</MSG>
<MSG>3:57 : foo.A1.B3: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:57 : foo.A1.B3: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:57 : Done adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>3:57 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>3:57 : Added correlation to the product-TFG foo.A1.B3 (d:1, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>3:57 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 3 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>3:57 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:57 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>3:57 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>3:57 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>3:57 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>3:58 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>3:58 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>3:58 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:58 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:00 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht19-prove_trivial10-prove9...</MSG>
<MSG>4:00 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:00 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:00 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:00 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:00 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:00 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:00 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:01 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:01 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:01 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:01 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:01 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:01 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:01 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:01 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:01 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:01 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:04 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht11-prove_trivial2-prove9...</MSG>
<MSG>4:04 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:04 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:04 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:04 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:04 : foo.A1.B3 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:04 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:04 : Chosen product-TFG foo.A1.B3 will be explored later...</MSG>
<MSG>4:04 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:04 : Chose (for CE propagation) product-TFG foo.A1.B4 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%18%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:04 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4...</MSG>
<MSG>4:04 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4...</MSG>
<MSG>4:04 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%18%bbentry ending at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:04 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%18%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B4: Computing loop hoisting select expressions at toPC L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B4: Computing loop hoisting non-linear expressions at toPC L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B4: Adding node L3%18%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:04 : foo.A1.B4: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B4: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B4: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:04 : foo.A1.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:04 : foo.A1.B4: Propagated 5 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : foo.A1.B4: Added the 5 propagated CEs at PC L3%18%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:04 : foo.A1.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:04 : foo.A1.B4: Finished executing CG's add edge function...</MSG>
<MSG>4:04 : foo.A1.B4: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B4: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%18%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%18%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:04 : Added correlation to the product-TFG foo.A1.B4 (d:1, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>4:04 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 3 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%18%bbentry[mu 1, delta {1,0}]
<MSG>4:04 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:04 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:04 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:04 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:04 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:04 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:04 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:04 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:04 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht24-prove_trivial15-prove9...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial3-prove9...</MSG>
<MSG>4:05 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:05 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:05 : foo.A1.B4 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:05 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:05 : Chosen product-TFG foo.A1.B4 will be explored later...</MSG>
<MSG>4:05 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:05 : Chose (for CE propagation) product-TFG foo.A1.B5 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%21%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:05 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B5...</MSG>
<MSG>4:05 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B5...</MSG>
<MSG>4:05 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%21%bbentry ending at L3%21%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:05 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:05 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:05 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:05 : Adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%21%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B5: Computing loop hoisting select expressions at toPC L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B5: Computing loop hoisting non-linear expressions at toPC L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B5: Adding node L3%21%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:05 : foo.A1.B5: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B5: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B5: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:05 : foo.A1.B5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:05 : foo.A1.B5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:05 : foo.A1.B5: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%21%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141015 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140457 : input.dst.llvm-%n : BV:32                 : 268435456
141016 : bvult(141015, 140457) : BOOL              : true
141322 : not(141016) : BOOL                        : false
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 268435456
140696 : bvuge(140694, 140695) : BOOL              : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
192753 : bvuge(140290, 140710) : BOOL              : true
192757 : not(192753) : BOOL                        : false
192840 : andnot1(140696, 192757) : BOOL            : false
192844 : or(141322, 192840) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1855 9ee3a371cc58ba321eb9171133f57c9e
=input.spec-%var-mat-2
1 : Lambda49140Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49141Var : BV:32
18 : Lambda49142Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda49143Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda49174Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49175Var : BV:32
18 : Lambda49176Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda49177Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 143 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 144; 147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 148; 92276355 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 92276356; 92276359 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 92276360; 359662975 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 359662976; 359662979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 359662980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 144 { 0x90 +1.1716e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 92276356 { 0x5800684 +1.19884e140 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 359662976 { 0x15700580 +1.87516784e171 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 144 { 0x90 +1.1716e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 147 { 0x93 +1.1752e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 92276356 { 0x5800684 +1.19884e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 92276359 { 0x5800687 +1.19919e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 359662976 { 0x15700580 +1.87516784e171 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 359662979 { 0x15700583 +1.87516820e171 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda49157Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49158Var : BV:32
18 : Lambda49159Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda49160Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-m-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
348297488
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), not(bvuge(0, input.spec-%var-m-1.L3%7%bbentry)))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : not(10) : BOOL
12 : andnot1(7, 11) : BOOL
13 : or(4, 12) : BOOL
</MSG>
<MSG>4:05 : foo.A1.B5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:05 : foo.A1.B5: Finished executing CG's add edge function...</MSG>
<MSG>4:05 : foo.A1.B5: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B5: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%21%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : Done adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%21%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%21%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:05 : Failed correlation of src pathset L3%7%bbentry=>L3%21%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%21%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141015 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140457 : input.dst.llvm-%n : BV:32                 : 268435456
141016 : bvult(141015, 140457) : BOOL              : true
141322 : not(141016) : BOOL                        : false
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 268435456
140696 : bvuge(140694, 140695) : BOOL              : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
192753 : bvuge(140290, 140710) : BOOL              : true
192757 : not(192753) : BOOL                        : false
192840 : andnot1(140696, 192757) : BOOL            : false
192844 : or(141322, 192840) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1855 9ee3a371cc58ba321eb9171133f57c9e
=input.spec-%var-mat-2
1 : Lambda49140Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49141Var : BV:32
18 : Lambda49142Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda49143Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda49174Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49175Var : BV:32
18 : Lambda49176Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda49177Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 143 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 144; 147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 148; 92276355 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 92276356; 92276359 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 92276360; 359662975 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 359662976; 359662979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 359662980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 144 { 0x90 +1.1716e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 92276356 { 0x5800684 +1.19884e140 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 359662976 { 0x15700580 +1.87516784e171 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 144 { 0x90 +1.1716e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 147 { 0x93 +1.1752e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 92276356 { 0x5800684 +1.19884e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 92276359 { 0x5800687 +1.19919e140 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 359662976 { 0x15700580 +1.87516784e171 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 359662979 { 0x15700583 +1.87516820e171 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda49157Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49158Var : BV:32
18 : Lambda49159Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda49160Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-m-0.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
348297488
=counter_example_end


</MSG>
<MSG>4:05 : Discovered that the correlation was useless for the product-TFG foo.A1.B5 (d:1, s:0, sp: 5)...</MSG>
<MSG>4:05 : Chose (for CE propagation) product-TFG foo.A1.B2 (d:1, s:0, sp: 5) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:05 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B2...</MSG>
<MSG>4:05 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B2...</MSG>
<MSG>4:05 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:05 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:05 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:05 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:05 : Adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B2: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B2: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B2: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:05 : foo.A1.B2: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B2: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B2: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:05 : foo.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:05 : foo.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:05 : foo.A1.B2: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141015 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140457 : input.dst.llvm-%n : BV:32                 : 17317889
141016 : bvult(141015, 140457) : BOOL              : true
141322 : not(141016) : BOOL                        : false
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 17317889
140696 : bvuge(140694, 140695) : BOOL              : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 16875521
192753 : bvuge(140290, 140710) : BOOL              : false
192851 : andnot1(140696, 192753) : BOOL            : false
192853 : or(141322, 192851) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1564 8a2758c7f41e4a786f831b2eb84bb572
=input.spec-%var-mat-2
1 : Lambda45344Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45345Var : BV:32
18 : Lambda45346Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda45347Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : lambda(58, 266) : FUNCTION[BV:32 -> BV:32]
268 : map(57, 267) : MAP[BV:32 -> BV:32]
269 : lambda(17, 268) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
270 : map(16, 269) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
271 : sym_const(270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-m-2
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda45344Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45345Var : BV:32
18 : Lambda45346Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda45347Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : lambda(58, 266) : FUNCTION[BV:32 -> BV:32]
268 : map(57, 267) : MAP[BV:32 -> BV:32]
269 : lambda(17, 268) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
270 : map(16, 269) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
271 : sym_const(270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 226707968 ] -> 1, [ 226707969; 226707969 ] -> 64, [ 226707970; 226707970 ] -> 8, [ 226707971; 390935556 ] -> 1, [ 390935557; 390935557 ] -> 128, [ 390935558; 1805021711 ] -> 1, [ 1805021712; 1805021715 ] -> 0, [ 1805021716; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 226707967 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 226707968; 226707971 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 226707972; 390935555 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 390935556; 390935559 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 390935560; 1805021711 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 1805021712; 1805021715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1805021716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.dst.llvm-%m
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1407285461 { 0x53e178d5 +1.76150000e40 } : COUNT
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 390935556 { 0x174d3404 +1.60314989e175 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407285461 { 0x53e178d5 +1.76150000e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 390935556 { 0x174d3404 +1.60314989e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 390935559 { 0x174d3407 +1.60315024e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 226707971 { 0xd834a03 +1.2569615e156 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : Lambda45261Var : BV:32
2 : Lambda45262Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : Lambda45263Var : BV:32
2 : Lambda45264Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : ite(6, 3, 211) : BV:32
213 : lambda(1, 2, 212) : FUNCTION[BV:32,BV:32 -> BV:32]
214 : sym_const(213) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : Lambda45265Var : BV:32
2 : Lambda45266Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : ite(6, 3, 211) : BV:32
213 : lambda(1, 2, 212) : FUNCTION[BV:32,BV:32 -> BV:32]
214 : sym_const(213) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : Lambda45267Var : BV:32
2 : Lambda45268Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : Lambda45272Var : BV:32
2 : Lambda45273Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : Lambda45277Var : BV:32
2 : Lambda45278Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda45357Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45358Var : BV:32
18 : Lambda45359Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda45360Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : ite(61, 2, 266) : BV:32
268 : lambda(58, 267) : FUNCTION[BV:32 -> BV:32]
269 : map(57, 268) : MAP[BV:32 -> BV:32]
270 : lambda(17, 269) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
271 : map(16, 270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
272 : sym_const(271) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-m-0.L3%18%bbentry
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1691719139
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), bvuge(0, input.spec-%var-m-1.L3%7%bbentry))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : andnot1(7, 10) : BOOL
12 : or(4, 11) : BOOL
</MSG>
<MSG>4:05 : foo.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:05 : foo.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>4:05 : foo.A1.B2: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B2: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : Done adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:05 : Failed correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141015 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140457 : input.dst.llvm-%n : BV:32                 : 17317889
141016 : bvult(141015, 140457) : BOOL              : true
141322 : not(141016) : BOOL                        : false
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 17317889
140696 : bvuge(140694, 140695) : BOOL              : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 16875521
192753 : bvuge(140290, 140710) : BOOL              : false
192851 : andnot1(140696, 192753) : BOOL            : false
192853 : or(141322, 192851) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce1564 8a2758c7f41e4a786f831b2eb84bb572
=input.spec-%var-mat-2
1 : Lambda45344Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45345Var : BV:32
18 : Lambda45346Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda45347Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : lambda(58, 266) : FUNCTION[BV:32 -> BV:32]
268 : map(57, 267) : MAP[BV:32 -> BV:32]
269 : lambda(17, 268) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
270 : map(16, 269) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
271 : sym_const(270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-m-2
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda45344Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45345Var : BV:32
18 : Lambda45346Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda45347Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : lambda(58, 266) : FUNCTION[BV:32 -> BV:32]
268 : map(57, 267) : MAP[BV:32 -> BV:32]
269 : lambda(17, 268) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
270 : map(16, 269) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
271 : sym_const(270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 226707968 ] -> 1, [ 226707969; 226707969 ] -> 64, [ 226707970; 226707970 ] -> 8, [ 226707971; 390935556 ] -> 1, [ 390935557; 390935557 ] -> 128, [ 390935558; 1805021711 ] -> 1, [ 1805021712; 1805021715 ] -> 0, [ 1805021716; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 226707967 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 226707968; 226707971 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 226707972; 390935555 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 390935556; 390935559 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 390935560; 1805021711 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 1805021712; 1805021715 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1805021716; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.dst.llvm-%m
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1407285461 { 0x53e178d5 +1.76150000e40 } : COUNT
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 390935556 { 0x174d3404 +1.60314989e175 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407285461 { 0x53e178d5 +1.76150000e40 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 390935556 { 0x174d3404 +1.60314989e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 390935559 { 0x174d3407 +1.60315024e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 226707971 { 0xd834a03 +1.2569615e156 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : Lambda45261Var : BV:32
2 : Lambda45262Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : Lambda45263Var : BV:32
2 : Lambda45264Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : ite(6, 3, 211) : BV:32
213 : lambda(1, 2, 212) : FUNCTION[BV:32,BV:32 -> BV:32]
214 : sym_const(213) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : Lambda45265Var : BV:32
2 : Lambda45266Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
16 : eq(11, 15) : BOOL
17 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8 { 0x8 } : BV:8
20 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
21 : eq(11, 20) : BOOL
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : eq(11, 22) : BOOL
24 : eq(11, 3) : BOOL
25 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 7) : BOOL
28 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
29 : eq(11, 28) : BOOL
30 : 128 { 0x80 -128 } : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
34 : eq(11, 33) : BOOL
35 : 64 { 0x40 } : BV:8
36 : 1 { 0x1 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(32, 14, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(27, 14, 39) : BV:8
41 : ite(26, 14, 40) : BV:8
42 : ite(24, 14, 41) : BV:8
43 : ite(23, 14, 42) : BV:8
44 : ite(21, 14, 43) : BV:8
45 : ite(18, 19, 44) : BV:8
46 : ite(16, 14, 45) : BV:8
47 : ite(13, 14, 46) : BV:8
48 : bvadd(22, 10, 3) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 15) : BOOL
51 : eq(48, 17) : BOOL
52 : eq(48, 20) : BOOL
53 : eq(48, 22) : BOOL
54 : eq(48, 3) : BOOL
55 : eq(48, 25) : BOOL
56 : eq(48, 7) : BOOL
57 : eq(48, 28) : BOOL
58 : eq(48, 31) : BOOL
59 : eq(48, 33) : BOOL
60 : ite(59, 35, 36) : BV:8
61 : ite(58, 14, 60) : BV:8
62 : ite(57, 30, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 14, 63) : BV:8
65 : ite(54, 14, 64) : BV:8
66 : ite(53, 14, 65) : BV:8
67 : ite(52, 14, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : ite(50, 14, 68) : BV:8
70 : ite(49, 14, 69) : BV:8
71 : bvadd(31, 10, 3) : BV:32
72 : eq(71, 12) : BOOL
73 : eq(71, 15) : BOOL
74 : eq(71, 17) : BOOL
75 : eq(71, 20) : BOOL
76 : eq(71, 22) : BOOL
77 : eq(71, 3) : BOOL
78 : eq(71, 25) : BOOL
79 : eq(71, 7) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 31) : BOOL
82 : eq(71, 33) : BOOL
83 : ite(82, 35, 36) : BV:8
84 : ite(81, 14, 83) : BV:8
85 : ite(80, 30, 84) : BV:8
86 : ite(79, 14, 85) : BV:8
87 : ite(78, 14, 86) : BV:8
88 : ite(77, 14, 87) : BV:8
89 : ite(76, 14, 88) : BV:8
90 : ite(75, 14, 89) : BV:8
91 : ite(74, 19, 90) : BV:8
92 : ite(73, 14, 91) : BV:8
93 : ite(72, 14, 92) : BV:8
94 : bvadd(10, 3) : BV:32
95 : eq(94, 12) : BOOL
96 : eq(94, 15) : BOOL
97 : eq(94, 17) : BOOL
98 : eq(94, 20) : BOOL
99 : eq(94, 22) : BOOL
100 : eq(94, 3) : BOOL
101 : eq(94, 25) : BOOL
102 : eq(94, 7) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 31) : BOOL
105 : eq(94, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 14, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 14, 108) : BV:8
110 : ite(101, 14, 109) : BV:8
111 : ite(100, 14, 110) : BV:8
112 : ite(99, 14, 111) : BV:8
113 : ite(98, 14, 112) : BV:8
114 : ite(97, 19, 113) : BV:8
115 : ite(96, 14, 114) : BV:8
116 : ite(95, 14, 115) : BV:8
117 : bvconcat(47, 70, 93, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 12) : BOOL
120 : eq(118, 15) : BOOL
121 : eq(118, 17) : BOOL
122 : eq(118, 20) : BOOL
123 : eq(118, 22) : BOOL
124 : eq(118, 3) : BOOL
125 : eq(118, 25) : BOOL
126 : eq(118, 7) : BOOL
127 : eq(118, 28) : BOOL
128 : eq(118, 31) : BOOL
129 : eq(118, 33) : BOOL
130 : ite(129, 35, 36) : BV:8
131 : ite(128, 14, 130) : BV:8
132 : ite(127, 30, 131) : BV:8
133 : ite(126, 14, 132) : BV:8
134 : ite(125, 14, 133) : BV:8
135 : ite(124, 14, 134) : BV:8
136 : ite(123, 14, 135) : BV:8
137 : ite(122, 14, 136) : BV:8
138 : ite(121, 19, 137) : BV:8
139 : ite(120, 14, 138) : BV:8
140 : ite(119, 14, 139) : BV:8
141 : bvadd(22, 9, 117) : BV:32
142 : eq(141, 12) : BOOL
143 : eq(141, 15) : BOOL
144 : eq(141, 17) : BOOL
145 : eq(141, 20) : BOOL
146 : eq(141, 22) : BOOL
147 : eq(141, 3) : BOOL
148 : eq(141, 25) : BOOL
149 : eq(141, 7) : BOOL
150 : eq(141, 28) : BOOL
151 : eq(141, 31) : BOOL
152 : eq(141, 33) : BOOL
153 : ite(152, 35, 36) : BV:8
154 : ite(151, 14, 153) : BV:8
155 : ite(150, 30, 154) : BV:8
156 : ite(149, 14, 155) : BV:8
157 : ite(148, 14, 156) : BV:8
158 : ite(147, 14, 157) : BV:8
159 : ite(146, 14, 158) : BV:8
160 : ite(145, 14, 159) : BV:8
161 : ite(144, 19, 160) : BV:8
162 : ite(143, 14, 161) : BV:8
163 : ite(142, 14, 162) : BV:8
164 : bvadd(31, 9, 117) : BV:32
165 : eq(164, 12) : BOOL
166 : eq(164, 15) : BOOL
167 : eq(164, 17) : BOOL
168 : eq(164, 20) : BOOL
169 : eq(164, 22) : BOOL
170 : eq(164, 3) : BOOL
171 : eq(164, 25) : BOOL
172 : eq(164, 7) : BOOL
173 : eq(164, 28) : BOOL
174 : eq(164, 31) : BOOL
175 : eq(164, 33) : BOOL
176 : ite(175, 35, 36) : BV:8
177 : ite(174, 14, 176) : BV:8
178 : ite(173, 30, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 14, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 19, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : bvadd(9, 117) : BV:32
188 : eq(187, 12) : BOOL
189 : eq(187, 15) : BOOL
190 : eq(187, 17) : BOOL
191 : eq(187, 20) : BOOL
192 : eq(187, 22) : BOOL
193 : eq(187, 3) : BOOL
194 : eq(187, 25) : BOOL
195 : eq(187, 7) : BOOL
196 : eq(187, 28) : BOOL
197 : eq(187, 31) : BOOL
198 : eq(187, 33) : BOOL
199 : ite(198, 35, 36) : BV:8
200 : ite(197, 14, 199) : BV:8
201 : ite(196, 30, 200) : BV:8
202 : ite(195, 14, 201) : BV:8
203 : ite(194, 14, 202) : BV:8
204 : ite(193, 14, 203) : BV:8
205 : ite(192, 14, 204) : BV:8
206 : ite(191, 14, 205) : BV:8
207 : ite(190, 19, 206) : BV:8
208 : ite(189, 14, 207) : BV:8
209 : ite(188, 14, 208) : BV:8
210 : bvconcat(140, 163, 186, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : ite(6, 3, 211) : BV:32
213 : lambda(1, 2, 212) : FUNCTION[BV:32,BV:32 -> BV:32]
214 : sym_const(213) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : Lambda45267Var : BV:32
2 : Lambda45268Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : Lambda45272Var : BV:32
2 : Lambda45273Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 17317888 ] -> true, [ 17317889; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : Lambda45277Var : BV:32
2 : Lambda45278Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 12, 22) : BV:32
24 : ite(11, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 3) : BOOL
27 : bvule(3, 2) : BOOL
28 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 14) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : 1 { 0x1 } : BOOL
45 : 0 { 0x0 } : BOOL
46 : ite(43, 44, 45) : BOOL
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BOOL]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda45357Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17317888 { 0x1084000 +1.6445312e131 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45358Var : BV:32
18 : Lambda45359Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 226707968 { 0xd834a00 +1.2569580e156 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 17317890 { 0x1084002 +1.6445336e131 } : BV:32
30 : bvule(29, 17) : BOOL
31 : 226707967 { 0xd8349ff +1.2569568e156 } : BV:32
32 : bvule(17, 31) : BOOL
33 : and(30, 32) : BOOL
34 : ite(33, 29, 29) : BV:32
35 : ite(28, 25, 34) : BV:32
36 : ite(24, 8, 35) : BV:32
37 : ite(21, 2, 36) : BV:32
38 : eq(37, 2) : BOOL
39 : bvule(2, 18) : BOOL
40 : 16875520 { 0x1018000 +1.1171875e131 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 16875522 { 0x1018002 +1.1171898e131 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : ite(55, 7, 13) : BOOL
57 : lambda(18, 56) : FUNCTION[BV:32 -> BOOL]
58 : Lambda45360Var : BV:32
59 : eq(17, 2) : BOOL
60 : eq(58, 2) : BOOL
61 : and(59, 60) : BOOL
62 : 3 { 0x3 +1.35e129 } : BV:32
63 : 4 { 0x4 +1.47e129 } : BV:32
64 : bvmul(63, 58) : BV:32
65 : bvmul(63, 17) : BV:32
66 : bvadd(62, 65, 2) : BV:32
67 : 1805021715 { 0x6b967213 +1.17535626e88 } : BV:32
68 : eq(66, 67) : BOOL
69 : 0 { 0x0 } : BV:8
70 : 1805021712 { 0x6b967210 +1.17535591e88 } : BV:32
71 : eq(66, 70) : BOOL
72 : 226707970 { 0xd834a02 +1.2569603e156 } : BV:32
73 : eq(66, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 1805021714 { 0x6b967212 +1.17535614e88 } : BV:32
76 : eq(66, 75) : BOOL
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(66, 77) : BOOL
79 : eq(66, 2) : BOOL
80 : 1805021713 { 0x6b967211 +1.17535603e88 } : BV:32
81 : eq(66, 80) : BOOL
82 : eq(66, 62) : BOOL
83 : 390935557 { 0x174d3405 +1.60315001e175 } : BV:32
84 : eq(66, 83) : BOOL
85 : 128 { 0x80 -128 } : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : eq(66, 86) : BOOL
88 : 226707969 { 0xd834a01 +1.2569591e156 } : BV:32
89 : eq(66, 88) : BOOL
90 : 64 { 0x40 } : BV:8
91 : 1 { 0x1 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(87, 69, 92) : BV:8
94 : ite(84, 85, 93) : BV:8
95 : ite(82, 69, 94) : BV:8
96 : ite(81, 69, 95) : BV:8
97 : ite(79, 69, 96) : BV:8
98 : ite(78, 69, 97) : BV:8
99 : ite(76, 69, 98) : BV:8
100 : ite(73, 74, 99) : BV:8
101 : ite(71, 69, 100) : BV:8
102 : ite(68, 69, 101) : BV:8
103 : bvadd(77, 65, 2) : BV:32
104 : eq(103, 67) : BOOL
105 : eq(103, 70) : BOOL
106 : eq(103, 72) : BOOL
107 : eq(103, 75) : BOOL
108 : eq(103, 77) : BOOL
109 : eq(103, 2) : BOOL
110 : eq(103, 80) : BOOL
111 : eq(103, 62) : BOOL
112 : eq(103, 83) : BOOL
113 : eq(103, 86) : BOOL
114 : eq(103, 88) : BOOL
115 : ite(114, 90, 91) : BV:8
116 : ite(113, 69, 115) : BV:8
117 : ite(112, 85, 116) : BV:8
118 : ite(111, 69, 117) : BV:8
119 : ite(110, 69, 118) : BV:8
120 : ite(109, 69, 119) : BV:8
121 : ite(108, 69, 120) : BV:8
122 : ite(107, 69, 121) : BV:8
123 : ite(106, 74, 122) : BV:8
124 : ite(105, 69, 123) : BV:8
125 : ite(104, 69, 124) : BV:8
126 : bvadd(86, 65, 2) : BV:32
127 : eq(126, 67) : BOOL
128 : eq(126, 70) : BOOL
129 : eq(126, 72) : BOOL
130 : eq(126, 75) : BOOL
131 : eq(126, 77) : BOOL
132 : eq(126, 2) : BOOL
133 : eq(126, 80) : BOOL
134 : eq(126, 62) : BOOL
135 : eq(126, 83) : BOOL
136 : eq(126, 86) : BOOL
137 : eq(126, 88) : BOOL
138 : ite(137, 90, 91) : BV:8
139 : ite(136, 69, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 69, 140) : BV:8
142 : ite(133, 69, 141) : BV:8
143 : ite(132, 69, 142) : BV:8
144 : ite(131, 69, 143) : BV:8
145 : ite(130, 69, 144) : BV:8
146 : ite(129, 74, 145) : BV:8
147 : ite(128, 69, 146) : BV:8
148 : ite(127, 69, 147) : BV:8
149 : bvadd(65, 2) : BV:32
150 : eq(149, 67) : BOOL
151 : eq(149, 70) : BOOL
152 : eq(149, 72) : BOOL
153 : eq(149, 75) : BOOL
154 : eq(149, 77) : BOOL
155 : eq(149, 2) : BOOL
156 : eq(149, 80) : BOOL
157 : eq(149, 62) : BOOL
158 : eq(149, 83) : BOOL
159 : eq(149, 86) : BOOL
160 : eq(149, 88) : BOOL
161 : ite(160, 90, 91) : BV:8
162 : ite(159, 69, 161) : BV:8
163 : ite(158, 85, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 69, 164) : BV:8
166 : ite(155, 69, 165) : BV:8
167 : ite(154, 69, 166) : BV:8
168 : ite(153, 69, 167) : BV:8
169 : ite(152, 74, 168) : BV:8
170 : ite(151, 69, 169) : BV:8
171 : ite(150, 69, 170) : BV:8
172 : bvconcat(102, 125, 148, 171) : BV:32
173 : bvadd(62, 64, 172) : BV:32
174 : eq(173, 67) : BOOL
175 : eq(173, 70) : BOOL
176 : eq(173, 72) : BOOL
177 : eq(173, 75) : BOOL
178 : eq(173, 77) : BOOL
179 : eq(173, 2) : BOOL
180 : eq(173, 80) : BOOL
181 : eq(173, 62) : BOOL
182 : eq(173, 83) : BOOL
183 : eq(173, 86) : BOOL
184 : eq(173, 88) : BOOL
185 : ite(184, 90, 91) : BV:8
186 : ite(183, 69, 185) : BV:8
187 : ite(182, 85, 186) : BV:8
188 : ite(181, 69, 187) : BV:8
189 : ite(180, 69, 188) : BV:8
190 : ite(179, 69, 189) : BV:8
191 : ite(178, 69, 190) : BV:8
192 : ite(177, 69, 191) : BV:8
193 : ite(176, 74, 192) : BV:8
194 : ite(175, 69, 193) : BV:8
195 : ite(174, 69, 194) : BV:8
196 : bvadd(77, 64, 172) : BV:32
197 : eq(196, 67) : BOOL
198 : eq(196, 70) : BOOL
199 : eq(196, 72) : BOOL
200 : eq(196, 75) : BOOL
201 : eq(196, 77) : BOOL
202 : eq(196, 2) : BOOL
203 : eq(196, 80) : BOOL
204 : eq(196, 62) : BOOL
205 : eq(196, 83) : BOOL
206 : eq(196, 86) : BOOL
207 : eq(196, 88) : BOOL
208 : ite(207, 90, 91) : BV:8
209 : ite(206, 69, 208) : BV:8
210 : ite(205, 85, 209) : BV:8
211 : ite(204, 69, 210) : BV:8
212 : ite(203, 69, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 69, 213) : BV:8
215 : ite(200, 69, 214) : BV:8
216 : ite(199, 74, 215) : BV:8
217 : ite(198, 69, 216) : BV:8
218 : ite(197, 69, 217) : BV:8
219 : bvadd(86, 64, 172) : BV:32
220 : eq(219, 67) : BOOL
221 : eq(219, 70) : BOOL
222 : eq(219, 72) : BOOL
223 : eq(219, 75) : BOOL
224 : eq(219, 77) : BOOL
225 : eq(219, 2) : BOOL
226 : eq(219, 80) : BOOL
227 : eq(219, 62) : BOOL
228 : eq(219, 83) : BOOL
229 : eq(219, 86) : BOOL
230 : eq(219, 88) : BOOL
231 : ite(230, 90, 91) : BV:8
232 : ite(229, 69, 231) : BV:8
233 : ite(228, 85, 232) : BV:8
234 : ite(227, 69, 233) : BV:8
235 : ite(226, 69, 234) : BV:8
236 : ite(225, 69, 235) : BV:8
237 : ite(224, 69, 236) : BV:8
238 : ite(223, 69, 237) : BV:8
239 : ite(222, 74, 238) : BV:8
240 : ite(221, 69, 239) : BV:8
241 : ite(220, 69, 240) : BV:8
242 : bvadd(64, 172) : BV:32
243 : eq(242, 67) : BOOL
244 : eq(242, 70) : BOOL
245 : eq(242, 72) : BOOL
246 : eq(242, 75) : BOOL
247 : eq(242, 77) : BOOL
248 : eq(242, 2) : BOOL
249 : eq(242, 80) : BOOL
250 : eq(242, 62) : BOOL
251 : eq(242, 83) : BOOL
252 : eq(242, 86) : BOOL
253 : eq(242, 88) : BOOL
254 : ite(253, 90, 91) : BV:8
255 : ite(252, 69, 254) : BV:8
256 : ite(251, 85, 255) : BV:8
257 : ite(250, 69, 256) : BV:8
258 : ite(249, 69, 257) : BV:8
259 : ite(248, 69, 258) : BV:8
260 : ite(247, 69, 259) : BV:8
261 : ite(246, 69, 260) : BV:8
262 : ite(245, 74, 261) : BV:8
263 : ite(244, 69, 262) : BV:8
264 : ite(243, 69, 263) : BV:8
265 : bvconcat(195, 218, 241, 264) : BV:32
266 : ite(61, 2, 265) : BV:32
267 : ite(61, 2, 266) : BV:32
268 : lambda(58, 267) : FUNCTION[BV:32 -> BV:32]
269 : map(57, 268) : MAP[BV:32 -> BV:32]
270 : lambda(17, 269) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
271 : map(16, 270) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
272 : sym_const(271) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%18%bbentry
1 : 17317889 { 0x1084001 +1.6445324e131 } : BV:32
=input.spec-%var-m-0.L3%18%bbentry
1 : 16875521 { 0x1018001 +1.1171886e131 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1691719139
=counter_example_end


</MSG>
<MSG>4:05 : Discovered that the correlation was useless for the product-TFG foo.A1.B2 (d:1, s:0, sp: 5)...</MSG>
<MSG>4:05 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:05 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>4:05 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>4:05 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:05 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:05 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:05 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:05 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B1: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>4:05 : foo.A1.B1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:05 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:05 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:05 : foo.A1.B1: Propagated 5 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:05 : foo.A1.B1: Added the 5 propagated CEs at PC L3%7%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:05 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:05 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>4:05 : foo.A1.B1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:05 : Added correlation to the product-TFG foo.A1.B1 (d:1, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>4:05 : Chose (after CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%7%bbentry at mu 0 delta {0,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry, A (line 4 at column 28))
                L3%7%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 5 counterexamples (for correlating 13 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
<MSG>4:05 : foo.A1.B1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:05 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:05 : foo.A1.B1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:05 : foo.A1.B1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:05 : foo.A1.B1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:05 : foo.A1.B1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:05 : foo.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:05 : foo.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:05 : foo.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 13 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:08 : foo.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht21-prove_trivial10-prove11...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:08 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:08 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:09 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:09 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:10 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:10 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:10 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:10 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:10 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:10 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:10 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:10 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:10 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:10 : foo.A1.B1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:10 : foo.A1.B1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:10 : foo.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial2-prove10...</MSG>
<MSG>4:14 : foo.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:14 : foo.A1.B1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>4:14 : foo.A1.B1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:14 : foo.A1.B1 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>4:14 : foo.A1.B1 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>4:14 : Chosen product-TFG foo.A1.B1 will be explored later...</MSG>
<MSG>4:14 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>4:14 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>4:14 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:14 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:14 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 13 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht12-prove_trivial10-prove2...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:14 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:14 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:14 : foo.A1.B3 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:14 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:14 : product-TFG foo.A1.B3: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:14 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:14 : Attempting correlation of src pathset L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:14 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:14 : product-TFG foo.A1.B3: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:14 : product-TFG foo.A1.B3 created 1 possibilities in group foo.A1.B3.C...</MSG>
<MSG>4:14 : Chose (for CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:14 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>4:14 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>4:14 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:14 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:14 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>4:14 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:14 : Adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:14 : foo.A1.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:14 : foo.A1.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Propagated 14 out of 17 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>4:14 : foo.A1.B3.C1: Added the 14 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>4:14 : foo.A1.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:14 : Done adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:14 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:14 : Added correlation to the product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:14 : Chose (after CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 33 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 19 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>4:14 : foo.A1.B3.C1: Updating invariants over the newly added edges in edge composition L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:14 : Constructed infer_invariants_dfa with initial worklist L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:14 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 14 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>4:14 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:15 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:15 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 13 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:16 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 13 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:17 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 14 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>4:17 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:18 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 13 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>4:18 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:18 : foo.A1.B3.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:18 : foo.A1.B3.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:19 : product-TFG foo.A1.B3.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:19 : Considering 2 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:19 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:19 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:19 : Found 2 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:19 : product-TFG foo.A1.B3.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:19 : product-TFG foo.A1.B3.C1 created 2 possibilities in group foo.A1.B3.C1.D...</MSG>
<MSG>4:19 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 40 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 24 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:19 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>4:19 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>4:19 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:19 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:19 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:19 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:19 : Adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: marking unstable at L3%10%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141017 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140461 : input.dst.llvm-%m : BV:32                 : 67108864
141019 : bvult(141017, 140461) : BOOL              : true
219776 : not(141019) : BOOL                        : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 67108864
192753 : bvuge(140290, 140710) : BOOL              : false
140345 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 546308128
140797 : bvadd(140345, 140694) : BV:32             : 546308129
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 1083180033
227351 : bvuge(140797, 140695) : BOOL              : false
227360 : andnot2(192753, 227351) : BOOL            : false
228172 : or(219776, 227360) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce5630 4152ab7b55b04ebfd21628bd9cd0a34b
=input.spec-%var-mat-2
1 : Lambda72434Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda72435Var : BV:32
18 : Lambda72436Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda72437Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
82 : eq(80, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
85 : eq(80, 84) : BOOL
86 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
87 : eq(80, 86) : BOOL
88 : 253 { 0xfd -3 } : BV:8
89 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
90 : eq(80, 89) : BOOL
91 : 127 { 0x7f } : BV:8
92 : 0 { 0x0 } : BV:8
93 : ite(90, 91, 92) : BV:8
94 : ite(87, 88, 93) : BV:8
95 : ite(85, 83, 94) : BV:8
96 : ite(82, 83, 95) : BV:8
97 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
98 : bvadd(97, 79) : BV:32
99 : eq(98, 81) : BOOL
100 : eq(98, 84) : BOOL
101 : eq(98, 86) : BOOL
102 : eq(98, 89) : BOOL
103 : ite(102, 91, 92) : BV:8
104 : ite(101, 88, 103) : BV:8
105 : ite(100, 83, 104) : BV:8
106 : ite(99, 83, 105) : BV:8
107 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
108 : bvadd(107, 79) : BV:32
109 : eq(108, 81) : BOOL
110 : eq(108, 84) : BOOL
111 : eq(108, 86) : BOOL
112 : eq(108, 89) : BOOL
113 : ite(112, 91, 92) : BV:8
114 : ite(111, 88, 113) : BV:8
115 : ite(110, 83, 114) : BV:8
116 : ite(109, 83, 115) : BV:8
117 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
118 : bvadd(117, 79) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 89) : BOOL
123 : ite(122, 91, 92) : BV:8
124 : ite(121, 88, 123) : BV:8
125 : ite(120, 83, 124) : BV:8
126 : ite(119, 83, 125) : BV:8
127 : bvconcat(96, 106, 116, 126) : BV:32
128 : bvadd(75, 77, 127) : BV:32
129 : eq(128, 81) : BOOL
130 : eq(128, 84) : BOOL
131 : eq(128, 86) : BOOL
132 : eq(128, 89) : BOOL
133 : ite(132, 91, 92) : BV:8
134 : ite(131, 88, 133) : BV:8
135 : ite(130, 83, 134) : BV:8
136 : ite(129, 83, 135) : BV:8
137 : 2 { 0x2 +1.23e129 } : BV:32
138 : bvadd(137, 77, 127) : BV:32
139 : eq(138, 81) : BOOL
140 : eq(138, 84) : BOOL
141 : eq(138, 86) : BOOL
142 : eq(138, 89) : BOOL
143 : ite(142, 91, 92) : BV:8
144 : ite(141, 88, 143) : BV:8
145 : ite(140, 83, 144) : BV:8
146 : ite(139, 83, 145) : BV:8
147 : 1 { 0x1 +1.11e129 } : BV:32
148 : bvadd(147, 77, 127) : BV:32
149 : eq(148, 81) : BOOL
150 : eq(148, 84) : BOOL
151 : eq(148, 86) : BOOL
152 : eq(148, 89) : BOOL
153 : ite(152, 91, 92) : BV:8
154 : ite(151, 88, 153) : BV:8
155 : ite(150, 83, 154) : BV:8
156 : ite(149, 83, 155) : BV:8
157 : bvadd(77, 127) : BV:32
158 : eq(157, 81) : BOOL
159 : eq(157, 84) : BOOL
160 : eq(157, 86) : BOOL
161 : eq(157, 89) : BOOL
162 : ite(161, 91, 92) : BV:8
163 : ite(160, 88, 162) : BV:8
164 : ite(159, 83, 163) : BV:8
165 : ite(158, 83, 164) : BV:8
166 : bvconcat(136, 146, 156, 165) : BV:32
167 : ite(55, 2, 166) : BV:32
168 : ite(74, 166, 167) : BV:32
169 : ite(55, 2, 168) : BV:32
170 : lambda(52, 169) : FUNCTION[BV:32 -> BV:32]
171 : map(51, 170) : MAP[BV:32 -> BV:32]
172 : lambda(17, 171) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
173 : map(16, 172) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
174 : sym_const(173) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
=input.spec-%var-m-2
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda72460Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda72461Var : BV:32
18 : Lambda72462Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda72463Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
63 : eq(61, 62) : BOOL
64 : 255 { 0xff -1 } : BV:8
65 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
66 : eq(61, 65) : BOOL
67 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
68 : eq(61, 67) : BOOL
69 : 253 { 0xfd -3 } : BV:8
70 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
71 : eq(61, 70) : BOOL
72 : 127 { 0x7f } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(66, 64, 75) : BV:8
77 : ite(63, 64, 76) : BV:8
78 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
79 : bvadd(78, 60) : BV:32
80 : eq(79, 62) : BOOL
81 : eq(79, 65) : BOOL
82 : eq(79, 67) : BOOL
83 : eq(79, 70) : BOOL
84 : ite(83, 72, 73) : BV:8
85 : ite(82, 69, 84) : BV:8
86 : ite(81, 64, 85) : BV:8
87 : ite(80, 64, 86) : BV:8
88 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
89 : bvadd(88, 60) : BV:32
90 : eq(89, 62) : BOOL
91 : eq(89, 65) : BOOL
92 : eq(89, 67) : BOOL
93 : eq(89, 70) : BOOL
94 : ite(93, 72, 73) : BV:8
95 : ite(92, 69, 94) : BV:8
96 : ite(91, 64, 95) : BV:8
97 : ite(90, 64, 96) : BV:8
98 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
99 : bvadd(98, 60) : BV:32
100 : eq(99, 62) : BOOL
101 : eq(99, 65) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 64, 105) : BV:8
107 : ite(100, 64, 106) : BV:8
108 : bvconcat(77, 87, 97, 107) : BV:32
109 : bvadd(56, 58, 108) : BV:32
110 : eq(109, 62) : BOOL
111 : eq(109, 65) : BOOL
112 : eq(109, 67) : BOOL
113 : eq(109, 70) : BOOL
114 : ite(113, 72, 73) : BV:8
115 : ite(112, 69, 114) : BV:8
116 : ite(111, 64, 115) : BV:8
117 : ite(110, 64, 116) : BV:8
118 : 2 { 0x2 +1.23e129 } : BV:32
119 : bvadd(118, 58, 108) : BV:32
120 : eq(119, 62) : BOOL
121 : eq(119, 65) : BOOL
122 : eq(119, 67) : BOOL
123 : eq(119, 70) : BOOL
124 : ite(123, 72, 73) : BV:8
125 : ite(122, 69, 124) : BV:8
126 : ite(121, 64, 125) : BV:8
127 : ite(120, 64, 126) : BV:8
128 : 1 { 0x1 +1.11e129 } : BV:32
129 : bvadd(128, 58, 108) : BV:32
130 : eq(129, 62) : BOOL
131 : eq(129, 65) : BOOL
132 : eq(129, 67) : BOOL
133 : eq(129, 70) : BOOL
134 : ite(133, 72, 73) : BV:8
135 : ite(132, 69, 134) : BV:8
136 : ite(131, 64, 135) : BV:8
137 : ite(130, 64, 136) : BV:8
138 : bvadd(58, 108) : BV:32
139 : eq(138, 62) : BOOL
140 : eq(138, 65) : BOOL
141 : eq(138, 67) : BOOL
142 : eq(138, 70) : BOOL
143 : ite(142, 72, 73) : BV:8
144 : ite(141, 69, 143) : BV:8
145 : ite(140, 64, 144) : BV:8
146 : ite(139, 64, 145) : BV:8
147 : bvconcat(117, 127, 137, 146) : BV:32
148 : ite(55, 2, 147) : BV:32
149 : lambda(52, 148) : FUNCTION[BV:32 -> BV:32]
150 : map(51, 149) : MAP[BV:32 -> BV:32]
151 : lambda(17, 150) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
152 : map(16, 151) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
153 : sym_const(152) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2210673023 ] -> 0, [ 2210673024; 2210673024 ] -> 253, [ 2210673025; 2210673026 ] -> 255, [ 2210673027; 2210673027 ] -> 127, [ 2210673028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 893731 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 893732; 893735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 893736; 1003180447 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 1003180448; 1003180451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1003180452; 1136952063 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 1136952064; 1136952067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1136952068; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
=input.dst.llvm-%m
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1136952064 { 0x43c48300 +1.53524780e8 } : BV:32
=input.dst.llvm-%arr
1 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 893732 { 0xda324 +1.10654115e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1003180448 { 0x3bcb51a0 +1.58842849e248 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 546308128 { 0x20900020 +1.12500381e194 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1136952064 { 0x43c48300 +1.53524780e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1136952067 { 0x43c48303 +1.53524816e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 893732 { 0xda324 +1.10654115e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 893735 { 0xda327 +1.10654151e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1003180448 { 0x3bcb51a0 +1.58842849e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1003180451 { 0x3bcb51a3 +1.58842885e248 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 1083180032 ] -> true, [ 1083180033; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 1083180032 ] -> true, [ 1083180033; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : Lambda72293Var : BV:32
2 : Lambda72294Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 67108865 { 0x4000001 +1.11e137 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 67108864 { 0x4000000 +1.0e137 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
55 : eq(53, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
58 : eq(53, 57) : BOOL
59 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
60 : eq(53, 59) : BOOL
61 : 253 { 0xfd -3 } : BV:8
62 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
63 : eq(53, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 56, 67) : BV:8
69 : ite(55, 56, 68) : BV:8
70 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
71 : bvadd(70, 52) : BV:32
72 : eq(71, 54) : BOOL
73 : eq(71, 57) : BOOL
74 : eq(71, 59) : BOOL
75 : eq(71, 62) : BOOL
76 : ite(75, 64, 65) : BV:8
77 : ite(74, 61, 76) : BV:8
78 : ite(73, 56, 77) : BV:8
79 : ite(72, 56, 78) : BV:8
80 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
81 : bvadd(80, 52) : BV:32
82 : eq(81, 54) : BOOL
83 : eq(81, 57) : BOOL
84 : eq(81, 59) : BOOL
85 : eq(81, 62) : BOOL
86 : ite(85, 64, 65) : BV:8
87 : ite(84, 61, 86) : BV:8
88 : ite(83, 56, 87) : BV:8
89 : ite(82, 56, 88) : BV:8
90 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
91 : bvadd(90, 52) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 62) : BOOL
96 : ite(95, 64, 65) : BV:8
97 : ite(94, 61, 96) : BV:8
98 : ite(93, 56, 97) : BV:8
99 : ite(92, 56, 98) : BV:8
100 : bvconcat(69, 79, 89, 99) : BV:32
101 : bvadd(48, 50, 100) : BV:32
102 : eq(101, 54) : BOOL
103 : eq(101, 57) : BOOL
104 : eq(101, 59) : BOOL
105 : eq(101, 62) : BOOL
106 : ite(105, 64, 65) : BV:8
107 : ite(104, 61, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : ite(102, 56, 108) : BV:8
110 : 2 { 0x2 +1.23e129 } : BV:32
111 : bvadd(110, 50, 100) : BV:32
112 : eq(111, 54) : BOOL
113 : eq(111, 57) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 62) : BOOL
116 : ite(115, 64, 65) : BV:8
117 : ite(114, 61, 116) : BV:8
118 : ite(113, 56, 117) : BV:8
119 : ite(112, 56, 118) : BV:8
120 : 1 { 0x1 +1.11e129 } : BV:32
121 : bvadd(120, 50, 100) : BV:32
122 : eq(121, 54) : BOOL
123 : eq(121, 57) : BOOL
124 : eq(121, 59) : BOOL
125 : eq(121, 62) : BOOL
126 : ite(125, 64, 65) : BV:8
127 : ite(124, 61, 126) : BV:8
128 : ite(123, 56, 127) : BV:8
129 : ite(122, 56, 128) : BV:8
130 : bvadd(50, 100) : BV:32
131 : eq(130, 54) : BOOL
132 : eq(130, 57) : BOOL
133 : eq(130, 59) : BOOL
134 : eq(130, 62) : BOOL
135 : ite(134, 64, 65) : BV:8
136 : ite(133, 61, 135) : BV:8
137 : ite(132, 56, 136) : BV:8
138 : ite(131, 56, 137) : BV:8
139 : bvconcat(109, 119, 129, 138) : BV:32
140 : ite(6, 3, 139) : BV:32
141 : ite(47, 139, 140) : BV:32
142 : ite(6, 3, 141) : BV:32
143 : lambda(1, 2, 142) : FUNCTION[BV:32,BV:32 -> BV:32]
144 : sym_const(143) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : Lambda72300Var : BV:32
2 : Lambda72301Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
14 : eq(12, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
17 : eq(12, 16) : BOOL
18 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
19 : eq(12, 18) : BOOL
20 : 253 { 0xfd -3 } : BV:8
21 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
22 : eq(12, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(17, 15, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
30 : bvadd(29, 11) : BV:32
31 : eq(30, 13) : BOOL
32 : eq(30, 16) : BOOL
33 : eq(30, 18) : BOOL
34 : eq(30, 21) : BOOL
35 : ite(34, 23, 24) : BV:8
36 : ite(33, 20, 35) : BV:8
37 : ite(32, 15, 36) : BV:8
38 : ite(31, 15, 37) : BV:8
39 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
40 : bvadd(39, 11) : BV:32
41 : eq(40, 13) : BOOL
42 : eq(40, 16) : BOOL
43 : eq(40, 18) : BOOL
44 : eq(40, 21) : BOOL
45 : ite(44, 23, 24) : BV:8
46 : ite(43, 20, 45) : BV:8
47 : ite(42, 15, 46) : BV:8
48 : ite(41, 15, 47) : BV:8
49 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
50 : bvadd(49, 11) : BV:32
51 : eq(50, 13) : BOOL
52 : eq(50, 16) : BOOL
53 : eq(50, 18) : BOOL
54 : eq(50, 21) : BOOL
55 : ite(54, 23, 24) : BV:8
56 : ite(53, 20, 55) : BV:8
57 : ite(52, 15, 56) : BV:8
58 : ite(51, 15, 57) : BV:8
59 : bvconcat(28, 38, 48, 58) : BV:32
60 : bvadd(7, 9, 59) : BV:32
61 : eq(60, 13) : BOOL
62 : eq(60, 16) : BOOL
63 : eq(60, 18) : BOOL
64 : eq(60, 21) : BOOL
65 : ite(64, 23, 24) : BV:8
66 : ite(63, 20, 65) : BV:8
67 : ite(62, 15, 66) : BV:8
68 : ite(61, 15, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 9, 59) : BV:32
71 : eq(70, 13) : BOOL
72 : eq(70, 16) : BOOL
73 : eq(70, 18) : BOOL
74 : eq(70, 21) : BOOL
75 : ite(74, 23, 24) : BV:8
76 : ite(73, 20, 75) : BV:8
77 : ite(72, 15, 76) : BV:8
78 : ite(71, 15, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 9, 59) : BV:32
81 : eq(80, 13) : BOOL
82 : eq(80, 16) : BOOL
83 : eq(80, 18) : BOOL
84 : eq(80, 21) : BOOL
85 : ite(84, 23, 24) : BV:8
86 : ite(83, 20, 85) : BV:8
87 : ite(82, 15, 86) : BV:8
88 : ite(81, 15, 87) : BV:8
89 : bvadd(9, 59) : BV:32
90 : eq(89, 13) : BOOL
91 : eq(89, 16) : BOOL
92 : eq(89, 18) : BOOL
93 : eq(89, 21) : BOOL
94 : ite(93, 23, 24) : BV:8
95 : ite(92, 20, 94) : BV:8
96 : ite(91, 15, 95) : BV:8
97 : ite(90, 15, 96) : BV:8
98 : bvconcat(68, 78, 88, 97) : BV:32
99 : ite(6, 3, 98) : BV:32
100 : lambda(1, 2, 99) : FUNCTION[BV:32,BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : Lambda72302Var : BV:32
2 : Lambda72303Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 67108865 { 0x4000001 +1.11e137 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 67108864 { 0x4000000 +1.0e137 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
55 : eq(53, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
58 : eq(53, 57) : BOOL
59 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
60 : eq(53, 59) : BOOL
61 : 253 { 0xfd -3 } : BV:8
62 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
63 : eq(53, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 56, 67) : BV:8
69 : ite(55, 56, 68) : BV:8
70 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
71 : bvadd(70, 52) : BV:32
72 : eq(71, 54) : BOOL
73 : eq(71, 57) : BOOL
74 : eq(71, 59) : BOOL
75 : eq(71, 62) : BOOL
76 : ite(75, 64, 65) : BV:8
77 : ite(74, 61, 76) : BV:8
78 : ite(73, 56, 77) : BV:8
79 : ite(72, 56, 78) : BV:8
80 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
81 : bvadd(80, 52) : BV:32
82 : eq(81, 54) : BOOL
83 : eq(81, 57) : BOOL
84 : eq(81, 59) : BOOL
85 : eq(81, 62) : BOOL
86 : ite(85, 64, 65) : BV:8
87 : ite(84, 61, 86) : BV:8
88 : ite(83, 56, 87) : BV:8
89 : ite(82, 56, 88) : BV:8
90 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
91 : bvadd(90, 52) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 62) : BOOL
96 : ite(95, 64, 65) : BV:8
97 : ite(94, 61, 96) : BV:8
98 : ite(93, 56, 97) : BV:8
99 : ite(92, 56, 98) : BV:8
100 : bvconcat(69, 79, 89, 99) : BV:32
101 : bvadd(48, 50, 100) : BV:32
102 : eq(101, 54) : BOOL
103 : eq(101, 57) : BOOL
104 : eq(101, 59) : BOOL
105 : eq(101, 62) : BOOL
106 : ite(105, 64, 65) : BV:8
107 : ite(104, 61, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : ite(102, 56, 108) : BV:8
110 : 2 { 0x2 +1.23e129 } : BV:32
111 : bvadd(110, 50, 100) : BV:32
112 : eq(111, 54) : BOOL
113 : eq(111, 57) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 62) : BOOL
116 : ite(115, 64, 65) : BV:8
117 : ite(114, 61, 116) : BV:8
118 : ite(113, 56, 117) : BV:8
119 : ite(112, 56, 118) : BV:8
120 : 1 { 0x1 +1.11e129 } : BV:32
121 : bvadd(120, 50, 100) : BV:32
122 : eq(121, 54) : BOOL
123 : eq(121, 57) : BOOL
124 : eq(121, 59) : BOOL
125 : eq(121, 62) : BOOL
126 : ite(125, 64, 65) : BV:8
127 : ite(124, 61, 126) : BV:8
128 : ite(123, 56, 127) : BV:8
129 : ite(122, 56, 128) : BV:8
130 : bvadd(50, 100) : BV:32
131 : eq(130, 54) : BOOL
132 : eq(130, 57) : BOOL
133 : eq(130, 59) : BOOL
134 : eq(130, 62) : BOOL
135 : ite(134, 64, 65) : BV:8
136 : ite(133, 61, 135) : BV:8
137 : ite(132, 56, 136) : BV:8
138 : ite(131, 56, 137) : BV:8
139 : bvconcat(109, 119, 129, 138) : BV:32
140 : ite(6, 3, 139) : BV:32
141 : ite(47, 139, 140) : BV:32
142 : ite(6, 3, 141) : BV:32
143 : ite(6, 3, 142) : BV:32
144 : lambda(1, 2, 143) : FUNCTION[BV:32,BV:32 -> BV:32]
145 : sym_const(144) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : Lambda72304Var : BV:32
2 : Lambda72305Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : Lambda72308Var : BV:32
2 : Lambda72309Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 1083180032 ] -> true, [ 1083180033; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : Lambda72295Var : BV:32
2 : Lambda72296Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-i-1.L3%7%bbentry
1 : 546308128 { 0x20900020 +1.12500381e194 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda72447Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda72448Var : BV:32
18 : Lambda72449Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda72450Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
82 : eq(80, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
85 : eq(80, 84) : BOOL
86 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
87 : eq(80, 86) : BOOL
88 : 253 { 0xfd -3 } : BV:8
89 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
90 : eq(80, 89) : BOOL
91 : 127 { 0x7f } : BV:8
92 : 0 { 0x0 } : BV:8
93 : ite(90, 91, 92) : BV:8
94 : ite(87, 88, 93) : BV:8
95 : ite(85, 83, 94) : BV:8
96 : ite(82, 83, 95) : BV:8
97 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
98 : bvadd(97, 79) : BV:32
99 : eq(98, 81) : BOOL
100 : eq(98, 84) : BOOL
101 : eq(98, 86) : BOOL
102 : eq(98, 89) : BOOL
103 : ite(102, 91, 92) : BV:8
104 : ite(101, 88, 103) : BV:8
105 : ite(100, 83, 104) : BV:8
106 : ite(99, 83, 105) : BV:8
107 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
108 : bvadd(107, 79) : BV:32
109 : eq(108, 81) : BOOL
110 : eq(108, 84) : BOOL
111 : eq(108, 86) : BOOL
112 : eq(108, 89) : BOOL
113 : ite(112, 91, 92) : BV:8
114 : ite(111, 88, 113) : BV:8
115 : ite(110, 83, 114) : BV:8
116 : ite(109, 83, 115) : BV:8
117 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
118 : bvadd(117, 79) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 89) : BOOL
123 : ite(122, 91, 92) : BV:8
124 : ite(121, 88, 123) : BV:8
125 : ite(120, 83, 124) : BV:8
126 : ite(119, 83, 125) : BV:8
127 : bvconcat(96, 106, 116, 126) : BV:32
128 : bvadd(75, 77, 127) : BV:32
129 : eq(128, 81) : BOOL
130 : eq(128, 84) : BOOL
131 : eq(128, 86) : BOOL
132 : eq(128, 89) : BOOL
133 : ite(132, 91, 92) : BV:8
134 : ite(131, 88, 133) : BV:8
135 : ite(130, 83, 134) : BV:8
136 : ite(129, 83, 135) : BV:8
137 : 2 { 0x2 +1.23e129 } : BV:32
138 : bvadd(137, 77, 127) : BV:32
139 : eq(138, 81) : BOOL
140 : eq(138, 84) : BOOL
141 : eq(138, 86) : BOOL
142 : eq(138, 89) : BOOL
143 : ite(142, 91, 92) : BV:8
144 : ite(141, 88, 143) : BV:8
145 : ite(140, 83, 144) : BV:8
146 : ite(139, 83, 145) : BV:8
147 : 1 { 0x1 +1.11e129 } : BV:32
148 : bvadd(147, 77, 127) : BV:32
149 : eq(148, 81) : BOOL
150 : eq(148, 84) : BOOL
151 : eq(148, 86) : BOOL
152 : eq(148, 89) : BOOL
153 : ite(152, 91, 92) : BV:8
154 : ite(151, 88, 153) : BV:8
155 : ite(150, 83, 154) : BV:8
156 : ite(149, 83, 155) : BV:8
157 : bvadd(77, 127) : BV:32
158 : eq(157, 81) : BOOL
159 : eq(157, 84) : BOOL
160 : eq(157, 86) : BOOL
161 : eq(157, 89) : BOOL
162 : ite(161, 91, 92) : BV:8
163 : ite(160, 88, 162) : BV:8
164 : ite(159, 83, 163) : BV:8
165 : ite(158, 83, 164) : BV:8
166 : bvconcat(136, 146, 156, 165) : BV:32
167 : ite(55, 2, 166) : BV:32
168 : ite(74, 166, 167) : BV:32
169 : ite(55, 2, 168) : BV:32
170 : ite(55, 2, 169) : BV:32
171 : lambda(52, 170) : FUNCTION[BV:32 -> BV:32]
172 : map(51, 171) : MAP[BV:32 -> BV:32]
173 : lambda(17, 172) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
174 : map(16, 173) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
175 : sym_const(174) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-n-0.L3%18%bbentry
1 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
=input.spec-%var-m-0.L3%18%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4069006857
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)), andnot2(bvuge(0, input.spec-%var-m-1.L3%7%bbentry), bvuge(bvadd(1, input.spec-%var-i-1.L3%7%bbentry), input.spec-%var-n-1.L3%7%bbentry))):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.spec-%var-m-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : input.spec-%var-i-1.L3%7%bbentry : BV:32
10 : bvadd(8, 9) : BV:32
11 : input.spec-%var-n-1.L3%7%bbentry : BV:32
12 : bvuge(10, 11) : BOOL
13 : andnot2(7, 12) : BOOL
14 : or(4, 13) : BOOL
</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D2: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : Done adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:19 : Failed correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
141017 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140461 : input.dst.llvm-%m : BV:32                 : 67108864
141019 : bvult(141017, 140461) : BOOL              : true
219776 : not(141019) : BOOL                        : false
140290 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140710 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 67108864
192753 : bvuge(140290, 140710) : BOOL              : false
140345 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140694 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 546308128
140797 : bvadd(140345, 140694) : BV:32             : 546308129
140695 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 1083180033
227351 : bvuge(140797, 140695) : BOOL              : false
227360 : andnot2(192753, 227351) : BOOL            : false
228172 : or(219776, 227360) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce5630 4152ab7b55b04ebfd21628bd9cd0a34b
=input.spec-%var-mat-2
1 : Lambda72434Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda72435Var : BV:32
18 : Lambda72436Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda72437Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
82 : eq(80, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
85 : eq(80, 84) : BOOL
86 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
87 : eq(80, 86) : BOOL
88 : 253 { 0xfd -3 } : BV:8
89 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
90 : eq(80, 89) : BOOL
91 : 127 { 0x7f } : BV:8
92 : 0 { 0x0 } : BV:8
93 : ite(90, 91, 92) : BV:8
94 : ite(87, 88, 93) : BV:8
95 : ite(85, 83, 94) : BV:8
96 : ite(82, 83, 95) : BV:8
97 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
98 : bvadd(97, 79) : BV:32
99 : eq(98, 81) : BOOL
100 : eq(98, 84) : BOOL
101 : eq(98, 86) : BOOL
102 : eq(98, 89) : BOOL
103 : ite(102, 91, 92) : BV:8
104 : ite(101, 88, 103) : BV:8
105 : ite(100, 83, 104) : BV:8
106 : ite(99, 83, 105) : BV:8
107 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
108 : bvadd(107, 79) : BV:32
109 : eq(108, 81) : BOOL
110 : eq(108, 84) : BOOL
111 : eq(108, 86) : BOOL
112 : eq(108, 89) : BOOL
113 : ite(112, 91, 92) : BV:8
114 : ite(111, 88, 113) : BV:8
115 : ite(110, 83, 114) : BV:8
116 : ite(109, 83, 115) : BV:8
117 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
118 : bvadd(117, 79) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 89) : BOOL
123 : ite(122, 91, 92) : BV:8
124 : ite(121, 88, 123) : BV:8
125 : ite(120, 83, 124) : BV:8
126 : ite(119, 83, 125) : BV:8
127 : bvconcat(96, 106, 116, 126) : BV:32
128 : bvadd(75, 77, 127) : BV:32
129 : eq(128, 81) : BOOL
130 : eq(128, 84) : BOOL
131 : eq(128, 86) : BOOL
132 : eq(128, 89) : BOOL
133 : ite(132, 91, 92) : BV:8
134 : ite(131, 88, 133) : BV:8
135 : ite(130, 83, 134) : BV:8
136 : ite(129, 83, 135) : BV:8
137 : 2 { 0x2 +1.23e129 } : BV:32
138 : bvadd(137, 77, 127) : BV:32
139 : eq(138, 81) : BOOL
140 : eq(138, 84) : BOOL
141 : eq(138, 86) : BOOL
142 : eq(138, 89) : BOOL
143 : ite(142, 91, 92) : BV:8
144 : ite(141, 88, 143) : BV:8
145 : ite(140, 83, 144) : BV:8
146 : ite(139, 83, 145) : BV:8
147 : 1 { 0x1 +1.11e129 } : BV:32
148 : bvadd(147, 77, 127) : BV:32
149 : eq(148, 81) : BOOL
150 : eq(148, 84) : BOOL
151 : eq(148, 86) : BOOL
152 : eq(148, 89) : BOOL
153 : ite(152, 91, 92) : BV:8
154 : ite(151, 88, 153) : BV:8
155 : ite(150, 83, 154) : BV:8
156 : ite(149, 83, 155) : BV:8
157 : bvadd(77, 127) : BV:32
158 : eq(157, 81) : BOOL
159 : eq(157, 84) : BOOL
160 : eq(157, 86) : BOOL
161 : eq(157, 89) : BOOL
162 : ite(161, 91, 92) : BV:8
163 : ite(160, 88, 162) : BV:8
164 : ite(159, 83, 163) : BV:8
165 : ite(158, 83, 164) : BV:8
166 : bvconcat(136, 146, 156, 165) : BV:32
167 : ite(55, 2, 166) : BV:32
168 : ite(74, 166, 167) : BV:32
169 : ite(55, 2, 168) : BV:32
170 : lambda(52, 169) : FUNCTION[BV:32 -> BV:32]
171 : map(51, 170) : MAP[BV:32 -> BV:32]
172 : lambda(17, 171) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
173 : map(16, 172) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
174 : sym_const(173) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
=input.spec-%var-m-2
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%var-mat-1.L3%7%bbentry
1 : Lambda72460Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda72461Var : BV:32
18 : Lambda72462Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda72463Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
63 : eq(61, 62) : BOOL
64 : 255 { 0xff -1 } : BV:8
65 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
66 : eq(61, 65) : BOOL
67 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
68 : eq(61, 67) : BOOL
69 : 253 { 0xfd -3 } : BV:8
70 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
71 : eq(61, 70) : BOOL
72 : 127 { 0x7f } : BV:8
73 : 0 { 0x0 } : BV:8
74 : ite(71, 72, 73) : BV:8
75 : ite(68, 69, 74) : BV:8
76 : ite(66, 64, 75) : BV:8
77 : ite(63, 64, 76) : BV:8
78 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
79 : bvadd(78, 60) : BV:32
80 : eq(79, 62) : BOOL
81 : eq(79, 65) : BOOL
82 : eq(79, 67) : BOOL
83 : eq(79, 70) : BOOL
84 : ite(83, 72, 73) : BV:8
85 : ite(82, 69, 84) : BV:8
86 : ite(81, 64, 85) : BV:8
87 : ite(80, 64, 86) : BV:8
88 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
89 : bvadd(88, 60) : BV:32
90 : eq(89, 62) : BOOL
91 : eq(89, 65) : BOOL
92 : eq(89, 67) : BOOL
93 : eq(89, 70) : BOOL
94 : ite(93, 72, 73) : BV:8
95 : ite(92, 69, 94) : BV:8
96 : ite(91, 64, 95) : BV:8
97 : ite(90, 64, 96) : BV:8
98 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
99 : bvadd(98, 60) : BV:32
100 : eq(99, 62) : BOOL
101 : eq(99, 65) : BOOL
102 : eq(99, 67) : BOOL
103 : eq(99, 70) : BOOL
104 : ite(103, 72, 73) : BV:8
105 : ite(102, 69, 104) : BV:8
106 : ite(101, 64, 105) : BV:8
107 : ite(100, 64, 106) : BV:8
108 : bvconcat(77, 87, 97, 107) : BV:32
109 : bvadd(56, 58, 108) : BV:32
110 : eq(109, 62) : BOOL
111 : eq(109, 65) : BOOL
112 : eq(109, 67) : BOOL
113 : eq(109, 70) : BOOL
114 : ite(113, 72, 73) : BV:8
115 : ite(112, 69, 114) : BV:8
116 : ite(111, 64, 115) : BV:8
117 : ite(110, 64, 116) : BV:8
118 : 2 { 0x2 +1.23e129 } : BV:32
119 : bvadd(118, 58, 108) : BV:32
120 : eq(119, 62) : BOOL
121 : eq(119, 65) : BOOL
122 : eq(119, 67) : BOOL
123 : eq(119, 70) : BOOL
124 : ite(123, 72, 73) : BV:8
125 : ite(122, 69, 124) : BV:8
126 : ite(121, 64, 125) : BV:8
127 : ite(120, 64, 126) : BV:8
128 : 1 { 0x1 +1.11e129 } : BV:32
129 : bvadd(128, 58, 108) : BV:32
130 : eq(129, 62) : BOOL
131 : eq(129, 65) : BOOL
132 : eq(129, 67) : BOOL
133 : eq(129, 70) : BOOL
134 : ite(133, 72, 73) : BV:8
135 : ite(132, 69, 134) : BV:8
136 : ite(131, 64, 135) : BV:8
137 : ite(130, 64, 136) : BV:8
138 : bvadd(58, 108) : BV:32
139 : eq(138, 62) : BOOL
140 : eq(138, 65) : BOOL
141 : eq(138, 67) : BOOL
142 : eq(138, 70) : BOOL
143 : ite(142, 72, 73) : BV:8
144 : ite(141, 69, 143) : BV:8
145 : ite(140, 64, 144) : BV:8
146 : ite(139, 64, 145) : BV:8
147 : bvconcat(117, 127, 137, 146) : BV:32
148 : ite(55, 2, 147) : BV:32
149 : lambda(52, 148) : FUNCTION[BV:32 -> BV:32]
150 : map(51, 149) : MAP[BV:32 -> BV:32]
151 : lambda(17, 150) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
152 : map(16, 151) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
153 : sym_const(152) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 2210673023 ] -> 0, [ 2210673024; 2210673024 ] -> 253, [ 2210673025; 2210673026 ] -> 255, [ 2210673027; 2210673027 ] -> 127, [ 2210673028; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 893731 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 893732; 893735 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 893736; 1003180447 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 1003180448; 1003180451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1003180452; 1136952063 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, [ 1136952064; 1136952067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1136952068; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%n
1 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
=input.dst.llvm-%m
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1136952064 { 0x43c48300 +1.53524780e8 } : BV:32
=input.dst.llvm-%arr
1 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 893732 { 0xda324 +1.10654115e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1003180448 { 0x3bcb51a0 +1.58842849e248 } : BV:32
=input.spec-%var-n-1.L3%7%bbentry
1 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 546308128 { 0x20900020 +1.12500381e194 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1136952064 { 0x43c48300 +1.53524780e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1136952067 { 0x43c48303 +1.53524816e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 893732 { 0xda324 +1.10654115e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 893735 { 0xda327 +1.10654151e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1003180448 { 0x3bcb51a0 +1.58842849e248 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1003180451 { 0x3bcb51a3 +1.58842885e248 } : BV:32
=input.spec-%var-mat-2.0.1
1 : ([ 0; 1083180032 ] -> true, [ 1083180033; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-0.L3%18%bbentry.0.1
1 : ([ 0; 1083180032 ] -> true, [ 1083180033; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.1.1
1 : Lambda72293Var : BV:32
2 : Lambda72294Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 67108865 { 0x4000001 +1.11e137 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 67108864 { 0x4000000 +1.0e137 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
55 : eq(53, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
58 : eq(53, 57) : BOOL
59 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
60 : eq(53, 59) : BOOL
61 : 253 { 0xfd -3 } : BV:8
62 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
63 : eq(53, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 56, 67) : BV:8
69 : ite(55, 56, 68) : BV:8
70 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
71 : bvadd(70, 52) : BV:32
72 : eq(71, 54) : BOOL
73 : eq(71, 57) : BOOL
74 : eq(71, 59) : BOOL
75 : eq(71, 62) : BOOL
76 : ite(75, 64, 65) : BV:8
77 : ite(74, 61, 76) : BV:8
78 : ite(73, 56, 77) : BV:8
79 : ite(72, 56, 78) : BV:8
80 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
81 : bvadd(80, 52) : BV:32
82 : eq(81, 54) : BOOL
83 : eq(81, 57) : BOOL
84 : eq(81, 59) : BOOL
85 : eq(81, 62) : BOOL
86 : ite(85, 64, 65) : BV:8
87 : ite(84, 61, 86) : BV:8
88 : ite(83, 56, 87) : BV:8
89 : ite(82, 56, 88) : BV:8
90 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
91 : bvadd(90, 52) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 62) : BOOL
96 : ite(95, 64, 65) : BV:8
97 : ite(94, 61, 96) : BV:8
98 : ite(93, 56, 97) : BV:8
99 : ite(92, 56, 98) : BV:8
100 : bvconcat(69, 79, 89, 99) : BV:32
101 : bvadd(48, 50, 100) : BV:32
102 : eq(101, 54) : BOOL
103 : eq(101, 57) : BOOL
104 : eq(101, 59) : BOOL
105 : eq(101, 62) : BOOL
106 : ite(105, 64, 65) : BV:8
107 : ite(104, 61, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : ite(102, 56, 108) : BV:8
110 : 2 { 0x2 +1.23e129 } : BV:32
111 : bvadd(110, 50, 100) : BV:32
112 : eq(111, 54) : BOOL
113 : eq(111, 57) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 62) : BOOL
116 : ite(115, 64, 65) : BV:8
117 : ite(114, 61, 116) : BV:8
118 : ite(113, 56, 117) : BV:8
119 : ite(112, 56, 118) : BV:8
120 : 1 { 0x1 +1.11e129 } : BV:32
121 : bvadd(120, 50, 100) : BV:32
122 : eq(121, 54) : BOOL
123 : eq(121, 57) : BOOL
124 : eq(121, 59) : BOOL
125 : eq(121, 62) : BOOL
126 : ite(125, 64, 65) : BV:8
127 : ite(124, 61, 126) : BV:8
128 : ite(123, 56, 127) : BV:8
129 : ite(122, 56, 128) : BV:8
130 : bvadd(50, 100) : BV:32
131 : eq(130, 54) : BOOL
132 : eq(130, 57) : BOOL
133 : eq(130, 59) : BOOL
134 : eq(130, 62) : BOOL
135 : ite(134, 64, 65) : BV:8
136 : ite(133, 61, 135) : BV:8
137 : ite(132, 56, 136) : BV:8
138 : ite(131, 56, 137) : BV:8
139 : bvconcat(109, 119, 129, 138) : BV:32
140 : ite(6, 3, 139) : BV:32
141 : ite(47, 139, 140) : BV:32
142 : ite(6, 3, 141) : BV:32
143 : lambda(1, 2, 142) : FUNCTION[BV:32,BV:32 -> BV:32]
144 : sym_const(143) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.1.1
1 : Lambda72300Var : BV:32
2 : Lambda72301Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
14 : eq(12, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
17 : eq(12, 16) : BOOL
18 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
19 : eq(12, 18) : BOOL
20 : 253 { 0xfd -3 } : BV:8
21 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
22 : eq(12, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(17, 15, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
30 : bvadd(29, 11) : BV:32
31 : eq(30, 13) : BOOL
32 : eq(30, 16) : BOOL
33 : eq(30, 18) : BOOL
34 : eq(30, 21) : BOOL
35 : ite(34, 23, 24) : BV:8
36 : ite(33, 20, 35) : BV:8
37 : ite(32, 15, 36) : BV:8
38 : ite(31, 15, 37) : BV:8
39 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
40 : bvadd(39, 11) : BV:32
41 : eq(40, 13) : BOOL
42 : eq(40, 16) : BOOL
43 : eq(40, 18) : BOOL
44 : eq(40, 21) : BOOL
45 : ite(44, 23, 24) : BV:8
46 : ite(43, 20, 45) : BV:8
47 : ite(42, 15, 46) : BV:8
48 : ite(41, 15, 47) : BV:8
49 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
50 : bvadd(49, 11) : BV:32
51 : eq(50, 13) : BOOL
52 : eq(50, 16) : BOOL
53 : eq(50, 18) : BOOL
54 : eq(50, 21) : BOOL
55 : ite(54, 23, 24) : BV:8
56 : ite(53, 20, 55) : BV:8
57 : ite(52, 15, 56) : BV:8
58 : ite(51, 15, 57) : BV:8
59 : bvconcat(28, 38, 48, 58) : BV:32
60 : bvadd(7, 9, 59) : BV:32
61 : eq(60, 13) : BOOL
62 : eq(60, 16) : BOOL
63 : eq(60, 18) : BOOL
64 : eq(60, 21) : BOOL
65 : ite(64, 23, 24) : BV:8
66 : ite(63, 20, 65) : BV:8
67 : ite(62, 15, 66) : BV:8
68 : ite(61, 15, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 9, 59) : BV:32
71 : eq(70, 13) : BOOL
72 : eq(70, 16) : BOOL
73 : eq(70, 18) : BOOL
74 : eq(70, 21) : BOOL
75 : ite(74, 23, 24) : BV:8
76 : ite(73, 20, 75) : BV:8
77 : ite(72, 15, 76) : BV:8
78 : ite(71, 15, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 9, 59) : BV:32
81 : eq(80, 13) : BOOL
82 : eq(80, 16) : BOOL
83 : eq(80, 18) : BOOL
84 : eq(80, 21) : BOOL
85 : ite(84, 23, 24) : BV:8
86 : ite(83, 20, 85) : BV:8
87 : ite(82, 15, 86) : BV:8
88 : ite(81, 15, 87) : BV:8
89 : bvadd(9, 59) : BV:32
90 : eq(89, 13) : BOOL
91 : eq(89, 16) : BOOL
92 : eq(89, 18) : BOOL
93 : eq(89, 21) : BOOL
94 : ite(93, 23, 24) : BV:8
95 : ite(92, 20, 94) : BV:8
96 : ite(91, 15, 95) : BV:8
97 : ite(90, 15, 96) : BV:8
98 : bvconcat(68, 78, 88, 97) : BV:32
99 : ite(6, 3, 98) : BV:32
100 : lambda(1, 2, 99) : FUNCTION[BV:32,BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.1.1
1 : Lambda72302Var : BV:32
2 : Lambda72303Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 67108865 { 0x4000001 +1.11e137 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 67108864 { 0x4000000 +1.0e137 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
55 : eq(53, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
58 : eq(53, 57) : BOOL
59 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
60 : eq(53, 59) : BOOL
61 : 253 { 0xfd -3 } : BV:8
62 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
63 : eq(53, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 56, 67) : BV:8
69 : ite(55, 56, 68) : BV:8
70 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
71 : bvadd(70, 52) : BV:32
72 : eq(71, 54) : BOOL
73 : eq(71, 57) : BOOL
74 : eq(71, 59) : BOOL
75 : eq(71, 62) : BOOL
76 : ite(75, 64, 65) : BV:8
77 : ite(74, 61, 76) : BV:8
78 : ite(73, 56, 77) : BV:8
79 : ite(72, 56, 78) : BV:8
80 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
81 : bvadd(80, 52) : BV:32
82 : eq(81, 54) : BOOL
83 : eq(81, 57) : BOOL
84 : eq(81, 59) : BOOL
85 : eq(81, 62) : BOOL
86 : ite(85, 64, 65) : BV:8
87 : ite(84, 61, 86) : BV:8
88 : ite(83, 56, 87) : BV:8
89 : ite(82, 56, 88) : BV:8
90 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
91 : bvadd(90, 52) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 59) : BOOL
95 : eq(91, 62) : BOOL
96 : ite(95, 64, 65) : BV:8
97 : ite(94, 61, 96) : BV:8
98 : ite(93, 56, 97) : BV:8
99 : ite(92, 56, 98) : BV:8
100 : bvconcat(69, 79, 89, 99) : BV:32
101 : bvadd(48, 50, 100) : BV:32
102 : eq(101, 54) : BOOL
103 : eq(101, 57) : BOOL
104 : eq(101, 59) : BOOL
105 : eq(101, 62) : BOOL
106 : ite(105, 64, 65) : BV:8
107 : ite(104, 61, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : ite(102, 56, 108) : BV:8
110 : 2 { 0x2 +1.23e129 } : BV:32
111 : bvadd(110, 50, 100) : BV:32
112 : eq(111, 54) : BOOL
113 : eq(111, 57) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 62) : BOOL
116 : ite(115, 64, 65) : BV:8
117 : ite(114, 61, 116) : BV:8
118 : ite(113, 56, 117) : BV:8
119 : ite(112, 56, 118) : BV:8
120 : 1 { 0x1 +1.11e129 } : BV:32
121 : bvadd(120, 50, 100) : BV:32
122 : eq(121, 54) : BOOL
123 : eq(121, 57) : BOOL
124 : eq(121, 59) : BOOL
125 : eq(121, 62) : BOOL
126 : ite(125, 64, 65) : BV:8
127 : ite(124, 61, 126) : BV:8
128 : ite(123, 56, 127) : BV:8
129 : ite(122, 56, 128) : BV:8
130 : bvadd(50, 100) : BV:32
131 : eq(130, 54) : BOOL
132 : eq(130, 57) : BOOL
133 : eq(130, 59) : BOOL
134 : eq(130, 62) : BOOL
135 : ite(134, 64, 65) : BV:8
136 : ite(133, 61, 135) : BV:8
137 : ite(132, 56, 136) : BV:8
138 : ite(131, 56, 137) : BV:8
139 : bvconcat(109, 119, 129, 138) : BV:32
140 : ite(6, 3, 139) : BV:32
141 : ite(47, 139, 140) : BV:32
142 : ite(6, 3, 141) : BV:32
143 : ite(6, 3, 142) : BV:32
144 : lambda(1, 2, 143) : FUNCTION[BV:32,BV:32 -> BV:32]
145 : sym_const(144) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-mat-0.L3%18%bbentry.1.1.0.1
1 : Lambda72304Var : BV:32
2 : Lambda72305Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.1.1.0.1
1 : Lambda72308Var : BV:32
2 : Lambda72309Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-mat-1.L3%7%bbentry.0.1
1 : ([ 0; 1083180032 ] -> true, [ 1083180033; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-mat-2.1.1.0.1
1 : Lambda72295Var : BV:32
2 : Lambda72296Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 67108864 { 0x4000000 +1.0e137 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-i-1.L3%7%bbentry
1 : 546308128 { 0x20900020 +1.12500381e194 } : BV:32
=input.spec-%var-mat-0.L3%18%bbentry
1 : Lambda72447Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1083180032 { 0x40900400 +1.12512207e2 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda72448Var : BV:32
18 : Lambda72449Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 1083180034 { 0x40900402 +1.12512230e2 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 67108865 { 0x4000001 +1.11e137 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 67108864 { 0x4000000 +1.0e137 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda72450Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 25440515 { 0x1843103 +1.3274571e132 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2210673025 { 0x83c43181 -2084294271 -1.53276073e136 } : BV:32
82 : eq(80, 81) : BOOL
83 : 255 { 0xff -1 } : BV:8
84 : 2210673026 { 0x83c43182 -2084294270 -1.53276085e136 } : BV:32
85 : eq(80, 84) : BOOL
86 : 2210673024 { 0x83c43180 -2084294272 -1.53276062e136 } : BV:32
87 : eq(80, 86) : BOOL
88 : 253 { 0xfd -3 } : BV:8
89 : 2210673027 { 0x83c43183 -2084294269 -1.53276097e136 } : BV:32
90 : eq(80, 89) : BOOL
91 : 127 { 0x7f } : BV:8
92 : 0 { 0x0 } : BV:8
93 : ite(90, 91, 92) : BV:8
94 : ite(87, 88, 93) : BV:8
95 : ite(85, 83, 94) : BV:8
96 : ite(82, 83, 95) : BV:8
97 : 25440514 { 0x1843102 +1.3274559e132 } : BV:32
98 : bvadd(97, 79) : BV:32
99 : eq(98, 81) : BOOL
100 : eq(98, 84) : BOOL
101 : eq(98, 86) : BOOL
102 : eq(98, 89) : BOOL
103 : ite(102, 91, 92) : BV:8
104 : ite(101, 88, 103) : BV:8
105 : ite(100, 83, 104) : BV:8
106 : ite(99, 83, 105) : BV:8
107 : 25440513 { 0x1843101 +1.3274548e132 } : BV:32
108 : bvadd(107, 79) : BV:32
109 : eq(108, 81) : BOOL
110 : eq(108, 84) : BOOL
111 : eq(108, 86) : BOOL
112 : eq(108, 89) : BOOL
113 : ite(112, 91, 92) : BV:8
114 : ite(111, 88, 113) : BV:8
115 : ite(110, 83, 114) : BV:8
116 : ite(109, 83, 115) : BV:8
117 : 25440512 { 0x1843100 +1.3274536e132 } : BV:32
118 : bvadd(117, 79) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 86) : BOOL
122 : eq(118, 89) : BOOL
123 : ite(122, 91, 92) : BV:8
124 : ite(121, 88, 123) : BV:8
125 : ite(120, 83, 124) : BV:8
126 : ite(119, 83, 125) : BV:8
127 : bvconcat(96, 106, 116, 126) : BV:32
128 : bvadd(75, 77, 127) : BV:32
129 : eq(128, 81) : BOOL
130 : eq(128, 84) : BOOL
131 : eq(128, 86) : BOOL
132 : eq(128, 89) : BOOL
133 : ite(132, 91, 92) : BV:8
134 : ite(131, 88, 133) : BV:8
135 : ite(130, 83, 134) : BV:8
136 : ite(129, 83, 135) : BV:8
137 : 2 { 0x2 +1.23e129 } : BV:32
138 : bvadd(137, 77, 127) : BV:32
139 : eq(138, 81) : BOOL
140 : eq(138, 84) : BOOL
141 : eq(138, 86) : BOOL
142 : eq(138, 89) : BOOL
143 : ite(142, 91, 92) : BV:8
144 : ite(141, 88, 143) : BV:8
145 : ite(140, 83, 144) : BV:8
146 : ite(139, 83, 145) : BV:8
147 : 1 { 0x1 +1.11e129 } : BV:32
148 : bvadd(147, 77, 127) : BV:32
149 : eq(148, 81) : BOOL
150 : eq(148, 84) : BOOL
151 : eq(148, 86) : BOOL
152 : eq(148, 89) : BOOL
153 : ite(152, 91, 92) : BV:8
154 : ite(151, 88, 153) : BV:8
155 : ite(150, 83, 154) : BV:8
156 : ite(149, 83, 155) : BV:8
157 : bvadd(77, 127) : BV:32
158 : eq(157, 81) : BOOL
159 : eq(157, 84) : BOOL
160 : eq(157, 86) : BOOL
161 : eq(157, 89) : BOOL
162 : ite(161, 91, 92) : BV:8
163 : ite(160, 88, 162) : BV:8
164 : ite(159, 83, 163) : BV:8
165 : ite(158, 83, 164) : BV:8
166 : bvconcat(136, 146, 156, 165) : BV:32
167 : ite(55, 2, 166) : BV:32
168 : ite(74, 166, 167) : BV:32
169 : ite(55, 2, 168) : BV:32
170 : ite(55, 2, 169) : BV:32
171 : lambda(52, 170) : FUNCTION[BV:32 -> BV:32]
172 : map(51, 171) : MAP[BV:32 -> BV:32]
173 : lambda(17, 172) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
174 : map(16, 173) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
175 : sym_const(174) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-23.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-n-0.L3%18%bbentry
1 : 1083180033 { 0x40900401 +1.12512218e2 } : BV:32
=input.spec-%var-m-0.L3%18%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.spec-%tmpvar-7.L3%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-4.L3%34%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-24.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-2.L3%35%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4069006857
=counter_example_end


</MSG>
<MSG>4:19 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14)...</MSG>
<MSG>4:19 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 40 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 24 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:19 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>4:19 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>4:19 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:19 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:19 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:19 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:19 : Adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: Propagated 4 out of 24 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: Added the 4 propagated CEs at PC L3%10%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B3.C1.D1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : Done adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:19 : Added correlation to the product-TFG foo.A1.B3.C1.D1 (d:4, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:19 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%18%bbentry[mu 1, delta {1,0}]
<MSG>4:19 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:19 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:19 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 13 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial15-prove2...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:19 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:19 : foo.A1.B4 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:19 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:20 : product-TFG foo.A1.B4: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:20 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:20 : Attempting correlation of src pathset L3%18%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:20 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:20 : product-TFG foo.A1.B4: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:20 : product-TFG foo.A1.B4 created 1 possibilities in group foo.A1.B4.C...</MSG>
<MSG>4:20 : Chose (for CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%18%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:20 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>4:20 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>4:20 : Creating ssa-path for the src-tfg path L3%18%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>4:20 : Adding a CG edge composition using the src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:20 : Identifying common alloc-deallocs in the src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>4:20 : Identified no common alloc-deallocs in the src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:20 : Adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%18%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Getting alloca-ptrs on edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Found no alloca-ptrs on edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Adding edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:20 : foo.A1.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:20 : foo.A1.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Propagated 14 out of 17 counter-examples across edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>4:20 : foo.A1.B4.C1: Added the 14 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>4:20 : foo.A1.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Computing CG regions after the addition of the edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Done computing CG regions after the addition of the edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:20 : Done adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%18%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>4:20 : Done adding a CG edge composition using the src path L3%18%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>4:20 : Added correlation to the product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:20 : Chose (after CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 33 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 19 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%18%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>4:20 : foo.A1.B4.C1: Updating invariants over the newly added edges in edge composition L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:20 : Constructed infer_invariants_dfa with initial worklist L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:20 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 14 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht16-prove_trivial13-prove3...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:20 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:21 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:21 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 13 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:22 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 13 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:23 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 14 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht16-prove_trivial13-prove3...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:23 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:24 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 13 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>4:24 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:24 : foo.A1.B4.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>4:24 : foo.A1.B4.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>4:25 : product-TFG foo.A1.B4.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:25 : Considering 2 paths to src pc L3%18%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:25 : Attempting correlation of src pathset L3%18%bbentry=>L3%18%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:25 : Attempting correlation of src pathset L3%18%bbentry=>L3%18%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:25 : Found 2 feasible correlations for paths to src pc L3%18%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:25 : product-TFG foo.A1.B4.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:25 : product-TFG foo.A1.B4.C1 created 2 possibilities in group foo.A1.B4.C1.D...</MSG>
<MSG>4:25 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 40 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 24 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%18%bbentry=>L3%18%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>4:25 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>4:25 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>4:25 : Creating ssa-path for the src-tfg path L3%18%bbentry --> L3%18%bbentry ending at L3%18%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>4:25 : Adding a CG edge composition using the src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:25 : Identifying common alloc-deallocs in the src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>4:25 : Identified no common alloc-deallocs in the src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:25 : Adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%18%bbentry_Lfor.cond1%1%bbentry and toPC L3%18%bbentry_Lfor.cond1%1%bbentry, src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:25 : foo.A1.B4.C1.D2: Getting alloca-ptrs on edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:25 : foo.A1.B4.C1.D2: Found no alloca-ptrs on edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:25 : foo.A1.B4.C1.D2: Adding edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:25 : foo.A1.B4.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>4:25 : foo.A1.B4.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>4:25 : foo.A1.B4.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>4:29 : foo.A1.B4.C1.D2: Propagated 4 out of 24 counter-examples across edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Added the 4 propagated CEs at PC L3%18%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Computing CG regions after the addition of the edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Done computing CG regions after the addition of the edge L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:39 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%18%bbentry_Lfor.cond1%1%bbentry and toPC L3%18%bbentry_Lfor.cond1%1%bbentry, src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>4:39 : Done adding a CG edge composition using the src path L3%18%bbentry --> L3%18%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>4:39 : Added correlation to the product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>4:39 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 40 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 33 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%18%bbentry=>L3%18%bbentry[mu 1, delta {1,0}]
<MSG>4:39 : foo.A1.B4.C1.D2: Updating invariants over the newly added edges in edge composition L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>4:39 : Constructed infer_invariants_dfa with initial worklist L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:39 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 17 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove9...</MSG>
<MSG>4:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>4:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:40 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:40 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove4...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>4:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:00 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 17 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove9...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:01 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:08 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>5:08 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:08 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>5:08 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:08 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:08 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:08 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:08 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 17 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:09 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove9...</MSG>
<MSG>5:09 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:10 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 17 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove9...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:11 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 13 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial6-prove2...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:13 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 18 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht13-prove_trivial10-prove3...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:14 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:15 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 19 exprs and 18 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht13-prove_trivial13-prove8...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:16 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%18%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>5:17 : product-TFG foo.A1.B4.C1.D2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:17 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:17 : Attempting correlation of src pathset L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:17 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:17 : product-TFG foo.A1.B4.C1.D2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>5:17 : product-TFG foo.A1.B4.C1.D2 created 1 possibilities in group foo.A1.B4.C1.D2.E...</MSG>
<MSG>5:17 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 44 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 42 counterexamples (for correlating 19 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>5:17 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>5:17 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>5:17 : Creating ssa-path for the src-tfg path L3%7%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>5:17 : Adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:17 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>5:17 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:17 : Adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Propagated 16 out of 38 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Added the 16 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:17 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>5:17 : Done adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>5:17 : Added correlation to the product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>5:17 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 44 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 42 counterexamples (for correlating 19 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 14 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>5:17 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>5:17 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>5:17 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>5:17 : Checking equivalence proof...</MSG>
<MSG>5:19 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%7%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (11 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1298
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [11]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-x-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%n ; 9-->input.dst.llvm-%m ; 10-->input.dst.llvm-%arr ; 11-->input.dst.llvm-%x.0.Lfor.cond%1%bbentry ; 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(4294967295, input.spec-%var-x-1.L3%7%bbentry))  ==  input.dst.llvm-%x.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      4.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      5.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      6.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce1298      1.:z3v487.ce1326      2.:z3.ce1411      3.:z3.ce1354      4.:z3v487.ce1382      5.:z3v487.ce1410      6.:z3.ce1438      7.:z3.ce1466      8.:z3v487.ce1564      9.:z3v487.ce1494      10.:z3v487.ce1508      11.:z3.ce1536      12.:z3v487.ce5894      13.:z3.ce7729
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-i-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1298      1.:z3v487.ce5894      2.:z3v487.ce6480      3.:z3v487.ce6553      4.:z3.ce6665      5.:z3.ce6738      6.:z3.ce6850
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1298      1.:z3.ce1592      2.:z3v487.ce1564      3.:z3.ce1620
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1298      1.:z3v487.ce1326      2.:z3.ce1648      3.:z3v487.ce1676
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1298      1.:z3.ce1592      2.:z3v487.ce1564      3.:z3.ce1620
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1298      1.:z3v487.ce1326      2.:z3.ce1648      3.:z3v487.ce1676
    eqclass 7:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1298      1.:z3v487.ce5894      2.:z3v487.ce6480      3.:z3v487.ce6553      4.:z3.ce6665      5.:z3.ce6738      6.:z3.ce6850
    eqclass 8:
    smallest point cover name dst-ineq, type HOUDINI, exprs [24]: 13-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 14-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 15-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 16-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 17-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 18-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 19-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 20-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 21-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 25-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 29-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 33-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1298      1.:z3.ce1592      2.:z3v487.ce1326      3.:z3v487.ce1564      4.:z3.ce1648      5.:z3v487.ce5894
    eqclass 9:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 37-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141540](input.spec-%var-mat-2, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142715](input.spec-%var-mat-1.L3%7%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 39-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142747](input.spec-%var-mat-1.L3%7%bbentry, map[142746](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 40-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142753](input.spec-%var-mat-1.L3%7%bbentry, map[142752](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 41-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142758](input.spec-%var-mat-1.L3%7%bbentry, map[142757](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%x.0.Lfor.cond%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 42-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142769](input.spec-%var-mat-1.L3%7%bbentry, map[142768](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    2 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142715](input.spec-%var-mat-1.L3%7%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141540](input.spec-%var-mat-2, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1298
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1298

L3%18%bbentry_Lfor.cond1%1%bbentry: (d:1, s:0, sp: 9)
  Invariant state (15 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1564
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [19]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-x-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%n ; 9-->input.dst.llvm-%m ; 10-->input.dst.llvm-%arr ; 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 43-->input.spec-%tmpvar-14.L3%8%d ; 44-->input.spec-%var-j-0.L3%18%bbentry ; 45-->input.spec-%var-m-0.L3%18%bbentry ; 46-->input.spec-%var-i-0.L3%18%bbentry ; 47-->input.spec-%var-x-0.L3%18%bbentry ; 48-->input.spec-%var-n-0.L3%18%bbentry ; 49-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 50-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 51-->input.dst.llvm-%x.1.Lfor.cond1%1%bbentry ; 
    13 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-x-0.L3%18%bbentry))  ==  input.dst.llvm-%x.1.Lfor.cond1%1%bbentry
      1.: bvneg(bvmul(4294967295, input.spec-%var-j-0.L3%18%bbentry))  ==  input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
      2.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-0.L3%18%bbentry
      3.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.spec-%var-i-0.L3%18%bbentry
      4.: 0                     ==  bvzero_ext(bool_to_bv(input.spec-%tmpvar-14.L3%8%d), 31)
      5.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      6.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      7.: 0                     ==  bvextract(input.dst.llvm-%arr, 1, 0)
      8.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      9.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-0.L3%18%bbentry
      10.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      11.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      12.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
     is_assumed_eqclass : 0
    18 visited ces:
      0.:z3.ce2986      1.:z3.ce2938      2.:z3.ce3034      3.:z3.ce2890      4.:z3v487.ce2891      5.:z3v487.ce2987      6.:z3v487.ce2939      7.:z3.ce3082      8.:z3.ce3130      9.:z3v487.ce3178      10.:z3.ce1592      11.:z3v487.ce1564      12.:z3.ce1620      13.:z3.ce6022      14.:z3v487.ce7086      15.:z3v487.ce6931      16.:z3.ce7162      17.:z3.ce7762
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-i-1.L3%7%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-1.L3%7%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1564      1.:z3.ce6022      2.:z3.ce6065      3.:z3.ce6771      4.:z3v487.ce6613      5.:z3v487.ce6586
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1.L3%7%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce2939      1.:z3.ce1592      2.:z3v487.ce1564      3.:z3.ce1620
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 44-->input.spec-%var-j-0.L3%18%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-j-0.L3%18%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-j-0.L3%18%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce1564      1.:z3v487.ce7086      2.:z3.ce7309      3.:z3.ce7411
    eqclass 5:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 45-->input.spec-%var-m-0.L3%18%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3274      1.:z3.ce3226      2.:z3.ce1592      3.:z3v487.ce1564
    eqclass 6:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 46-->input.spec-%var-i-0.L3%18%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%18%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1564      1.:z3.ce6022      2.:z3.ce6065      3.:z3.ce6771      4.:z3v487.ce6613      5.:z3v487.ce6586
    eqclass 7:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3274      1.:z3.ce3226      2.:z3.ce1592      3.:z3v487.ce1564
    eqclass 8:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%n ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce2939      1.:z3.ce1592      2.:z3v487.ce1564      3.:z3.ce1620
    eqclass 9:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3274      1.:z3.ce3226      2.:z3.ce1592      3.:z3v487.ce1564
    eqclass 10:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 12-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce1564      1.:z3.ce6022      2.:z3.ce6065      3.:z3.ce6771      4.:z3v487.ce6613      5.:z3v487.ce6586
    eqclass 11:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, type BV_CONST_INEQ, exprs [1]: 50-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce1564      1.:z3v487.ce7086      2.:z3.ce7309      3.:z3.ce7411
    eqclass 12:
    smallest point cover name dst-ineq, type HOUDINI, exprs [48]: 13-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 14-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 15-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 16-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 17-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 18-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 19-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 20-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 21-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 25-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 29-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 33-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 52-->bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 53-->bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 54-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 55-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 56-->bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 57-->bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 58-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 59-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 60-->bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 61-->bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 62-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 63-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 64-->bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 65-->bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 66-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 67-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 68-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 69-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 70-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 71-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 72-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 73-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 74-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 75-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    3 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce3226      1.:z3.ce1592      2.:z3v487.ce1564      3.:z3.ce6022      4.:z3.ce6771      5.:z3v487.ce7086      6.:z3.ce7525      7.:z3.ce7627
    eqclass 13:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 37-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141540](input.spec-%var-mat-2, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 38-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142715](input.spec-%var-mat-1.L3%7%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 76-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169710](input.spec-%var-mat-2, map[142768](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 77-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169711](input.spec-%var-mat-2, map[169708](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 78-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191339](input.spec-%var-mat-0.L3%18%bbentry, map[142746](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 79-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191612](input.spec-%var-mat-0.L3%18%bbentry, map[142752](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 80-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[191955](input.spec-%var-mat-0.L3%18%bbentry, map[142768](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 81-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[192567](input.spec-%var-mat-0.L3%18%bbentry, map[169708](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 82-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[192568](input.spec-%var-mat-0.L3%18%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 83-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[164848](input.spec-%var-mat-2, map[142752](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%arr))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 84-->140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[165487](input.spec-%var-mat-2, map[142746](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%m))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false)))))) ; 
    3 preds:
      0.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[192568](input.spec-%var-mat-0.L3%18%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      1.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142715](input.spec-%var-mat-1.L3%7%bbentry, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
      2.: 140757 = memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___bar__x__=L0%0%argnum2=/-local./*___y___bar__x__=L0%0%argnum3=/-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141540](input.spec-%var-mat-2, map[141539](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141538](Lambda3Var, map[141537](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141536](Lambda2Var, select[141535](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd[141534](bvmul(Lambda2Var, 4), select[141533](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 140757, bvadd(input.dst.llvm-%arr, bvmul(Lambda3Var, 4)), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1564
    eqclass 14:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce1564

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%18%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry => C L3%18%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 44 counterexamples (for correlating 11 bv exprs)
            L3%18%bbentry_Lfor.cond1%1%bbentry (C L3%18%bbentry, A (line 4 at column 28))
                L3%18%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 42 counterexamples (for correlating 19 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 14 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 89.62s, query:smt.: 20.5197s (num_starts 253; 0.0811s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 47.7066s (num_starts 890; 0.0536s/start)ftmap_run_pointsto_analysis.: 0.509807s (num_starts 2; 0.2549s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 4e-06s (num_starts 8; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.3e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.: 1.4e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 1.7e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 1.7e-05s (num_starts 2; 0.0000s/start)
compute_tfg_pred_eqclass.: 2.1e-05s (num_starts 7; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.4e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.5e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.6e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.8e-05s (num_starts 3; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.3e-05s (num_starts 13; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 3.5e-05s (num_starts 44; 0.0000s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry.: 3.7e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 4.6e-05s (num_starts 2; 0.0000s/start)
prune_dst_memslots.: 4.7e-05s (num_starts 7; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 5.3e-05s (num_starts 86; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 6.4e-05s (num_starts 9; 0.0000s/start)
determinize_value_expr_map.: 8.2e-05s (num_starts 43; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 9.7e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000103s (num_starts 10; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.000107s (num_starts 12; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.000113s (num_starts 12; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000115s (num_starts 3; 0.0000s/start)
remove_complex_bv_exprs.: 0.00012s (num_starts 7; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.000129s (num_starts 115; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000132s (num_starts 7; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000141s (num_starts 199; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000166s (num_starts 13; 0.0000s/start)
get_lr_status_for_loc_ids.: 0.000175s (num_starts 72; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000187s (num_starts 61; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.0002s (num_starts 10; 0.0000s/start)
compute_sprel_relations.: 0.000224s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000234s (num_starts 2; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000239s (num_starts 3; 0.0001s/start)
populate_locid2expr_map.: 0.00027s (num_starts 2; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.000326s (num_starts 32; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000333s (num_starts 1; 0.0003s/start)
graph_locs_add_all_exvregs.: 0.000344s (num_starts 2; 0.0002s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000362s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.00038s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.00038s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.00038s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.00038s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000381s (num_starts 1; 0.0004s/start)
lr_status_meet.: 0.000382s (num_starts 659; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000383s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000399s (num_starts 1; 0.0004s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000407s (num_starts 7; 0.0001s/start)
graph_locs_add_local_vars_for_edge.: 0.000417s (num_starts 32; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000431s (num_starts 2; 0.0002s/start)
expr_is_hidden_reg.: 0.000478s (num_starts 721; 0.0000s/start)
prove_trivial.: 0.000501s (num_starts 582; 0.0000s/start)
expr_is_callee_save_const.: 0.000546s (num_starts 733; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000563s (num_starts 16; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.000662s (num_starts 45; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000663s (num_starts 75; 0.0000s/start)
get_sprel_map_pair.: 0.000797s (num_starts 78; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000848s (num_starts 2041; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000894s (num_starts 153; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000935s (num_starts 2; 0.0005s/start)
graph_locs_add_all_llvmvars.: 0.000968s (num_starts 2; 0.0005s/start)
populate_simplified_to_state.: 0.001029s (num_starts 3; 0.0003s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.001066s (num_starts 1; 0.0011s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001144s (num_starts 9; 0.0001s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.001321s (num_starts 972; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.001351s (num_starts 178; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.00136s (num_starts 9; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001393s (num_starts 9; 0.0002s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001431s (num_starts 23; 0.0001s/start)
graph_locs_add_all_specvars.: 0.001489s (num_starts 2; 0.0007s/start)
parse_yices_model.: 0.001551s (num_starts 1; 0.0016s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.001566s (num_starts 11; 0.0001s/start)
collect_dst_to_src_submap_preds.: 0.001619s (num_starts 890; 0.0000s/start)
identify_address_taken_local_variables.: 0.001734s (num_starts 1; 0.0017s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.001889s (num_starts 7; 0.0003s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.00207s (num_starts 397; 0.0000s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.002089s (num_starts 11; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002143s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002146s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002148s (num_starts 1; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002152s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.002155s (num_starts 1; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.00216s (num_starts 1; 0.0022s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.00218s (num_starts 4; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.002306s (num_starts 1; 0.0023s/start)
pth_collect_preds_using_atom_func.: 0.002312s (num_starts 107; 0.0000s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.002361s (num_starts 390; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002436s (num_starts 1; 0.0024s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002493s (num_starts 2; 0.0012s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002506s (num_starts 1; 0.0025s/start)
tfg::populate_loc_definedness.before_solve.: 0.002553s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002696s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002702s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.002707s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.002775s (num_starts 2; 0.0014s/start)
collect_assumes_around_edge.: 0.002778s (num_starts 13; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.002781s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.002784s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.002792s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.002796s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002808s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.002816s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002833s (num_starts 4; 0.0007s/start)
tfg_edge_composition_get_assumes.: 0.002899s (num_starts 107; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.002919s (num_starts 3; 0.0010s/start)
tfg::populate_loc_definedness.: 0.003053s (num_starts 3; 0.0010s/start)
populate_simplified_assets.: 0.00318s (num_starts 6; 0.0005s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.003205s (num_starts 147; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.003221s (num_starts 254; 0.0000s/start)
graph_visit_exprs.: 0.003221s (num_starts 3; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003244s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-trivial.: 0.003247s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003251s (num_starts 2; 0.0016s/start)
expr_represents_llvm_undef.: 0.003278s (num_starts 737; 0.0000s/start)
create_closure_matrix.: 0.003317s (num_starts 268; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.003353s (num_starts 231; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-trivial.: 0.003369s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.003375s (num_starts 2; 0.0017s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.00341s (num_starts 78; 0.0000s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.003454s (num_starts 390; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003479s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003486s (num_starts 1; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003821s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003821s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.003822s (num_starts 4; 0.0010s/start)
sort_exprs_and_compute_bv_eqclass.: 0.003835s (num_starts 7; 0.0005s/start)
compute_bv_bool_eqclass.: 0.003906s (num_starts 7; 0.0006s/start)
proof_query_is_trivial_helper.: 0.003956s (num_starts 1024; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.003985s (num_starts 60; 0.0001s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.004036s (num_starts 29; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.004085s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-trivial.: 0.00409s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.004094s (num_starts 3; 0.0014s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.004171s (num_starts 7; 0.0006s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.004331s (num_starts 983; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.004345s (num_starts 404; 0.0000s/start)
graph_visit_exprs_and_keys.: 0.004572s (num_starts 2; 0.0023s/start)
removeMostPromising.: 0.004572s (num_starts 36; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.004595s (num_starts 153; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.004632s (num_starts 60; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.004635s (num_starts 2; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.004647s (num_starts 2; 0.0023s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.004658s (num_starts 7; 0.0007s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.004794s (num_starts 2; 0.0024s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.00493s (num_starts 128; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004962s (num_starts 2; 0.0025s/start)
graph_identify_back_edges.: 0.004967s (num_starts 43; 0.0001s/start)
find_dominators.: 0.005059s (num_starts 47; 0.0001s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.0052s (num_starts 60; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.00554s (num_starts 2; 0.0028s/start)
graph_identify_natural_loops.: 0.005544s (num_starts 43; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.005552s (num_starts 2; 0.0028s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.005759s (num_starts 2977; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.005835s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.005844s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.005937s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.005945s (num_starts 3; 0.0020s/start)
corr_graph_enumerate_correlations.: 0.005961s (num_starts 13; 0.0005s/start)
set_result_and_counter_example.: 0.005966s (num_starts 253; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006082s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006085s (num_starts 1; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.006111s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed;-trivial.: 0.006115s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.006116s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.006129s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006138s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed.: 0.00614s (num_starts 3; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006141s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006149s (num_starts 2; 0.0031s/start)
populate_locs_potentially_modified_on_edge.: 0.006152s (num_starts 3; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess.: 0.006155s (num_starts 2; 0.0031s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.006156s (num_starts 3; 0.0021s/start)
compute_ssa_vars_renaming_map.: 0.006232s (num_starts 2; 0.0031s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.00629s (num_starts 6; 0.0010s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.006571s (num_starts 983; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.006647s (num_starts 153; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.006972s (num_starts 2; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-trivial.: 0.006973s (num_starts 2; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-trivial.: 0.007336s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.007338s (num_starts 4; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.007383s (num_starts 3; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-trivial.: 0.007397s (num_starts 3; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.007408s (num_starts 3; 0.0025s/start)
populate_branch_affecting_locs.: 0.007472s (num_starts 3; 0.0025s/start)
tfg_suffixpath_get_expr_helper.: 0.007536s (num_starts 28; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007724s (num_starts 1; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.00773s (num_starts 1; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-trivial.: 0.008781s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.008785s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008936s (num_starts 2; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008938s (num_starts 2; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.008946s (num_starts 2; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess.: 0.008957s (num_starts 2; 0.0045s/start)
proof_query_is_trivial.: 0.009314s (num_starts 972; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.009345s (num_starts 3; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.00937s (num_starts 2; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.009389s (num_starts 2; 0.0047s/start)
aliasing_constraints.convert_to_expr.: 0.010134s (num_starts 390; 0.0000s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.010271s (num_starts 390; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.010278s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010737s (num_starts 1; 0.0107s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.010746s (num_starts 1; 0.0107s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.010997s (num_starts 454; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-trivial.: 0.011003s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.011013s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.011043s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed.: 0.011059s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.011158s (num_starts 4; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.011176s (num_starts 4; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-trivial.: 0.011237s (num_starts 6; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.011242s (num_starts 6; 0.0019s/start)
get_unrolled_loop_paths_from.: 0.011368s (num_starts 7; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011646s (num_starts 2; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.01166s (num_starts 2; 0.0058s/start)
expr_linear_relation_holds::visit.var.: 0.011813s (num_starts 737; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.011945s (num_starts 6; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.011966s (num_starts 6; 0.0020s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.012072s (num_starts 454; 0.0000s/start)
graph_with_guessing_sync_preds.: 0.012982s (num_starts 890; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.013036s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.01305s (num_starts 2; 0.0065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-trivial.: 0.013113s (num_starts 4; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.013163s (num_starts 4; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.013195s (num_starts 4; 0.0033s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.013299s (num_starts 143; 0.0001s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.01379s (num_starts 8; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.014346s (num_starts 8; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.01439s (num_starts 3; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.014408s (num_starts 3; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-trivial.: 0.014768s (num_starts 10; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.014783s (num_starts 10; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.014818s (num_starts 10; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed.: 0.01484s (num_starts 10; 0.0015s/start)
populate_transitive_closure.: 0.014879s (num_starts 59; 0.0003s/start)
compute_regions.: 0.015084s (num_starts 43; 0.0004s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.015162s (num_starts 1; 0.0152s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.015164s (num_starts 1; 0.0152s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.015168s (num_starts 1; 0.0152s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015483s (num_starts 1; 0.0155s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015486s (num_starts 1; 0.0155s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015489s (num_starts 1; 0.0155s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.015656s (num_starts 1; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.015656s (num_starts 1; 0.0157s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.01586s (num_starts 84; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.016495s (num_starts 1; 0.0165s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.016497s (num_starts 1; 0.0165s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate;-trivial.: 0.016499s (num_starts 1; 0.0165s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.0165s (num_starts 1; 0.0165s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.016511s (num_starts 1; 0.0165s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate.: 0.016515s (num_starts 1; 0.0165s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.016519s (num_starts 1; 0.0165s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-trivial.: 0.016759s (num_starts 1; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.01676s (num_starts 1; 0.0168s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.01679s (num_starts 4; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.017341s (num_starts 3; 0.0058s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.018116s (num_starts 10; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-trivial.: 0.01814s (num_starts 10; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.018158s (num_starts 10; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.018192s (num_starts 8; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-trivial.: 0.018317s (num_starts 7; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.01833s (num_starts 7; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.018368s (num_starts 7; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.018482s (num_starts 8; 0.0023s/start)
compute_vars_reaching_definitions.: 0.018698s (num_starts 2; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.018721s (num_starts 3; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.018728s (num_starts 3; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018885s (num_starts 3; 0.0063s/start)
expr_substitute_using_available_exprs_submap.: 0.018888s (num_starts 621; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.01891s (num_starts 3; 0.0063s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019465s (num_starts 5; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-trivial.: 0.019502s (num_starts 5; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019526s (num_starts 5; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.020566s (num_starts 4; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.02067s (num_starts 4; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.020978s (num_starts 1; 0.0210s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.02098s (num_starts 1; 0.0210s/start)
generate_aliasing_constraints_from_expr.: 0.021133s (num_starts 2754; 0.0000s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.021137s (num_starts 281; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.021864s (num_starts 10; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.022338s (num_starts 1; 0.0223s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.022344s (num_starts 1; 0.0223s/start)
construct_linear_combination_exprs.: 0.022657s (num_starts 1270; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.022673s (num_starts 6; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.022708s (num_starts 6; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.022751s (num_starts 6; 0.0038s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.022814s (num_starts 6; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.02324s (num_starts 6; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.023243s (num_starts 2; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-trivial.: 0.023251s (num_starts 2; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.023255s (num_starts 2; 0.0116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.023293s (num_starts 6; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.023727s (num_starts 10; 0.0024s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.023742s (num_starts 12; 0.0020s/start)
create_sp_version_relations_lattice_at_pc.: 0.023908s (num_starts 268; 0.0001s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.024875s (num_starts 3; 0.0083s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-trivial.: 0.02528s (num_starts 5; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.025311s (num_starts 5; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.025397s (num_starts 1; 0.0254s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.0255s (num_starts 8; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.025558s (num_starts 8; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.026011s (num_starts 3; 0.0087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.026181s (num_starts 3; 0.0087s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.026187s (num_starts 3; 0.0087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.026198s (num_starts 3; 0.0087s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.026243s (num_starts 3; 0.0087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.026336s (num_starts 4; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.026368s (num_starts 4; 0.0066s/start)
ldr_decomposition.: 0.027084s (num_starts 254; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.029466s (num_starts 2; 0.0147s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.029916s (num_starts 3; 0.0100s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.030632s (num_starts 2; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.030639s (num_starts 2; 0.0153s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-trivial.: 0.031584s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.031601s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.031651s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed.: 0.031673s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-trivial.: 0.031731s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.03174s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.03179s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned.: 0.031822s (num_starts 11; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-trivial.: 0.031862s (num_starts 2; 0.0159s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.031866s (num_starts 2; 0.0159s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.031919s (num_starts 5; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess.: 0.031992s (num_starts 5; 0.0064s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.032535s (num_starts 1917; 0.0000s/start)
graph_to_stream.: 0.032638s (num_starts 4; 0.0082s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.032753s (num_starts 2; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-trivial.: 0.032759s (num_starts 2; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.032763s (num_starts 2; 0.0164s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.033263s (num_starts 2; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond;-trivial.: 0.033263s (num_starts 2; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.033273s (num_starts 2; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond.: 0.033281s (num_starts 2; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-trivial.: 0.03385s (num_starts 10; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.033852s (num_starts 7; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.033892s (num_starts 7; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown.: 0.033971s (num_starts 10; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-trivial.: 0.035167s (num_starts 12; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown.: 0.035297s (num_starts 12; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.036016s (num_starts 6; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned;-trivial.: 0.036163s (num_starts 4; 0.0090s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.036179s (num_starts 6; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned.: 0.036204s (num_starts 4; 0.0091s/start)
get_next_potential_correlations.: 0.036211s (num_starts 7; 0.0052s/start)
do_ssa_transformation.: 0.036302s (num_starts 2; 0.0182s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.037827s (num_starts 5; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess.: 0.037892s (num_starts 5; 0.0076s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.03943s (num_starts 3; 0.0131s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.039449s (num_starts 3; 0.0131s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.039749s (num_starts 2; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.03976s (num_starts 2; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.039918s (num_starts 5; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.039949s (num_starts 5; 0.0080s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.040009s (num_starts 15; 0.0027s/start)
get_sprel_map_pair_at_pc.: 0.041734s (num_starts 390; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.04257s (num_starts 18; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.042852s (num_starts 2; 0.0214s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.042864s (num_starts 2; 0.0214s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.043193s (num_starts 231; 0.0002s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.043817s (num_starts 659; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.044622s (num_starts 659; 0.0001s/start)
query:convert_from_z3.: 0.044707s (num_starts 814; 0.0001s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.045078s (num_starts 231; 0.0002s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.045623s (num_starts 1446; 0.0000s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.04607s (num_starts 85; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.047632s (num_starts 6; 0.0079s/start)
tfg::get_aliasing_constraints_for_edge.: 0.047648s (num_starts 651; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.047744s (num_starts 6; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.04778s (num_starts 2; 0.0239s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.048684s (num_starts 8; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.048869s (num_starts 5; 0.0098s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.048876s (num_starts 8; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.048885s (num_starts 5; 0.0098s/start)
pth_collect_simplified_preds_using_atom_func.: 0.049438s (num_starts 1339; 0.0000s/start)
compute_lr_status_for_expr.: 0.05065s (num_starts 815; 0.0001s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.052184s (num_starts 231; 0.0002s/start)
gen_pred_from_coeff_row.simplify.: 0.052643s (num_starts 1270; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.053275s (num_starts 16; 0.0033s/start)
populate_loc_liveness.: 0.053285s (num_starts 3; 0.0178s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.053651s (num_starts 16; 0.0034s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.056074s (num_starts 231; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-trivial.: 0.05652s (num_starts 6; 0.0094s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.059371s (num_starts 10; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-trivial.: 0.060396s (num_starts 10; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.060412s (num_starts 10; 0.0060s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.060456s (num_starts 27; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.060503s (num_starts 10; 0.0061s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.061639s (num_starts 10; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.062003s (num_starts 22; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.062438s (num_starts 22; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.062587s (num_starts 2; 0.0313s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.062608s (num_starts 13; 0.0048s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.062647s (num_starts 13; 0.0048s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.063281s (num_starts 30; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.063429s (num_starts 2; 0.0317s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.063441s (num_starts 2; 0.0317s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-trivial.: 0.063814s (num_starts 3; 0.0213s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.063817s (num_starts 3; 0.0213s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.064404s (num_starts 1; 0.0644s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-trivial.: 0.065407s (num_starts 10; 0.0065s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.06592s (num_starts 12; 0.0055s/start)
compute_expr_eqclasses_at_pc.: 0.06616s (num_starts 7; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed;-trivial.: 0.066198s (num_starts 4; 0.0165s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.066224s (num_starts 12; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed.: 0.066235s (num_starts 4; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.066405s (num_starts 3; 0.0221s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-trivial.: 0.066955s (num_starts 4; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.06696s (num_starts 4; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.066979s (num_starts 4; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned.: 0.066988s (num_starts 4; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-trivial.: 0.067235s (num_starts 22; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.067276s (num_starts 22; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.067552s (num_starts 13; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.067576s (num_starts 13; 0.0052s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.069675s (num_starts 72; 0.0010s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.069875s (num_starts 72; 0.0010s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.069899s (num_starts 9; 0.0078s/start)
cg_add_node.: 0.070222s (num_starts 9; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070869s (num_starts 1; 0.0709s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.071037s (num_starts 11; 0.0065s/start)
query:convert_to_z3.: 0.071797s (num_starts 814; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-trivial.: 0.071982s (num_starts 4; 0.0180s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.072311s (num_starts 4; 0.0181s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.072428s (num_starts 15; 0.0048s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.074333s (num_starts 22; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.074491s (num_starts 22; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074536s (num_starts 1; 0.0745s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074545s (num_starts 1; 0.0745s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.075034s (num_starts 15; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.075119s (num_starts 15; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.075305s (num_starts 8; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075967s (num_starts 1; 0.0760s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075979s (num_starts 1; 0.0760s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.075989s (num_starts 1; 0.0760s/start)
avail_exprs_create_submap.: 0.076218s (num_starts 693; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-trivial.: 0.076339s (num_starts 8; 0.0095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.076359s (num_starts 8; 0.0095s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076542s (num_starts 1; 0.0765s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.076581s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.076594s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.076612s (num_starts 1; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.076987s (num_starts 10; 0.0077s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess.: 0.077122s (num_starts 10; 0.0077s/start)
tfg_postprocess_after_pointsto_analysis.: 0.077298s (num_starts 2; 0.0386s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.077611s (num_starts 63; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077911s (num_starts 1; 0.0779s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077921s (num_starts 1; 0.0779s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.077931s (num_starts 1; 0.0779s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.078671s (num_starts 22; 0.0036s/start)
collect_assumes_around_path_helper.: 0.078852s (num_starts 983; 0.0001s/start)
collect_aliasing_constraints_around_path_helper.: 0.079216s (num_starts 384; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.079284s (num_starts 1; 0.0793s/start)
compute_new_lr_status_on_locs.: 0.0793s (num_starts 231; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.080475s (num_starts 7; 0.0115s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.082031s (num_starts 4; 0.0205s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.082036s (num_starts 4; 0.0205s/start)
collect_aliasing_constraints_around_path.: 0.082071s (num_starts 240; 0.0003s/start)
graph_with_paths::collect_assumes_around_path.: 0.082439s (num_starts 983; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083381s (num_starts 1; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08341s (num_starts 1; 0.0834s/start)
create_new_corr_graph_edge.new_node.: 0.084127s (num_starts 8; 0.0105s/start)
create_new_corr_graph_edge.: 0.084653s (num_starts 13; 0.0065s/start)
predicate_canonicalized.: 0.086026s (num_starts 1270; 0.0001s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086227s (num_starts 1; 0.0862s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086241s (num_starts 1; 0.0862s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.086251s (num_starts 1; 0.0863s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086253s (num_starts 1; 0.0863s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086272s (num_starts 1; 0.0863s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.086541s (num_starts 2; 0.0433s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087139s (num_starts 1; 0.0871s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.089337s (num_starts 18; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.089593s (num_starts 3; 0.0299s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.089657s (num_starts 18; 0.0050s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.090449s (num_starts 28; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.091324s (num_starts 2; 0.0457s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond.: 0.091332s (num_starts 2; 0.0457s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.093372s (num_starts 4; 0.0233s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.094653s (num_starts 537; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.09471s (num_starts 1; 0.0947s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.094732s (num_starts 1; 0.0947s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.09475s (num_starts 1; 0.0948s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.094765s (num_starts 1; 0.0948s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.095121s (num_starts 6; 0.0159s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.095127s (num_starts 6; 0.0159s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.095523s (num_starts 12; 0.0080s/start)
bv_const_ref_map2expr_map.: 0.095645s (num_starts 1270; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.096281s (num_starts 26; 0.0037s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.096742s (num_starts 23; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097495s (num_starts 1; 0.0975s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097515s (num_starts 1; 0.0975s/start)
get_unrolled_paths_from.: 0.098037s (num_starts 40; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.101457s (num_starts 2; 0.0507s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.101499s (num_starts 2; 0.0507s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.101515s (num_starts 2; 0.0508s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-trivial.: 0.105363s (num_starts 15; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.10539s (num_starts 15; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-trivial.: 0.10642s (num_starts 26; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown.: 0.106697s (num_starts 26; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107012s (num_starts 1; 0.1070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.107415s (num_starts 5; 0.0215s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10815s (num_starts 1; 0.1081s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.109621s (num_starts 40; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.110398s (num_starts 14; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.112549s (num_starts 2; 0.0563s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.112895s (num_starts 3; 0.0376s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.116873s (num_starts 5; 0.0234s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.116905s (num_starts 5; 0.0234s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-trivial.: 0.116943s (num_starts 40; 0.0029s/start)
counter_example_satisfies_preds.: 0.120034s (num_starts 2685; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.12203s (num_starts 19; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-trivial.: 0.123057s (num_starts 10; 0.0123s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.125996s (num_starts 4; 0.0315s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.129425s (num_starts 8; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.130003s (num_starts 1; 0.1300s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.130009s (num_starts 1; 0.1300s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.132128s (num_starts 12; 0.0110s/start)
tfg_relax_pointsto_vals_on_edge.: 0.13632s (num_starts 84; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.13648s (num_starts 6; 0.0227s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.137305s (num_starts 3; 0.0458s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.137334s (num_starts 3; 0.0458s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%10%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 0.137352s (num_starts 14; 0.0098s/start)
invariant_inference_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.137685s (num_starts 3; 0.0459s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.139307s (num_starts 231; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.145507s (num_starts 2; 0.0728s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.145513s (num_starts 2; 0.0728s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.145694s (num_starts 2; 0.0728s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.14571s (num_starts 2; 0.0729s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.146511s (num_starts 2; 0.0733s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-trivial.: 0.14767s (num_starts 16; 0.0092s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153757s (num_starts 2; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.153802s (num_starts 2; 0.0769s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.153844s (num_starts 2; 0.0769s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.153871s (num_starts 2; 0.0769s/start)
check_wfconds_on_edge.L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.155032s (num_starts 2; 0.0775s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond.: 0.155777s (num_starts 5; 0.0312s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.155967s (num_starts 3; 0.0520s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess.: 0.158483s (num_starts 8; 0.0198s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.158794s (num_starts 2; 0.0794s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.158814s (num_starts 2; 0.0794s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.158955s (num_starts 9; 0.0177s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.162872s (num_starts 33; 0.0049s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.164387s (num_starts 4157; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned;-trivial.: 0.165727s (num_starts 10; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned.: 0.165811s (num_starts 10; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16643s (num_starts 2; 0.0832s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166444s (num_starts 2; 0.0832s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168547s (num_starts 2; 0.0843s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.168597s (num_starts 2; 0.0843s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.168816s (num_starts 390; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.168992s (num_starts 4; 0.0422s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.169005s (num_starts 4; 0.0423s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-trivial.: 0.16902s (num_starts 50; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169153s (num_starts 1; 0.1692s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169157s (num_starts 1; 0.1692s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169159s (num_starts 1; 0.1692s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.16917s (num_starts 1; 0.1692s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.169172s (num_starts 1; 0.1692s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.16918s (num_starts 1; 0.1692s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.169648s (num_starts 2; 0.0848s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.171263s (num_starts 2; 0.0856s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.171269s (num_starts 2; 0.0856s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.171289s (num_starts 2; 0.0856s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.171293s (num_starts 2; 0.0856s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.171304s (num_starts 2; 0.0857s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities..: 0.171746s (num_starts 3; 0.0572s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.17176s (num_starts 3; 0.0573s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.17326s (num_starts 2; 0.0866s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.173396s (num_starts 2; 0.0867s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.173462s (num_starts 4; 0.0434s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.174723s (num_starts 4; 0.0437s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed.: 0.174746s (num_starts 4; 0.0437s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.174798s (num_starts 2; 0.0874s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.174817s (num_starts 2; 0.0874s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.174841s (num_starts 2; 0.0874s/start)
query:simplify-z3.: 0.175159s (num_starts 1696; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176675s (num_starts 2; 0.0883s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176705s (num_starts 2; 0.0884s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176725s (num_starts 2; 0.0884s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.176762s (num_starts 2; 0.0884s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned.: 0.176771s (num_starts 2; 0.0884s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.176792s (num_starts 2; 0.0884s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177935s (num_starts 2; 0.0890s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177953s (num_starts 2; 0.0890s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.178097s (num_starts 2; 0.0890s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.17815s (num_starts 2; 0.0891s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.182837s (num_starts 27; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183263s (num_starts 2; 0.0916s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.185883s (num_starts 10; 0.0186s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess;-trivial.: 0.186801s (num_starts 20; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.186843s (num_starts 20; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.186924s (num_starts 20; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess.: 0.18696s (num_starts 20; 0.0093s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.187807s (num_starts 2; 0.0939s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188687s (num_starts 2; 0.0943s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188712s (num_starts 2; 0.0944s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188727s (num_starts 2; 0.0944s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.196759s (num_starts 29; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.199246s (num_starts 4; 0.0498s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned.: 0.199258s (num_starts 4; 0.0498s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.199317s (num_starts 5; 0.0399s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.202679s (num_starts 2; 0.1013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-trivial.: 0.205082s (num_starts 14; 0.0146s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.205096s (num_starts 14; 0.0146s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.205212s (num_starts 14; 0.0147s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown.: 0.205246s (num_starts 14; 0.0147s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.205936s (num_starts 2; 0.1030s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.20595s (num_starts 2; 0.1030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.207744s (num_starts 1; 0.2077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.207748s (num_starts 1; 0.2077s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.20777s (num_starts 1; 0.2078s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false.: 0.207774s (num_starts 1; 0.2078s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.208525s (num_starts 55; 0.0038s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.20942s (num_starts 1; 0.2094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.209422s (num_starts 1; 0.2094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.209422s (num_starts 1; 0.2094s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.209442s (num_starts 1; 0.2094s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.209462s (num_starts 1; 0.2095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.20986s (num_starts 4; 0.0525s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned.: 0.209883s (num_starts 4; 0.0525s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.214091s (num_starts 7; 0.0306s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed.: 0.214126s (num_starts 7; 0.0306s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.215109s (num_starts 2; 0.1076s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.2167s (num_starts 43; 0.0050s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220417s (num_starts 1; 0.2204s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220418s (num_starts 1; 0.2204s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220418s (num_starts 1; 0.2204s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.220442s (num_starts 1; 0.2204s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.220461s (num_starts 1; 0.2205s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.22057s (num_starts 390; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.221537s (num_starts 3; 0.0738s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed.: 0.222667s (num_starts 5; 0.0445s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.223554s (num_starts 3; 0.0745s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.223965s (num_starts 6; 0.0373s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.227766s (num_starts 12; 0.0190s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.227815s (num_starts 35; 0.0065s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.22811s (num_starts 22; 0.0104s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.228702s (num_starts 26; 0.0088s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.229062s (num_starts 17; 0.0135s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.229144s (num_starts 26; 0.0088s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.229649s (num_starts 3; 0.0765s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-trivial.: 0.231508s (num_starts 41; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.231584s (num_starts 41; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.231793s (num_starts 41; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear.: 0.231861s (num_starts 41; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.233364s (num_starts 3; 0.0778s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.234129s (num_starts 4310; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.234235s (num_starts 4157; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned.: 0.235419s (num_starts 12; 0.0196s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed.: 0.238844s (num_starts 8; 0.0299s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown.: 0.238966s (num_starts 12; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.242459s (num_starts 1; 0.2425s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.242461s (num_starts 1; 0.2425s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.242486s (num_starts 1; 0.2425s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false.: 0.24249s (num_starts 1; 0.2425s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.243271s (num_starts 24; 0.0101s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.243449s (num_starts 24; 0.0101s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.245776s (num_starts 3; 0.0819s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.246541s (num_starts 13; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.24662s (num_starts 13; 0.0190s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.246994s (num_starts 5; 0.0494s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.248s (num_starts 2957; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.248942s (num_starts 3; 0.0830s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.250144s (num_starts 147; 0.0017s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.252123s (num_starts 4; 0.0630s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-trivial.: 0.253752s (num_starts 15; 0.0169s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.255895s (num_starts 39; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.25716s (num_starts 13; 0.0198s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.257594s (num_starts 12; 0.0215s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.259693s (num_starts 10; 0.0260s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond.: 0.26471s (num_starts 4; 0.0662s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.266719s (num_starts 24; 0.0111s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268187s (num_starts 1; 0.2682s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268187s (num_starts 1; 0.2682s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268189s (num_starts 1; 0.2682s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268191s (num_starts 1; 0.2682s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.268201s (num_starts 1; 0.2682s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.268203s (num_starts 1; 0.2682s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.268207s (num_starts 1; 0.2682s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.268615s (num_starts 2; 0.1343s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.289416s (num_starts 1; 0.2894s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.289419s (num_starts 1; 0.2894s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.289435s (num_starts 1; 0.2894s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.289438s (num_starts 1; 0.2894s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.290215s (num_starts 4157; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.290914s (num_starts 33; 0.0088s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.292258s (num_starts 506; 0.0006s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.292967s (num_starts 507; 0.0006s/start)
gen_pred_from_coeff_row.: 0.296464s (num_starts 1270; 0.0002s/start)
ldr_decompose_and_linear_solve.: 0.297138s (num_starts 254; 0.0012s/start)
compute_preds_for_bv_points.: 0.300804s (num_starts 101; 0.0030s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.301396s (num_starts 128; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.302338s (num_starts 4; 0.0756s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.306244s (num_starts 4; 0.0766s/start)
bv_linear_solve.: 0.309022s (num_starts 254; 0.0012s/start)
query:bv_solve.: 0.310352s (num_starts 254; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.312566s (num_starts 4; 0.0781s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond.: 0.312677s (num_starts 4; 0.0782s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.31441s (num_starts 1; 0.3144s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.314416s (num_starts 1; 0.3144s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.314418s (num_starts 1; 0.3144s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.314434s (num_starts 1; 0.3144s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate.: 0.314437s (num_starts 1; 0.3144s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.314443s (num_starts 1; 0.3144s/start)
check_wfconds_on_edge.L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry.: 0.317012s (num_starts 4; 0.0793s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.317861s (num_starts 1; 0.3179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.317866s (num_starts 1; 0.3179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.31787s (num_starts 1; 0.3179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.317886s (num_starts 1; 0.3179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate.: 0.31789s (num_starts 1; 0.3179s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.317895s (num_starts 1; 0.3179s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.328614s (num_starts 1; 0.3286s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.32862s (num_starts 1; 0.3286s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.328623s (num_starts 1; 0.3286s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.332926s (num_starts 10569; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.337446s (num_starts 7; 0.0482s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed.: 0.337464s (num_starts 7; 0.0482s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.344578s (num_starts 17; 0.0203s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.344901s (num_starts 1080; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 0.34505s (num_starts 22; 0.0157s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-trivial.: 0.347893s (num_starts 35; 0.0099s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.35076s (num_starts 11; 0.0319s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.351846s (num_starts 8; 0.0440s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.352665s (num_starts 4; 0.0882s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.355517s (num_starts 4; 0.0889s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.355548s (num_starts 4; 0.0889s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.355607s (num_starts 4; 0.0889s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned.: 0.355646s (num_starts 4; 0.0889s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.356422s (num_starts 4; 0.0891s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.357054s (num_starts 4; 0.0893s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.357611s (num_starts 99; 0.0036s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.359974s (num_starts 4; 0.0900s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.36411s (num_starts 6; 0.0607s/start)
bv_solve_returning_intermediate_structures.: 0.377006s (num_starts 254; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.377414s (num_starts 5; 0.0755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.377459s (num_starts 5; 0.0755s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.382488s (num_starts 7; 0.0546s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.396872s (num_starts 32; 0.0124s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.4033s (num_starts 31; 0.0130s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.405711s (num_starts 1; 0.4057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.405712s (num_starts 1; 0.4057s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.407931s (num_starts 92; 0.0044s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.410384s (num_starts 147; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.41043s (num_starts 5; 0.0821s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410464s (num_starts 5; 0.0821s/start)
check_wfconds_on_edge.L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.41169s (num_starts 6; 0.0686s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.413552s (num_starts 2; 0.2068s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.413563s (num_starts 2; 0.2068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.413567s (num_starts 2; 0.2068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.416294s (num_starts 6; 0.0694s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.416328s (num_starts 6; 0.0694s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.416353s (num_starts 6; 0.0694s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.417002s (num_starts 7; 0.0596s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned.: 0.417028s (num_starts 7; 0.0596s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.423837s (num_starts 34; 0.0125s/start)
bvsolve_cache_query.miss1.: 0.42434s (num_starts 254; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.426838s (num_starts 1; 0.4268s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.426841s (num_starts 1; 0.4268s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.426853s (num_starts 1; 0.4269s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false.: 0.426857s (num_starts 1; 0.4269s/start)
bvsolve_cache_query.: 0.432696s (num_starts 254; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.433399s (num_starts 5; 0.0867s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.436483s (num_starts 5; 0.0873s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.436556s (num_starts 5; 0.0873s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.436596s (num_starts 5; 0.0873s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.44678s (num_starts 85; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.447922s (num_starts 46; 0.0097s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.456252s (num_starts 10; 0.0456s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess.: 0.456305s (num_starts 10; 0.0456s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.456394s (num_starts 10; 0.0456s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.457413s (num_starts 5; 0.0915s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.470872s (num_starts 6; 0.0785s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.473708s (num_starts 6; 0.0790s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.4785s (num_starts 6; 0.0798s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.482468s (num_starts 12; 0.0402s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.493986s (num_starts 6; 0.0823s/start)
lhs_set_sort.: 0.50813s (num_starts 390; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.508827s (num_starts 13; 0.0391s/start)
ftmap_run_pointsto_analysis.: 0.509807s (num_starts 2; 0.2549s/start)
tfg_run_pointsto_analysis.: 0.510185s (num_starts 2; 0.2551s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.512518s (num_starts 6; 0.0854s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.516003s (num_starts 20; 0.0258s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess.: 0.516065s (num_starts 20; 0.0258s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.521858s (num_starts 6; 0.0870s/start)
guarded_predicate_set_and.: 0.522862s (num_starts 390; 0.0013s/start)
tfg_populate_structs_after_ssa_construction.: 0.531768s (num_starts 2; 0.2659s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.538405s (num_starts 82; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.539393s (num_starts 7; 0.0771s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.540024s (num_starts 31; 0.0174s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.541497s (num_starts 6; 0.0902s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.543604s (num_starts 6; 0.0906s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.554994s (num_starts 8; 0.0694s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.556881s (num_starts 59; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond.: 0.564787s (num_starts 7; 0.0807s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-trivial.: 0.567761s (num_starts 82; 0.0069s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.569237s (num_starts 12; 0.0474s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.57281s (num_starts 2; 0.2864s/start)
solve_for_bv_points.: 0.574819s (num_starts 254; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.576374s (num_starts 2; 0.2882s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.576383s (num_starts 2; 0.2882s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.57639s (num_starts 2; 0.2882s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.580529s (num_starts 5; 0.1161s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed.: 0.580542s (num_starts 5; 0.1161s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.580568s (num_starts 5; 0.1161s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.584429s (num_starts 996; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear.: 0.588458s (num_starts 46; 0.0128s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.601654s (num_starts 10; 0.0602s/start)
put_smtlib_string_in_file.: 0.610833s (num_starts 506; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.613039s (num_starts 2; 0.3065s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.61305s (num_starts 2; 0.3065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.613057s (num_starts 2; 0.3065s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.616866s (num_starts 10; 0.0617s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.616913s (num_starts 6; 0.1028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.616932s (num_starts 6; 0.1028s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.616969s (num_starts 6; 0.1028s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.635351s (num_starts 7; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear.: 0.663753s (num_starts 56; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess.: 0.664859s (num_starts 16; 0.0416s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.691629s (num_starts 3; 0.2305s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.69413s (num_starts 59; 0.0118s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.699633s (num_starts 10; 0.0700s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.714717s (num_starts 2; 0.3574s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.714723s (num_starts 2; 0.3574s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.714728s (num_starts 2; 0.3574s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.716239s (num_starts 2; 0.3581s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.716307s (num_starts 2; 0.3582s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.717515s (num_starts 637; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.721105s (num_starts 9; 0.0801s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.722187s (num_starts 5; 0.1444s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned.: 0.72221s (num_starts 5; 0.1444s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.722246s (num_starts 5; 0.1444s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear.: 0.725783s (num_starts 40; 0.0181s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.734962s (num_starts 1; 0.7350s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.734966s (num_starts 1; 0.7350s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.734984s (num_starts 1; 0.7350s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false.: 0.734988s (num_starts 1; 0.7350s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.738059s (num_starts 13; 0.0568s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 0.742432s (num_starts 81; 0.0092s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.762655s (num_starts 5; 0.1525s/start)
apply_mask_and_overlay_array_constant.: 0.77011s (num_starts 637; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.781291s (num_starts 13; 0.0601s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.788129s (num_starts 29; 0.0272s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.7895s (num_starts 254; 0.0031s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.80143s (num_starts 3; 0.2671s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.804421s (num_starts 39; 0.0206s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.818026s (num_starts 4; 0.2045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.818532s (num_starts 10; 0.0819s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.863633s (num_starts 1; 0.8636s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.863637s (num_starts 1; 0.8636s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.863659s (num_starts 1; 0.8637s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false.: 0.863663s (num_starts 1; 0.8637s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess.: 0.875455s (num_starts 16; 0.0547s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.879311s (num_starts 5; 0.1759s/start)
graph_ec_apply_trans_funs_helper.0.: 0.910425s (num_starts 2267; 0.0004s/start)
graph_ec_apply_trans_funs_helper.: 0.918552s (num_starts 2276; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.919028s (num_starts 4; 0.2298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.919036s (num_starts 4; 0.2298s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.923865s (num_starts 2276; 0.0004s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.929312s (num_starts 2265; 0.0004s/start)
computeWP_for_pred_across_ec.: 0.936346s (num_starts 2265; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.94268s (num_starts 2; 0.4713s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.942773s (num_starts 2; 0.4714s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 0.949193s (num_starts 99; 0.0096s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.953193s (num_starts 5; 0.1906s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.953257s (num_starts 5; 0.1907s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.953363s (num_starts 5; 0.1907s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.953415s (num_starts 5; 0.1907s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 1.00113s (num_starts 8; 0.1251s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 1.00116s (num_starts 8; 0.1251s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.00611s (num_starts 5; 0.2012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.00792s (num_starts 5; 0.2016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.00798s (num_starts 5; 0.2016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.00811s (num_starts 5; 0.2016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.00817s (num_starts 5; 0.2016s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.01512s (num_starts 1369; 0.0007s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 1.04739s (num_starts 3211; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.05128s (num_starts 12; 0.0876s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 1.07032s (num_starts 9; 0.1189s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.07134s (num_starts 390; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07742s (num_starts 8; 0.1347s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07757s (num_starts 8; 0.1347s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.07763s (num_starts 8; 0.1347s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 1.08302s (num_starts 6; 0.1805s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.08919s (num_starts 60; 0.0182s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09641s (num_starts 4; 0.2741s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.09666s (num_starts 4; 0.2742s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 1.09923s (num_starts 996; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.10606s (num_starts 2; 0.5530s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.10617s (num_starts 2; 0.5531s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.1089s (num_starts 390; 0.0028s/start)
edge_composition_apply_trans_funs_on_pred.: 1.11024s (num_starts 890; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 1.11381s (num_starts 10; 0.1114s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 1.12456s (num_starts 5; 0.2249s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.13125s (num_starts 14; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 1.14045s (num_starts 10; 0.1140s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%7%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 1.1452s (num_starts 122; 0.0094s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed.: 1.14998s (num_starts 12; 0.0958s/start)
collect_inductive_preds_around_path.: 1.16621s (num_starts 890; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1912s (num_starts 7; 0.1702s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 1.20413s (num_starts 12; 0.1003s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 1.23409s (num_starts 2; 0.6170s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.25444s (num_starts 33; 0.0380s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.26292s (num_starts 15; 0.0842s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.26642s (num_starts 9; 0.1407s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned.: 1.26787s (num_starts 15; 0.0845s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 1.28034s (num_starts 34; 0.0377s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31025s (num_starts 9; 0.1456s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned.: 1.31754s (num_starts 11; 0.1198s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon).: 1.36223s (num_starts 15; 0.0908s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);-trivial.: 1.39399s (num_starts 230; 0.0061s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 1.42266s (num_starts 24; 0.0593s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.42861s (num_starts 9; 0.1587s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);-trivial.: 1.47776s (num_starts 130; 0.0114s/start)
check_wfconds_on_edge.: 1.56291s (num_starts 28; 0.0558s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 1.58556s (num_starts 293; 0.0054s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 1.59286s (num_starts 42; 0.0379s/start)
check_equivalence_proof.: 1.70391s (num_starts 1; 1.7039s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.83606s (num_starts 10; 0.1836s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.85832s (num_starts 9; 0.2065s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.85836s (num_starts 9; 0.2065s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.90063s (num_starts 13; 0.1462s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 1.92587s (num_starts 31; 0.0621s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear.: 1.92595s (num_starts 31; 0.0621s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.94945s (num_starts 23; 0.0848s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.16049s (num_starts 13; 0.1662s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 2.27136s (num_starts 53; 0.0429s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.32267s (num_starts 13; 0.1787s/start)
compute_z3_expr.: 2.45622s (num_starts 1067; 0.0023s/start)
invariant_inference_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 2.50952s (num_starts 10; 0.2510s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.67052s (num_starts 8; 0.3338s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.67056s (num_starts 8; 0.3338s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.67058s (num_starts 8; 0.3338s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.67806s (num_starts 12; 0.2232s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown.: 2.6781s (num_starts 12; 0.2232s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.6894s (num_starts 16; 0.1681s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.75561s (num_starts 9; 0.3062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.75567s (num_starts 9; 0.3062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.75567s (num_starts 9; 0.3062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.75907s (num_starts 11; 0.2508s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown.: 2.75913s (num_starts 11; 0.2508s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 2.75921s (num_starts 11; 0.2508s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 2.77248s (num_starts 98; 0.0283s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.81182s (num_starts 11; 0.2556s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.8119s (num_starts 11; 0.2556s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.81195s (num_starts 11; 0.2556s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.82589s (num_starts 15; 0.1884s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 2.83034s (num_starts 21; 0.1348s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear.: 2.83039s (num_starts 21; 0.1348s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 2.83052s (num_starts 21; 0.1348s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.83308s (num_starts 7; 0.4047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.8332s (num_starts 7; 0.4047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.90449s (num_starts 18; 0.1614s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 2.92276s (num_starts 106; 0.0276s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.94421s (num_starts 21; 0.1402s/start)
check_preds_on_edge_compositions.: 2.97424s (num_starts 33; 0.0901s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.99846s (num_starts 15; 0.1999s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.99851s (num_starts 15; 0.1999s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.01943s (num_starts 9; 0.3355s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.03319s (num_starts 7; 0.4333s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 3.03344s (num_starts 7; 0.4333s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 3.04396s (num_starts 58; 0.0525s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 3.06629s (num_starts 28; 0.1095s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 3.06637s (num_starts 28; 0.1095s/start)
dst_edge_composition_proves_false.: 3.09275s (num_starts 7; 0.4418s/start)
get_next_dst_edge_composition_to_correlate.: 3.1444s (num_starts 8; 0.3931s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess.: 3.16768s (num_starts 25; 0.1267s/start)
decide_hoare_triple.: 3.21732s (num_starts 10; 0.3217s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 3.23411s (num_starts 2; 1.6171s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry).: 3.35018s (num_starts 253; 0.0132s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.37566s (num_starts 20; 0.1688s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.43259s (num_starts 15; 0.2288s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.43299s (num_starts 15; 0.2289s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 3.44915s (num_starts 35; 0.0985s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 3.48658s (num_starts 45; 0.0775s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.6061s (num_starts 17; 0.2121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 3.66122s (num_starts 27; 0.1356s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 3.77854s (num_starts 32; 0.1181s/start)
parse_z3_model.: 3.84101s (num_starts 163; 0.0236s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned.: 3.86072s (num_starts 32; 0.1206s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.87087s (num_starts 23; 0.1683s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.87153s (num_starts 23; 0.1683s/start)
read_counter_examples_from_channel.: 3.88215s (num_starts 82; 0.0473s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 4.3204s (num_starts 69; 0.0626s/start)
decide_hoare_triple_helper;-trivial.: 4.3305s (num_starts 650; 0.0067s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);linear.: 4.56784s (num_starts 82; 0.0557s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.79624s (num_starts 29; 0.1654s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear.: 5.36609s (num_starts 111; 0.0483s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.44973s (num_starts 38; 0.1434s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.00684s (num_starts 35; 0.1716s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 6.19523s (num_starts 119; 0.0521s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry).: 6.23706s (num_starts 70; 0.0891s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.51857s (num_starts 23; 0.2834s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 6.57364s (num_starts 10; 0.6574s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 6.83003s (num_starts 10; 0.6830s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 7.05888s (num_starts 105; 0.0672s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 7.17233s (num_starts 12; 0.5977s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.78937s (num_starts 32; 0.2434s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.84077s (num_starts 38; 0.2063s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry).: 7.85217s (num_starts 59; 0.1331s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.06069s (num_starts 50; 0.1612s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 8.40031s (num_starts 97; 0.0866s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry).: 8.42381s (num_starts 149; 0.0565s/start)
ce_reconcile_sorts.: 8.75339s (num_starts 164; 0.0534s/start)
check_node_stability_after_CE_addition.: 11.0724s (num_starts 336; 0.0330s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 11.2135s (num_starts 53; 0.2116s/start)
propagate_nodece_across_edge.: 12.4553s (num_starts 102; 0.1221s/start)
decide_hoare_triple_helper;per-path;L3%18%bbentry_Lfor.cond1%1%bbentry;(L3%18%bbentry_Lfor.cond1%1%bbentry=>L3%18%bbentry_Lfor.cond1%1%bbentry).: 12.6994s (num_starts 183; 0.0694s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 13.8066s (num_starts 81; 0.1705s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 14.3095s (num_starts 281; 0.0509s/start)
src_tfg_counter_example_translate_on_edge_composition.: 14.3114s (num_starts 342; 0.0418s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 14.6832s (num_starts 51; 0.2879s/start)
corr_graph::add_edge().: 14.7102s (num_starts 13; 1.1316s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 14.7981s (num_starts 13; 1.1383s/start)
corr_graph_add_correlation.: 14.7985s (num_starts 13; 1.1383s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 14.7991s (num_starts 13; 1.1384s/start)
invariant_inference_xfer.dst-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.: 14.9616s (num_starts 12; 1.2468s/start)
decide_hoare_triple_helper;per-query-type;linear.: 15.3997s (num_starts 374; 0.0412s/start)
counter_example_translate_on_edge_composition_helper.: 18.3164s (num_starts 2619; 0.0070s/start)
query:smt.: 20.5197s (num_starts 253; 0.0811s/start)
counter_example_falsifies_preds.: 22.7447s (num_starts 521; 0.0437s/start)
counter_example_evaluate_preds.: 22.8585s (num_starts 3206; 0.0071s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%18%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 23.4804s (num_starts 24; 0.9783s/start)
spawn_smt_query.: 24.405s (num_starts 253; 0.0965s/start)
add_fresh_counterexample_at_pc_and_propagate.: 25.02s (num_starts 199; 0.1257s/start)
decide_hoare_triple_with_alias_cons.ce.: 25.0247s (num_starts 781; 0.0320s/start)
solver_provable.: 36.8394s (num_starts 390; 0.0945s/start)
solver_satisfiable-cache-miss.: 36.886s (num_starts 253; 0.1458s/start)
solver_satisfiable.: 36.89s (num_starts 391; 0.0943s/start)
expr_is_provable.: 37.2362s (num_starts 390; 0.0955s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 37.2444s (num_starts 390; 0.0955s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 37.2636s (num_starts 390; 0.0955s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 37.2815s (num_starts 390; 0.0956s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 37.8646s (num_starts 390; 0.0971s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 37.9581s (num_starts 390; 0.0973s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 37.964s (num_starts 390; 0.0973s/start)
is_expr_equal_using_lhs_set_and_precond.: 42.9182s (num_starts 390; 0.1100s/start)
prove.: 42.9238s (num_starts 390; 0.1101s/start)
prove_spawn_and_join_helper.: 42.9262s (num_starts 390; 0.1101s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 43.3385s (num_starts 240; 0.1806s/start)
prove_spawn_and_join.: 44.9124s (num_starts 390; 0.1152s/start)
prove_wrapper.proof_query_not_trivial.: 44.9842s (num_starts 390; 0.1153s/start)
prove_wrapper.: 45.1s (num_starts 972; 0.0464s/start)
decide_hoare_triple_check_ub.: 46.2801s (num_starts 890; 0.0520s/start)
decide_hoare_triple_helper.: 47.7066s (num_starts 890; 0.0536s/start)
update_invariant_state_for_edges.: 68.4461s (num_starts 11; 6.2224s/start)
cg_check_new_cg_ec.: 68.4462s (num_starts 11; 6.2224s/start)
correl_entry_apply.: 68.4471s (num_starts 11; 6.2225s/start)
expandProductCFG.: 71.6296s (num_starts 12; 5.9691s/start)
decide_hoare_triple_with_alias_cons.: 72.7388s (num_starts 890; 0.0817s/start)
bestFirstSearch.: 86.5159s (num_starts 1; 86.5159s/start)
Time taken for equivalence check.: 88.2347s (num_starts 1; 88.2347s/start)

counters:
# of Paths Prunned through CE propagation.: 4
# of assume sat failures for undef-behavioursome.edge.Lfor.body3%1%d=>Lfor.cond1%1%bbentry.: 2
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 4
# of paths enumerated.: 41
# of paths expanded.: 11
# of queries to linear solver.: 254
# of smt-solver-queries.: 253
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 4
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 4
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 5
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 4
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 2
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 4
removed-siblings.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 12
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 10
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 14
smallest_point_cover_xfer.dst-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 15
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 44
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 12
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 20
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 13
smallest_point_cover_xfer.expr-group-bvs.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 52
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 34
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 46
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 12
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 37
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 28
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 6
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.iters.: 27
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%18%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 27
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 38
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 29
smt-queries-cache-hits.: 138
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 163
total-correlation-possibilities.: 17
total-correlation-possibilities-mod-lsprels.: 17
total-correlations-explored.: 12

flags:
dst-aloc.: 0
dst-edges.: 11
dst-nodes.: 10
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%18%bbentry_Lfor.cond1%1%bbentry.: 19
final-CG-counterexamples-generated-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 23
final-CG-counterexamples-total-at-L3%18%bbentry_Lfor.cond1%1%bbentry.: 42
final-CG-counterexamples-total-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 44
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 4
final-CG-num-invariants.: 40
final-CG-super-edges.: 0
src-edges.: 21
src-nodes.: 18
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 63.50
final-CG-time-to-total-time-ratio.: 0.73
query-time-to-total-time-ratio.: 0.23

Context stats:
exprs: count: 263055
sorts: count: 177
num_proof_queries: 555
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	67506
	        hit ratio:	0.991275
m_simplify_solver:
	----------- total:	4534
	        hit ratio:	0.80547
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	60
	        hit ratio:	0.333333
m_z3_solver_substitution:
	----------- total:	882
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	882
	        hit ratio:	0
m_expr_size:
	----------- total:	16844
	        hit ratio:	0.938019
m_contains_only_constants_or_sp_versions:
	----------- total:	24
	        hit ratio:	0.791667
m_expr_evaluates_to_constant_visitor:
	----------- total:	202826
	        hit ratio:	0.480338

z3_solver expr_query_cache entry size: 253
	----------- total:	557
	             hits:	138
	        hit ratio:	0.247756
histogram (time taken by solver in ms):
[ 35.9190,  46.7413) (avg.  42.9842)     : 53
[ 46.7413,  60.8242) (avg.  52.0134)     : 85
[ 60.8242,  79.1503) (avg.  72.6856)     : 32
[ 79.1503, 102.9980) (avg.  92.5419)     : 36
[102.9980, 134.0309) (avg. 112.9306)     : 26
[134.0309, 174.4139) (avg. 157.1725)     : 4
[174.4139, 226.9641) (avg. 187.9680)     : 9
[226.9641, 295.3475) (avg. 252.3670)     : 2
[295.3475, 384.3345) (avg. 335.1593)     : 3
[384.3345, 500.1330) (avg. 463.8680)     : 3
histogram (number of quantifiers in query)
[ 0,  5) (avg.  0)                       : 1
[ 5,  9) (avg.  0)                       : 0
[ 9, 13) (avg.  0)                       : 0
[13, 17) (avg.  0)                       : 0
[17, 21) (avg. 18)                       : 36
[21, 25) (avg. 24)                       : 111
[25, 29) (avg. 26)                       : 16
[29, 33) (avg. 31)                       : 89
[33, 37) (avg.  0)                       : 0
[37, 41) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[103, 159) (avg. 103)                    : 1
[159, 215) (avg.   0)                    : 0
[215, 271) (avg.   0)                    : 0
[271, 327) (avg.   0)                    : 0
[327, 382) (avg. 352)                    : 55
[382, 438) (avg. 415)                    : 95
[438, 494) (avg. 476)                    : 12
[494, 550) (avg. 523)                    : 10
[550, 606) (avg. 573)                    : 15
[606, 661) (avg. 627)                    : 65
Top 10 highest time taking queries:
1. [0.499s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.9
2. [0.474s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.5
3. [0.418s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.1
4. [0.362s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.2
5. [0.342s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%18%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%18%b.0
6. [0.301s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%10%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%10%b.0
7. [0.268s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-32-free_var_idx.11.from_pcL3%18%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.3
8. [0.237s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-4-free_var_idx.3.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0
9. [0.212s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.22
10. [0.193s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.1

<MSG>5:20 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 259 time spent: 0:0:0 [0.004547s total; 0.000018 per start]
tfg_computeWP: num_starts 8401 time spent: 0:0:0 [0.888681s total; 0.000106 per start]
tfg_get_simplified_to_state_for_edge: num_starts 18409 time spent: 0:0:0 [0.033109s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 11694 time spent: 0:0:0 [0.019846s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 8971 time spent: 0:0:0 [0.014107s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 343 time spent: 0:0:26 [26.353281s total; 0.076832 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 36 time spent: 0:0:15 [15.001627s total; 0.416712 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 2533 time spent: 0:0:14 [14.958910s total; 0.005906 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 799 time spent: 0:0:22 [22.998199s total; 0.028784 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 2299 time spent: 0:0:9 [9.264478s total; 0.004030 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 10820 time spent: 0:0:37 [37.653611s total; 0.003480 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 2301 time spent: 0:0:0 [0.114173s total; 0.000050 per start]
tfg_graph_get_vars_written_on_edge: num_starts 2299 time spent: 0:0:0 [0.048935s total; 0.000021 per start]
cg_with_rank_add_CE_at_pc: num_starts 497 time spent: 0:0:13 [13.894753s total; 0.027957 per start]
graph_with_ce_add_CE_at_pc: num_starts 235 time spent: 0:0:0 [0.011552s total; 0.000049 per start]
graph_with_guessing_add_CE_at_pc: num_starts 497 time spent: 0:0:13 [13.884313s total; 0.027936 per start]
point_set_add_point_using_CE: num_starts 3410 time spent: 0:0:1 [1.081437s total; 0.000317 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 3410 time spent: 0:0:1 [1.087960s total; 0.000319 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 407 time spent: 0:0:2 [2.793961s total; 0.006865 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 407 time spent: 0:0:1 [1.694150s total; 0.004163 per start]
expr_label_memlabels_using_memlabel_map: num_starts 68760 time spent: 0:0:2 [2.006867s total; 0.000029 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 15656 time spent: 0:0:0 [0.573255s total; 0.000037 per start]
expr_simplify_solver: num_starts 10391 time spent: 0:0:0 [0.884060s total; 0.000085 per start]
expr_simplify_syntactic: num_starts 11383 time spent: 0:0:1 [1.876230s total; 0.000165 per start]
expr_simplify_select_on_store: num_starts 653 time spent: 0:0:1 [1.553504s total; 0.002379 per start]
expr_simplify_using_lhs_set_helper: num_starts 2254 time spent: 0:0:2 [2.985825s total; 0.001325 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 20352 time spent: 0:0:2 [2.965171s total; 0.000146 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 14473 time spent: 0:0:0 [0.043890s total; 0.000003 per start]
expr_simplify_eq: num_starts 1161 time spent: 0:0:0 [0.009815s total; 0.000008 per start]
expr_simplify_or: num_starts 85 time spent: 0:0:0 [0.000084s total; 0.000001 per start]
expr_simplify_and: num_starts 1264 time spent: 0:0:0 [0.006927s total; 0.000005 per start]
expr_simplify_andnot1: num_starts 175 time spent: 0:0:0 [0.002021s total; 0.000012 per start]
expr_simplify_andnot2: num_starts 12 time spent: 0:0:0 [0.000457s total; 0.000038 per start]
expr_simplify_not: num_starts 194 time spent: 0:0:0 [0.000520s total; 0.000003 per start]
expr_simplify_implies: num_starts 131 time spent: 0:0:0 [0.001105s total; 0.000008 per start]
expr_simplify_ite: num_starts 14 time spent: 0:0:0 [0.001110s total; 0.000079 per start]
canonicalize_expr_tree: num_starts 2065 time spent: 0:0:0 [0.203557s total; 0.000099 per start]
expr_simplify_memalloc_using_memlabel: num_starts 62 time spent: 0:0:0 [0.000153s total; 0.000002 per start]
expr_simplify_select_on_store_visit_function: num_starts 661 time spent: 0:0:1 [1.513819s total; 0.002290 per start]
get_arithmetic_addsub_atoms: num_starts 19771 time spent: 0:0:0 [0.012148s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 2156 time spent: 0:0:0 [0.020239s total; 0.000009 per start]
expr_is_consts_struct_constant: num_starts 6681 time spent: 0:0:0 [0.003375s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 83772 time spent: 0:0:2 [2.189053s total; 0.000026 per start]
expr_do_simplify_helper_cache: num_starts 83772 time spent: 0:0:0 [0.077700s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 72 time spent: 0:0:0 [0.000014s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 72 time spent: 0:0:0 [0.000331s total; 0.000005 per start]
evaluate_expr_and_check_bounds: num_starts 21829 time spent: 0:0:38 [38.224159s total; 0.001751 per start]
array_constant_equals: num_starts 121661 time spent: 0:0:0 [0.106163s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 157 time spent: 0:0:0 [0.606203s total; 0.003861 per start]
alias_val_xfer_and_meet: num_starts 157 time spent: 0:0:0 [0.425464s total; 0.002710 per start]
get_sprel_map_from_avail_exprs: num_starts 205 time spent: 0:0:0 [0.022993s total; 0.000112 per start]
update_memlabels_for_memslot_locs: num_starts 44 time spent: 0:0:0 [0.000193s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 502 time spent: 0:0:0 [0.077576s total; 0.000155 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1080 time spent: 0:0:0 [0.324369s total; 0.000300 per start]
compute_locs_definitely_written_on_edge: num_starts 502 time spent: 0:0:0 [0.000743s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 134 time spent: 0:0:0 [0.033466s total; 0.000250 per start]
edge_update_memlabel_map_for_mlvars: num_starts 251 time spent: 0:0:0 [0.053523s total; 0.000213 per start]
add_new_locs_based_on_edge: num_starts 157 time spent: 0:0:0 [0.177700s total; 0.001132 per start]
expand_locset_to_include_slots_for_memmask: num_starts 232 time spent: 0:0:0 [0.001373s total; 0.000006 per start]
total: num_starts 1 time spent: 0:5:25 [325.786719s total; 325.786719 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 298.88s.
ftmap_run_pointsto_analysis.: 0.509807s (num_starts 2; 0.2549s/start)s.
EQ Time after pointsto analysis: 298.368s.
EQ Time after pointsto analysis and smt_query: 253.268s.
EQ Time after pointsto analysis and smt_query and bv-solve: 252.835s.
Equivalence proof found. The programs are equivalent.
