=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%5%d L2%6%bbentry L2%8%bbentry L2%10%bbentry L2%13%bbentry L2%14%d L2%15%bbentry L2%16%bbentry E0%0%d
=Edges:
L0%0%d => L2%13%bbentry
L2%13%bbentry => L2%14%d
L2%14%d => L2%16%bbentry
L2%14%d => L2%15%bbentry
L2%15%bbentry => L2%5%d
L2%5%d => L2%8%bbentry
L2%5%d => L2%6%bbentry
L2%6%bbentry => L2%10%bbentry
L2%8%bbentry => L2%10%bbentry
L2%10%bbentry => E0%0%d
L2%16%bbentry => L2%13%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%5%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%10%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%13%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%14%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%15%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L2%16%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-n-1 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-14.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L2%13%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L2%13%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-9.L2%13%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-i-0.L2%13%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-n-0.L2%13%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-r-0.L2%13%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L2%13%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L2%13%bbentry => L2%14%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L2%14%d
1 : input.spec-%var-i-0.L2%13%bbentry : BV:32
2 : input.spec-%var-n-0.L2%13%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_bvsgt)
tfg_edge_comment end

=Edge: L2%14%d => L2%16%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L2%14%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_false_split
tfg_edge_comment end

=Edge: L2%14%d => L2%15%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L2%14%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_true_split
tfg_edge_comment end

=Edge: L2%15%bbentry => L2%5%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-11.L2%5%d
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
=spec-%tmpvar-12.L2%5%d
1 : SORT2EXPR.VAR : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%var-r-0.L2%13%bbentry : BV:32
4 : sum_init(1, 2, 3) : SUM[BV:32,BV:32]
=spec-%tmpvar-7.L2%5%d
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
=spec-%tmpvar-8.L2%5%d
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*ite_true_merge)*func_ret)*(inline_exit*ctor_sum))
tfg_edge_comment end

=Edge: L2%5%d => L2%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:9:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%5%d => L2%6%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:7:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%6%bbentry => L2%10%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-13.L2%10%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-fst-1.L2%10%bbentry
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_0)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%8%bbentry => L2%10%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-13.L2%10%bbentry
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-snd-1.L2%10%bbentry
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%10%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%tmpvar-13.L2%10%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*func_ret)
tfg_edge_comment end

=Edge: L2%16%bbentry => L2%13%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L2%13%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : input.spec-%var-i-0.L2%13%bbentry : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(5, 2) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=spec-%var-n-0.L2%13%bbentry
1 : input.spec-%var-n-0.L2%13%bbentry : BV:32
=spec-%var-r-0.L2%13%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : input.spec-%var-i-0.L2%13%bbentry : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(5, 2) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=src.spec-ghostvar.itervar.1.L2%13%bbentry
1 : input.src.spec-ghostvar.itervar.1.L2%13%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L2%13%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L2%13%bbentry
1 : input.spec-%var-i-0.L2%13%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L2%13%bbentry
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
2 : input.spec-%var-i-0.L2%13%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-4.L2%13%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : input.spec-%var-i-0.L2%13%bbentry : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(5, 2) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
=spec-%var-fst-0.L2%13%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : input.spec-%var-i-0.L2%13%bbentry : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(5, 2) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=spec-%var-snd-0.L2%13%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : input.spec-%var-i-0.L2%13%bbentry : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(5, 2) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((((bb_entry*ctor_bv)*intrinsic_app_bvadd)*intrinsic_app_bvadd)*ctor_prod)*match_prod_0)*(match_prod_1*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-n-1
1 : input.spec-%var-n-1 : BV:32
=Loc 23 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 24 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 25 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%14%d
1 : input.spec-%tmpvar-0.L2%14%d : BOOL
=Loc 26 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L2%5%d
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
=Loc 27 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L2%10%bbentry
1 : input.spec-%tmpvar-13.L2%10%bbentry : BV:32
=Loc 28 in src.spec.foo.
REGMEM
spec-%tmpvar-14.E0%0%d
1 : input.spec-%tmpvar-14.E0%0%d : BV:32
=Loc 29 in src.spec.foo.
REGMEM
spec-%var-i-0.L2%13%bbentry
1 : input.spec-%var-i-0.L2%13%bbentry : BV:32
=Loc 30 in src.spec.foo.
REGMEM
spec-%var-n-0.L2%13%bbentry
1 : input.spec-%var-n-0.L2%13%bbentry : BV:32
=Loc 31 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L2%5%d
1 : input.spec-%tmpvar-11.L2%5%d : BV:32
=Loc 32 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L2%5%d
1 : input.spec-%tmpvar-7.L2%5%d : BV:32
=Loc 33 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L2%5%d
1 : input.spec-%tmpvar-8.L2%5%d : BV:32
=Loc 34 in src.spec.foo.
REGMEM
spec-%var-r-0.L2%13%bbentry
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
=Loc 35 in src.spec.foo.
REGMEM
spec-%var-fst-1.L2%10%bbentry
1 : input.spec-%var-fst-1.L2%10%bbentry : BV:32
=Loc 36 in src.spec.foo.
REGMEM
spec-%var-snd-1.L2%10%bbentry
1 : input.spec-%var-snd-1.L2%10%bbentry : BV:32
=Loc 37 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L2%13%bbentry
1 : input.spec-%tmpvar-10.L2%13%bbentry : BV:32
=Loc 38 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L2%13%bbentry
1 : input.spec-%tmpvar-9.L2%13%bbentry : BV:32
=Loc 39 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L2%13%bbentry
1 : input.src.spec-ghostvar.itervar.1.L2%13%bbentry : BV:32
=Loc 40 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L2%13%bbentry
1 : input.spec-%tmpvar-1.L2%13%bbentry : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L2%13%bbentry
1 : input.spec-%tmpvar-2.L2%13%bbentry : BV:32
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L2%13%bbentry
1 : input.spec-%tmpvar-3.L2%13%bbentry : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L2%13%bbentry
1 : input.spec-%tmpvar-4.L2%13%bbentry : PROD[BV:32,BV:32]
=Loc 44 in src.spec.foo.
REGMEM
spec-%var-fst-0.L2%13%bbentry
1 : input.spec-%var-fst-0.L2%13%bbentry : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%var-snd-0.L2%13%bbentry
1 : input.spec-%var-snd-0.L2%13%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L2%5%d
1, 26, 
=live locs at L2%6%bbentry
1, 
=live locs at L2%8%bbentry
26, 
=live locs at L2%10%bbentry
27, 
=live locs at L2%13%bbentry
1, 29, 30, 34, 
=live locs at L2%14%d
1, 25, 29, 30, 34, 
=live locs at L2%15%bbentry
1, 34, 
=live locs at L2%16%bbentry
1, 29, 30, 34, 
=live locs at E0%0%d
28[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 23, 24
=loc definedness at L2%5%d
1, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39
=loc definedness at L2%6%bbentry
1, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39
=loc definedness at L2%8%bbentry
1, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39
=loc definedness at L2%10%bbentry
1, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39
=loc definedness at L2%13%bbentry
1, 23, 24, 29, 30, 34, 37, 38, 39
=loc definedness at L2%14%d
1, 23, 24, 25, 29, 30, 34, 37, 38, 39
=loc definedness at L2%15%bbentry
1, 23, 24, 25, 29, 30, 34, 37, 38, 39
=loc definedness at L2%16%bbentry
1, 23, 24, 25, 29, 30, 34, 37, 38, 39
=loc definedness at E0%0%d
1, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L2%5%d
26
=branch affecting variable locs at L2%6%bbentry

=branch affecting variable locs at L2%8%bbentry

=branch affecting variable locs at L2%10%bbentry

=branch affecting variable locs at L2%13%bbentry
29, 30, 34
=branch affecting variable locs at L2%14%d
25, 29, 30, 34
=branch affecting variable locs at L2%15%bbentry
34
=branch affecting variable locs at L2%16%bbentry
29, 30, 34
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%bbentry for loc_id 29 {input.spec-%var-i-0.L2%13%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%bbentry for loc_id 30 {input.spec-%var-n-0.L2%13%bbentry }
1 : input.spec-%var-n-1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%bbentry for loc_id 34 {input.spec-%var-r-0.L2%13%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%bbentry for loc_id 37 {input.spec-%tmpvar-10.L2%13%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%bbentry for loc_id 38 {input.spec-%tmpvar-9.L2%13%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%bbentry for loc_id 39 {input.src.spec-ghostvar.itervar.1.L2%13%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%13%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%5%d=>L2%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%5%d=>L2%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%5%d=>L2%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%5%d=>L2%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%6%bbentry=>L2%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%6%bbentry=>L2%10%bbentry for loc_id 27 {input.spec-%tmpvar-13.L2%10%bbentry }
1 : input.spec-%var-n-1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%6%bbentry=>L2%10%bbentry for loc_id 35 {input.spec-%var-fst-1.L2%10%bbentry }
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%6%bbentry=>L2%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%8%bbentry=>L2%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%8%bbentry=>L2%10%bbentry for loc_id 27 {input.spec-%tmpvar-13.L2%10%bbentry }
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%8%bbentry=>L2%10%bbentry for loc_id 36 {input.spec-%var-snd-1.L2%10%bbentry }
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%8%bbentry=>L2%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>E0%0%d for loc_id 28 {input.spec-%tmpvar-14.E0%0%d }
1 : input.spec-%tmpvar-13.L2%10%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%10%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%14%d
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%14%d for loc_id 25 {input.spec-%tmpvar-0.L2%14%d }
1 : input.spec-%var-i-0.L2%13%bbentry : BV:32
2 : input.spec-%var-n-0.L2%13%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%14%d done
=graph_with_edge_structures.loc_to_expr_map at L2%14%d=>L2%15%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%14%d=>L2%15%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%14%d=>L2%16%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%14%d=>L2%16%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>L2%5%d
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>L2%5%d for loc_id 26 {input.spec-%tmpvar-12.L2%5%d }
1 : SORT2EXPR.VAR : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%var-r-0.L2%13%bbentry : BV:32
4 : sum_init(1, 2, 3) : SUM[BV:32,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>L2%5%d for loc_id 31 {input.spec-%tmpvar-11.L2%5%d }
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>L2%5%d for loc_id 32 {input.spec-%tmpvar-7.L2%5%d }
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>L2%5%d for loc_id 33 {input.spec-%tmpvar-8.L2%5%d }
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%15%bbentry=>L2%5%d done
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry for loc_id 29 {input.spec-%var-i-0.L2%13%bbentry }
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L2%13%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry for loc_id 34 {input.spec-%var-r-0.L2%13%bbentry }
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L2%13%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry for loc_id 39 {input.src.spec-ghostvar.itervar.1.L2%13%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L2%13%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry for loc_id 40 {input.spec-%tmpvar-1.L2%13%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry for loc_id 41 {input.spec-%tmpvar-2.L2%13%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%13%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry for loc_id 42 {input.spec-%tmpvar-3.L2%13%bbentry }
1 : input.spec-%var-i-0.L2%13%bbentry : BV:32
2 : input.spec-%var-r-0.L2%13%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry for loc_id 43 {input.spec-%tmpvar-4.L2%13%bbentry }
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L2%13%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry for loc_id 44 {input.spec-%var-fst-0.L2%13%bbentry }
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L2%13%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry for loc_id 45 {input.spec-%var-snd-0.L2%13%bbentry }
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L2%13%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%13%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%5%d:
vacuous mls at L2%6%bbentry:
vacuous mls at L2%8%bbentry:
vacuous mls at L2%10%bbentry:
vacuous mls at L2%13%bbentry:
vacuous mls at L2%14%d:
vacuous mls at L2%15%bbentry:
vacuous mls at L2%16%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%5%d:
non-vacuous mls at L2%6%bbentry:
non-vacuous mls at L2%8%bbentry:
non-vacuous mls at L2%10%bbentry:
non-vacuous mls at L2%13%bbentry:
non-vacuous mls at L2%14%d:
non-vacuous mls at L2%15%bbentry:
non-vacuous mls at L2%16%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 30
=loc_expr
140383 : input.spec-%var-n-0.L2%13%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.end
=loc 37
=loc_expr
140404 : input.spec-%tmpvar-10.L2%13%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 38
=loc_expr
140405 : input.spec-%tmpvar-9.L2%13%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 40
=loc_expr
140406 : input.spec-%tmpvar-1.L2%13%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 37 expr
1 : input.spec-%tmpvar-10.L2%13%bbentry : BV:32
=loc 37 spreled-expr
140277 : 0 { 0x0 +1.0e129 } : BV:32
=loc 38 expr
1 : input.spec-%tmpvar-9.L2%13%bbentry : BV:32
=loc 38 spreled-expr
140276 : 1 { 0x1 +1.11e129 } : BV:32
=loc 40 expr
1 : input.spec-%tmpvar-1.L2%13%bbentry : BV:32
=loc 40 spreled-expr
140276 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 23 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 24 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 25 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 26 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 27 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 28 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 29 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 30 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 31 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 34 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 37 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%13%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%5%d=>L2%6%bbentry
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%5%d=>L2%8%bbentry
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%6%bbentry=>L2%10%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%8%bbentry=>L2%10%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%10%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%13%bbentry=>L2%14%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%14%d=>L2%15%bbentry
1 : input.spec-%tmpvar-0.L2%14%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%14%d=>L2%16%bbentry
1 : input.spec-%tmpvar-0.L2%14%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%15%bbentry=>L2%5%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%16%bbentry=>L2%13%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%13%bbentry
=spec-%tmpvar-10.L2%13%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-9.L2%13%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-i-0.L2%13%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-n-0.L2%13%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-r-0.L2%13%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L2%13%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%5%d=>L2%6%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%5%d=>L2%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%6%bbentry=>L2%10%bbentry
=spec-%tmpvar-13.L2%10%bbentry
1 : input.spec-%var-n-1 : BV:32
=spec-%var-fst-1.L2%10%bbentry
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%8%bbentry=>L2%10%bbentry
=spec-%tmpvar-13.L2%10%bbentry
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-snd-1.L2%10%bbentry
1 : input.spec-%tmpvar-12.L2%5%d : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%10%bbentry=>E0%0%d
=spec-%tmpvar-14.E0%0%d
1 : input.spec-%tmpvar-13.L2%10%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%13%bbentry=>L2%14%d
=spec-%tmpvar-0.L2%14%d
1 : input.spec-%var-i-0.L2%13%bbentry : BV:32
2 : input.spec-%var-n-0.L2%13%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%14%d=>L2%15%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%14%d=>L2%16%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%15%bbentry=>L2%5%d
=spec-%tmpvar-11.L2%5%d
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
=spec-%tmpvar-12.L2%5%d
1 : SORT2EXPR.VAR : SUM[BV:32,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.spec-%var-r-0.L2%13%bbentry : BV:32
4 : sum_init(1, 2, 3) : SUM[BV:32,BV:32]
=spec-%tmpvar-7.L2%5%d
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
=spec-%tmpvar-8.L2%5%d
1 : input.spec-%var-r-0.L2%13%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%16%bbentry=>L2%13%bbentry
=spec-%var-i-0.L2%13%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L2%13%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=spec-%var-r-0.L2%13%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L2%13%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=src.spec-ghostvar.itervar.1.L2%13%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L2%13%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L2%13%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L2%13%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L2%13%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L2%13%bbentry
1 : input.spec-%var-i-0.L2%13%bbentry : BV:32
2 : input.spec-%var-r-0.L2%13%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-4.L2%13%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L2%13%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
=spec-%var-fst-0.L2%13%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L2%13%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=spec-%var-snd-0.L2%13%bbentry
1 : SORT2EXPR.VAR : PROD[BV:32,BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : input.spec-%var-i-0.L2%13%bbentry : BV:32
4 : bvadd(2, 3) : BV:32
5 : input.spec-%var-r-0.L2%13%bbentry : BV:32
6 : bvadd(3, 5) : BV:32
7 : prod_init(1, 4, 6) : PROD[BV:32,BV:32]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : prod_get(7, 8) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%13%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%13%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%5%d=>L2%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%5%d=>L2%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%5%d=>L2%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%5%d=>L2%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%6%bbentry=>L2%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%6%bbentry=>L2%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%8%bbentry=>L2%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%8%bbentry=>L2%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%10%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%10%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L2%13%bbentry=>L2%14%d
=graph_with_simplified_assets.simplified_assumes at L2%13%bbentry=>L2%14%d done
=graph_with_simplified_assets.simplified_assumes at L2%14%d=>L2%15%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%14%d=>L2%15%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%14%d=>L2%16%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%14%d=>L2%16%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%15%bbentry=>L2%5%d
=graph_with_simplified_assets.simplified_assumes at L2%15%bbentry=>L2%5%d done
=graph_with_simplified_assets.simplified_assumes at L2%16%bbentry=>L2%13%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%16%bbentry=>L2%13%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%5%d for src.spec.foo
=suffixpath_at_L2%5%d.graph_edge_composition
((L0%0%d=>L2%13%bbentry)*((L2%13%bbentry=>L2%14%d)*((L2%14%d=>L2%15%bbentry)*(L2%15%bbentry=>L2%5%d))))
=suffixpath_at_L2%6%bbentry for src.spec.foo
=suffixpath_at_L2%6%bbentry.graph_edge_composition
((L0%0%d=>L2%13%bbentry)*((L2%13%bbentry=>L2%14%d)*((L2%14%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%5%d)*(L2%5%d=>L2%6%bbentry)))))
=suffixpath_at_L2%8%bbentry for src.spec.foo
=suffixpath_at_L2%8%bbentry.graph_edge_composition
((L0%0%d=>L2%13%bbentry)*((L2%13%bbentry=>L2%14%d)*((L2%14%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%5%d)*(L2%5%d=>L2%8%bbentry)))))
=suffixpath_at_L2%10%bbentry for src.spec.foo
=suffixpath_at_L2%10%bbentry.graph_edge_composition
(((L0%0%d=>L2%13%bbentry)*((L2%13%bbentry=>L2%14%d)*((L2%14%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%5%d)*((L2%5%d=>L2%6%bbentry)*(L2%6%bbentry=>L2%10%bbentry))))))+((L0%0%d=>L2%13%bbentry)*((L2%13%bbentry=>L2%14%d)*((L2%14%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%5%d)*((L2%5%d=>L2%8%bbentry)*(L2%8%bbentry=>L2%10%bbentry)))))))
=suffixpath_at_L2%13%bbentry for src.spec.foo
=suffixpath_at_L2%13%bbentry.graph_edge_composition
(L0%0%d=>L2%13%bbentry)
=suffixpath_at_L2%14%d for src.spec.foo
=suffixpath_at_L2%14%d.graph_edge_composition
((L0%0%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%14%d))
=suffixpath_at_L2%15%bbentry for src.spec.foo
=suffixpath_at_L2%15%bbentry.graph_edge_composition
((L0%0%d=>L2%13%bbentry)*((L2%13%bbentry=>L2%14%d)*(L2%14%d=>L2%15%bbentry)))
=suffixpath_at_L2%16%bbentry for src.spec.foo
=suffixpath_at_L2%16%bbentry.graph_edge_composition
((L0%0%d=>L2%13%bbentry)*((L2%13%bbentry=>L2%14%d)*(L2%14%d=>L2%16%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>L2%13%bbentry)*((L2%13%bbentry=>L2%14%d)*((L2%14%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%5%d)*((L2%5%d=>L2%6%bbentry)*(L2%6%bbentry=>L2%10%bbentry))))))+((L0%0%d=>L2%13%bbentry)*((L2%13%bbentry=>L2%14%d)*((L2%14%d=>L2%15%bbentry)*((L2%15%bbentry=>L2%5%d)*((L2%5%d=>L2%8%bbentry)*(L2%8%bbentry=>L2%10%bbentry)))))))*(L2%10%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%13%bbentry
tfg.assumes_around_edge at L0%0%d=>L2%13%bbentry done
tfg.assumes_around_edge at L2%5%d=>L2%6%bbentry
tfg.assumes_around_edge at L2%5%d=>L2%6%bbentry done
tfg.assumes_around_edge at L2%5%d=>L2%8%bbentry
tfg.assumes_around_edge at L2%5%d=>L2%8%bbentry done
tfg.assumes_around_edge at L2%6%bbentry=>L2%10%bbentry
tfg.assumes_around_edge at L2%6%bbentry=>L2%10%bbentry done
tfg.assumes_around_edge at L2%8%bbentry=>L2%10%bbentry
tfg.assumes_around_edge at L2%8%bbentry=>L2%10%bbentry done
tfg.assumes_around_edge at L2%10%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%10%bbentry=>E0%0%d done
tfg.assumes_around_edge at L2%13%bbentry=>L2%14%d
tfg.assumes_around_edge at L2%13%bbentry=>L2%14%d done
tfg.assumes_around_edge at L2%14%d=>L2%15%bbentry
tfg.assumes_around_edge at L2%14%d=>L2%15%bbentry done
tfg.assumes_around_edge at L2%14%d=>L2%16%bbentry
tfg.assumes_around_edge at L2%14%d=>L2%16%bbentry done
tfg.assumes_around_edge at L2%15%bbentry=>L2%5%d
tfg.assumes_around_edge at L2%15%bbentry=>L2%5%d done
tfg.assumes_around_edge at L2%16%bbentry=>L2%13%bbentry
tfg.assumes_around_edge at L2%16%bbentry=>L2%13%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
