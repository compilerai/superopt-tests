=TFG_SSA:
=TFG_LLVM dst.llvm.opt_map:
=TFG:
=Nodes: L0%0%d Lentry%2%d Lif.end%1%bbentry Lif.then%1%d Lif.then%2%fcallStart Lif.then%2%fcallEnd E0%0%d
=Edges:
L0%0%d => Lentry%2%d
Lentry%2%d => Lif.then%1%d
Lentry%2%d => Lif.end%1%bbentry
Lif.then%1%d => Lif.then%2%fcallStart
Lif.then%2%fcallStart => Lif.then%2%fcallEnd
Lif.then%2%fcallEnd => Lif.end%1%bbentry
Lif.end%1%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.end%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%2%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%2%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: opt_map
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%opt : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%opt : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : update_val : 3 : 1 : 0
C_SYMBOL2 : opt_map : 8 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%opt : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;opt_map}
=memlabel_map.0 for call-context {*;opt_map}
mlcall.dst.llvm.opt_map.2 : memlabel-mem-
=memlabel_map.1 for call-context {*;opt_map}
mlcall.dst.llvm.opt_map.3 : memlabel-mem-
=memlabel_map.2 for call-context {*;opt_map}
mlvar.dst.llvm.opt_map.0 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0
=memlabel_map.3 for call-context {*;opt_map}
mlvar.dst.llvm.opt_map.1 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0
=Edge: L0%0%d => Lentry%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%tobool.Lentry%2%d
1 : input.dst.llvm-%opt : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*  %tobool = icmp ne i32* %opt, null, !dbg !16)
tfg_edge_comment end

=Edge: Lentry%2%d => Lif.then%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %if.then, label %if.end, !dbg !18*  br i1 %tobool, label %if.then, label %if.end, !dbg !18)*  br i1 %tobool, label %if.then, label %if.end, !dbg !18)
tfg_edge_comment end

=Edge: Lentry%2%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=dst.llvm-mem.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %tobool, label %if.then, label %if.end, !dbg !18*  br i1 %tobool, label %if.then, label %if.end, !dbg !18)*  br i1 %tobool, label %if.then, label %if.end, !dbg !18)
tfg_edge_comment end

=Edge: Lif.then%1%d => Lif.then%2%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%0.Lif.then%2%fcallStart
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.opt_map.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((  %0 = load i32, i32* %opt, align 4, !dbg !19*  %0 = load i32, i32* %opt, align 4, !dbg !19)*fcall_edge_start)
tfg_edge_comment end

=Edge: Lif.then%2%fcallStart => Lif.then%2%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call.Lif.then%2%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.opt_map.2 : MEMLABEL
3 : mlcall.dst.llvm.opt_map.3 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-mem.Lif.then%2%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.opt_map.2 : MEMLABEL
3 : mlcall.dst.llvm.opt_map.3 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call = call i32 @update_val(i32 %0), !dbg !21)
tfg_edge_comment end

=Edge: Lif.then%2%fcallEnd => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-mem.Lif.end%1%bbentry
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.opt_map.1 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*(((  store i32 %call, i32* %opt, align 4, !dbg !22*  br label %if.end, !dbg !23)*  br label %if.end, !dbg !23)*  br label %if.end, !dbg !23))
tfg_edge_comment end

=Edge: Lif.end%1%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%opt : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  ret i32* %opt, !dbg !24)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%opt : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.opt_map
=Loc 100001 in dst.llvm.opt_map.
REGMEM
dst.llvm-%opt
1 : input.dst.llvm-%opt : BV:32
=Loc 100005 in dst.llvm.opt_map.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100007 in dst.llvm.opt_map.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100008 in dst.llvm.opt_map.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100009 in dst.llvm.opt_map.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100010 in dst.llvm.opt_map.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100014 in dst.llvm.opt_map.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100015 in dst.llvm.opt_map.
REGMEM
dst.local./*___y___opt_map__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
=Loc 100017 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100018 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap
=Loc 100019 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/
=Loc 100020 in dst.llvm.opt_map.
REGMEM
dst.llvm-%tobool.Lentry%2%d
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=Loc 100021 in dst.llvm.opt_map.
REGMEM
dst.llvm-%0.Lif.then%2%fcallStart
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=Loc 100022 in dst.llvm.opt_map.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100023 in dst.llvm.opt_map.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100024 in dst.llvm.opt_map.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100025 in dst.llvm.opt_map.
REGMEM
dst.llvm-%call.Lif.then%2%fcallEnd
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=Loc 100026 in dst.llvm.opt_map.
REGMEM
llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : BV:32
=Loc 100027 in dst.llvm.opt_map.
REGMEM
dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=Loc 100028 in dst.llvm.opt_map.
REGMEM
dst.cur_rounding_mode.Lentry%2%d
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=Loc 100029 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100030 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap
=Loc 100031 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.end%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/
=Loc 100032 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100033 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap
=Loc 100034 in dst.llvm.opt_map.
MASKED
=mem
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/
=Locs end
=Liveness in dst.llvm.opt_map
=live locs at L0%0%d
100001[f], 100018, 100019, 
=live locs at Lentry%2%d
100001[f], 100018, 100019, 100020, 
=live locs at Lif.end%1%bbentry
100001[f], 100030, 
=live locs at Lif.then%1%d
100001[f], 100018, 100019, 
=live locs at Lif.then%2%fcallStart
100001[f], 100018, 100019, 100021, 
=live locs at Lif.then%2%fcallEnd
100001[f], 100025, 100033, 
=live locs at E0%0%d
100001[f], 100030, 

=Definedness in dst.llvm.opt_map
=loc definedness at L0%0%d
100001, 100015, 100017, 100018, 100019
=loc definedness at Lentry%2%d
100001, 100015, 100017, 100018, 100019, 100020, 100027, 100028
=loc definedness at Lif.end%1%bbentry
100001, 100015, 100017, 100018, 100019, 100020, 100027, 100028, 100029, 100030, 100031
=loc definedness at Lif.then%1%d
100001, 100015, 100017, 100018, 100019, 100020, 100027, 100028
=loc definedness at Lif.then%2%fcallStart
100001, 100015, 100017, 100018, 100019, 100020, 100021, 100027, 100028
=loc definedness at Lif.then%2%fcallEnd
100001, 100015, 100017, 100018, 100019, 100020, 100021, 100025, 100026, 100027, 100028, 100032, 100033, 100034
=loc definedness at E0%0%d
100001, 100015, 100017, 100018, 100019, 100020, 100022, 100023, 100024, 100027, 100028, 100029, 100030, 100031

=Branch affecting variable locs in dst.llvm.opt_map
=branch affecting variable locs at L0%0%d
100001
=branch affecting variable locs at Lentry%2%d
100020
=branch affecting variable locs at Lif.end%1%bbentry

=branch affecting variable locs at Lif.then%1%d

=branch affecting variable locs at Lif.then%2%fcallStart

=branch affecting variable locs at Lif.then%2%fcallEnd

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.opt_map
=relevant memlabels
=function: opt_map
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap
memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100020 {input.dst.llvm-%tobool.Lentry%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%opt : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100027 {input.dst.local_alloc_count.Lentry%2%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d for loc_id 100028 {input.dst.cur_rounding_mode.Lentry%2%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.end%1%bbentry for loc_id 100029 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.end%1%bbentry for loc_id 100030 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.end%1%bbentry for loc_id 100031 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.then%1%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%d=>Lif.then%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>E0%0%d for loc_id 100022 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>E0%0%d for loc_id 100023 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%opt : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>E0%0%d for loc_id 100024 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.then%2%fcallStart
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.then%2%fcallStart for loc_id 100021 {input.dst.llvm-%0.Lif.then%2%fcallStart }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.then%2%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd for loc_id 100025 {input.dst.llvm-%call.Lif.then%2%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd for loc_id 100026 {input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd }
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd for loc_id 100032 {memmask(input.dst.llvm-mem.Lif.then%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd for loc_id 100033 {memmask(input.dst.llvm-mem.Lif.then%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd for loc_id 100034 {memmask(input.dst.llvm-mem.Lif.then%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallEnd=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallEnd=>Lif.end%1%bbentry for loc_id 100029 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : memlabel-mem--arg.0 : MEMLABEL
10 : memmask(8, 2, 9) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallEnd=>Lif.end%1%bbentry for loc_id 100030 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap) }
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
10 : memmask(8, 2, 9) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallEnd=>Lif.end%1%bbentry for loc_id 100031 {memmask(input.dst.llvm-mem.Lif.end%1%bbentry, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lif.then%2%fcallEnd=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lentry%2%d:
vacuous mls at Lif.end%1%bbentry:
vacuous mls at Lif.then%1%d:
vacuous mls at Lif.then%2%fcallStart:
vacuous mls at Lif.then%2%fcallEnd:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lentry%2%d:
non-vacuous mls at Lif.end%1%bbentry:
non-vacuous mls at Lif.then%1%d:
non-vacuous mls at Lif.then%2%fcallStart:
non-vacuous mls at Lif.then%2%fcallEnd:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.opt_map
=avail_exprs begin
=loc 100001
=loc_expr
140348 : input.dst.llvm-%opt : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100005
=loc_expr
140372 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100007
=loc_expr
140373 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140375 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140377 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100010
=loc_expr
140379 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140352 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140347 : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140408 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%opt : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=avail_exprs_val.end
=loc 100021
=loc_expr
140409 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=avail_exprs_val.end
=loc 100022
=loc_expr
140418 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100023
=loc_expr
140420 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%opt : BV:32
=avail_exprs_val.end
=loc 100024
=loc_expr
140421 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100026
=loc_expr
140422 : input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=avail_exprs_val.end
=loc 100027
=loc_expr
140423 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100028
=loc_expr
140424 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.opt_map
=loc 100024 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100024 spreled-expr
140267 : retaddr_const : BV:32
=loc 100027 expr
1 : input.dst.local_alloc_count.Lentry%2%d : COUNT
=loc 100027 spreled-expr
140352 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100028 expr
1 : input.dst.cur_rounding_mode.Lentry%2%d : ROUNDING_MODE
=loc 100028 spreled-expr
140351 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;opt_map}
=loc_id 100001 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100005 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100007 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100008 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100009 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100010 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100014 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100015 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_top
=loc_id 100017 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100018 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100019 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100020 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100021 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100022 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_linearly_related(; )
=loc_id 100023 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_linearly_related(; )
=loc_id 100025 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100027 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_linearly_related(; )
=loc_id 100028 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_linearly_related(; )
=loc_id 100029 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100030 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100033 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=loc_id 100034 lr-status in lr-status-map at call-context {*;opt_map}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100024 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100027 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100028 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lif.end%1%bbentry
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%d=>Lif.then%1%d
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.end%1%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%1%d=>Lif.then%2%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%2%fcallEnd=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%2%d
=dst.cur_rounding_mode.Lentry%2%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%tobool.Lentry%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%opt : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=dst.local_alloc_count.Lentry%2%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lif.end%1%bbentry
=dst.llvm-mem.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%d=>Lif.then%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.end%1%bbentry=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%opt : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%1%d=>Lif.then%2%fcallStart
=dst.llvm-%0.Lif.then%2%fcallStart
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=dst.llvm-%call.Lif.then%2%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=dst.llvm-mem.Lif.then%2%fcallEnd
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%2%fcallEnd=>Lif.end%1%bbentry
=dst.llvm-mem.Lif.end%1%bbentry
1 : input.dst.llvm-mem.Lif.then%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%opt : BV:32
5 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d assume# 0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%2%d done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.then%1%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%d=>Lif.then%1%d done
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.then%2%fcallStart
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.then%2%fcallStart assume# 0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.then%2%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lif.then%2%fcallEnd=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.then%2%fcallEnd=>Lif.end%1%bbentry assume# 0
1 : input.dst.llvm-%opt : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%2%fcallEnd=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
C_NEXTPC1 : update_val
=Nextpc-map done
=suffixpaths for dst.llvm.opt_map
=suffixpath_at_L0%0%d for dst.llvm.opt_map
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lentry%2%d for dst.llvm.opt_map
=suffixpath_at_Lentry%2%d.graph_edge_composition
(L0%0%d=>Lentry%2%d)
=suffixpath_at_Lif.end%1%bbentry for dst.llvm.opt_map
=suffixpath_at_Lif.end%1%bbentry.graph_edge_composition
(((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.end%1%bbentry))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*((Lif.then%1%d=>Lif.then%2%fcallStart)*((Lif.then%2%fcallStart=>Lif.then%2%fcallEnd)*(Lif.then%2%fcallEnd=>Lif.end%1%bbentry))))))
=suffixpath_at_Lif.then%1%d for dst.llvm.opt_map
=suffixpath_at_Lif.then%1%d.graph_edge_composition
((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.then%1%d))
=suffixpath_at_Lif.then%2%fcallStart for dst.llvm.opt_map
=suffixpath_at_Lif.then%2%fcallStart.graph_edge_composition
((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lif.then%2%fcallStart)))
=suffixpath_at_Lif.then%2%fcallEnd for dst.llvm.opt_map
=suffixpath_at_Lif.then%2%fcallEnd.graph_edge_composition
((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*((Lif.then%1%d=>Lif.then%2%fcallStart)*(Lif.then%2%fcallStart=>Lif.then%2%fcallEnd))))
=suffixpath_at_E0%0%d for dst.llvm.opt_map
=suffixpath_at_E0%0%d.graph_edge_composition
((((L0%0%d=>Lentry%2%d)*(Lentry%2%d=>Lif.end%1%bbentry))+((L0%0%d=>Lentry%2%d)*((Lentry%2%d=>Lif.then%1%d)*((Lif.then%1%d=>Lif.then%2%fcallStart)*((Lif.then%2%fcallStart=>Lif.then%2%fcallEnd)*(Lif.then%2%fcallEnd=>Lif.end%1%bbentry))))))*(Lif.end%1%bbentry=>E0%0%d))
=suffixpaths for dst.llvm.opt_map done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lentry%2%d assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lentry%2%d
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lentry%2%d done
tfg.assumes_around_edge at Lentry%2%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lentry%2%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge at Lentry%2%d=>Lif.then%1%d
tfg.assumes_around_edge at Lentry%2%d=>Lif.then%1%d done
tfg.assumes_around_edge at Lif.end%1%bbentry=>E0%0%d
tfg.assumes_around_edge at Lif.end%1%bbentry=>E0%0%d done
tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart
tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart assume #0
tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart assume #0.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%1%d=>Lif.then%2%fcallStart
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.then%2%fcallStart done
tfg.assumes_around_edge at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
tfg.assumes_around_edge at Lif.then%2%fcallStart=>Lif.then%2%fcallEnd done
tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%2%fcallEnd=>Lif.end%1%bbentry
=LhsExpr
140348 : input.dst.llvm-%opt : BV:32
140331 : 4 { 0x4 +1.0e1025 } : INT
140353 : islangaligned(140348, 140331) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%2%fcallEnd=>Lif.end%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 6
=pc
Lentry%2%d
=linename
line 6
=pc
Lif.end%1%d
=linename
line 9
=pc
Lif.then%1%d
=linename
line 7
=pc
Lif.then%2%d
=linename
line 7
=pc
Lif.then%3%d
=linename
line 7
=pc
Lif.then%4%d
=linename
line 8
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 7
=pc
Lentry%2%d
=column_name
 at column 7
=pc
Lif.end%1%d
=column_name
 at column 3
=pc
Lif.then%1%d
=column_name
 at column 23
=pc
Lif.then%2%d
=column_name
 at column 12
=pc
Lif.then%3%d
=column_name
 at column 10
=pc
Lif.then%4%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
line 6
=pc
Lentry%2%d
=line_and_column
line 6
=pc
Lif.end%1%d
=line_and_column
line 9
=pc
Lif.then%1%d
=line_and_column
(line 7 at column 23)
=pc
Lif.then%2%d
=line_and_column
(line 7 at column 12)
=pc
Lif.then%3%d
=line_and_column
(line 7 at column 10)
=pc
Lif.then%4%d
=line_and_column
line 8
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
input.dst.llvm-%opt : L0%0%d : opt'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%tobool : L0%0%d : not(opt' = 0)
input.dst.llvm-%0 : L0%0%d : DSTMEM[opt']_4
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : opt'
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.llvm-fcall_arg_copy.0.dst.llvm-%0 : L0%0%d : input.dst.llvm-%0
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%tobool.Lentry%2%d : L0%0%d : not(opt' = 0)
input.dst.llvm-%0.Lif.then%2%fcallStart : L0%0%d : DSTMEM[opt']_4
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : opt'
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : L0%0%d : input.dst.llvm-%0.Lif.then%2%fcallStart
input.dst.local_alloc_count.Lentry%2%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lentry%2%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%0
=dst.llvm-%0 loop pc: L0%0%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
1 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
1 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev nullptr
=dst.llvm-%call
=dst.llvm-%call loop pc: L0%0%d
=dst.llvm-%call val_scevb
=dst.llvm-%call val_scevb scev
=dst.llvm-%call val_scevb scev loop: L0%0%d
=dst.llvm-%call val_scevb scev scev_overflow_flag: 
=dst.llvm-%call val_scevb scev scev_expr
2 : input.dst.llvm-%call : BV32
=dst.llvm-%call val_scevb scev scev_expr done
=dst.llvm-%call val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb
=dst.llvm-%call atuse_scevb scev
=dst.llvm-%call atuse_scevb scev loop: L0%0%d
=dst.llvm-%call atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call atuse_scevb scev scev_expr
2 : input.dst.llvm-%call : BV32
=dst.llvm-%call atuse_scevb scev scev_expr done
=dst.llvm-%call atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lif.end%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=reaching defns for expr 1 edges
  Lif.then%1%d=>Lif.then%2%fcallStart
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 6 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 7 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at Lif.then%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns done
=Reaching Definitions at Lif.then%2%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=reaching defns for expr 1 edges
  Lif.then%1%d=>Lif.then%2%fcallStart
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns done
=Reaching Definitions at Lif.then%2%fcallEnd
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=reaching defns for expr 1 edges
  Lif.then%1%d=>Lif.then%2%fcallStart
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 6 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 7 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 7 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%tobool.Lentry%2%d : BOOL
=reaching defns for expr 0 edges
  L0%0%d=>Lentry%2%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%0.Lif.then%2%fcallStart : BV:32
=reaching defns for expr 1 edges
  Lif.then%1%d=>Lif.then%2%fcallStart
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%opt : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___opt_map__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%call.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 6 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd : BV:32
=reaching defns for expr 7 edges
  Lif.then%2%fcallStart=>Lif.then%2%fcallEnd
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lif.end%1%bbentry=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lif.end%1%bbentry=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lif.end%1%bbentry=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.local./*___y___opt_map__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%opt
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%tobool.Lentry%2%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%0.Lif.then%2%fcallStart
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%call.Lif.then%2%fcallEnd
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.llvm-fcall_arg_copy.0.dst.llvm-%0.Lif.then%2%fcallEnd
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___update_val__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.local_alloc_count.Lentry%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%2%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
