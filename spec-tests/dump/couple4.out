argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=couple4.proof
argv[5] = --spec-iospecs=couple4.iospecs
argv[6] = couple4.spec
argv[7] = couple4.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2708053
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/repos/superopt-project/superopt-tests/spec-tests/couple4.c
argv[10] = -o
argv[11] = par_tmpdir/couple4.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/couple4.spec.etfg
argv[10] = par_tmpdir/couple4.c.bc
argv[11] = -o
argv[12] = par_tmpdir/couple4.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 242 time spent: 0:0:0 [0.000520s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 278 time spent: 0:0:0 [0.000538s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 3374 time spent: 0:0:0 [0.020770s total; 0.000006 per start]
expr_simplify_solver: num_starts 191 time spent: 0:0:0 [0.028818s total; 0.000151 per start]
expr_simplify_syntactic: num_starts 191 time spent: 0:0:0 [0.047917s total; 0.000251 per start]
expr_simplify_select_on_store: num_starts 16 time spent: 0:0:0 [0.042742s total; 0.002671 per start]
expr_simplify_using_lhs_set_helper: num_starts 182 time spent: 0:0:0 [0.082928s total; 0.000456 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 568 time spent: 0:0:0 [0.082376s total; 0.000145 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 180 time spent: 0:0:0 [0.000774s total; 0.000004 per start]
expr_simplify_eq: num_starts 12 time spent: 0:0:0 [0.000154s total; 0.000013 per start]
expr_simplify_not: num_starts 6 time spent: 0:0:0 [0.000020s total; 0.000003 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000527s total; 0.000132 per start]
canonicalize_expr_tree: num_starts 116 time spent: 0:0:0 [0.002062s total; 0.000018 per start]
expr_simplify_memalloc_using_memlabel: num_starts 9 time spent: 0:0:0 [0.000029s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 16 time spent: 0:0:0 [0.042166s total; 0.002635 per start]
get_arithmetic_addsub_atoms: num_starts 136 time spent: 0:0:0 [0.000129s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 351 time spent: 0:0:0 [0.005326s total; 0.000015 per start]
expr_is_consts_struct_constant: num_starts 9813 time spent: 0:0:0 [0.006081s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 7423 time spent: 0:0:0 [0.090527s total; 0.000012 per start]
expr_do_simplify_helper_cache: num_starts 7423 time spent: 0:0:0 [0.006022s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000006s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000185s total; 0.000005 per start]
array_constant_equals: num_starts 35 time spent: 0:0:0 [0.000093s total; 0.000003 per start]
combo_dfa_xfer_and_meet: num_starts 305 time spent: 0:0:0 [0.679150s total; 0.002227 per start]
alias_val_xfer_and_meet: num_starts 305 time spent: 0:0:0 [0.114046s total; 0.000374 per start]
get_sprel_map_from_avail_exprs: num_starts 367 time spent: 0:0:0 [0.080964s total; 0.000221 per start]
update_memlabels_for_memslot_locs: num_starts 61 time spent: 0:0:0 [0.000405s total; 0.000007 per start]
populate_gen_and_kill_sets_for_edge: num_starts 610 time spent: 0:0:0 [0.042147s total; 0.000069 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1527 time spent: 0:0:0 [0.139473s total; 0.000091 per start]
compute_locs_definitely_written_on_edge: num_starts 610 time spent: 0:0:0 [0.000305s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 148 time spent: 0:0:0 [0.012908s total; 0.000087 per start]
edge_update_memlabel_map_for_mlvars: num_starts 305 time spent: 0:0:0 [0.005456s total; 0.000018 per start]
add_new_locs_based_on_edge: num_starts 305 time spent: 0:0:0 [0.072404s total; 0.000237 per start]
expand_locset_to_include_slots_for_memmask: num_starts 201 time spent: 0:0:0 [0.000960s total; 0.000005 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
graph_with_paths_constructor.src.spec.foo.: 0s (num_starts 1; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 3e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 8e-06s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 3.2e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 3.8e-05s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 3.9e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 3.9e-05s (num_starts 1; 0.0000s/start)
get_lr_status_for_loc_ids.: 5.1e-05s (num_starts 12; 0.0000s/start)
add_assumes_to_start_edge.: 6.1e-05s (num_starts 1; 0.0001s/start)
main.3.: 9.8e-05s (num_starts 1; 0.0001s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000118s (num_starts 6; 0.0000s/start)
lr_status_meet.: 0.000122s (num_starts 158; 0.0000s/start)
expr_is_hidden_reg.: 0.000155s (num_starts 181; 0.0000s/start)
expr_is_callee_save_const.: 0.0002s (num_starts 185; 0.0000s/start)
compute_sprel_relations.: 0.000254s (num_starts 1; 0.0003s/start)
propagate_sprels.: 0.000262s (num_starts 1; 0.0003s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000282s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000343s (num_starts 430; 0.0000s/start)
graph_locs_add_all_specvars.: 0.000358s (num_starts 1; 0.0004s/start)
populate_locid2expr_map.: 0.000437s (num_starts 2; 0.0002s/start)
graph_locs_add_exvregs_for_edge.: 0.000447s (num_starts 102; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000517s (num_starts 102; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000523s (num_starts 1; 0.0005s/start)
graph_locs_add_all_local_vars.: 0.000589s (num_starts 1; 0.0006s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000692s (num_starts 12; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000692s (num_starts 62; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000756s (num_starts 2; 0.0004s/start)
expr_represents_llvm_undef.: 0.001203s (num_starts 187; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.001433s (num_starts 1; 0.0014s/start)
canonicalize_llvm_nextpcs.: 0.001997s (num_starts 1; 0.0020s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.002013s (num_starts 305; 0.0000s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.002039s (num_starts 1; 0.0020s/start)
populate_simplified_to_state.: 0.0022s (num_starts 3; 0.0007s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.002348s (num_starts 1; 0.0023s/start)
def_analysis::xfer_and_meet.: 0.002635s (num_starts 232; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.003471s (num_starts 278; 0.0000s/start)
graph_with_locs_constructor.src.spec.foo.: 0.003568s (num_starts 1; 0.0036s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.003625s (num_starts 1; 0.0036s/start)
sp_version_relations_val_t::meet.: 0.003668s (num_starts 6491; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.00368s (num_starts 1; 0.0037s/start)
expr_linear_relation_holds::visit.var.: 0.004186s (num_starts 187; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.004308s (num_starts 305; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.004463s (num_starts 1; 0.0045s/start)
populate_exit_return_values_for_llvm_method.: 0.004641s (num_starts 1; 0.0046s/start)
compute_z3_expr.: 0.004913s (num_starts 111; 0.0000s/start)
query:convert_from_z3.: 0.00496s (num_starts 111; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.005084s (num_starts 305; 0.0000s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.006698s (num_starts 1; 0.0067s/start)
graph_visit_exprs.: 0.007517s (num_starts 4; 0.0019s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.009306s (num_starts 1; 0.0093s/start)
expr_substitute_using_available_exprs_submap.: 0.009894s (num_starts 191; 0.0001s/start)
compute_lr_status_for_expr.: 0.011037s (num_starts 176; 0.0001s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.011218s (num_starts 1; 0.0112s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.011338s (num_starts 158; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.011643s (num_starts 158; 0.0001s/start)
query:convert_to_z3.: 0.011931s (num_starts 111; 0.0001s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.013376s (num_starts 1; 0.0134s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.013381s (num_starts 1; 0.0134s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.013387s (num_starts 1; 0.0134s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.013392s (num_starts 1; 0.0134s/start)
tfg_constructor.src.spec.foo.: 0.013397s (num_starts 1; 0.0134s/start)
populate_simplified_assets.: 0.014058s (num_starts 6; 0.0023s/start)
populate_transitive_closure.: 0.016024s (num_starts 1; 0.0160s/start)
graph_to_stream.: 0.016569s (num_starts 1; 0.0166s/start)
create_closure_matrix.: 0.018205s (num_starts 366; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.018357s (num_starts 2; 0.0092s/start)
query:simplify-z3.: 0.021448s (num_starts 227; 0.0001s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.024635s (num_starts 261; 0.0001s/start)
graph_identify_back_edges.: 0.025375s (num_starts 5; 0.0051s/start)
tfg::populate_loc_definedness.before_solve.: 0.025876s (num_starts 2; 0.0129s/start)
tfg::populate_loc_definedness.before_initialize.: 0.026743s (num_starts 2; 0.0134s/start)
graph_identify_natural_loops.: 0.02687s (num_starts 5; 0.0054s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.027245s (num_starts 3374; 0.0000s/start)
tfg::populate_loc_definedness.: 0.027509s (num_starts 2; 0.0138s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.03205s (num_starts 9505; 0.0000s/start)
compute_new_lr_status_on_locs.: 0.033128s (num_starts 305; 0.0001s/start)
populate_branch_affecting_locs.: 0.033848s (num_starts 2; 0.0169s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.035762s (num_starts 305; 0.0001s/start)
populate_locs_potentially_modified_on_edge.: 0.036993s (num_starts 3; 0.0123s/start)
find_dominators.: 0.041766s (num_starts 9; 0.0046s/start)
compute_regions.: 0.042026s (num_starts 5; 0.0084s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.049413s (num_starts 1; 0.0494s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.049858s (num_starts 1; 0.0499s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.050918s (num_starts 1; 0.0509s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.051074s (num_starts 3; 0.0170s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.059213s (num_starts 334; 0.0002s/start)
tfg_preprocess.dst.llvm.foo.: 0.060209s (num_starts 1; 0.0602s/start)
tfg::tfg_preprocess.: 0.060212s (num_starts 1; 0.0602s/start)
create_sp_version_relations_lattice_at_pc.: 0.072953s (num_starts 366; 0.0002s/start)
get_tfg.: 0.075315s (num_starts 1; 0.0753s/start)
get_function_tfg_map.foo.: 0.075364s (num_starts 1; 0.0754s/start)
get_function_tfg_map.: 0.075367s (num_starts 1; 0.0754s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.083124s (num_starts 182; 0.0005s/start)
main.2.: 0.09238s (num_starts 1; 0.0924s/start)
populate_loc_liveness.: 0.097292s (num_starts 2; 0.0486s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.113154s (num_starts 3374; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.114613s (num_starts 305; 0.0004s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.11747s (num_starts 3374; 0.0000s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.120123s (num_starts 305; 0.0004s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.143226s (num_starts 3374; 0.0000s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.219578s (num_starts 305; 0.0007s/start)
tfg_postprocess_after_pointsto_analysis.: 0.248419s (num_starts 1; 0.2484s/start)
avail_exprs_create_submap.: 0.321006s (num_starts 915; 0.0004s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.328213s (num_starts 1; 0.3282s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.366277s (num_starts 305; 0.0012s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.679539s (num_starts 305; 0.0022s/start)
ftmap_run_pointsto_analysis.: 1.08098s (num_starts 1; 1.0810s/start)
parse_consts_db.: 6.71532s (num_starts 1; 6.7153s/start)
main.: 8.04891s (num_starts 1; 8.0489s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:14 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:22 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:22 : Reading in SPEC-LLVM I/O specification from file couple4.iospecs...</MSG>
<MSG>0:22 : Computing equivalence for function: foo...</MSG>
<MSG>0:22 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:23 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:23 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:23 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:24 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%17%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Considering 1 paths to src pc L3%20%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Attempting correlation of src pathset L0%0%d=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : Found 1 feasible correlations for paths to src pc L3%20%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : product-TFG foo: Found 4 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:24 : product-TFG foo created 4 possibilities in group foo.A...</MSG>
<MSG>0:24 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:24 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:24 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:24 : Creating ssa-path for the src-tfg path L0%0%d --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:24 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Adding node L3%7%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:24 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Adding edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:24 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:24 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:24 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : foo.A1: Added the 2 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:24 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:24 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:24 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : Done adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:24 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:24 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:24 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:24 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:24 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:24 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:24 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht17-prove_trivial4-prove13...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:32 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:32 : foo.A1 (d:1, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:32 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:32 : Chosen product-TFG foo.A1 will be explored later...</MSG>
<MSG>0:32 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:32 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:32 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:32 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:32 : Creating ssa-path for the src-tfg path L0%0%d --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:32 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:32 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:32 : foo.A2: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:32 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:32 : foo.A2: Adding node L3%10%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:32 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:32 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:32 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:32 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:32 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:32 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A2: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140277 : 1 { 0x1 } : BOOL                          : true
167808 : not(140277) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140274 : input.spec-%var-n-2 : BV:32               : 0
140677 : bvuge(140278, 140274) : BOOL              : true
167785 : not(140677) : BOOL                        : false
167809 : or(167808, 167785) : BOOL                 : false

ce =
=counter_example_begin z3.ce4 68288924d1b399cb8e2a9cb44dea12
=input.spec-%var-x-2
1 : Lambda296Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda297Var : BV:32
11 : Lambda298Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda299Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1059788587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1059788588; 1059788591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1059788592; 3005945539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3005945540; 3005945543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3005945544; 3422552071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3422552072; 3422552075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3422552076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda330Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda331Var : BV:32
11 : Lambda332Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda333Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda313Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314Var : BV:32
11 : Lambda315Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda316Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3422552075 { 0xcc00000b -872415221 -1.131e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3005945543 { 0xb32b16c7 -1289021753 -1.33663260e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059788591 { 0x3f2b172f +1.33664500e255 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2249326309
=counter_example_end


failcond-expr = or(not(true), not(bvuge(0, input.spec-%var-n-2))):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-n-2 : BV:32
5 : bvuge(3, 4) : BOOL
6 : not(5) : BOOL
7 : or(2, 6) : BOOL
</MSG>
<MSG>0:32 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:32 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:32 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:32 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:32 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:32 : Done adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:32 : Failed correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140277 : 1 { 0x1 } : BOOL                          : true
167808 : not(140277) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140274 : input.spec-%var-n-2 : BV:32               : 0
140677 : bvuge(140278, 140274) : BOOL              : true
167785 : not(140677) : BOOL                        : false
167809 : or(167808, 167785) : BOOL                 : false

ce =
=counter_example_begin z3.ce4 68288924d1b399cb8e2a9cb44dea12
=input.spec-%var-x-2
1 : Lambda296Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda297Var : BV:32
11 : Lambda298Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda299Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1059788587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1059788588; 1059788591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1059788592; 3005945539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3005945540; 3005945543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3005945544; 3422552071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3422552072; 3422552075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3422552076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda330Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda331Var : BV:32
11 : Lambda332Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda333Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda313Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314Var : BV:32
11 : Lambda315Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda316Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3422552075 { 0xcc00000b -872415221 -1.131e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3005945543 { 0xb32b16c7 -1289021753 -1.33663260e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059788591 { 0x3f2b172f +1.33664500e255 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2249326309
=counter_example_end


</MSG>
<MSG>0:32 : Discovered that the correlation was useless for the product-TFG foo.A2 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:32 : Chose (after CE propagation) product-TFG foo.A1 (d:1, s:0, sp: 5) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 16 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:32 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:32 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:32 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:32 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:32 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 13 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial4-prove5...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:32 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:32 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:32 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:32 : foo.A1 (d:1, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:32 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:32 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Considering 2 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Found 2 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Attempting correlation of src pathset L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Considering 1 paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Attempting correlation of src pathset L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Found 1 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Considering 1 paths to src pc L3%20%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Attempting correlation of src pathset L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : Found 1 feasible correlations for paths to src pc L3%20%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : product-TFG foo.A1: Found 5 correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:32 : product-TFG foo.A1 created 5 possibilities in group foo.A1.B...</MSG>
<MSG>0:32 : Chose (for CE propagation) product-TFG foo.A1.B3 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:32 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3...</MSG>
<MSG>0:32 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3...</MSG>
<MSG>0:32 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B3: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B3: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B3: Adding node L3%10%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:32 : foo.A1.B3: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B3: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B3: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A1.B3: Propagated 8 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : foo.A1.B3: Added the 8 propagated CEs at PC L3%10%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:32 : foo.A1.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:32 : foo.A1.B3: Finished executing CG's add edge function...</MSG>
<MSG>0:32 : foo.A1.B3: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B3: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Added correlation to the product-TFG foo.A1.B3 (d:2, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:32 : Chose (for CE propagation) product-TFG foo.A1.B4 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:32 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4...</MSG>
<MSG>0:32 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4...</MSG>
<MSG>0:32 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%17%bbentry ending at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:32 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:32 : Adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Computing loop hoisting select expressions at toPC L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Computing loop hoisting non-linear expressions at toPC L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Adding node L3%17%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:32 : foo.A1.B4: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:32 : foo.A1.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:32 : foo.A1.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:32 : foo.A1.B4: Propagated 8 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : foo.A1.B4: Added the 8 propagated CEs at PC L3%17%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:33 : foo.A1.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B4: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B4: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Added correlation to the product-TFG foo.A1.B4 (d:2, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A1.B5 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B5...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B5...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%20%bbentry ending at L3%20%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%20%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Computing loop hoisting select expressions at toPC L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Computing loop hoisting non-linear expressions at toPC L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Adding node L3%20%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A1.B5: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A1.B5: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%20%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%n : BV:32                 : 2097152
140869 : bvult(140859, 140426) : BOOL              : true
141215 : not(140869) : BOOL                        : false
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2097152
140616 : bvuge(140614, 140615) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
169346 : bvuge(140278, 140633) : BOOL              : true
169350 : not(169346) : BOOL                        : false
169365 : andnot1(140616, 169350) : BOOL            : false
169367 : or(141215, 169365) : BOOL                 : false

ce =
=counter_example_begin z3.ce462 3f3a9c52463acfaed61356f327a939ea
=input.spec-%var-x-2
1 : Lambda6604Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6605Var : BV:32
18 : Lambda6606Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6607Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 128 ] -> 68, [ 129; 129 ] -> 221, [ 130; 130 ] -> 239, [ 131; 131 ] -> 211, [ 132; 4294967295 ] -> 68, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 453290851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 453290852; 453290855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 453290856; 2977759231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2977759232; 2977759235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2977759236; 3276112863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3276112864; 3276112867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3276112868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.llvm-%x
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda6634Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6635Var : BV:32
18 : Lambda6636Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6637Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda6619Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6620Var : BV:32
18 : Lambda6621Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6622Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2977759235 { 0xb17d0003 -1317208061 -1.97656285e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 453290855 { 0x1b04ab67 +1.3648078e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3276112867 { 0xc34583e3 -1018854429 -1.54308736e7 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda6457Var : BV:32
2 : Lambda6458Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda6461Var : BV:32
2 : Lambda6462Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda6466Var : BV:32
2 : Lambda6467Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2333715544
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), not(bvuge(0, input.spec-%var-m-1.L3%7%bbentry)))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : not(10) : BOOL
12 : andnot1(7, 11) : BOOL
13 : or(4, 12) : BOOL
</MSG>
<MSG>0:33 : foo.A1.B5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B5: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B5: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B5: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%20%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Failed correlation of src pathset L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%20%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%n : BV:32                 : 2097152
140869 : bvult(140859, 140426) : BOOL              : true
141215 : not(140869) : BOOL                        : false
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2097152
140616 : bvuge(140614, 140615) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
169346 : bvuge(140278, 140633) : BOOL              : true
169350 : not(169346) : BOOL                        : false
169365 : andnot1(140616, 169350) : BOOL            : false
169367 : or(141215, 169365) : BOOL                 : false

ce =
=counter_example_begin z3.ce462 3f3a9c52463acfaed61356f327a939ea
=input.spec-%var-x-2
1 : Lambda6604Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6605Var : BV:32
18 : Lambda6606Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6607Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 128 ] -> 68, [ 129; 129 ] -> 221, [ 130; 130 ] -> 239, [ 131; 131 ] -> 211, [ 132; 4294967295 ] -> 68, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 453290851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 453290852; 453290855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 453290856; 2977759231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2977759232; 2977759235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2977759236; 3276112863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3276112864; 3276112867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3276112868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.llvm-%x
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda6634Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6635Var : BV:32
18 : Lambda6636Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6637Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda6619Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6620Var : BV:32
18 : Lambda6621Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6622Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2977759235 { 0xb17d0003 -1317208061 -1.97656285e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 453290855 { 0x1b04ab67 +1.3648078e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3276112867 { 0xc34583e3 -1018854429 -1.54308736e7 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda6457Var : BV:32
2 : Lambda6458Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda6461Var : BV:32
2 : Lambda6462Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda6466Var : BV:32
2 : Lambda6467Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2333715544
=counter_example_end


</MSG>
<MSG>0:33 : Discovered that the correlation was useless for the product-TFG foo.A1.B5 (d:1, s:0, sp: 5)...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A1.B2 (d:1, s:0, sp: 5) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B2...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B2...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A1.B2: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A1.B2: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%n : BV:32                 : 2147483648
140869 : bvult(140859, 140426) : BOOL              : true
141215 : not(140869) : BOOL                        : false
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
140616 : bvuge(140614, 140615) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2155905028
169346 : bvuge(140278, 140633) : BOOL              : false
169374 : andnot1(140616, 169346) : BOOL            : false
169376 : or(141215, 169374) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce255 b357532e2022f3b8942fac03553a264
=input.spec-%var-x-2
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 5 ] -> 0, [ 6; 8199 ] -> 128, [ 8200; 8203 ] -> 0, [ 8204; 2101251 ] -> 128, [ 2101252; 2101254 ] -> 0, [ 2101255; 8407039 ] -> 128, [ 8407040; 8407040 ] -> 4, [ 8407041; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8200; 8203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8204; 2101251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2101252; 2101255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2101256; 8407039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8407040; 8407043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8407044; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.llvm-%m
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda4015Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4016Var : BV:32
18 : Lambda4017Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4018Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : ite(55, 2, 309) : BV:32
311 : lambda(52, 310) : FUNCTION[BV:32 -> BV:32]
312 : map(51, 311) : MAP[BV:32 -> BV:32]
313 : lambda(17, 312) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
314 : map(16, 313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
315 : sym_const(314) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2101255 { 0x201007 +1.25048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8203 { 0x200b +1.97787e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8407043 { 0x804803 +1.219762e130 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda3919Var : BV:32
2 : Lambda3920Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : lambda(1, 2, 260) : FUNCTION[BV:32,BV:32 -> BV:32]
262 : sym_const(261) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda3921Var : BV:32
2 : Lambda3922Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda3923Var : BV:32
2 : Lambda3924Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda3928Var : BV:32
2 : Lambda3929Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda3933Var : BV:32
2 : Lambda3934Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda3935Var : BV:32
2 : Lambda3936Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2729452928
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), bvuge(0, input.spec-%var-m-1.L3%7%bbentry))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : andnot1(7, 10) : BOOL
12 : or(4, 11) : BOOL
</MSG>
<MSG>0:33 : foo.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B2: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B2: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Failed correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%n : BV:32                 : 2147483648
140869 : bvult(140859, 140426) : BOOL              : true
141215 : not(140869) : BOOL                        : false
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
140616 : bvuge(140614, 140615) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2155905028
169346 : bvuge(140278, 140633) : BOOL              : false
169374 : andnot1(140616, 169346) : BOOL            : false
169376 : or(141215, 169374) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce255 b357532e2022f3b8942fac03553a264
=input.spec-%var-x-2
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 5 ] -> 0, [ 6; 8199 ] -> 128, [ 8200; 8203 ] -> 0, [ 8204; 2101251 ] -> 128, [ 2101252; 2101254 ] -> 0, [ 2101255; 8407039 ] -> 128, [ 8407040; 8407040 ] -> 4, [ 8407041; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8200; 8203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8204; 2101251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2101252; 2101255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2101256; 8407039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8407040; 8407043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8407044; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.llvm-%m
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda4015Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4016Var : BV:32
18 : Lambda4017Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4018Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : ite(55, 2, 309) : BV:32
311 : lambda(52, 310) : FUNCTION[BV:32 -> BV:32]
312 : map(51, 311) : MAP[BV:32 -> BV:32]
313 : lambda(17, 312) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
314 : map(16, 313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
315 : sym_const(314) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2101255 { 0x201007 +1.25048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8203 { 0x200b +1.97787e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8407043 { 0x804803 +1.219762e130 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda3919Var : BV:32
2 : Lambda3920Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : lambda(1, 2, 260) : FUNCTION[BV:32,BV:32 -> BV:32]
262 : sym_const(261) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda3921Var : BV:32
2 : Lambda3922Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda3923Var : BV:32
2 : Lambda3924Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda3928Var : BV:32
2 : Lambda3929Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda3933Var : BV:32
2 : Lambda3934Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda3935Var : BV:32
2 : Lambda3936Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2729452928
=counter_example_end


</MSG>
<MSG>0:33 : Discovered that the correlation was useless for the product-TFG foo.A1.B2 (d:1, s:0, sp: 5)...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A1.B1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A1.B1: Propagated 8 out of 18 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : foo.A1.B1: Added the 8 propagated CEs at PC L3%7%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:33 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Added correlation to the product-TFG foo.A1.B1 (d:1, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:33 : Chose (after CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%7%bbentry at mu 0 delta {0,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry, A (line 4 at column 28))
                L3%7%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 8 counterexamples (for correlating 13 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
<MSG>0:33 : foo.A1.B1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:33 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:33 : foo.A1.B1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:33 : foo.A1.B1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:33 : foo.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 13 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht19-prove_trivial12-prove7...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:35 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:35 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:36 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:36 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:36 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:36 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:36 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:36 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:36 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:36 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:36 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:36 : foo.A1.B1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial2-prove10...</MSG>
<MSG>0:41 : foo.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:41 : foo.A1.B1 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:41 : foo.A1.B1 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:41 : Chosen product-TFG foo.A1.B1 will be explored later...</MSG>
<MSG>0:41 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:41 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:2, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>0:41 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:41 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:41 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:42 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht15-prove_trivial10-prove5...</MSG>
<MSG>0:42 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:42 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:42 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:42 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:42 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:44 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:44 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht11-prove_trivial2-prove9...</MSG>
<MSG>0:47 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:47 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:47 : foo.A1.B3 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:47 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:47 : Chosen product-TFG foo.A1.B3 will be explored later...</MSG>
<MSG>0:47 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:47 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:2, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>0:47 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:47 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:47 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:47 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht21-prove_trivial15-prove6...</MSG>
<MSG>0:47 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial3-prove9...</MSG>
<MSG>0:49 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:49 : foo.A1.B4 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:49 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:49 : Chosen product-TFG foo.A1.B4 will be explored later...</MSG>
<MSG>0:49 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:49 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>0:49 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:49 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:49 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht12-prove_trivial10-prove2...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:49 : foo.A1.B3 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:49 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:49 : product-TFG foo.A1.B3: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:49 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:49 : Attempting correlation of src pathset L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:49 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:49 : product-TFG foo.A1.B3: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:49 : product-TFG foo.A1.B3 created 1 possibilities in group foo.A1.B3.C...</MSG>
<MSG>0:49 : Chose (for CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:49 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>0:49 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>0:49 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:49 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:49 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:49 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:49 : Adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:49 : foo.A1.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Propagated 11 out of 17 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:49 : foo.A1.B3.C1: Added the 11 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:49 : foo.A1.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : Done adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:49 : Added correlation to the product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:49 : Chose (after CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 19 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:49 : foo.A1.B3.C1: Updating invariants over the newly added edges in edge composition L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:49 : Constructed infer_invariants_dfa with initial worklist L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:49 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:49 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:51 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht9-prove_trivial0-prove9...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:53 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:54 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:55 : foo.A1.B3.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:55 : foo.A1.B3.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:55 : product-TFG foo.A1.B3.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Considering 2 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Found 2 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : product-TFG foo.A1.B3.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : product-TFG foo.A1.B3.C1 created 2 possibilities in group foo.A1.B3.C1.D...</MSG>
<MSG>0:55 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 43 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 28 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:55 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>0:55 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>0:55 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: marking unstable at L3%10%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140860 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140424 : input.dst.llvm-%m : BV:32                 : 2048
140870 : bvult(140860, 140424) : BOOL              : true
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 1213203234
140861 : bvugt(140859, 140860) : BOOL              : true
222089 : not(140861) : BOOL                        : false
222090 : or(140861, 222089) : BOOL                 : true
222101 : and(140870, 222090) : BOOL                : true
225201 : not(222101) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2048
169346 : bvuge(140278, 140633) : BOOL              : false
140286 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 1213203234
140679 : bvadd(140286, 140614) : BV:32             : 1213203235
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 1348470149
225122 : bvuge(140679, 140615) : BOOL              : false
225123 : andnot2(169346, 225122) : BOOL            : false
225202 : or(225201, 225123) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4170 fc14f7c09945eac46eb8bf72923179
=input.spec-%var-x-2
1 : Lambda29506Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29507Var : BV:32
18 : Lambda29508Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2047 { 0x7ff +1.24402e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2048 { 0x800 +1.24414e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2049 { 0x801 +1.24425e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda29509Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
82 : eq(80, 81) : BOOL
83 : 6 { 0x6 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
87 : bvadd(86, 79) : BV:32
88 : eq(87, 81) : BOOL
89 : ite(88, 83, 84) : BV:8
90 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : ite(92, 83, 84) : BV:8
94 : bvadd(81, 79) : BV:32
95 : eq(94, 81) : BOOL
96 : ite(95, 83, 84) : BV:8
97 : bvconcat(85, 89, 93, 96) : BV:32
98 : bvadd(75, 77, 97) : BV:32
99 : eq(98, 81) : BOOL
100 : ite(99, 83, 84) : BV:8
101 : 2 { 0x2 +1.23e129 } : BV:32
102 : bvadd(101, 77, 97) : BV:32
103 : eq(102, 81) : BOOL
104 : ite(103, 83, 84) : BV:8
105 : 1 { 0x1 +1.11e129 } : BV:32
106 : bvadd(105, 77, 97) : BV:32
107 : eq(106, 81) : BOOL
108 : ite(107, 83, 84) : BV:8
109 : bvadd(77, 97) : BV:32
110 : eq(109, 81) : BOOL
111 : ite(110, 83, 84) : BV:8
112 : bvconcat(100, 104, 108, 111) : BV:32
113 : ite(55, 2, 112) : BV:32
114 : ite(74, 112, 113) : BV:32
115 : ite(55, 2, 114) : BV:32
116 : lambda(52, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(51, 116) : MAP[BV:32 -> BV:32]
118 : lambda(17, 117) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
119 : map(16, 118) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
120 : sym_const(119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
=input.spec-%var-m-2
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 1213203234 { 0x48500322 +1.62509560e17 } : BV:32
=input.spec-%tmpvar-17.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-mem
1 : ([ 0; 2706393311 ] -> 0, [ 2706393312; 2706393312 ] -> 6, [ 2706393313; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 55695871 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 55695872; 55695875 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 55695876; 553648383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 553648384; 553648387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 553648388; 604504067 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 604504068; 604504071 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 604504072; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 604504068 { 0x24080004 +1.6250047e201 } : BV:32
=input.dst.llvm-%m
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 553648384 { 0x21000100 +1.3051e195 } : BV:32
=input.dst.llvm-%n
1 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 55695872 { 0x351da00 +1.63946533e135 } : BV:32
=input.dst.llvm-%x
1 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda29532Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29533Var : BV:32
18 : Lambda29534Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2047 { 0x7ff +1.24402e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2048 { 0x800 +1.24414e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2049 { 0x801 +1.24425e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda29535Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
63 : eq(61, 62) : BOOL
64 : 6 { 0x6 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
68 : bvadd(67, 60) : BV:32
69 : eq(68, 62) : BOOL
70 : ite(69, 64, 65) : BV:8
71 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : ite(73, 64, 65) : BV:8
75 : bvadd(62, 60) : BV:32
76 : eq(75, 62) : BOOL
77 : ite(76, 64, 65) : BV:8
78 : bvconcat(66, 70, 74, 77) : BV:32
79 : bvadd(56, 58, 78) : BV:32
80 : eq(79, 62) : BOOL
81 : ite(80, 64, 65) : BV:8
82 : 2 { 0x2 +1.23e129 } : BV:32
83 : bvadd(82, 58, 78) : BV:32
84 : eq(83, 62) : BOOL
85 : ite(84, 64, 65) : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : bvadd(86, 58, 78) : BV:32
88 : eq(87, 62) : BOOL
89 : ite(88, 64, 65) : BV:8
90 : bvadd(58, 78) : BV:32
91 : eq(90, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : bvconcat(81, 85, 89, 92) : BV:32
94 : ite(55, 2, 93) : BV:32
95 : lambda(52, 94) : FUNCTION[BV:32 -> BV:32]
96 : map(51, 95) : MAP[BV:32 -> BV:32]
97 : lambda(17, 96) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
98 : map(16, 97) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
99 : sym_const(98) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda29519Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29520Var : BV:32
18 : Lambda29521Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2047 { 0x7ff +1.24402e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2048 { 0x800 +1.24414e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2049 { 0x801 +1.24425e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda29522Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
82 : eq(80, 81) : BOOL
83 : 6 { 0x6 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
87 : bvadd(86, 79) : BV:32
88 : eq(87, 81) : BOOL
89 : ite(88, 83, 84) : BV:8
90 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : ite(92, 83, 84) : BV:8
94 : bvadd(81, 79) : BV:32
95 : eq(94, 81) : BOOL
96 : ite(95, 83, 84) : BV:8
97 : bvconcat(85, 89, 93, 96) : BV:32
98 : bvadd(75, 77, 97) : BV:32
99 : eq(98, 81) : BOOL
100 : ite(99, 83, 84) : BV:8
101 : 2 { 0x2 +1.23e129 } : BV:32
102 : bvadd(101, 77, 97) : BV:32
103 : eq(102, 81) : BOOL
104 : ite(103, 83, 84) : BV:8
105 : 1 { 0x1 +1.11e129 } : BV:32
106 : bvadd(105, 77, 97) : BV:32
107 : eq(106, 81) : BOOL
108 : ite(107, 83, 84) : BV:8
109 : bvadd(77, 97) : BV:32
110 : eq(109, 81) : BOOL
111 : ite(110, 83, 84) : BV:8
112 : bvconcat(100, 104, 108, 111) : BV:32
113 : ite(55, 2, 112) : BV:32
114 : ite(74, 112, 113) : BV:32
115 : ite(55, 2, 114) : BV:32
116 : ite(55, 2, 115) : BV:32
117 : lambda(52, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(51, 117) : MAP[BV:32 -> BV:32]
119 : lambda(17, 118) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
120 : map(16, 119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
121 : sym_const(120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1213203234 { 0x48500322 +1.62509560e17 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 553648384 { 0x21000100 +1.3051e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 553648387 { 0x21000103 +1.3087e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 55695872 { 0x351da00 +1.63946533e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 55695875 { 0x351da03 +1.63946568e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 604504068 { 0x24080004 +1.6250047e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 604504071 { 0x24080007 +1.6250083e201 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 1348470148 ] -> true, [ 1348470149; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 1348470148 ] -> true, [ 1348470149; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda29366Var : BV:32
2 : Lambda29367Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2047 { 0x7ff +1.24402e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2048 { 0x800 +1.24414e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2049 { 0x801 +1.24425e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
55 : eq(53, 54) : BOOL
56 : 6 { 0x6 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
60 : bvadd(59, 52) : BV:32
61 : eq(60, 54) : BOOL
62 : ite(61, 56, 57) : BV:8
63 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : ite(65, 56, 57) : BV:8
67 : bvadd(54, 52) : BV:32
68 : eq(67, 54) : BOOL
69 : ite(68, 56, 57) : BV:8
70 : bvconcat(58, 62, 66, 69) : BV:32
71 : bvadd(48, 50, 70) : BV:32
72 : eq(71, 54) : BOOL
73 : ite(72, 56, 57) : BV:8
74 : 2 { 0x2 +1.23e129 } : BV:32
75 : bvadd(74, 50, 70) : BV:32
76 : eq(75, 54) : BOOL
77 : ite(76, 56, 57) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 50, 70) : BV:32
80 : eq(79, 54) : BOOL
81 : ite(80, 56, 57) : BV:8
82 : bvadd(50, 70) : BV:32
83 : eq(82, 54) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : bvconcat(73, 77, 81, 84) : BV:32
86 : ite(6, 3, 85) : BV:32
87 : ite(47, 85, 86) : BV:32
88 : ite(6, 3, 87) : BV:32
89 : lambda(1, 2, 88) : FUNCTION[BV:32,BV:32 -> BV:32]
90 : sym_const(89) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda29373Var : BV:32
2 : Lambda29374Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
14 : eq(12, 13) : BOOL
15 : 6 { 0x6 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
19 : bvadd(18, 11) : BV:32
20 : eq(19, 13) : BOOL
21 : ite(20, 15, 16) : BV:8
22 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : bvadd(13, 11) : BV:32
27 : eq(26, 13) : BOOL
28 : ite(27, 15, 16) : BV:8
29 : bvconcat(17, 21, 25, 28) : BV:32
30 : bvadd(7, 9, 29) : BV:32
31 : eq(30, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 9, 29) : BV:32
35 : eq(34, 13) : BOOL
36 : ite(35, 15, 16) : BV:8
37 : 1 { 0x1 +1.11e129 } : BV:32
38 : bvadd(37, 9, 29) : BV:32
39 : eq(38, 13) : BOOL
40 : ite(39, 15, 16) : BV:8
41 : bvadd(9, 29) : BV:32
42 : eq(41, 13) : BOOL
43 : ite(42, 15, 16) : BV:8
44 : bvconcat(32, 36, 40, 43) : BV:32
45 : ite(6, 3, 44) : BV:32
46 : lambda(1, 2, 45) : FUNCTION[BV:32,BV:32 -> BV:32]
47 : sym_const(46) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda29368Var : BV:32
2 : Lambda29369Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2047 { 0x7ff +1.24402e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2048 { 0x800 +1.24414e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2049 { 0x801 +1.24425e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda29375Var : BV:32
2 : Lambda29376Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2047 { 0x7ff +1.24402e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2048 { 0x800 +1.24414e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2049 { 0x801 +1.24425e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 1348470148 ] -> true, [ 1348470149; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda29380Var : BV:32
2 : Lambda29381Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2047 { 0x7ff +1.24402e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2048 { 0x800 +1.24414e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2049 { 0x801 +1.24425e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
55 : eq(53, 54) : BOOL
56 : 6 { 0x6 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
60 : bvadd(59, 52) : BV:32
61 : eq(60, 54) : BOOL
62 : ite(61, 56, 57) : BV:8
63 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : ite(65, 56, 57) : BV:8
67 : bvadd(54, 52) : BV:32
68 : eq(67, 54) : BOOL
69 : ite(68, 56, 57) : BV:8
70 : bvconcat(58, 62, 66, 69) : BV:32
71 : bvadd(48, 50, 70) : BV:32
72 : eq(71, 54) : BOOL
73 : ite(72, 56, 57) : BV:8
74 : 2 { 0x2 +1.23e129 } : BV:32
75 : bvadd(74, 50, 70) : BV:32
76 : eq(75, 54) : BOOL
77 : ite(76, 56, 57) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 50, 70) : BV:32
80 : eq(79, 54) : BOOL
81 : ite(80, 56, 57) : BV:8
82 : bvadd(50, 70) : BV:32
83 : eq(82, 54) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : bvconcat(73, 77, 81, 84) : BV:32
86 : ite(6, 3, 85) : BV:32
87 : ite(47, 85, 86) : BV:32
88 : ite(6, 3, 87) : BV:32
89 : ite(6, 3, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda29382Var : BV:32
2 : Lambda29383Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2047 { 0x7ff +1.24402e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2048 { 0x800 +1.24414e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2049 { 0x801 +1.24425e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1048626343
=counter_example_end


failcond-expr = or(not(and(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m), or(bvugt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry), not(bvugt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))))), andnot2(bvuge(0, input.spec-%var-m-1.L3%7%bbentry), bvuge(bvadd(1, input.spec-%var-i-1.L3%7%bbentry), input.spec-%var-n-1.L3%7%bbentry))):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvugt(4, 1) : BOOL
6 : not(5) : BOOL
7 : or(5, 6) : BOOL
8 : and(3, 7) : BOOL
9 : not(8) : BOOL
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : input.spec-%var-m-1.L3%7%bbentry : BV:32
12 : bvuge(10, 11) : BOOL
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : input.spec-%var-i-1.L3%7%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : input.spec-%var-n-1.L3%7%bbentry : BV:32
17 : bvuge(15, 16) : BOOL
18 : andnot2(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D2: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : Done adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Failed correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140860 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140424 : input.dst.llvm-%m : BV:32                 : 2048
140870 : bvult(140860, 140424) : BOOL              : true
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 1213203234
140861 : bvugt(140859, 140860) : BOOL              : true
222089 : not(140861) : BOOL                        : false
222090 : or(140861, 222089) : BOOL                 : true
222101 : and(140870, 222090) : BOOL                : true
225201 : not(222101) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2048
169346 : bvuge(140278, 140633) : BOOL              : false
140286 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 1213203234
140679 : bvadd(140286, 140614) : BV:32             : 1213203235
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 1348470149
225122 : bvuge(140679, 140615) : BOOL              : false
225123 : andnot2(169346, 225122) : BOOL            : false
225202 : or(225201, 225123) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4170 fc14f7c09945eac46eb8bf72923179
=input.spec-%var-x-2
1 : Lambda29506Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29507Var : BV:32
18 : Lambda29508Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2047 { 0x7ff +1.24402e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2048 { 0x800 +1.24414e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2049 { 0x801 +1.24425e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda29509Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
82 : eq(80, 81) : BOOL
83 : 6 { 0x6 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
87 : bvadd(86, 79) : BV:32
88 : eq(87, 81) : BOOL
89 : ite(88, 83, 84) : BV:8
90 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : ite(92, 83, 84) : BV:8
94 : bvadd(81, 79) : BV:32
95 : eq(94, 81) : BOOL
96 : ite(95, 83, 84) : BV:8
97 : bvconcat(85, 89, 93, 96) : BV:32
98 : bvadd(75, 77, 97) : BV:32
99 : eq(98, 81) : BOOL
100 : ite(99, 83, 84) : BV:8
101 : 2 { 0x2 +1.23e129 } : BV:32
102 : bvadd(101, 77, 97) : BV:32
103 : eq(102, 81) : BOOL
104 : ite(103, 83, 84) : BV:8
105 : 1 { 0x1 +1.11e129 } : BV:32
106 : bvadd(105, 77, 97) : BV:32
107 : eq(106, 81) : BOOL
108 : ite(107, 83, 84) : BV:8
109 : bvadd(77, 97) : BV:32
110 : eq(109, 81) : BOOL
111 : ite(110, 83, 84) : BV:8
112 : bvconcat(100, 104, 108, 111) : BV:32
113 : ite(55, 2, 112) : BV:32
114 : ite(74, 112, 113) : BV:32
115 : ite(55, 2, 114) : BV:32
116 : lambda(52, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(51, 116) : MAP[BV:32 -> BV:32]
118 : lambda(17, 117) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
119 : map(16, 118) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
120 : sym_const(119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
=input.spec-%var-m-2
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 1213203234 { 0x48500322 +1.62509560e17 } : BV:32
=input.spec-%tmpvar-17.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-mem
1 : ([ 0; 2706393311 ] -> 0, [ 2706393312; 2706393312 ] -> 6, [ 2706393313; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 55695871 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 55695872; 55695875 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 55695876; 553648383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 553648384; 553648387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 553648388; 604504067 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 604504068; 604504071 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 604504072; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 604504068 { 0x24080004 +1.6250047e201 } : BV:32
=input.dst.llvm-%m
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 553648384 { 0x21000100 +1.3051e195 } : BV:32
=input.dst.llvm-%n
1 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 55695872 { 0x351da00 +1.63946533e135 } : BV:32
=input.dst.llvm-%x
1 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda29532Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29533Var : BV:32
18 : Lambda29534Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2047 { 0x7ff +1.24402e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2048 { 0x800 +1.24414e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2049 { 0x801 +1.24425e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda29535Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
63 : eq(61, 62) : BOOL
64 : 6 { 0x6 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
68 : bvadd(67, 60) : BV:32
69 : eq(68, 62) : BOOL
70 : ite(69, 64, 65) : BV:8
71 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
72 : bvadd(71, 60) : BV:32
73 : eq(72, 62) : BOOL
74 : ite(73, 64, 65) : BV:8
75 : bvadd(62, 60) : BV:32
76 : eq(75, 62) : BOOL
77 : ite(76, 64, 65) : BV:8
78 : bvconcat(66, 70, 74, 77) : BV:32
79 : bvadd(56, 58, 78) : BV:32
80 : eq(79, 62) : BOOL
81 : ite(80, 64, 65) : BV:8
82 : 2 { 0x2 +1.23e129 } : BV:32
83 : bvadd(82, 58, 78) : BV:32
84 : eq(83, 62) : BOOL
85 : ite(84, 64, 65) : BV:8
86 : 1 { 0x1 +1.11e129 } : BV:32
87 : bvadd(86, 58, 78) : BV:32
88 : eq(87, 62) : BOOL
89 : ite(88, 64, 65) : BV:8
90 : bvadd(58, 78) : BV:32
91 : eq(90, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : bvconcat(81, 85, 89, 92) : BV:32
94 : ite(55, 2, 93) : BV:32
95 : lambda(52, 94) : FUNCTION[BV:32 -> BV:32]
96 : map(51, 95) : MAP[BV:32 -> BV:32]
97 : lambda(17, 96) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
98 : map(16, 97) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
99 : sym_const(98) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda29519Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29520Var : BV:32
18 : Lambda29521Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2047 { 0x7ff +1.24402e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2048 { 0x800 +1.24414e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2049 { 0x801 +1.24425e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda29522Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
82 : eq(80, 81) : BOOL
83 : 6 { 0x6 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
87 : bvadd(86, 79) : BV:32
88 : eq(87, 81) : BOOL
89 : ite(88, 83, 84) : BV:8
90 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
91 : bvadd(90, 79) : BV:32
92 : eq(91, 81) : BOOL
93 : ite(92, 83, 84) : BV:8
94 : bvadd(81, 79) : BV:32
95 : eq(94, 81) : BOOL
96 : ite(95, 83, 84) : BV:8
97 : bvconcat(85, 89, 93, 96) : BV:32
98 : bvadd(75, 77, 97) : BV:32
99 : eq(98, 81) : BOOL
100 : ite(99, 83, 84) : BV:8
101 : 2 { 0x2 +1.23e129 } : BV:32
102 : bvadd(101, 77, 97) : BV:32
103 : eq(102, 81) : BOOL
104 : ite(103, 83, 84) : BV:8
105 : 1 { 0x1 +1.11e129 } : BV:32
106 : bvadd(105, 77, 97) : BV:32
107 : eq(106, 81) : BOOL
108 : ite(107, 83, 84) : BV:8
109 : bvadd(77, 97) : BV:32
110 : eq(109, 81) : BOOL
111 : ite(110, 83, 84) : BV:8
112 : bvconcat(100, 104, 108, 111) : BV:32
113 : ite(55, 2, 112) : BV:32
114 : ite(74, 112, 113) : BV:32
115 : ite(55, 2, 114) : BV:32
116 : ite(55, 2, 115) : BV:32
117 : lambda(52, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(51, 117) : MAP[BV:32 -> BV:32]
119 : lambda(17, 118) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
120 : map(16, 119) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
121 : sym_const(120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1213203234 { 0x48500322 +1.62509560e17 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 553648384 { 0x21000100 +1.3051e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 553648387 { 0x21000103 +1.3087e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 55695872 { 0x351da00 +1.63946533e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 55695875 { 0x351da03 +1.63946568e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 604504068 { 0x24080004 +1.6250047e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 604504071 { 0x24080007 +1.6250083e201 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 1348470148 ] -> true, [ 1348470149; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 1348470148 ] -> true, [ 1348470149; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda29366Var : BV:32
2 : Lambda29367Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2047 { 0x7ff +1.24402e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2048 { 0x800 +1.24414e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2049 { 0x801 +1.24425e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
55 : eq(53, 54) : BOOL
56 : 6 { 0x6 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
60 : bvadd(59, 52) : BV:32
61 : eq(60, 54) : BOOL
62 : ite(61, 56, 57) : BV:8
63 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : ite(65, 56, 57) : BV:8
67 : bvadd(54, 52) : BV:32
68 : eq(67, 54) : BOOL
69 : ite(68, 56, 57) : BV:8
70 : bvconcat(58, 62, 66, 69) : BV:32
71 : bvadd(48, 50, 70) : BV:32
72 : eq(71, 54) : BOOL
73 : ite(72, 56, 57) : BV:8
74 : 2 { 0x2 +1.23e129 } : BV:32
75 : bvadd(74, 50, 70) : BV:32
76 : eq(75, 54) : BOOL
77 : ite(76, 56, 57) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 50, 70) : BV:32
80 : eq(79, 54) : BOOL
81 : ite(80, 56, 57) : BV:8
82 : bvadd(50, 70) : BV:32
83 : eq(82, 54) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : bvconcat(73, 77, 81, 84) : BV:32
86 : ite(6, 3, 85) : BV:32
87 : ite(47, 85, 86) : BV:32
88 : ite(6, 3, 87) : BV:32
89 : lambda(1, 2, 88) : FUNCTION[BV:32,BV:32 -> BV:32]
90 : sym_const(89) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda29373Var : BV:32
2 : Lambda29374Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
14 : eq(12, 13) : BOOL
15 : 6 { 0x6 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
19 : bvadd(18, 11) : BV:32
20 : eq(19, 13) : BOOL
21 : ite(20, 15, 16) : BV:8
22 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : bvadd(13, 11) : BV:32
27 : eq(26, 13) : BOOL
28 : ite(27, 15, 16) : BV:8
29 : bvconcat(17, 21, 25, 28) : BV:32
30 : bvadd(7, 9, 29) : BV:32
31 : eq(30, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 9, 29) : BV:32
35 : eq(34, 13) : BOOL
36 : ite(35, 15, 16) : BV:8
37 : 1 { 0x1 +1.11e129 } : BV:32
38 : bvadd(37, 9, 29) : BV:32
39 : eq(38, 13) : BOOL
40 : ite(39, 15, 16) : BV:8
41 : bvadd(9, 29) : BV:32
42 : eq(41, 13) : BOOL
43 : ite(42, 15, 16) : BV:8
44 : bvconcat(32, 36, 40, 43) : BV:32
45 : ite(6, 3, 44) : BV:32
46 : lambda(1, 2, 45) : FUNCTION[BV:32,BV:32 -> BV:32]
47 : sym_const(46) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda29368Var : BV:32
2 : Lambda29369Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2047 { 0x7ff +1.24402e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2048 { 0x800 +1.24414e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2049 { 0x801 +1.24425e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda29375Var : BV:32
2 : Lambda29376Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2047 { 0x7ff +1.24402e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2048 { 0x800 +1.24414e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2049 { 0x801 +1.24425e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 1348470148 ] -> true, [ 1348470149; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda29380Var : BV:32
2 : Lambda29381Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2047 { 0x7ff +1.24402e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2048 { 0x800 +1.24414e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2049 { 0x801 +1.24425e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2706393315 { 0xa15048e3 -1588573981 -1.62722432e195 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2706393312 { 0xa15048e0 -1588573984 -1.62722396e195 } : BV:32
55 : eq(53, 54) : BOOL
56 : 6 { 0x6 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : 2706393314 { 0xa15048e2 -1588573982 -1.62722420e195 } : BV:32
60 : bvadd(59, 52) : BV:32
61 : eq(60, 54) : BOOL
62 : ite(61, 56, 57) : BV:8
63 : 2706393313 { 0xa15048e1 -1588573983 -1.62722408e195 } : BV:32
64 : bvadd(63, 52) : BV:32
65 : eq(64, 54) : BOOL
66 : ite(65, 56, 57) : BV:8
67 : bvadd(54, 52) : BV:32
68 : eq(67, 54) : BOOL
69 : ite(68, 56, 57) : BV:8
70 : bvconcat(58, 62, 66, 69) : BV:32
71 : bvadd(48, 50, 70) : BV:32
72 : eq(71, 54) : BOOL
73 : ite(72, 56, 57) : BV:8
74 : 2 { 0x2 +1.23e129 } : BV:32
75 : bvadd(74, 50, 70) : BV:32
76 : eq(75, 54) : BOOL
77 : ite(76, 56, 57) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 50, 70) : BV:32
80 : eq(79, 54) : BOOL
81 : ite(80, 56, 57) : BV:8
82 : bvadd(50, 70) : BV:32
83 : eq(82, 54) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : bvconcat(73, 77, 81, 84) : BV:32
86 : ite(6, 3, 85) : BV:32
87 : ite(47, 85, 86) : BV:32
88 : ite(6, 3, 87) : BV:32
89 : ite(6, 3, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda29382Var : BV:32
2 : Lambda29383Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1348470148 { 0x50600584 +1.75016832e33 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1348470150 { 0x50600586 +1.75016856e33 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1348470149 { 0x50600585 +1.75016844e33 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2047 { 0x7ff +1.24402e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2048 { 0x800 +1.24414e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2049 { 0x801 +1.24425e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
1048626343
=counter_example_end


</MSG>
<MSG>0:55 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14)...</MSG>
<MSG>0:55 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 43 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 28 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:55 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>0:55 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>0:55 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:55 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Propagated 3 out of 28 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: marking unstable at L3%10%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140860 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 2
140424 : input.dst.llvm-%m : BV:32                 : 2
140870 : bvult(140860, 140424) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2
169346 : bvuge(140278, 140633) : BOOL              : false
218319 : or(140870, 169346) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4311 cacd2cc5ba531e5da443b3af166069ec
=input.spec-%var-x-2
1 : Lambda15668Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15669Var : BV:32
18 : Lambda15670Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15671Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-m-2
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 3087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3088; 3091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3092; 5251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 5252; 5255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 5256; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 5252 { 0x1484 +1.62608e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3088 { 0xc10 +1.36811e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda15696Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15697Var : BV:32
18 : Lambda15698Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15699Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3088 { 0xc10 +1.36811e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3091 { 0xc13 +1.36847e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 5252 { 0x1484 +1.62608e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 5255 { 0x1487 +1.62644e129 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda15528Var : BV:32
2 : Lambda15529Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8 { 0x8 +1.95e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda15530Var : BV:32
2 : Lambda15531Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda15537Var : BV:32
2 : Lambda15538Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda15542Var : BV:32
2 : Lambda15543Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8 { 0x8 +1.95e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : ite(6, 3, 50) : BV:32
52 : lambda(1, 2, 51) : FUNCTION[BV:32,BV:32 -> BV:32]
53 : sym_const(52) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda15544Var : BV:32
2 : Lambda15545Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
859537632
=counter_example_end


failcond-expr = or(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m), bvuge(0, input.spec-%var-m-1.L3%7%bbentry)):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : input.spec-%var-m-1.L3%7%bbentry : BV:32
6 : bvuge(4, 5) : BOOL
7 : or(3, 6) : BOOL
</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : foo.A1.B3.C1.D1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : Done adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:55 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:55 : Failed correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140860 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 2
140424 : input.dst.llvm-%m : BV:32                 : 2
140870 : bvult(140860, 140424) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2
169346 : bvuge(140278, 140633) : BOOL              : false
218319 : or(140870, 169346) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4311 cacd2cc5ba531e5da443b3af166069ec
=input.spec-%var-x-2
1 : Lambda15668Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15669Var : BV:32
18 : Lambda15670Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15671Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-m-2
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 3087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3088; 3091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3092; 5251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 5252; 5255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 5256; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 5252 { 0x1484 +1.62608e129 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3088 { 0xc10 +1.36811e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda15696Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15697Var : BV:32
18 : Lambda15698Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda15699Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3088 { 0xc10 +1.36811e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3091 { 0xc13 +1.36847e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 5252 { 0x1484 +1.62608e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 5255 { 0x1487 +1.62644e129 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda15528Var : BV:32
2 : Lambda15529Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8 { 0x8 +1.95e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda15530Var : BV:32
2 : Lambda15531Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda15537Var : BV:32
2 : Lambda15538Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda15542Var : BV:32
2 : Lambda15543Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 7 { 0x7 +1.83e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 8 { 0x8 +1.95e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 9 { 0x9 +1.107e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : ite(6, 3, 50) : BV:32
52 : lambda(1, 2, 51) : FUNCTION[BV:32,BV:32 -> BV:32]
53 : sym_const(52) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda15544Var : BV:32
2 : Lambda15545Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 7 { 0x7 +1.83e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 9 { 0x9 +1.107e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 14) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
859537632
=counter_example_end


</MSG>
<MSG>0:55 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D1 (d:3, s:0, sp: 14)...</MSG>
<MSG>0:55 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>0:55 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:56 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:56 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht18-prove_trivial15-prove3...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:56 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:56 : foo.A1.B4 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:56 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:56 : product-TFG foo.A1.B4: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Attempting correlation of src pathset L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : product-TFG foo.A1.B4: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:56 : product-TFG foo.A1.B4 created 1 possibilities in group foo.A1.B4.C...</MSG>
<MSG>0:56 : Chose (for CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 18 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:56 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>0:56 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>0:56 : Creating ssa-path for the src-tfg path L3%17%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:56 : Adding a CG edge composition using the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:56 : Identifying common alloc-deallocs in the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:56 : Identified no common alloc-deallocs in the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:56 : Adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Getting alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Found no alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Adding edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:56 : foo.A1.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Propagated 11 out of 17 counter-examples across edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:56 : foo.A1.B4.C1: Added the 11 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:56 : foo.A1.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Done computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : Done adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : Done adding a CG edge composition using the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:56 : Added correlation to the product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:56 : Chose (after CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 30 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 19 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:56 : foo.A1.B4.C1: Updating invariants over the newly added edges in edge composition L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:56 : Constructed infer_invariants_dfa with initial worklist L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:56 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:56 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:57 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:58 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:58 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:00 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:03 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:05 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:07 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:09 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:11 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:12 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:14 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:14 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 11 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:15 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:15 : foo.A1.B4.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>1:15 : foo.A1.B4.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:16 : product-TFG foo.A1.B4.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:16 : Considering 2 paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:16 : Attempting correlation of src pathset L3%17%bbentry=>L3%17%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:16 : Attempting correlation of src pathset L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:16 : Found 2 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:16 : product-TFG foo.A1.B4.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:16 : product-TFG foo.A1.B4.C1 created 2 possibilities in group foo.A1.B4.C1.D...</MSG>
<MSG>1:16 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 32 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:16 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>1:16 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>1:16 : Creating ssa-path for the src-tfg path L3%17%bbentry --> L3%17%bbentry ending at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:16 : Adding a CG edge composition using the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:16 : Identifying common alloc-deallocs in the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>1:16 : Identified no common alloc-deallocs in the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:16 : Adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>1:16 : foo.A1.B4.C1.D2: Getting alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:16 : foo.A1.B4.C1.D2: Found no alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:16 : foo.A1.B4.C1.D2: Adding edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:16 : foo.A1.B4.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:16 : foo.A1.B4.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:16 : foo.A1.B4.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:18 : foo.A1.B4.C1.D2: Propagated 3 out of 32 counter-examples across edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Added the 3 propagated CEs at PC L3%17%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Done computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:19 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>1:19 : Done adding a CG edge composition using the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:19 : Added correlation to the product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>1:19 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 47 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 38 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>1:19 : foo.A1.B4.C1.D2: Updating invariants over the newly added edges in edge composition L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:19 : Constructed infer_invariants_dfa with initial worklist L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:19 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 13 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht17-prove_trivial15-prove23...</MSG>
<MSG>1:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial2-prove8...</MSG>
<MSG>2:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:34 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:34 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:35 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:42 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 16 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove20...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:45 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 16 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove20...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:46 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:47 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial6-prove2...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 15 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 16 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial10-prove4...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 15 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:49 : product-TFG foo.A1.B4.C1.D2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:49 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:49 : Attempting correlation of src pathset L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:49 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:49 : product-TFG foo.A1.B4.C1.D2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:49 : product-TFG foo.A1.B4.C1.D2 created 1 possibilities in group foo.A1.B4.C1.D2.E...</MSG>
<MSG>2:49 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 55 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 55 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:49 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>2:49 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>2:49 : Creating ssa-path for the src-tfg path L3%7%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:49 : Adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>2:49 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>2:49 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>2:49 : Adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Propagated 16 out of 42 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Added the 16 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:49 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>2:49 : Done adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>2:49 : Added correlation to the product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>2:49 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 55 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 55 counterexamples (for correlating 20 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 14 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>2:49 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>2:49 : foo.A1.B4.C1.D2.E1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2.E1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:50 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>2:50 : Checking equivalence proof...</MSG>
<MSG>2:52 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%7%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (11 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [11]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-ret-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%m ; 9-->input.dst.llvm-%n ; 10-->input.dst.llvm-%x ; 11-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 12-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-ret-1.L3%7%bbentry))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      3.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      4.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      5.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      6.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
     is_assumed_eqclass : 0
    15 visited ces:
      0.:z3v487.ce171      1.:z3v487.ce3      2.:z3.ce88      3.:z3v487.ce31      4.:z3v487.ce45      5.:z3v487.ce59      6.:z3.ce60      7.:z3.ce172      8.:z3v487.ce87      9.:z3.ce7527      10.:z3.ce116      11.:z3v487.ce115      12.:z3v487.ce143      13.:z3.ce199      14.:z3.ce4354
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-i-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce4924      2.:z3v487.ce5246      3.:z3.ce4354      4.:z3v487.ce4812      5.:z3v487.ce4997      6.:z3v487.ce5464      7.:z3v487.ce5537      8.:z3.ce5703      9.:z3v487.ce5873
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce227      2.:z3v487.ce31      3.:z3v487.ce255
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce87      2.:z3.ce283      3.:z3v487.ce255
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce227      2.:z3v487.ce31      3.:z3v487.ce255
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce87      2.:z3.ce283      3.:z3v487.ce255
    eqclass 7:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 11-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce4924      2.:z3v487.ce5246      3.:z3.ce4354      4.:z3v487.ce4812      5.:z3v487.ce4997      6.:z3v487.ce5464      7.:z3v487.ce5537      8.:z3.ce5703      9.:z3v487.ce5873
    eqclass 8:
    smallest point cover name dst-ineq, type HOUDINI, exprs [24]: 13-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 14-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 15-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 16-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 17-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 18-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 19-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 20-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 21-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 25-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 33-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce227      2.:z3v487.ce31      3.:z3v487.ce87      4.:z3v487.ce255      5.:z3.ce4354
    eqclass 9:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 37-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141402](input.spec-%var-x-2, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 38-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142181](input.spec-%var-x-1.L3%7%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 39-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142188](input.spec-%var-x-1.L3%7%bbentry, map[142187](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142186](Lambda0Var, map[142185](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 40-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142195](input.spec-%var-x-1.L3%7%bbentry, map[142194](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142193](Lambda0Var, map[142192](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 41-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142202](input.spec-%var-x-1.L3%7%bbentry, map[142201](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142200](Lambda0Var, map[142199](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 42-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142209](input.spec-%var-x-1.L3%7%bbentry, map[142208](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142207](Lambda0Var, map[142206](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 
    2 preds:
      0.: 141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142181](input.spec-%var-x-1.L3%7%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      1.: 141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141402](input.spec-%var-x-2, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

L3%17%bbentry_Lfor.cond1%1%bbentry: (d:1, s:0, sp: 9)
  Invariant state (15 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce31
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [20]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-ret-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%m ; 9-->input.dst.llvm-%n ; 10-->input.dst.llvm-%x ; 11-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 43-->input.spec-%tmpvar-17.L3%8%d ; 44-->input.spec-%var-j-0.L3%17%bbentry ; 45-->input.spec-%var-m-0.L3%17%bbentry ; 46-->input.spec-%var-i-0.L3%17%bbentry ; 47-->input.spec-%var-ret-0.L3%17%bbentry ; 48-->input.spec-%tmpvar-19.L3%17%bbentry ; 49-->input.spec-%var-n-0.L3%17%bbentry ; 50-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 51-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 52-->input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry ; 
    14 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-ret-0.L3%17%bbentry))  ==  input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
      2.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      4.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      5.: bvneg(bvmul(4294967295, input.spec-%var-j-0.L3%17%bbentry))  ==  input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
      6.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      7.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-0.L3%17%bbentry
      8.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      9.: 0                     ==  bvzero_ext(bool_to_bv(input.spec-%tmpvar-17.L3%8%d), 31)
      10.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-0.L3%17%bbentry
      11.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      12.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.spec-%var-i-0.L3%17%bbentry
      13.: bvadd(1, bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry)))  ==  input.spec-%tmpvar-19.L3%17%bbentry
     is_assumed_eqclass : 0
    16 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce45      2.:z3v487.ce59      3.:z3.ce60      4.:z3v487.ce255      5.:z3.ce462      6.:z3.ce2214      7.:z3.ce2310      8.:z3.ce2263      9.:z3v487.ce2262      10.:z3v487.ce4468      11.:z3v487.ce6165      12.:z3v487.ce6288      13.:z3.ce6345      14.:z3.ce6471      15.:z3.ce6523
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1.L3%7%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce227      1.:z3v487.ce31      2.:z3v487.ce45      3.:z3v487.ce255      4.:z3.ce2358
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 44-->input.spec-%var-j-0.L3%17%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-j-0.L3%17%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-j-0.L3%17%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce31      1.:z3.ce7275      2.:z3v487.ce6165      3.:z3.ce6669      4.:z3.ce6789      5.:z3.ce6909      6.:z3.ce7035      7.:z3.ce7155
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 45-->input.spec-%var-m-0.L3%17%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce255      2.:z3.ce2310      3.:z3v487.ce2311      4.:z3.ce2406      5.:z3.ce2454
    eqclass 5:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 46-->input.spec-%var-i-0.L3%17%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%17%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce4872      2.:z3v487.ce5047      3.:z3v487.ce4507      4.:z3v487.ce4468      5.:z3v487.ce5177      6.:z3v487.ce5279      7.:z3v487.ce5587      8.:z3v487.ce5395      9.:z3.ce5736
    eqclass 6:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce255      2.:z3.ce2310      3.:z3v487.ce2311      4.:z3.ce2406      5.:z3.ce2454
    eqclass 7:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 48-->input.spec-%tmpvar-19.L3%17%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%tmpvar-19.L3%17%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce4872      2.:z3v487.ce4845      3.:z3v487.ce5140      4.:z3v487.ce4468      5.:z3v487.ce5177      6.:z3v487.ce5358      7.:z3v487.ce5395      8.:z3v487.ce5645      9.:z3.ce5815
    eqclass 8:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%n ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce227      1.:z3v487.ce31      2.:z3v487.ce45      3.:z3v487.ce255      4.:z3.ce2358
    eqclass 9:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce255      2.:z3.ce2310      3.:z3v487.ce2311      4.:z3.ce2406      5.:z3.ce2454
    eqclass 10:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 11-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce4872      2.:z3v487.ce5047      3.:z3v487.ce4507      4.:z3v487.ce4468      5.:z3v487.ce5177      6.:z3v487.ce5279      7.:z3v487.ce5587      8.:z3v487.ce5395      9.:z3.ce5736
    eqclass 11:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, type BV_CONST_INEQ, exprs [1]: 50-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce31      1.:z3.ce7275      2.:z3v487.ce6165      3.:z3.ce6669      4.:z3.ce6789      5.:z3.ce6909      6.:z3.ce7035      7.:z3.ce7155
    eqclass 12:
    smallest point cover name dst-ineq, type HOUDINI, exprs [48]: 13-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 14-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 15-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 16-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 17-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 18-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 19-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 20-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 21-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 25-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 33-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 53-->bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 54-->bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 55-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 56-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 57-->bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 58-->bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 59-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 60-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 61-->bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 62-->bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 63-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 64-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 65-->bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 66-->bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 67-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 68-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 69-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 70-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 71-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 72-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 73-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 74-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 75-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 76-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    3 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce227      1.:z3v487.ce31      2.:z3.ce7401      3.:z3v487.ce255      4.:z3.ce2310      5.:z3v487.ce4468      6.:z3.ce5736      7.:z3v487.ce6165      8.:z3v487.ce6472
    eqclass 13:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 37-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141402](input.spec-%var-x-2, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 38-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142181](input.spec-%var-x-1.L3%7%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 77-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[156258](input.spec-%var-x-2, map[142194](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142193](Lambda0Var, map[142192](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 78-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[160642](input.spec-%var-x-2, map[142187](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142186](Lambda0Var, map[142185](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 79-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169204](input.spec-%var-x-2, map[169201](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[169200](Lambda0Var, map[169199](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 80-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169203](input.spec-%var-x-2, map[142201](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142200](Lambda0Var, map[142199](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 81-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169314](input.spec-%var-x-0.L3%17%bbentry, map[142187](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142186](Lambda0Var, map[142185](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 82-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169315](input.spec-%var-x-0.L3%17%bbentry, map[142194](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142193](Lambda0Var, map[142192](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 83-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169316](input.spec-%var-x-0.L3%17%bbentry, map[142201](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142200](Lambda0Var, map[142199](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 84-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169317](input.spec-%var-x-0.L3%17%bbentry, map[169201](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[169200](Lambda0Var, map[169199](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 85-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169318](input.spec-%var-x-0.L3%17%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 
    3 preds:
      0.: 141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169318](input.spec-%var-x-0.L3%17%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      1.: 141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142181](input.spec-%var-x-1.L3%7%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      2.: 141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141402](input.spec-%var-x-2, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce31
    eqclass 14:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce31

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 55 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 55 counterexamples (for correlating 20 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 14 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 150.39s, query:smt.: 27.7135s (num_starts 354; 0.0783s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 70.9996s (num_starts 1316; 0.0540s/start)ftmap_run_pointsto_analysis.: 0.839789s (num_starts 2; 0.4199s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 5e-06s (num_starts 8; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.4e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.: 1.5e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 1.6e-05s (num_starts 2; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.7e-05s (num_starts 7; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 1.8e-05s (num_starts 2; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.2e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.9e-05s (num_starts 3; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.4e-05s (num_starts 13; 0.0000s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry.: 4.1e-05s (num_starts 1; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 4.6e-05s (num_starts 3; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 4.7e-05s (num_starts 3; 0.0000s/start)
prune_dst_memslots.: 4.8e-05s (num_starts 7; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 5.7e-05s (num_starts 69; 0.0000s/start)
get_intersected_lr_status.: 6.5e-05s (num_starts 2; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 7.2e-05s (num_starts 8; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 9.2e-05s (num_starts 124; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000123s (num_starts 7; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000124s (num_starts 3; 0.0000s/start)
determinize_value_expr_map.: 0.000125s (num_starts 58; 0.0000s/start)
remove_complex_bv_exprs.: 0.000126s (num_starts 7; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.000145s (num_starts 129; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000147s (num_starts 3; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000152s (num_starts 49; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000167s (num_starts 206; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.00019s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000204s (num_starts 18; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.000223s (num_starts 17; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.000246s (num_starts 17; 0.0000s/start)
compute_sprel_relations.: 0.000298s (num_starts 2; 0.0001s/start)
populate_locid2expr_map.: 0.000298s (num_starts 2; 0.0001s/start)
get_lr_status_for_loc_ids.: 0.000307s (num_starts 120; 0.0000s/start)
propagate_sprels.: 0.000312s (num_starts 2; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000345s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000345s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000345s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000346s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000346s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000349s (num_starts 1; 0.0003s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000352s (num_starts 18; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000362s (num_starts 1; 0.0004s/start)
tfg::populate_loc_definedness.post_dfa.: 0.00037s (num_starts 3; 0.0001s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000492s (num_starts 7; 0.0001s/start)
get_sprel_map_pair.: 0.000506s (num_starts 60; 0.0000s/start)
lr_status_meet.: 0.000554s (num_starts 839; 0.0000s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.00056s (num_starts 1; 0.0006s/start)
graph_locs_add_exvregs_for_edge.: 0.000577s (num_starts 42; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.00058s (num_starts 1; 0.0006s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000587s (num_starts 16; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000608s (num_starts 2; 0.0003s/start)
expr_is_hidden_reg.: 0.000738s (num_starts 1033; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.00074s (num_starts 42; 0.0000s/start)
prove_trivial.: 0.000747s (num_starts 831; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.00077s (num_starts 2; 0.0004s/start)
expr_is_callee_save_const.: 0.000946s (num_starts 1045; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.001095s (num_starts 100; 0.0000s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001146s (num_starts 9; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.001163s (num_starts 65; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.001333s (num_starts 2883; 0.0000s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001361s (num_starts 9; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001395s (num_starts 9; 0.0002s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.001511s (num_starts 178; 0.0000s/start)
parse_yices_model.: 0.001526s (num_starts 1; 0.0015s/start)
populate_dominator_and_postdominator_relations.: 0.00155s (num_starts 2; 0.0008s/start)
populate_simplified_to_state.: 0.001617s (num_starts 3; 0.0005s/start)
graph_locs_add_all_llvmvars.: 0.001737s (num_starts 2; 0.0009s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.001888s (num_starts 7; 0.0003s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.002078s (num_starts 240; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.002102s (num_starts 1417; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.002233s (num_starts 1; 0.0022s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.002247s (num_starts 399; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002285s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002288s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002289s (num_starts 1; 0.0023s/start)
graph_locs_add_all_specvars.: 0.002291s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002293s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.002296s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002302s (num_starts 1; 0.0023s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.00235s (num_starts 11; 0.0002s/start)
collect_dst_to_src_submap_preds.: 0.002625s (num_starts 1316; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.002732s (num_starts 7; 0.0004s/start)
compute_bv_bool_eqclass.: 0.002811s (num_starts 7; 0.0004s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.002945s (num_starts 586; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002996s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003004s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.003005s (num_starts 4; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003178s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003182s (num_starts 1; 0.0032s/start)
identify_address_taken_local_variables.: 0.003207s (num_starts 1; 0.0032s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.003267s (num_starts 5; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003463s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-trivial.: 0.00347s (num_starts 2; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003472s (num_starts 2; 0.0017s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.003633s (num_starts 39; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.003648s (num_starts 1; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003654s (num_starts 1; 0.0037s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.003735s (num_starts 25; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.003977s (num_starts 2; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.003985s (num_starts 2; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.004041s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.004056s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.00406s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004076s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.00409s (num_starts 4; 0.0010s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.004098s (num_starts 272; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004114s (num_starts 4; 0.0010s/start)
pth_collect_preds_using_atom_func.: 0.004278s (num_starts 134; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.004326s (num_starts 7; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.00435s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.004363s (num_starts 4; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.00437s (num_starts 4; 0.0011s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.004511s (num_starts 406; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004565s (num_starts 2; 0.0023s/start)
tfg::populate_loc_definedness.before_solve.: 0.004621s (num_starts 3; 0.0015s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.004806s (num_starts 178; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.004926s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.004979s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.004991s (num_starts 2; 0.0025s/start)
removeMostPromising.: 0.005038s (num_starts 36; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.005134s (num_starts 3; 0.0017s/start)
expr_represents_llvm_undef.: 0.005219s (num_starts 1049; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.005231s (num_starts 320; 0.0000s/start)
collect_assumes_around_edge.: 0.005234s (num_starts 13; 0.0004s/start)
tfg::populate_loc_definedness.: 0.005352s (num_starts 3; 0.0018s/start)
tfg_edge_composition_get_assumes.: 0.005381s (num_starts 134; 0.0000s/start)
graph_visit_exprs.: 0.005385s (num_starts 3; 0.0018s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.005442s (num_starts 1; 0.0054s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.005542s (num_starts 35; 0.0002s/start)
populate_simplified_assets.: 0.005578s (num_starts 6; 0.0009s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.005584s (num_starts 1; 0.0056s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.005701s (num_starts 111; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.005711s (num_starts 3; 0.0019s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.005712s (num_starts 1; 0.0057s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.005713s (num_starts 7; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.005717s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-trivial.: 0.005717s (num_starts 3; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-trivial.: 0.005735s (num_starts 2; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.005742s (num_starts 2; 0.0029s/start)
create_closure_matrix.: 0.005875s (num_starts 367; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.006031s (num_starts 198; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.006214s (num_starts 3; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.006223s (num_starts 3; 0.0021s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.006385s (num_starts 586; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.006395s (num_starts 3; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.006404s (num_starts 3; 0.0021s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.006433s (num_starts 120; 0.0001s/start)
proof_query_is_trivial_helper.: 0.006471s (num_starts 1481; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.006586s (num_starts 2; 0.0033s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.006597s (num_starts 6; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.006598s (num_starts 2; 0.0033s/start)
corr_graph_enumerate_correlations.: 0.006717s (num_starts 13; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007049s (num_starts 2; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007055s (num_starts 2; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.007063s (num_starts 2; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess.: 0.00707s (num_starts 2; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.007196s (num_starts 3; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed;-trivial.: 0.007206s (num_starts 3; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.007211s (num_starts 3; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.007233s (num_starts 3; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed.: 0.007243s (num_starts 3; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.007268s (num_starts 3; 0.0024s/start)
graph_visit_exprs_and_keys.: 0.007293s (num_starts 2; 0.0036s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.007333s (num_starts 172; 0.0000s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.007635s (num_starts 1421; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.007662s (num_starts 3; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-trivial.: 0.007669s (num_starts 3; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.007677s (num_starts 3; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.007733s (num_starts 2; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-trivial.: 0.007739s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.007748s (num_starts 4; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.007751s (num_starts 2; 0.0039s/start)
set_result_and_counter_example.: 0.007888s (num_starts 354; 0.0000s/start)
graph_identify_back_edges.: 0.007935s (num_starts 44; 0.0002s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.0081s (num_starts 120; 0.0001s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.008143s (num_starts 178; 0.0000s/start)
find_dominators.: 0.008372s (num_starts 48; 0.0002s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.008466s (num_starts 120; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.008516s (num_starts 1; 0.0085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.008525s (num_starts 1; 0.0085s/start)
graph_identify_natural_loops.: 0.00888s (num_starts 44; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-trivial.: 0.009217s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.009231s (num_starts 2; 0.0046s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.009466s (num_starts 2; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.009749s (num_starts 4; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.009764s (num_starts 4; 0.0024s/start)
aliasing_constraints.convert_to_expr.: 0.010206s (num_starts 586; 0.0000s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.010274s (num_starts 1421; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010287s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.010289s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.010297s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess.: 0.010309s (num_starts 2; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-trivial.: 0.010336s (num_starts 6; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.010343s (num_starts 6; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.010368s (num_starts 6; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed.: 0.010385s (num_starts 6; 0.0017s/start)
populate_locs_potentially_modified_on_edge.: 0.010494s (num_starts 3; 0.0035s/start)
compute_ssa_vars_renaming_map.: 0.010706s (num_starts 2; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011448s (num_starts 1; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.011455s (num_starts 1; 0.0115s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.011755s (num_starts 4805; 0.0000s/start)
populate_branch_affecting_locs.: 0.011973s (num_starts 3; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-trivial.: 0.01199s (num_starts 6; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.012003s (num_starts 6; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01262s (num_starts 2; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.012636s (num_starts 2; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-trivial.: 0.012731s (num_starts 6; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.01274s (num_starts 6; 0.0021s/start)
generate_aliasing_constraints_from_expr.: 0.013918s (num_starts 3134; 0.0000s/start)
proof_query_is_trivial.: 0.014974s (num_starts 1417; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-trivial.: 0.01556s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.015573s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.015611s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.01562s (num_starts 1; 0.0156s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.015621s (num_starts 1; 0.0156s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.015625s (num_starts 1; 0.0156s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.015816s (num_starts 4; 0.0040s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.016084s (num_starts 3; 0.0054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016474s (num_starts 1; 0.0165s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016479s (num_starts 1; 0.0165s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016481s (num_starts 1; 0.0165s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.016559s (num_starts 1; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.017042s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.017071s (num_starts 3; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.017468s (num_starts 8; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.017596s (num_starts 5; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-trivial.: 0.017632s (num_starts 5; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.017652s (num_starts 5; 0.0035s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.017658s (num_starts 586; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01827s (num_starts 3; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.018428s (num_starts 8; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-trivial.: 0.018582s (num_starts 1; 0.0186s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.018585s (num_starts 1; 0.0186s/start)
expr_linear_relation_holds::visit.var.: 0.018963s (num_starts 1049; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.018971s (num_starts 1; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate;-trivial.: 0.018974s (num_starts 1; 0.0190s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.018974s (num_starts 1; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.018978s (num_starts 1; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.01899s (num_starts 1; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate.: 0.018994s (num_starts 1; 0.0190s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.019001s (num_starts 1; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.019845s (num_starts 3; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.019855s (num_starts 3; 0.0066s/start)
graph_with_guessing_sync_preds.: 0.020172s (num_starts 1316; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.020391s (num_starts 260; 0.0001s/start)
get_unrolled_loop_paths_from.: 0.020442s (num_starts 7; 0.0029s/start)
construct_linear_combination_exprs.: 0.020884s (num_starts 1018; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.021161s (num_starts 8; 0.0026s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.021211s (num_starts 734; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.021329s (num_starts 10; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.021346s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.021393s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.021636s (num_starts 3; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.021657s (num_starts 3; 0.0072s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.02175s (num_starts 3; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.02176s (num_starts 3; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.021787s (num_starts 3; 0.0073s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.021835s (num_starts 3; 0.0073s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.022845s (num_starts 12; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-trivial.: 0.022885s (num_starts 12; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.022901s (num_starts 4; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.022909s (num_starts 12; 0.0019s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.022938s (num_starts 8; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.023007s (num_starts 4; 0.0058s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.02311s (num_starts 734; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.023656s (num_starts 1; 0.0237s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.023663s (num_starts 1; 0.0237s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.023689s (num_starts 1; 0.0237s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.02369s (num_starts 1; 0.0237s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.023755s (num_starts 6; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.023794s (num_starts 6; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.023847s (num_starts 6; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.02392s (num_starts 6; 0.0040s/start)
compute_regions.: 0.024419s (num_starts 44; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.024523s (num_starts 2; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-trivial.: 0.024531s (num_starts 2; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.024534s (num_starts 2; 0.0123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.024572s (num_starts 1; 0.0246s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.025059s (num_starts 17; 0.0015s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.025365s (num_starts 3; 0.0085s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.025747s (num_starts 1; 0.0257s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.025863s (num_starts 10; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.026114s (num_starts 10; 0.0026s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.026247s (num_starts 3; 0.0087s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.026334s (num_starts 312; 0.0001s/start)
tfg_suffixpath_get_expr_helper.: 0.026464s (num_starts 36; 0.0007s/start)
populate_transitive_closure.: 0.026811s (num_starts 59; 0.0005s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.029698s (num_starts 122; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.031197s (num_starts 2; 0.0156s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-trivial.: 0.031562s (num_starts 9; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.031573s (num_starts 9; 0.0035s/start)
ldr_decomposition.: 0.032286s (num_starts 272; 0.0001s/start)
expr_substitute_using_available_exprs_submap.: 0.032484s (num_starts 859; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-trivial.: 0.033521s (num_starts 10; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown.: 0.03365s (num_starts 10; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.034375s (num_starts 5; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess.: 0.034456s (num_starts 5; 0.0069s/start)
compute_vars_reaching_definitions.: 0.035099s (num_starts 2; 0.0175s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.035678s (num_starts 7; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.035722s (num_starts 7; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.035753s (num_starts 2; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-trivial.: 0.035759s (num_starts 2; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.035763s (num_starts 2; 0.0179s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.036026s (num_starts 4; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.03604s (num_starts 4; 0.0090s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.036572s (num_starts 3; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.036595s (num_starts 3; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.037422s (num_starts 18; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.037985s (num_starts 3; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.038007s (num_starts 3; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond;-trivial.: 0.038033s (num_starts 2; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.038038s (num_starts 2; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.038048s (num_starts 2; 0.0190s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond.: 0.038055s (num_starts 2; 0.0190s/start)
create_sp_version_relations_lattice_at_pc.: 0.038991s (num_starts 367; 0.0001s/start)
tfg::get_aliasing_constraints_for_edge.: 0.040593s (num_starts 782; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.041125s (num_starts 2; 0.0206s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.04172s (num_starts 3256; 0.0000s/start)
gen_pred_from_coeff_row.simplify.: 0.043145s (num_starts 1018; 0.0000s/start)
graph_to_stream.: 0.04391s (num_starts 4; 0.0110s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.046048s (num_starts 2; 0.0230s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.046061s (num_starts 2; 0.0230s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.046855s (num_starts 2; 0.0234s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.046865s (num_starts 2; 0.0234s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.047089s (num_starts 2; 0.0235s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.049412s (num_starts 4; 0.0124s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.049511s (num_starts 4; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.049688s (num_starts 3; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.049699s (num_starts 3; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.050658s (num_starts 3; 0.0169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.050677s (num_starts 3; 0.0169s/start)
get_next_potential_correlations.: 0.050758s (num_starts 7; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-trivial.: 0.051401s (num_starts 10; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.051414s (num_starts 10; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-trivial.: 0.051984s (num_starts 10; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.052002s (num_starts 10; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.053316s (num_starts 10; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.053367s (num_starts 10; 0.0053s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.061454s (num_starts 839; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.062645s (num_starts 839; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-trivial.: 0.062658s (num_starts 6; 0.0104s/start)
query:convert_from_z3.: 0.062919s (num_starts 1118; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.063411s (num_starts 2173; 0.0000s/start)
do_ssa_transformation.: 0.063451s (num_starts 2; 0.0317s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.063521s (num_starts 7; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess.: 0.063648s (num_starts 7; 0.0091s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.06481s (num_starts 6; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.064848s (num_starts 6; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.064896s (num_starts 9; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.064957s (num_starts 9; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.065129s (num_starts 11; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.065239s (num_starts 11; 0.0059s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.066684s (num_starts 29; 0.0023s/start)
pth_collect_simplified_preds_using_atom_func.: 0.068765s (num_starts 2039; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-trivial.: 0.069052s (num_starts 22; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.069095s (num_starts 22; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.071095s (num_starts 13; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.07112s (num_starts 13; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071363s (num_starts 1; 0.0714s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.071373s (num_starts 1; 0.0714s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.071648s (num_starts 114; 0.0006s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.071824s (num_starts 82; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.072008s (num_starts 14; 0.0051s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.072082s (num_starts 82; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.072326s (num_starts 14; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072489s (num_starts 1; 0.0725s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.072498s (num_starts 1; 0.0725s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.072675s (num_starts 320; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073382s (num_starts 1; 0.0734s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073389s (num_starts 1; 0.0734s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.073401s (num_starts 1; 0.0734s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-trivial.: 0.074182s (num_starts 10; 0.0074s/start)
compute_lr_status_for_expr.: 0.074392s (num_starts 1112; 0.0001s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.07456s (num_starts 320; 0.0002s/start)
get_sprel_map_pair_at_pc.: 0.074961s (num_starts 586; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.075582s (num_starts 15; 0.0050s/start)
predicate_canonicalized.: 0.076193s (num_starts 1018; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.076817s (num_starts 22; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.076943s (num_starts 22; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.077061s (num_starts 30; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.077184s (num_starts 30; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.077237s (num_starts 4; 0.0193s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-trivial.: 0.077659s (num_starts 7; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.077665s (num_starts 7; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.077713s (num_starts 4; 0.0194s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.077718s (num_starts 4; 0.0194s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07778s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.077784s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.077795s (num_starts 1; 0.0778s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078171s (num_starts 1; 0.0782s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078206s (num_starts 1; 0.0782s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.078216s (num_starts 1; 0.0782s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.078229s (num_starts 1; 0.0782s/start)
compute_expr_eqclasses_at_pc.: 0.078297s (num_starts 7; 0.0112s/start)
populate_loc_liveness.: 0.081711s (num_starts 3; 0.0272s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.08172s (num_starts 320; 0.0003s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.082228s (num_starts 75; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082322s (num_starts 1; 0.0823s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.082335s (num_starts 9; 0.0091s/start)
cg_add_node.: 0.08268s (num_starts 9; 0.0092s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.083279s (num_starts 2; 0.0416s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.083287s (num_starts 2; 0.0416s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.083301s (num_starts 2; 0.0417s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083347s (num_starts 1; 0.0833s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083356s (num_starts 1; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083916s (num_starts 1; 0.0839s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.083929s (num_starts 1; 0.0839s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.084187s (num_starts 1; 0.0842s/start)
bv_const_ref_map2expr_map.: 0.08429s (num_starts 1018; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.08472s (num_starts 14; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.084765s (num_starts 14; 0.0061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.085212s (num_starts 20; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085343s (num_starts 1; 0.0853s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.085356s (num_starts 1; 0.0854s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.085779s (num_starts 15; 0.0057s/start)
collect_aliasing_constraints_around_path_helper.: 0.086027s (num_starts 442; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.086178s (num_starts 15; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned;-trivial.: 0.086252s (num_starts 6; 0.0144s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned.: 0.086315s (num_starts 6; 0.0144s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.086438s (num_starts 12; 0.0072s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086494s (num_starts 1; 0.0865s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08652s (num_starts 1; 0.0865s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.086544s (num_starts 1; 0.0865s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.086559s (num_starts 1; 0.0866s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.086707s (num_starts 12; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed;-trivial.: 0.087259s (num_starts 4; 0.0218s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed.: 0.087305s (num_starts 4; 0.0218s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088938s (num_starts 1; 0.0889s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088944s (num_starts 1; 0.0889s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088948s (num_starts 1; 0.0889s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.089178s (num_starts 22; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.089426s (num_starts 22; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-trivial.: 0.089852s (num_starts 4; 0.0225s/start)
collect_aliasing_constraints_around_path.: 0.090052s (num_starts 278; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.090094s (num_starts 3; 0.0300s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.090351s (num_starts 1; 0.0904s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.090362s (num_starts 1; 0.0904s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.091108s (num_starts 2; 0.0456s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond.: 0.091116s (num_starts 2; 0.0456s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.091717s (num_starts 4; 0.0229s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-trivial.: 0.092542s (num_starts 18; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.092639s (num_starts 1; 0.0926s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.092651s (num_starts 1; 0.0927s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown.: 0.092813s (num_starts 18; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.093146s (num_starts 1; 0.0931s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.093157s (num_starts 1; 0.0932s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.094148s (num_starts 7; 0.0134s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-trivial.: 0.094285s (num_starts 4; 0.0236s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.09429s (num_starts 4; 0.0236s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097854s (num_starts 1; 0.0979s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.097889s (num_starts 1; 0.0979s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.103445s (num_starts 5; 0.0207s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.104336s (num_starts 6; 0.0174s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.104344s (num_starts 6; 0.0174s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.104589s (num_starts 2; 0.0523s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.10464s (num_starts 2; 0.0523s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.104654s (num_starts 2; 0.0523s/start)
create_new_corr_graph_edge.new_node.: 0.105716s (num_starts 8; 0.0132s/start)
create_new_corr_graph_edge.: 0.106275s (num_starts 13; 0.0082s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.106288s (num_starts 40; 0.0027s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.108612s (num_starts 1; 0.1086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.10995s (num_starts 2; 0.0550s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.111224s (num_starts 1; 0.1112s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.111883s (num_starts 18; 0.0062s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.112227s (num_starts 320; 0.0004s/start)
query:convert_to_z3.: 0.112496s (num_starts 1118; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.113197s (num_starts 4; 0.0283s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.113224s (num_starts 4; 0.0283s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.114207s (num_starts 10; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-trivial.: 0.114272s (num_starts 40; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.114569s (num_starts 3; 0.0382s/start)
collect_assumes_around_path_helper.: 0.114724s (num_starts 1421; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-trivial.: 0.115262s (num_starts 15; 0.0077s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.115295s (num_starts 30; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.115299s (num_starts 15; 0.0077s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.116177s (num_starts 30; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.118436s (num_starts 21; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess.: 0.11872s (num_starts 21; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.118978s (num_starts 36; 0.0033s/start)
graph_with_paths::collect_assumes_around_path.: 0.120055s (num_starts 1421; 0.0001s/start)
compute_new_lr_status_on_locs.: 0.121015s (num_starts 320; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.121601s (num_starts 25; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.121992s (num_starts 10; 0.0122s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed.: 0.12203s (num_starts 10; 0.0122s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.12235s (num_starts 585; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-trivial.: 0.122624s (num_starts 6; 0.0204s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.122629s (num_starts 6; 0.0204s/start)
tfg_postprocess_after_pointsto_analysis.: 0.123251s (num_starts 2; 0.0616s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.123719s (num_starts 6; 0.0206s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.127103s (num_starts 8; 0.0159s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.130965s (num_starts 19; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-trivial.: 0.131433s (num_starts 8; 0.0164s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.131664s (num_starts 12; 0.0110s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.13172s (num_starts 12; 0.0110s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.134973s (num_starts 17; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.137426s (num_starts 11; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.137448s (num_starts 1; 0.1374s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.137454s (num_starts 1; 0.1375s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned.: 0.137463s (num_starts 11; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.138884s (num_starts 2; 0.0694s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.138902s (num_starts 2; 0.0695s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.139512s (num_starts 18; 0.0078s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.142642s (num_starts 29; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.144139s (num_starts 11; 0.0131s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed.: 0.144176s (num_starts 11; 0.0131s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.144802s (num_starts 3; 0.0483s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.144842s (num_starts 3; 0.0483s/start)
invariant_inference_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.145459s (num_starts 3; 0.0485s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned;-trivial.: 0.149206s (num_starts 8; 0.0187s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned.: 0.149285s (num_starts 8; 0.0187s/start)
avail_exprs_create_submap.: 0.15083s (num_starts 960; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152676s (num_starts 1; 0.1527s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152681s (num_starts 1; 0.1527s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152684s (num_starts 1; 0.1527s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.152695s (num_starts 1; 0.1527s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.152699s (num_starts 1; 0.1527s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.152706s (num_starts 1; 0.1527s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.153947s (num_starts 2; 0.0770s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.153953s (num_starts 2; 0.0770s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.154987s (num_starts 2; 0.0775s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.158353s (num_starts 3; 0.0528s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.158427s (num_starts 6; 0.0264s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond.: 0.160648s (num_starts 5; 0.0321s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.16097s (num_starts 49; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.16346s (num_starts 4; 0.0409s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.163473s (num_starts 4; 0.0409s/start)
counter_example_satisfies_preds.: 0.163906s (num_starts 3261; 0.0001s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.164076s (num_starts 2; 0.0820s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.164684s (num_starts 2; 0.0823s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.164706s (num_starts 2; 0.0824s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.165066s (num_starts 2; 0.0825s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.165114s (num_starts 2; 0.0826s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities..: 0.165126s (num_starts 3; 0.0550s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.165138s (num_starts 3; 0.0550s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.165162s (num_starts 2; 0.0826s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.165193s (num_starts 2; 0.0826s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.165443s (num_starts 6; 0.0276s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.165482s (num_starts 6; 0.0276s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-trivial.: 0.166086s (num_starts 52; 0.0032s/start)
check_wfconds_on_edge.L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.166463s (num_starts 2; 0.0832s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.16654s (num_starts 4; 0.0416s/start)
get_unrolled_paths_from.: 0.16673s (num_starts 40; 0.0042s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown.: 0.166783s (num_starts 52; 0.0032s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.169096s (num_starts 33; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16913s (num_starts 2; 0.0846s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169165s (num_starts 2; 0.0846s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.169184s (num_starts 2; 0.0846s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.169219s (num_starts 2; 0.0846s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned.: 0.169231s (num_starts 2; 0.0846s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.169247s (num_starts 2; 0.0846s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess.: 0.172022s (num_starts 8; 0.0215s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.172626s (num_starts 35; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.173125s (num_starts 2; 0.0866s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.175271s (num_starts 2; 0.0876s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.175301s (num_starts 2; 0.0877s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.177706s (num_starts 11; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-trivial.: 0.181912s (num_starts 12; 0.0152s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.18261s (num_starts 2; 0.0913s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.18466s (num_starts 2; 0.0923s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.184732s (num_starts 2; 0.0924s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-trivial.: 0.186306s (num_starts 31; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.188796s (num_starts 2; 0.0944s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.189503s (num_starts 17; 0.0111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.190379s (num_starts 4; 0.0476s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.198086s (num_starts 4; 0.0495s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.198652s (num_starts 10; 0.0199s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.206237s (num_starts 2; 0.1031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-trivial.: 0.207638s (num_starts 38; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.207715s (num_starts 38; 0.0055s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.210264s (num_starts 37; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210792s (num_starts 2; 0.1054s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.210816s (num_starts 2; 0.1054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess;-trivial.: 0.211403s (num_starts 20; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.211455s (num_starts 20; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.211551s (num_starts 20; 0.0106s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.211589s (num_starts 2; 0.1058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess.: 0.211591s (num_starts 20; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.211651s (num_starts 2; 0.1058s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.212408s (num_starts 1; 0.2124s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21241s (num_starts 1; 0.2124s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21241s (num_starts 1; 0.2124s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.21243s (num_starts 1; 0.2124s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.212449s (num_starts 1; 0.2124s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.213899s (num_starts 2; 0.1069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.213953s (num_starts 2; 0.1070s/start)
tfg_relax_pointsto_vals_on_edge.: 0.214531s (num_starts 122; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.215548s (num_starts 1; 0.2155s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.215551s (num_starts 1; 0.2156s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.215575s (num_starts 1; 0.2156s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false.: 0.215579s (num_starts 1; 0.2156s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.215847s (num_starts 7; 0.0308s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned.: 0.215882s (num_starts 7; 0.0308s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.216625s (num_starts 3; 0.0722s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.218346s (num_starts 1; 0.2183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.21835s (num_starts 1; 0.2183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.218369s (num_starts 1; 0.2184s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.218386s (num_starts 1; 0.2184s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.22374s (num_starts 32; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-trivial.: 0.225989s (num_starts 14; 0.0161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.226013s (num_starts 14; 0.0161s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.226143s (num_starts 14; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown.: 0.226182s (num_starts 14; 0.0162s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.227396s (num_starts 3; 0.0758s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed.: 0.228077s (num_starts 5; 0.0456s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.229092s (num_starts 9; 0.0255s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.231348s (num_starts 35; 0.0066s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.232795s (num_starts 3; 0.0776s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.236843s (num_starts 10; 0.0237s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.241322s (num_starts 5; 0.0483s/start)
check_wfconds_on_edge.L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.241405s (num_starts 3; 0.0805s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24533s (num_starts 1; 0.2453s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.245337s (num_starts 1; 0.2453s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.24534s (num_starts 1; 0.2453s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.245357s (num_starts 1; 0.2454s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate.: 0.245362s (num_starts 1; 0.2454s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.245368s (num_starts 1; 0.2454s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown.: 0.247473s (num_starts 12; 0.0206s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.251323s (num_starts 5413; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.2571s (num_starts 1; 0.2571s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.257106s (num_starts 1; 0.2571s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.25711s (num_starts 1; 0.2571s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.257129s (num_starts 1; 0.2571s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate.: 0.257133s (num_starts 1; 0.2571s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.257139s (num_starts 1; 0.2571s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.257641s (num_starts 320; 0.0008s/start)
gen_pred_from_coeff_row.: 0.259104s (num_starts 1018; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.261894s (num_starts 24; 0.0109s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.262083s (num_starts 24; 0.0109s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-trivial.: 0.262233s (num_starts 14; 0.0187s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.262264s (num_starts 14; 0.0187s/start)
compute_preds_for_bv_points.: 0.262949s (num_starts 78; 0.0034s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.263424s (num_starts 118; 0.0022s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.264652s (num_starts 3; 0.0882s/start)
query:simplify-z3.: 0.265721s (num_starts 2309; 0.0001s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.268646s (num_starts 4; 0.0672s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.269968s (num_starts 56; 0.0048s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.270658s (num_starts 42; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.275051s (num_starts 1; 0.2751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.275053s (num_starts 1; 0.2751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.275075s (num_starts 1; 0.2751s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false.: 0.27508s (num_starts 1; 0.2751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.276636s (num_starts 8; 0.0346s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.276726s (num_starts 8; 0.0346s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.279228s (num_starts 586; 0.0005s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%10%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 0.279585s (num_starts 22; 0.0127s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281438s (num_starts 1; 0.2814s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.28144s (num_starts 1; 0.2814s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281443s (num_starts 1; 0.2814s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281445s (num_starts 1; 0.2814s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.281455s (num_starts 1; 0.2815s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.281457s (num_starts 1; 0.2815s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.281461s (num_starts 1; 0.2815s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.281832s (num_starts 2; 0.1409s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.282085s (num_starts 3; 0.0940s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.282119s (num_starts 3; 0.0940s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.282916s (num_starts 80; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-trivial.: 0.284422s (num_starts 42; 0.0068s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.291728s (num_starts 9; 0.0324s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.291854s (num_starts 39; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear.: 0.291934s (num_starts 39; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.293023s (num_starts 3; 0.0977s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.294109s (num_starts 1; 0.2941s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.294111s (num_starts 1; 0.2941s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.294128s (num_starts 1; 0.2941s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.294132s (num_starts 1; 0.2941s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.305714s (num_starts 53; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.313604s (num_starts 4; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.313705s (num_starts 4; 0.0784s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.315437s (num_starts 50; 0.0063s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.31636s (num_starts 50; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.31679s (num_starts 4; 0.0792s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.321928s (num_starts 3213; 0.0001s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.3232s (num_starts 586; 0.0006s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.326046s (num_starts 544; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.328494s (num_starts 12; 0.0274s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.335012s (num_starts 14; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.340355s (num_starts 4; 0.0851s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond.: 0.340484s (num_starts 4; 0.0851s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.340602s (num_starts 4; 0.0852s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-trivial.: 0.341892s (num_starts 49; 0.0070s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.34595s (num_starts 5591; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.346408s (num_starts 6; 0.0577s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.347889s (num_starts 5413; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 0.351264s (num_starts 22; 0.0160s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363322s (num_starts 4; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.363328s (num_starts 4; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.363383s (num_starts 4; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned.: 0.363457s (num_starts 4; 0.0909s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.364355s (num_starts 4; 0.0911s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.378581s (num_starts 99; 0.0038s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.379211s (num_starts 198; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.382949s (num_starts 5; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.382986s (num_starts 5; 0.0766s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.387636s (num_starts 7; 0.0554s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond.: 0.388189s (num_starts 5; 0.0776s/start)
ldr_decompose_and_linear_solve.: 0.388363s (num_starts 272; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.394075s (num_starts 1; 0.3941s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.394077s (num_starts 1; 0.3941s/start)
bv_linear_solve.: 0.402327s (num_starts 272; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.403231s (num_starts 107; 0.0038s/start)
query:bv_solve.: 0.403989s (num_starts 272; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.40404s (num_starts 5; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.404108s (num_starts 5; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.40414s (num_starts 5; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.406134s (num_starts 7; 0.0580s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed.: 0.406157s (num_starts 7; 0.0580s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.407124s (num_starts 3; 0.1357s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed.: 0.416493s (num_starts 5; 0.0833s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.416767s (num_starts 5; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.416814s (num_starts 5; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.417783s (num_starts 5; 0.0836s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.421921s (num_starts 10; 0.0422s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess.: 0.421968s (num_starts 10; 0.0422s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.422052s (num_starts 10; 0.0422s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.422243s (num_starts 1; 0.4222s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.422243s (num_starts 1; 0.4222s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.434414s (num_starts 6; 0.0724s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.434465s (num_starts 23; 0.0189s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.435034s (num_starts 7; 0.0621s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned.: 0.435066s (num_starts 7; 0.0622s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.440309s (num_starts 5413; 0.0001s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.45564s (num_starts 729; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.465442s (num_starts 43; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.471942s (num_starts 5; 0.0944s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.473976s (num_starts 1; 0.4740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.47398s (num_starts 1; 0.4740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.473999s (num_starts 1; 0.4740s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false.: 0.474003s (num_starts 1; 0.4740s/start)
bv_solve_returning_intermediate_structures.: 0.480545s (num_starts 272; 0.0018s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.482369s (num_starts 44; 0.0110s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.495996s (num_starts 5; 0.0992s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.496674s (num_starts 6; 0.0828s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.49786s (num_starts 1; 0.4979s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.497862s (num_starts 1; 0.4979s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.497876s (num_starts 1; 0.4979s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false.: 0.49788s (num_starts 1; 0.4979s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.498371s (num_starts 6; 0.0831s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.527611s (num_starts 76; 0.0069s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.532288s (num_starts 20; 0.0266s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess.: 0.532354s (num_starts 20; 0.0266s/start)
bvsolve_cache_query.miss1.: 0.539263s (num_starts 272; 0.0020s/start)
bvsolve_cache_query.: 0.549743s (num_starts 272; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.553708s (num_starts 3; 0.1846s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.553726s (num_starts 3; 0.1846s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.565808s (num_starts 10; 0.0566s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned.: 0.573928s (num_starts 12; 0.0478s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.582299s (num_starts 5; 0.1165s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.582809s (num_starts 3; 0.1943s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.584467s (num_starts 35; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.587523s (num_starts 4; 0.1469s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.587576s (num_starts 2; 0.2938s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.589552s (num_starts 5; 0.1179s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned.: 0.589573s (num_starts 5; 0.1179s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.604371s (num_starts 11; 0.0549s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.605807s (num_starts 1516; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear.: 0.6133s (num_starts 46; 0.0133s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-trivial.: 0.623736s (num_starts 49; 0.0127s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.630137s (num_starts 16668; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.633906s (num_starts 4; 0.1585s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.633967s (num_starts 4; 0.1585s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.633996s (num_starts 4; 0.1585s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.638914s (num_starts 2; 0.3195s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.638927s (num_starts 2; 0.3195s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.638933s (num_starts 2; 0.3195s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.639535s (num_starts 2; 0.3198s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.639545s (num_starts 2; 0.3198s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.639551s (num_starts 2; 0.3198s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.643346s (num_starts 6; 0.1072s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.643366s (num_starts 6; 0.1072s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.643403s (num_starts 6; 0.1072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.646801s (num_starts 148; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.647287s (num_starts 5; 0.1295s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned.: 0.647305s (num_starts 5; 0.1295s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.647346s (num_starts 5; 0.1295s/start)
check_wfconds_on_edge.L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.653288s (num_starts 9; 0.0726s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.654242s (num_starts 14; 0.0467s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.654337s (num_starts 14; 0.0467s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.655116s (num_starts 3; 0.2184s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.667313s (num_starts 3; 0.2224s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.672953s (num_starts 22; 0.0306s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.674205s (num_starts 4; 0.1686s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.675024s (num_starts 198; 0.0034s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.677747s (num_starts 5; 0.1355s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.681045s (num_starts 114; 0.0060s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.693376s (num_starts 6; 0.1156s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.703886s (num_starts 68; 0.0104s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.704802s (num_starts 90; 0.0078s/start)
solve_for_bv_points.: 0.70628s (num_starts 272; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.706745s (num_starts 40; 0.0177s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.710373s (num_starts 2; 0.3552s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.710382s (num_starts 2; 0.3552s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.710389s (num_starts 2; 0.3552s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.716153s (num_starts 5; 0.1432s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed.: 0.71617s (num_starts 5; 0.1432s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.716203s (num_starts 5; 0.1432s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.717398s (num_starts 6; 0.1196s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed.: 0.724056s (num_starts 8; 0.0905s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.74008s (num_starts 1430; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.740967s (num_starts 11; 0.0674s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.749012s (num_starts 2; 0.3745s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.749101s (num_starts 2; 0.3746s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.758037s (num_starts 30; 0.0253s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.760958s (num_starts 9; 0.0846s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.762757s (num_starts 5; 0.1526s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.764781s (num_starts 8; 0.0956s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.776935s (num_starts 13; 0.0598s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-trivial.: 0.779128s (num_starts 37; 0.0211s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.781617s (num_starts 13; 0.0601s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.791953s (num_starts 2; 0.3960s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.792023s (num_starts 2; 0.3960s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.794742s (num_starts 8; 0.0993s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.800834s (num_starts 8; 0.1001s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.819294s (num_starts 665; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.819974s (num_starts 10; 0.0820s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.828189s (num_starts 1; 0.8282s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.828189s (num_starts 1; 0.8282s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.828211s (num_starts 1; 0.8282s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false.: 0.828218s (num_starts 1; 0.8282s/start)
guarded_predicate_set_and.: 0.828522s (num_starts 586; 0.0014s/start)
ftmap_run_pointsto_analysis.: 0.839789s (num_starts 2; 0.4199s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.840043s (num_starts 54; 0.0156s/start)
tfg_run_pointsto_analysis.: 0.840425s (num_starts 2; 0.4202s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.858752s (num_starts 10; 0.0859s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.859683s (num_starts 12; 0.0716s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-trivial.: 0.864461s (num_starts 60; 0.0144s/start)
apply_mask_and_overlay_array_constant.: 0.880635s (num_starts 665; 0.0013s/start)
lhs_set_sort.: 0.882892s (num_starts 586; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.885365s (num_starts 1; 0.8854s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.885373s (num_starts 1; 0.8854s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.885378s (num_starts 1; 0.8854s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.888398s (num_starts 5; 0.1777s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.888424s (num_starts 5; 0.1777s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.888453s (num_starts 5; 0.1777s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.889655s (num_starts 10; 0.0890s/start)
tfg_populate_structs_after_ssa_construction.: 0.893659s (num_starts 2; 0.4468s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.900607s (num_starts 7; 0.1287s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.900788s (num_starts 7; 0.1287s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.916938s (num_starts 7; 0.1310s/start)
put_smtlib_string_in_file.: 0.919048s (num_starts 708; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess.: 0.921829s (num_starts 16; 0.0576s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.923186s (num_starts 15; 0.0615s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.925031s (num_starts 16; 0.0578s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-trivial.: 0.929225s (num_starts 228; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond.: 0.931148s (num_starts 12; 0.0776s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.947443s (num_starts 272; 0.0035s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.953141s (num_starts 9; 0.1059s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.959313s (num_starts 210; 0.0046s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.964892s (num_starts 2; 0.4824s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.04372s (num_starts 2; 0.5219s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.04381s (num_starts 2; 0.5219s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.05379s (num_starts 1; 1.0538s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.0538s (num_starts 1; 1.0538s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.0538s (num_starts 1; 1.0538s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.05382s (num_starts 1; 1.0538s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-signed.: 1.05383s (num_starts 1; 1.0538s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.05384s (num_starts 1; 1.0538s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.05955s (num_starts 5; 0.2119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.05959s (num_starts 5; 0.2119s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 1.06659s (num_starts 13; 0.0820s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 1.06676s (num_starts 13; 0.0821s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.07867s (num_starts 88; 0.0123s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.08224s (num_starts 18; 0.0601s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.11608s (num_starts 18; 0.0620s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 1.12886s (num_starts 27; 0.0418s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear.: 1.12893s (num_starts 27; 0.0418s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear.: 1.16261s (num_starts 42; 0.0277s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.17743s (num_starts 14; 0.0841s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 1.19494s (num_starts 185; 0.0065s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%7%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 1.19989s (num_starts 113; 0.0106s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20876s (num_starts 4; 0.3022s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.20903s (num_starts 4; 0.3023s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 1.2349s (num_starts 17; 0.0726s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 1.28145s (num_starts 3485; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.3096s (num_starts 33; 0.0397s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31225s (num_starts 10; 0.1312s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31764s (num_starts 2; 0.6588s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31767s (num_starts 2; 0.6588s/start)
graph_ec_apply_trans_funs_helper.0.: 1.32059s (num_starts 3331; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 1.33096s (num_starts 116; 0.0115s/start)
graph_ec_apply_trans_funs_helper.: 1.33245s (num_starts 3340; 0.0004s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 1.34034s (num_starts 3340; 0.0004s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 1.34733s (num_starts 3315; 0.0004s/start)
computeWP_for_pred_across_ec.: 1.35801s (num_starts 3315; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.3731s (num_starts 9; 0.1526s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.38201s (num_starts 10; 0.1382s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.40465s (num_starts 11; 0.1277s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 1.41202s (num_starts 44; 0.0321s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.43421s (num_starts 35; 0.0410s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.44488s (num_starts 10; 0.1445s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.45321s (num_starts 16; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.45337s (num_starts 16; 0.0908s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 1.48054s (num_starts 49; 0.0302s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.48821s (num_starts 11; 0.1353s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.49569s (num_starts 13; 0.1151s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.51118s (num_starts 4; 0.3778s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.52382s (num_starts 12; 0.1270s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.54655s (num_starts 1982; 0.0008s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 1.57357s (num_starts 6; 0.2623s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.57893s (num_starts 46; 0.0343s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.60021s (num_starts 11; 0.1455s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.61813s (num_starts 586; 0.0028s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 1.65424s (num_starts 1430; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.66303s (num_starts 8; 0.2079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.66312s (num_starts 8; 0.2079s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.6633s (num_starts 8; 0.2079s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.66338s (num_starts 8; 0.2079s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.66725s (num_starts 586; 0.0028s/start)
edge_composition_apply_trans_funs_on_pred.: 1.67559s (num_starts 1316; 0.0013s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.69003s (num_starts 13; 0.1300s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess.: 1.69341s (num_starts 16; 0.1058s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.69544s (num_starts 15; 0.1130s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed.: 1.71105s (num_starts 43; 0.0398s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 1.71595s (num_starts 30; 0.0572s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned.: 1.71609s (num_starts 30; 0.0572s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.75004s (num_starts 20; 0.0875s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed.: 1.77358s (num_starts 53; 0.0335s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.78821s (num_starts 117; 0.0153s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon).: 1.79542s (num_starts 19; 0.0945s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.82811s (num_starts 20; 0.0914s/start)
collect_inductive_preds_around_path.: 1.84271s (num_starts 1316; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.84738s (num_starts 22; 0.0840s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 1.94978s (num_starts 30; 0.0650s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.00366s (num_starts 12; 0.1670s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned.: 2.00977s (num_starts 14; 0.1436s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.01494s (num_starts 7; 0.2878s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.015s (num_starts 7; 0.2879s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.01503s (num_starts 7; 0.2879s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.02254s (num_starts 13; 0.1556s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 2.03811s (num_starts 19; 0.1073s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear.: 2.03816s (num_starts 19; 0.1073s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 2.03826s (num_starts 19; 0.1073s/start)
check_wfconds_on_edge.: 2.10238s (num_starts 34; 0.0618s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.1422s (num_starts 9; 0.2380s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.18692s (num_starts 24; 0.0911s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.19623s (num_starts 11; 0.1997s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.19642s (num_starts 11; 0.1997s/start)
check_equivalence_proof.: 2.21923s (num_starts 1; 2.2192s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.23322s (num_starts 50; 0.0447s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-trivial.: 2.24295s (num_starts 95; 0.0236s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.2441s (num_starts 27; 0.0831s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 2.26421s (num_starts 43; 0.0527s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.26858s (num_starts 25; 0.0907s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.29012s (num_starts 16; 0.1431s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 2.32859s (num_starts 23; 0.1012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 2.3289s (num_starts 23; 0.1013s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.37623s (num_starts 13; 0.1828s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.38049s (num_starts 13; 0.1831s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.38053s (num_starts 13; 0.1831s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 2.45183s (num_starts 26; 0.0943s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 2.45191s (num_starts 26; 0.0943s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 2.49529s (num_starts 170; 0.0147s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 2.54709s (num_starts 46; 0.0554s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 2.58671s (num_starts 2; 1.2934s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.59791s (num_starts 69; 0.0377s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.6418s (num_starts 30; 0.0881s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.65298s (num_starts 67; 0.0396s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.76327s (num_starts 18; 0.1535s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.76897s (num_starts 29; 0.0955s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 2.83982s (num_starts 33; 0.0861s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.86615s (num_starts 7; 0.4094s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 2.86638s (num_starts 7; 0.4095s/start)
dst_edge_composition_proves_false.: 2.96565s (num_starts 7; 0.4237s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.97542s (num_starts 93; 0.0320s/start)
decide_hoare_triple.: 3.04536s (num_starts 10; 0.3045s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 3.05689s (num_starts 450; 0.0068s/start)
get_next_dst_edge_composition_to_correlate.: 3.05711s (num_starts 8; 0.3821s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.08124s (num_starts 8; 0.3852s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.08128s (num_starts 8; 0.3852s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.08131s (num_starts 8; 0.3852s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.08922s (num_starts 12; 0.2574s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown.: 3.08926s (num_starts 12; 0.2574s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.09914s (num_starts 16; 0.1937s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.12828s (num_starts 31; 0.1009s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-trivial.: 3.14253s (num_starts 503; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 3.20887s (num_starts 237; 0.0135s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.25034s (num_starts 9; 0.3611s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.25041s (num_starts 9; 0.3612s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.25044s (num_starts 9; 0.3612s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.25406s (num_starts 11; 0.2958s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown.: 3.2541s (num_starts 11; 0.2958s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.25417s (num_starts 11; 0.2958s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.29102s (num_starts 4; 0.8228s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.29103s (num_starts 4; 0.8228s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.36882s (num_starts 8; 0.4211s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 3.36885s (num_starts 8; 0.4211s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.37517s (num_starts 5; 0.6750s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess.: 3.39427s (num_starts 78; 0.0435s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.4713s (num_starts 18; 0.1928s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.4789s (num_starts 10; 0.3479s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear.: 3.57468s (num_starts 258; 0.0139s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 3.59111s (num_starts 2; 1.7956s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 3.71481s (num_starts 66; 0.0563s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 3.74334s (num_starts 74; 0.0506s/start)
compute_z3_expr.: 3.7649s (num_starts 1472; 0.0026s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 3.96338s (num_starts 114; 0.0348s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.02054s (num_starts 20; 0.2010s/start)
check_preds_on_edge_compositions.: 4.02459s (num_starts 39; 0.1032s/start)
corr_graph::add_edge().: 4.15681s (num_starts 13; 0.3198s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.2188s (num_starts 24; 0.1758s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 4.26723s (num_starts 13; 0.3282s/start)
corr_graph_add_correlation.: 4.26762s (num_starts 13; 0.3283s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 4.26834s (num_starts 13; 0.3283s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 4.55044s (num_starts 96; 0.0474s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned.: 4.56216s (num_starts 73; 0.0625s/start)
invariant_inference_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 4.70998s (num_starts 18; 0.2617s/start)
parse_z3_model.: 4.8114s (num_starts 176; 0.0273s/start)
read_counter_examples_from_channel.: 4.85255s (num_starts 90; 0.0539s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.38349s (num_starts 36; 0.1495s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.17596s (num_starts 56; 0.1103s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.17856s (num_starts 11; 0.5617s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.17877s (num_starts 11; 0.5617s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 6.30278s (num_starts 17; 0.3708s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.36128s (num_starts 13; 0.4893s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 6.41628s (num_starts 21; 0.3055s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned.: 6.49327s (num_starts 21; 0.3092s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 6.58689s (num_starts 221; 0.0298s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.66941s (num_starts 15; 0.4446s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.66982s (num_starts 15; 0.4447s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 6.99733s (num_starts 18; 0.3887s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 7.42848s (num_starts 45; 0.1651s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.44531s (num_starts 28; 0.2659s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 7.51153s (num_starts 172; 0.0437s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry).: 7.51419s (num_starts 57; 0.1318s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.57079s (num_starts 21; 0.3605s/start)
decide_hoare_triple_helper;-trivial.: 7.6863s (num_starts 991; 0.0078s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 7.72082s (num_starts 18; 0.4289s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 8.08335s (num_starts 59; 0.1370s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.13928s (num_starts 47; 0.1732s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.24263s (num_starts 32; 0.2576s/start)
invariant_inference_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 8.29825s (num_starts 17; 0.4881s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear.: 8.43672s (num_starts 81; 0.1042s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry).: 8.47634s (num_starts 67; 0.1265s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry).: 8.52346s (num_starts 146; 0.0584s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 9.22677s (num_starts 93; 0.0992s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.79576s (num_starts 23; 0.4259s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 10.4796s (num_starts 137; 0.0765s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 10.7123s (num_starts 104; 0.1030s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry).: 13.8752s (num_starts 607; 0.0229s/start)
propagate_nodece_across_edge.: 14.2596s (num_starts 114; 0.1251s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 14.3694s (num_starts 55; 0.2613s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 15.0783s (num_starts 145; 0.1040s/start)
ce_reconcile_sorts.: 15.1881s (num_starts 177; 0.0858s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 16.0669s (num_starts 35; 0.4591s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 16.6321s (num_starts 88; 0.1890s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry).: 18.3152s (num_starts 130; 0.1409s/start)
decide_hoare_triple_helper;per-query-type;linear.: 19.6997s (num_starts 538; 0.0366s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 20.7695s (num_starts 17; 1.2217s/start)
check_node_stability_after_CE_addition.: 22.0325s (num_starts 358; 0.0615s/start)
query:smt.: 27.7135s (num_starts 354; 0.0783s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 28.5281s (num_starts 316; 0.0903s/start)
src_tfg_counter_example_translate_on_edge_composition.: 28.5303s (num_starts 365; 0.0782s/start)
spawn_smt_query.: 32.5704s (num_starts 354; 0.0920s/start)
counter_example_translate_on_edge_composition_helper.: 42.9918s (num_starts 3000; 0.0143s/start)
counter_example_falsifies_preds.: 44.6112s (num_starts 624; 0.0715s/start)
counter_example_evaluate_preds.: 44.7668s (num_starts 3885; 0.0115s/start)
solver_provable.: 53.362s (num_starts 586; 0.0911s/start)
solver_satisfiable-cache-miss.: 53.4061s (num_starts 354; 0.1509s/start)
solver_satisfiable.: 53.4119s (num_starts 587; 0.0910s/start)
expr_is_provable.: 53.975s (num_starts 586; 0.0921s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 53.9858s (num_starts 586; 0.0921s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 54.0182s (num_starts 586; 0.0922s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 54.0408s (num_starts 586; 0.0922s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 54.9695s (num_starts 586; 0.0938s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 55.131s (num_starts 586; 0.0941s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 55.1414s (num_starts 586; 0.0941s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 63.0978s (num_starts 60; 1.0516s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 63.2553s (num_starts 325; 0.1946s/start)
is_expr_equal_using_lhs_set_and_precond.: 63.4355s (num_starts 586; 0.1083s/start)
prove.: 63.4449s (num_starts 586; 0.1083s/start)
prove_spawn_and_join_helper.: 63.4486s (num_starts 586; 0.1083s/start)
prove_spawn_and_join.: 66.6723s (num_starts 586; 0.1138s/start)
prove_wrapper.proof_query_not_trivial.: 66.7971s (num_starts 586; 0.1140s/start)
prove_wrapper.: 66.9819s (num_starts 1417; 0.0473s/start)
decide_hoare_triple_check_ub.: 68.7626s (num_starts 1316; 0.0523s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%17%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 70.4697s (num_starts 39; 1.8069s/start)
decide_hoare_triple_helper.: 70.9996s (num_starts 1316; 0.0540s/start)
add_fresh_counterexample_at_pc_and_propagate.: 72.1744s (num_starts 206; 0.3504s/start)
decide_hoare_triple_with_alias_cons.ce.: 72.1812s (num_starts 1199; 0.0602s/start)
update_invariant_state_for_edges.: 138.675s (num_starts 11; 12.6068s/start)
cg_check_new_cg_ec.: 138.675s (num_starts 11; 12.6069s/start)
correl_entry_apply.: 138.677s (num_starts 11; 12.6070s/start)
expandProductCFG.: 141.787s (num_starts 12; 11.8155s/start)
decide_hoare_triple_with_alias_cons.: 143.192s (num_starts 1316; 0.1088s/start)
bestFirstSearch.: 146.153s (num_starts 1; 146.1531s/start)
Time taken for equivalence check.: 148.388s (num_starts 1; 148.3883s/start)

counters:
# of Paths Prunned through CE propagation.: 5
# of assume sat failures for undef-behavioursome.edge.Lif.else%1%d=>Lif.end%1%bbentry.: 8
# of assume sat failures for undef-behavioursome.edge.Lif.then%1%d=>Lif.end%1%bbentry.: 4
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 5
# of paths enumerated.: 41
# of paths expanded.: 11
# of queries to linear solver.: 272
# of smt-solver-queries.: 354
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 4
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 4
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 5
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 4
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 2
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 4
removed-siblings.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 17
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 11
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 15
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 18
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 18
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 82
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 10
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 18
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 20
smallest_point_cover_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 78
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 30
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 71
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 17
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 45
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 28
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 9
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 9
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 34
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 32
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 78
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 79
smt-queries-cache-hits.: 233
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 176
total-correlation-possibilities.: 17
total-correlation-possibilities-mod-lsprels.: 17
total-correlations-explored.: 12

flags:
dst-aloc.: 0
dst-edges.: 16
dst-nodes.: 14
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%17%bbentry_Lfor.cond1%1%bbentry.: 33
final-CG-counterexamples-generated-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 27
final-CG-counterexamples-total-at-L3%17%bbentry_Lfor.cond1%1%bbentry.: 55
final-CG-counterexamples-total-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 55
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 4
final-CG-num-invariants.: 41
final-CG-super-edges.: 0
src-edges.: 26
src-nodes.: 22
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 122.46
final-CG-time-to-total-time-ratio.: 0.84
query-time-to-total-time-ratio.: 0.19

Context stats:
exprs: count: 279507
sorts: count: 168
num_proof_queries: 586
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	100919
	        hit ratio:	0.991974
m_simplify_solver:
	----------- total:	6237
	        hit ratio:	0.809043
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	60
	        hit ratio:	0.333333
m_z3_solver_substitution:
	----------- total:	1191
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1191
	        hit ratio:	0
m_expr_size:
	----------- total:	23123
	        hit ratio:	0.93993
m_contains_only_constants_or_sp_versions:
	----------- total:	48
	        hit ratio:	0.895833
m_expr_evaluates_to_constant_visitor:
	----------- total:	284801
	        hit ratio:	0.470388

z3_solver expr_query_cache entry size: 354
	----------- total:	587
	             hits:	233
	        hit ratio:	0.396934
histogram (time taken by solver in ms):
[ 34.6220,  45.0672) (avg.  41.0725)     : 62
[ 45.0672,  58.6636) (avg.  51.4265)     : 167
[ 58.6636,  76.3619) (avg.  68.1220)     : 27
[ 76.3619,  99.3996) (avg.  86.0321)     : 29
[ 99.3996, 129.3876) (avg. 110.7856)     : 33
[129.3876, 168.4228) (avg. 143.1391)     : 14
[168.4228, 219.2345) (avg. 179.3055)     : 6
[219.2345, 285.3758) (avg. 259.3380)     : 3
[285.3758, 371.4712) (avg. 332.6188)     : 8
[371.4712, 483.5410) (avg. 412.8558)     : 5
histogram (number of quantifiers in query)
[ 0,  5) (avg.  0)                       : 1
[ 5,  9) (avg.  0)                       : 0
[ 9, 13) (avg.  0)                       : 0
[13, 17) (avg.  0)                       : 0
[17, 21) (avg. 18)                       : 33
[21, 25) (avg. 24)                       : 193
[25, 29) (avg. 26)                       : 16
[29, 33) (avg. 31)                       : 111
[33, 37) (avg.  0)                       : 0
[37, 41) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[103, 162) (avg. 103)                    : 1
[162, 220) (avg.   0)                    : 0
[220, 279) (avg.   0)                    : 0
[279, 337) (avg. 335)                    : 20
[337, 396) (avg. 376)                    : 53
[396, 454) (avg. 417)                    : 153
[454, 513) (avg. 486)                    : 16
[513, 571) (avg. 547)                    : 15
[571, 630) (avg. 597)                    : 42
[630, 688) (avg. 655)                    : 54
Top 10 highest time taking queries:
1. [0.483s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.11
2. [0.417s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.1
3. [0.408s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.4
4. [0.383s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
5. [0.374s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-1-free_var_idx.44.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
6. [0.369s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.2
7. [0.362s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%17%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%17%b.0
8. [0.351s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.3
9. [0.341s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.4
10. [0.324s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.expr-group-bvs.linear1-1-free_var_idx.47.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_7.0

<MSG>2:53 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 284 time spent: 0:0:0 [0.005654s total; 0.000020 per start]
tfg_computeWP: num_starts 11743 time spent: 0:0:1 [1.164937s total; 0.000099 per start]
tfg_get_simplified_to_state_for_edge: num_starts 26911 time spent: 0:0:0 [0.050968s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 17056 time spent: 0:0:0 [0.031848s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 13810 time spent: 0:0:0 [0.023290s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 215 time spent: 0:0:38 [38.826309s total; 0.180587 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 26 time spent: 0:0:4 [4.119217s total; 0.158431 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 2794 time spent: 0:0:28 [28.783118s total; 0.010302 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 725 time spent: 0:0:44 [44.719225s total; 0.061682 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 2482 time spent: 0:0:17 [17.442215s total; 0.007027 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 10768 time spent: 0:1:13 [73.149607s total; 0.006793 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 2494 time spent: 0:0:0 [0.135364s total; 0.000054 per start]
tfg_graph_get_vars_written_on_edge: num_starts 2482 time spent: 0:0:0 [0.055967s total; 0.000023 per start]
cg_with_rank_add_CE_at_pc: num_starts 360 time spent: 0:0:24 [24.563263s total; 0.068231 per start]
graph_with_ce_add_CE_at_pc: num_starts 202 time spent: 0:0:0 [0.013781s total; 0.000068 per start]
graph_with_guessing_add_CE_at_pc: num_starts 360 time spent: 0:0:24 [24.549490s total; 0.068193 per start]
point_set_add_point_using_CE: num_starts 3213 time spent: 0:0:0 [0.902259s total; 0.000281 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 3213 time spent: 0:0:0 [0.908674s total; 0.000283 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 274 time spent: 0:0:2 [2.500063s total; 0.009124 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 274 time spent: 0:0:1 [1.579937s total; 0.005766 per start]
expr_label_memlabels_using_memlabel_map: num_starts 82698 time spent: 0:0:2 [2.049837s total; 0.000025 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 15294 time spent: 0:0:0 [0.418102s total; 0.000027 per start]
expr_simplify_solver: num_starts 6389 time spent: 0:0:0 [0.472847s total; 0.000074 per start]
expr_simplify_syntactic: num_starts 6597 time spent: 0:0:0 [0.966797s total; 0.000147 per start]
expr_simplify_select_on_store: num_starts 314 time spent: 0:0:0 [0.874323s total; 0.002784 per start]
expr_simplify_using_lhs_set_helper: num_starts 2122 time spent: 0:0:1 [1.581107s total; 0.000745 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 12361 time spent: 0:0:1 [1.566883s total; 0.000127 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 6682 time spent: 0:0:0 [0.023943s total; 0.000004 per start]
expr_simplify_eq: num_starts 812 time spent: 0:0:0 [0.005969s total; 0.000007 per start]
expr_simplify_or: num_starts 137 time spent: 0:0:0 [0.000160s total; 0.000001 per start]
expr_simplify_and: num_starts 563 time spent: 0:0:0 [0.003180s total; 0.000006 per start]
expr_simplify_andnot1: num_starts 148 time spent: 0:0:0 [0.001753s total; 0.000012 per start]
expr_simplify_andnot2: num_starts 52 time spent: 0:0:0 [0.000748s total; 0.000014 per start]
expr_simplify_not: num_starts 161 time spent: 0:0:0 [0.000441s total; 0.000003 per start]
expr_simplify_implies: num_starts 38 time spent: 0:0:0 [0.000339s total; 0.000009 per start]
expr_simplify_ite: num_starts 14 time spent: 0:0:0 [0.001211s total; 0.000087 per start]
canonicalize_expr_tree: num_starts 1279 time spent: 0:0:0 [0.070125s total; 0.000055 per start]
expr_simplify_memalloc_using_memlabel: num_starts 185 time spent: 0:0:0 [0.000555s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 314 time spent: 0:0:0 [0.863213s total; 0.002749 per start]
get_arithmetic_addsub_atoms: num_starts 13894 time spent: 0:0:0 [0.009539s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 2556 time spent: 0:0:0 [0.024589s total; 0.000010 per start]
expr_is_consts_struct_constant: num_starts 7358 time spent: 0:0:0 [0.004278s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 101709 time spent: 0:0:1 [1.060135s total; 0.000010 per start]
expr_do_simplify_helper_cache: num_starts 101709 time spent: 0:0:0 [0.109361s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 72 time spent: 0:0:0 [0.000025s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 72 time spent: 0:0:0 [0.000354s total; 0.000005 per start]
evaluate_expr_and_check_bounds: num_starts 21456 time spent: 0:1:13 [73.564761s total; 0.003429 per start]
array_constant_equals: num_starts 88563 time spent: 0:0:0 [0.083923s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 198 time spent: 0:0:0 [0.674807s total; 0.003408 per start]
alias_val_xfer_and_meet: num_starts 198 time spent: 0:0:0 [0.378843s total; 0.001913 per start]
get_sprel_map_from_avail_exprs: num_starts 247 time spent: 0:0:0 [0.038799s total; 0.000157 per start]
update_memlabels_for_memslot_locs: num_starts 47 time spent: 0:0:0 [0.000257s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 640 time spent: 0:0:0 [0.117359s total; 0.000183 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1308 time spent: 0:0:0 [0.275287s total; 0.000210 per start]
compute_locs_definitely_written_on_edge: num_starts 640 time spent: 0:0:0 [0.000897s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 144 time spent: 0:0:0 [0.011062s total; 0.000077 per start]
edge_update_memlabel_map_for_mlvars: num_starts 320 time spent: 0:0:0 [0.075032s total; 0.000234 per start]
add_new_locs_based_on_edge: num_starts 198 time spent: 0:0:0 [0.258566s total; 0.001306 per start]
expand_locset_to_include_slots_for_memmask: num_starts 273 time spent: 0:0:0 [0.000958s total; 0.000004 per start]
total: num_starts 1 time spent: 0:2:59 [179.132605s total; 179.132605 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 150.42s.
ftmap_run_pointsto_analysis.: 0.839789s (num_starts 2; 0.4199s/start)s.
EQ Time after pointsto analysis: 149.585s.
EQ Time after pointsto analysis and smt_query: 82.603s.
EQ Time after pointsto analysis and smt_query and bv-solve: 82.0533s.
Equivalence proof found. The programs are equivalent.
