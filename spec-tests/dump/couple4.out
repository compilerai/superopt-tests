argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --disable-dst-to-src-submap
argv[2] = --smt-query-timeout=5
argv[3] = --tmpdir-path=par_tmpdir
argv[4] = --proof=couple4.proof
argv[5] = --spec-iospecs=couple4.iospecs
argv[6] = couple4.spec
argv[7] = couple4.c
Query dir: /tmp/smt-solver-tmp-files/indrajit.2888481
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/couple4.c
argv[10] = -o
argv[11] = par_tmpdir/couple4.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --xml-output-format
argv[2] = text-color
argv[3] = -f
argv[4] = ALL
argv[5] = --call-context-depth
argv[6] = 0
argv[7] = --always-use-call-context-any
argv[8] = --src-etfg
argv[9] = par_tmpdir/couple4.spec.etfg
argv[10] = par_tmpdir/couple4.c.bc
argv[11] = -o
argv[12] = par_tmpdir/couple4.c.dst.etfg
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 242 time spent: 0:0:0 [0.000518s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 278 time spent: 0:0:0 [0.000486s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 3374 time spent: 0:0:0 [0.020776s total; 0.000006 per start]
expr_simplify_solver: num_starts 191 time spent: 0:0:0 [0.027181s total; 0.000142 per start]
expr_simplify_syntactic: num_starts 191 time spent: 0:0:0 [0.048261s total; 0.000253 per start]
expr_simplify_select_on_store: num_starts 16 time spent: 0:0:0 [0.043073s total; 0.002692 per start]
expr_simplify_using_lhs_set_helper: num_starts 182 time spent: 0:0:0 [0.081844s total; 0.000450 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 568 time spent: 0:0:0 [0.081258s total; 0.000143 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 180 time spent: 0:0:0 [0.000813s total; 0.000005 per start]
expr_simplify_eq: num_starts 12 time spent: 0:0:0 [0.000158s total; 0.000013 per start]
expr_simplify_not: num_starts 6 time spent: 0:0:0 [0.000020s total; 0.000003 per start]
expr_simplify_ite: num_starts 4 time spent: 0:0:0 [0.000561s total; 0.000140 per start]
canonicalize_expr_tree: num_starts 116 time spent: 0:0:0 [0.002133s total; 0.000018 per start]
expr_simplify_memalloc_using_memlabel: num_starts 9 time spent: 0:0:0 [0.000032s total; 0.000004 per start]
expr_simplify_select_on_store_visit_function: num_starts 16 time spent: 0:0:0 [0.042484s total; 0.002655 per start]
get_arithmetic_addsub_atoms: num_starts 136 time spent: 0:0:0 [0.000152s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 351 time spent: 0:0:0 [0.005284s total; 0.000015 per start]
expr_is_consts_struct_constant: num_starts 9813 time spent: 0:0:0 [0.005980s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 7423 time spent: 0:0:0 [0.089472s total; 0.000012 per start]
expr_do_simplify_helper_cache: num_starts 7423 time spent: 0:0:0 [0.005961s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000011s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000198s total; 0.000005 per start]
array_constant_equals: num_starts 35 time spent: 0:0:0 [0.000083s total; 0.000002 per start]
combo_dfa_xfer_and_meet: num_starts 305 time spent: 0:0:0 [0.675708s total; 0.002215 per start]
alias_val_xfer_and_meet: num_starts 305 time spent: 0:0:0 [0.112252s total; 0.000368 per start]
get_sprel_map_from_avail_exprs: num_starts 367 time spent: 0:0:0 [0.080991s total; 0.000221 per start]
update_memlabels_for_memslot_locs: num_starts 61 time spent: 0:0:0 [0.000426s total; 0.000007 per start]
populate_gen_and_kill_sets_for_edge: num_starts 610 time spent: 0:0:0 [0.042234s total; 0.000069 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1527 time spent: 0:0:0 [0.139417s total; 0.000091 per start]
compute_locs_definitely_written_on_edge: num_starts 610 time spent: 0:0:0 [0.000294s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 148 time spent: 0:0:0 [0.012130s total; 0.000082 per start]
edge_update_memlabel_map_for_mlvars: num_starts 305 time spent: 0:0:0 [0.005430s total; 0.000018 per start]
add_new_locs_based_on_edge: num_starts 305 time spent: 0:0:0 [0.070947s total; 0.000233 per start]
expand_locset_to_include_slots_for_memmask: num_starts 201 time spent: 0:0:0 [0.000964s total; 0.000005 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 8e-06s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 3.6e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 3.7e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 3.8e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 4.5e-05s (num_starts 1; 0.0000s/start)
get_lr_status_for_loc_ids.: 5.1e-05s (num_starts 12; 0.0000s/start)
add_assumes_to_start_edge.: 5.6e-05s (num_starts 1; 0.0001s/start)
main.3.: 9.1e-05s (num_starts 1; 0.0001s/start)
lr_status_meet.: 0.000113s (num_starts 158; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000115s (num_starts 6; 0.0000s/start)
expr_is_hidden_reg.: 0.000151s (num_starts 181; 0.0000s/start)
expr_is_callee_save_const.: 0.0002s (num_starts 185; 0.0000s/start)
compute_sprel_relations.: 0.000251s (num_starts 1; 0.0003s/start)
propagate_sprels.: 0.000257s (num_starts 1; 0.0003s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000282s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000337s (num_starts 430; 0.0000s/start)
graph_locs_add_all_specvars.: 0.000354s (num_starts 1; 0.0004s/start)
populate_locid2expr_map.: 0.000446s (num_starts 2; 0.0002s/start)
graph_locs_add_exvregs_for_edge.: 0.000448s (num_starts 102; 0.0000s/start)
graph_locs_add_local_vars_for_edge.: 0.000516s (num_starts 102; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.00052s (num_starts 1; 0.0005s/start)
graph_locs_add_all_local_vars.: 0.00059s (num_starts 1; 0.0006s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000661s (num_starts 62; 0.0000s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000706s (num_starts 12; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000799s (num_starts 2; 0.0004s/start)
expr_represents_llvm_undef.: 0.001216s (num_starts 187; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.001397s (num_starts 1; 0.0014s/start)
canonicalize_llvm_nextpcs.: 0.001893s (num_starts 1; 0.0019s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.001929s (num_starts 305; 0.0000s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.002117s (num_starts 1; 0.0021s/start)
populate_simplified_to_state.: 0.0022s (num_starts 3; 0.0007s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.002312s (num_starts 1; 0.0023s/start)
def_analysis::xfer_and_meet.: 0.00253s (num_starts 232; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.003178s (num_starts 278; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.003731s (num_starts 6491; 0.0000s/start)
graph_with_locs_constructor.src.spec.foo.: 0.003792s (num_starts 1; 0.0038s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.00385s (num_starts 1; 0.0039s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.003915s (num_starts 1; 0.0039s/start)
expr_linear_relation_holds::visit.var.: 0.004199s (num_starts 187; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.004232s (num_starts 305; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.004422s (num_starts 1; 0.0044s/start)
populate_exit_return_values_for_llvm_method.: 0.004582s (num_starts 1; 0.0046s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.005062s (num_starts 305; 0.0000s/start)
query:convert_from_z3.: 0.005071s (num_starts 111; 0.0000s/start)
compute_z3_expr.: 0.005079s (num_starts 111; 0.0000s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.007649s (num_starts 1; 0.0076s/start)
graph_visit_exprs.: 0.008381s (num_starts 4; 0.0021s/start)
expr_substitute_using_available_exprs_submap.: 0.009878s (num_starts 191; 0.0001s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.010019s (num_starts 1; 0.0100s/start)
query:convert_to_z3.: 0.010092s (num_starts 111; 0.0001s/start)
compute_lr_status_for_expr.: 0.010793s (num_starts 176; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.011066s (num_starts 158; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.011352s (num_starts 158; 0.0001s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.012197s (num_starts 1; 0.0122s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.013798s (num_starts 1; 0.0138s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.013802s (num_starts 1; 0.0138s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.013808s (num_starts 1; 0.0138s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.013814s (num_starts 1; 0.0138s/start)
tfg_constructor.src.spec.foo.: 0.013819s (num_starts 1; 0.0138s/start)
populate_simplified_assets.: 0.013961s (num_starts 6; 0.0023s/start)
populate_transitive_closure.: 0.015883s (num_starts 1; 0.0159s/start)
create_closure_matrix.: 0.018379s (num_starts 366; 0.0001s/start)
graph_to_stream.: 0.018507s (num_starts 1; 0.0185s/start)
populate_dominator_and_postdominator_relations.: 0.019008s (num_starts 2; 0.0095s/start)
query:simplify-z3.: 0.019694s (num_starts 227; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.025708s (num_starts 2; 0.0129s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.026006s (num_starts 261; 0.0001s/start)
tfg::populate_loc_definedness.before_initialize.: 0.026542s (num_starts 2; 0.0133s/start)
graph_identify_back_edges.: 0.027191s (num_starts 5; 0.0054s/start)
tfg::populate_loc_definedness.: 0.02731s (num_starts 2; 0.0137s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.027426s (num_starts 3374; 0.0000s/start)
graph_identify_natural_loops.: 0.028736s (num_starts 5; 0.0057s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.031823s (num_starts 9505; 0.0000s/start)
compute_new_lr_status_on_locs.: 0.032853s (num_starts 305; 0.0001s/start)
populate_branch_affecting_locs.: 0.033219s (num_starts 2; 0.0166s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.036312s (num_starts 305; 0.0001s/start)
populate_locs_potentially_modified_on_edge.: 0.036823s (num_starts 3; 0.0123s/start)
find_dominators.: 0.044095s (num_starts 9; 0.0049s/start)
compute_regions.: 0.044813s (num_starts 5; 0.0090s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.050533s (num_starts 1; 0.0505s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.050805s (num_starts 3; 0.0169s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.05096s (num_starts 1; 0.0510s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.051979s (num_starts 1; 0.0520s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.059158s (num_starts 334; 0.0002s/start)
tfg_preprocess.dst.llvm.foo.: 0.066007s (num_starts 1; 0.0660s/start)
tfg::tfg_preprocess.: 0.066011s (num_starts 1; 0.0660s/start)
create_sp_version_relations_lattice_at_pc.: 0.07342s (num_starts 366; 0.0002s/start)
get_tfg.: 0.080313s (num_starts 1; 0.0803s/start)
get_function_tfg_map.foo.: 0.080364s (num_starts 1; 0.0804s/start)
get_function_tfg_map.: 0.080367s (num_starts 1; 0.0804s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.082038s (num_starts 182; 0.0005s/start)
populate_loc_liveness.: 0.096061s (num_starts 2; 0.0480s/start)
main.2.: 0.108714s (num_starts 1; 0.1087s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.112418s (num_starts 3374; 0.0000s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.112808s (num_starts 305; 0.0004s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.1168s (num_starts 3374; 0.0000s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.119251s (num_starts 305; 0.0004s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.14266s (num_starts 3374; 0.0000s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.218088s (num_starts 305; 0.0007s/start)
tfg_postprocess_after_pointsto_analysis.: 0.249036s (num_starts 1; 0.2490s/start)
avail_exprs_create_submap.: 0.318725s (num_starts 915; 0.0003s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.331644s (num_starts 1; 0.3316s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.363578s (num_starts 305; 0.0012s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.676098s (num_starts 305; 0.0022s/start)
ftmap_run_pointsto_analysis.: 1.08434s (num_starts 1; 1.0843s/start)
parse_consts_db.: 6.81991s (num_starts 1; 6.8199s/start)
main.: 8.18181s (num_starts 1; 8.1818s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:08 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:14 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:22 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:23 : Reading in SPEC-LLVM I/O specification from file couple4.iospecs...</MSG>
<MSG>0:23 : Computing equivalence for function: foo...</MSG>
<MSG>0:23 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:23 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:24 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:24 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:24 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
<MSG>0:25 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Attempting correlation of src pathset L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Attempting correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Considering 1 paths to src pc L3%17%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Attempting correlation of src pathset L0%0%d=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Found 1 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Considering 1 paths to src pc L3%20%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Attempting correlation of src pathset L0%0%d=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : Found 1 feasible correlations for paths to src pc L3%20%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : product-TFG foo: Found 4 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:25 : product-TFG foo created 4 possibilities in group foo.A...</MSG>
<MSG>0:25 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:25 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:25 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:25 : Creating ssa-path for the src-tfg path L0%0%d --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:25 : Adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:25 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:25 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:25 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : foo.A1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : foo.A1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : foo.A1: Adding node L3%7%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:25 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : foo.A1: Adding edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:25 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:25 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:25 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:25 : foo.A1: Added the 2 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:25 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:25 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:25 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : Done adding a CG edge composition using the src path L0%0%d --> L3%7%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:25 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:25 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:25 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:25 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:25 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:25 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:25 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:25 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:25 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:25 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:25 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht17-prove_trivial4-prove13...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:27 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:29 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:33 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:33 : foo.A1 (d:1, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:33 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:33 : Chosen product-TFG foo.A1 will be explored later...</MSG>
<MSG>0:33 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 4...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L0%0%d --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Adding node L3%10%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A2: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140277 : 1 { 0x1 } : BOOL                          : true
167919 : not(140277) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140274 : input.spec-%var-n-2 : BV:32               : 0
140677 : bvuge(140278, 140274) : BOOL              : true
167896 : not(140677) : BOOL                        : false
167920 : or(167919, 167896) : BOOL                 : false

ce =
=counter_example_begin z3.ce4 68288924d1b399cb8e2a9cb44dea12
=input.spec-%var-x-2
1 : Lambda296Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda297Var : BV:32
11 : Lambda298Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda299Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1059788587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1059788588; 1059788591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1059788592; 3005945539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3005945540; 3005945543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3005945544; 3422552071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3422552072; 3422552075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3422552076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda330Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda331Var : BV:32
11 : Lambda332Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda333Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda313Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314Var : BV:32
11 : Lambda315Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda316Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3422552075 { 0xcc00000b -872415221 -1.131e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3005945543 { 0xb32b16c7 -1289021753 -1.33663260e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059788591 { 0x3f2b172f +1.33664500e255 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2249326309
=counter_example_end


failcond-expr = or(not(true), not(bvuge(0, input.spec-%var-n-2))):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : input.spec-%var-n-2 : BV:32
5 : bvuge(3, 4) : BOOL
6 : not(5) : BOOL
7 : or(2, 6) : BOOL
</MSG>
<MSG>0:33 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:33 : Failed correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140277 : 1 { 0x1 } : BOOL                          : true
167919 : not(140277) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140274 : input.spec-%var-n-2 : BV:32               : 0
140677 : bvuge(140278, 140274) : BOOL              : true
167896 : not(140677) : BOOL                        : false
167920 : or(167919, 167896) : BOOL                 : false

ce =
=counter_example_begin z3.ce4 68288924d1b399cb8e2a9cb44dea12
=input.spec-%var-x-2
1 : Lambda296Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda297Var : BV:32
11 : Lambda298Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda299Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1059788587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1059788588; 1059788591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1059788592; 3005945539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3005945540; 3005945543 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3005945544; 3422552071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3422552072; 3422552075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3422552076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda330Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda331Var : BV:32
11 : Lambda332Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda333Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda313Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314Var : BV:32
11 : Lambda315Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda316Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3422552072 { 0xcc000008 -872415224 -1.95e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3422552075 { 0xcc00000b -872415221 -1.131e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3005945540 { 0xb32b16c4 -1289021756 -1.33663225e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3005945543 { 0xb32b16c7 -1289021753 -1.33663260e231 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1059788588 { 0x3f2b172c +1.33664464e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1059788591 { 0x3f2b172f +1.33664500e255 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2249326309
=counter_example_end


</MSG>
<MSG>0:33 : Discovered that the correlation was useless for the product-TFG foo.A2 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:33 : Chose (after CE propagation) product-TFG foo.A1 (d:1, s:0, sp: 5) from a frontier of size 1...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:33 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:33 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:33 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:33 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:33 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 9 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht9-prove_trivial4-prove5...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 5 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:33 : foo.A1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:33 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:33 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:33 : foo.A1 (d:1, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:33 : foo.A1 (d:1, s:0, sp: 5): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:33 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Considering 2 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Found 2 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Considering 1 paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Found 1 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Considering 1 paths to src pc L3%20%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Found 1 feasible correlations for paths to src pc L3%20%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : product-TFG foo.A1: Found 5 correlations for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : product-TFG foo.A1 created 5 possibilities in group foo.A1.B...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A1.B3 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Adding node L3%10%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A1.B3: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A1.B3: Propagated 7 out of 14 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : foo.A1.B3: Added the 7 propagated CEs at PC L3%10%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:33 : foo.A1.B3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A1.B3: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A1.B3: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B3: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A1.B3 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%10%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Added correlation to the product-TFG foo.A1.B3 (d:2, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A1.B4 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%17%bbentry ending at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Computing loop hoisting select expressions at toPC L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Computing loop hoisting non-linear expressions at toPC L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Adding node L3%17%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:33 : foo.A1.B4: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:33 : foo.A1.B4: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B4: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A1.B4: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A1.B4: Propagated 7 out of 14 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : foo.A1.B4: Added the 7 propagated CEs at PC L3%17%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:34 : foo.A1.B4: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:34 : foo.A1.B4: Finished executing CG's add edge function...</MSG>
<MSG>0:34 : foo.A1.B4: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B4: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : Done adding new edge to the product-TFG foo.A1.B4 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%17%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : Added correlation to the product-TFG foo.A1.B4 (d:2, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:34 : Chose (for CE propagation) product-TFG foo.A1.B5 (d:1, s:0, sp: 5) from a frontier of size 5...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:34 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B5...</MSG>
<MSG>0:34 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B5...</MSG>
<MSG>0:34 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%20%bbentry ending at L3%20%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:34 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:34 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : Adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%20%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B5: Computing loop hoisting select expressions at toPC L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B5: Computing loop hoisting non-linear expressions at toPC L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B5: Adding node L3%20%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:34 : foo.A1.B5: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B5: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B5: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B5: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:34 : foo.A1.B5: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:34 : foo.A1.B5: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:34 : foo.A1.B5: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%20%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%n : BV:32                 : 2097152
140869 : bvult(140859, 140426) : BOOL              : true
141215 : not(140869) : BOOL                        : false
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2097152
140616 : bvuge(140614, 140615) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
169321 : bvuge(140278, 140633) : BOOL              : true
169325 : not(169321) : BOOL                        : false
169340 : andnot1(140616, 169325) : BOOL            : false
169342 : or(141215, 169340) : BOOL                 : false

ce =
=counter_example_begin z3.ce462 3f3a9c52463acfaed61356f327a939ea
=input.spec-%var-x-2
1 : Lambda6604Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6605Var : BV:32
18 : Lambda6606Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6607Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 128 ] -> 68, [ 129; 129 ] -> 221, [ 130; 130 ] -> 239, [ 131; 131 ] -> 211, [ 132; 4294967295 ] -> 68, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 453290851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 453290852; 453290855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 453290856; 2977759231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2977759232; 2977759235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2977759236; 3276112863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3276112864; 3276112867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3276112868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.llvm-%x
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda6634Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6635Var : BV:32
18 : Lambda6636Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6637Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda6619Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6620Var : BV:32
18 : Lambda6621Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6622Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2977759235 { 0xb17d0003 -1317208061 -1.97656285e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 453290855 { 0x1b04ab67 +1.3648078e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3276112867 { 0xc34583e3 -1018854429 -1.54308736e7 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda6457Var : BV:32
2 : Lambda6458Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda6461Var : BV:32
2 : Lambda6462Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda6466Var : BV:32
2 : Lambda6467Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2333715544
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), not(bvuge(0, input.spec-%var-m-1.L3%7%bbentry)))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : not(10) : BOOL
12 : andnot1(7, 11) : BOOL
13 : or(4, 12) : BOOL
</MSG>
<MSG>0:34 : foo.A1.B5: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:34 : foo.A1.B5: Finished executing CG's add edge function...</MSG>
<MSG>0:34 : foo.A1.B5: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B5: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%20%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : Done adding new edge to the product-TFG foo.A1.B5 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%20%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%20%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : Failed correlation of src pathset L3%7%bbentry=>L3%20%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%20%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%n : BV:32                 : 2097152
140869 : bvult(140859, 140426) : BOOL              : true
141215 : not(140869) : BOOL                        : false
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2097152
140616 : bvuge(140614, 140615) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 0
169321 : bvuge(140278, 140633) : BOOL              : true
169325 : not(169321) : BOOL                        : false
169340 : andnot1(140616, 169325) : BOOL            : false
169342 : or(141215, 169340) : BOOL                 : false

ce =
=counter_example_begin z3.ce462 3f3a9c52463acfaed61356f327a939ea
=input.spec-%var-x-2
1 : Lambda6604Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6605Var : BV:32
18 : Lambda6606Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6607Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 128 ] -> 68, [ 129; 129 ] -> 221, [ 130; 130 ] -> 239, [ 131; 131 ] -> 211, [ 132; 4294967295 ] -> 68, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 453290851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 453290852; 453290855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 453290856; 2977759231 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2977759232; 2977759235 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2977759236; 3276112863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3276112864; 3276112867 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3276112868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.llvm-%n
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.llvm-%x
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda6634Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6635Var : BV:32
18 : Lambda6636Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6637Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda6619Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2097151 { 0x1fffff +1.24999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6620Var : BV:32
18 : Lambda6621Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda6622Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 131 { 0x83 +1.1561e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 24) : BOOL
28 : 211 { 0xd3 -45 } : BV:8
29 : 130 { 0x82 +1.1549e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 239 { 0xef -17 } : BV:8
32 : 129 { 0x81 +1.1537e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 221 { 0xdd -35 } : BV:8
35 : 68 { 0x44 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : 128 { 0x80 +1.1525e129 } : BV:32
54 : bvadd(53, 25) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 29) : BOOL
57 : eq(54, 32) : BOOL
58 : ite(57, 34, 35) : BV:8
59 : ite(56, 31, 58) : BV:8
60 : ite(55, 28, 59) : BV:8
61 : bvconcat(38, 45, 52, 60) : BV:32
62 : bvadd(21, 23, 61) : BV:32
63 : eq(62, 24) : BOOL
64 : eq(62, 29) : BOOL
65 : eq(62, 32) : BOOL
66 : ite(65, 34, 35) : BV:8
67 : ite(64, 31, 66) : BV:8
68 : ite(63, 28, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 23, 61) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 29) : BOOL
73 : eq(70, 32) : BOOL
74 : ite(73, 34, 35) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 61) : BV:32
79 : eq(78, 24) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : ite(81, 34, 35) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 28, 83) : BV:8
85 : bvadd(23, 61) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 29) : BOOL
88 : eq(85, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : bvconcat(68, 76, 84, 91) : BV:32
93 : lambda(20, 92) : FUNCTION[BV:32 -> BV:32]
94 : map(19, 93) : MAP[BV:32 -> BV:32]
95 : lambda(17, 94) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
96 : map(16, 95) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
97 : sym_const(96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2977759232 { 0xb17d0000 -1317208064 -1.97656250e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2977759235 { 0xb17d0003 -1317208061 -1.97656285e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 453290852 { 0x1b04ab64 +1.3648042e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 453290855 { 0x1b04ab67 +1.3648078e183 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3276112864 { 0xc34583e0 -1018854432 -1.54308700e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3276112867 { 0xc34583e3 -1018854429 -1.54308736e7 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda6457Var : BV:32
2 : Lambda6458Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda6461Var : BV:32
2 : Lambda6462Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2097151 ] -> true, [ 2097152; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda6466Var : BV:32
2 : Lambda6467Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 131 { 0x83 +1.1561e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 6) : BOOL
10 : 211 { 0xd3 -45 } : BV:8
11 : 130 { 0x82 +1.1549e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 239 { 0xef -17 } : BV:8
14 : 129 { 0x81 +1.1537e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 221 { 0xdd -35 } : BV:8
17 : 68 { 0x44 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 6) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 6) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : 128 { 0x80 +1.1525e129 } : BV:32
36 : bvadd(35, 7) : BV:32
37 : eq(36, 6) : BOOL
38 : eq(36, 11) : BOOL
39 : eq(36, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 27, 34, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 6) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 5, 43) : BV:32
53 : eq(52, 6) : BOOL
54 : eq(52, 11) : BOOL
55 : eq(52, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : ite(53, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 5, 43) : BV:32
61 : eq(60, 6) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : ite(63, 16, 17) : BV:8
65 : ite(62, 13, 64) : BV:8
66 : ite(61, 10, 65) : BV:8
67 : bvadd(5, 43) : BV:32
68 : eq(67, 6) : BOOL
69 : eq(67, 11) : BOOL
70 : eq(67, 14) : BOOL
71 : ite(70, 16, 17) : BV:8
72 : ite(69, 13, 71) : BV:8
73 : ite(68, 10, 72) : BV:8
74 : bvconcat(50, 58, 66, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2333715544
=counter_example_end


</MSG>
<MSG>0:34 : Discovered that the correlation was useless for the product-TFG foo.A1.B5 (d:1, s:0, sp: 5)...</MSG>
<MSG>0:34 : Chose (for CE propagation) product-TFG foo.A1.B2 (d:1, s:0, sp: 5) from a frontier of size 4...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:34 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B2...</MSG>
<MSG>0:34 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B2...</MSG>
<MSG>0:34 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:34 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:34 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : Adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B2: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B2: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B2: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:34 : foo.A1.B2: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B2: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B2: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:34 : foo.A1.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:34 : foo.A1.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:34 : foo.A1.B2: marking unstable at L3%7%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%n : BV:32                 : 2147483648
140869 : bvult(140859, 140426) : BOOL              : true
141215 : not(140869) : BOOL                        : false
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
140616 : bvuge(140614, 140615) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2155905028
169321 : bvuge(140278, 140633) : BOOL              : false
169349 : andnot1(140616, 169321) : BOOL            : false
169351 : or(141215, 169349) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce255 b357532e2022f3b8942fac03553a264
=input.spec-%var-x-2
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 5 ] -> 0, [ 6; 8199 ] -> 128, [ 8200; 8203 ] -> 0, [ 8204; 2101251 ] -> 128, [ 2101252; 2101254 ] -> 0, [ 2101255; 8407039 ] -> 128, [ 8407040; 8407040 ] -> 4, [ 8407041; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8200; 8203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8204; 2101251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2101252; 2101255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2101256; 8407039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8407040; 8407043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8407044; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.llvm-%m
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda4015Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4016Var : BV:32
18 : Lambda4017Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4018Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : ite(55, 2, 309) : BV:32
311 : lambda(52, 310) : FUNCTION[BV:32 -> BV:32]
312 : map(51, 311) : MAP[BV:32 -> BV:32]
313 : lambda(17, 312) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
314 : map(16, 313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
315 : sym_const(314) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2101255 { 0x201007 +1.25048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8203 { 0x200b +1.97787e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8407043 { 0x804803 +1.219762e130 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda3919Var : BV:32
2 : Lambda3920Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : lambda(1, 2, 260) : FUNCTION[BV:32,BV:32 -> BV:32]
262 : sym_const(261) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda3921Var : BV:32
2 : Lambda3922Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda3923Var : BV:32
2 : Lambda3924Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda3928Var : BV:32
2 : Lambda3929Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda3933Var : BV:32
2 : Lambda3934Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda3935Var : BV:32
2 : Lambda3936Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2729452928
=counter_example_end


failcond-expr = or(not(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)), andnot1(bvuge(input.spec-%var-i-1.L3%7%bbentry, input.spec-%var-n-1.L3%7%bbentry), bvuge(0, input.spec-%var-m-1.L3%7%bbentry))):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : input.spec-%var-n-1.L3%7%bbentry : BV:32
7 : bvuge(5, 6) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : input.spec-%var-m-1.L3%7%bbentry : BV:32
10 : bvuge(8, 9) : BOOL
11 : andnot1(7, 10) : BOOL
12 : or(4, 11) : BOOL
</MSG>
<MSG>0:34 : foo.A1.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:34 : foo.A1.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:34 : foo.A1.B2: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B2: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : Done adding new edge to the product-TFG foo.A1.B2 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : Failed correlation of src pathset L3%7%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry: failcond = wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%7%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 0
140426 : input.dst.llvm-%n : BV:32                 : 2147483648
140869 : bvult(140859, 140426) : BOOL              : true
141215 : not(140869) : BOOL                        : false
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 0
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2147483648
140616 : bvuge(140614, 140615) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 2155905028
169321 : bvuge(140278, 140633) : BOOL              : false
169349 : andnot1(140616, 169321) : BOOL            : false
169351 : or(141215, 169349) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce255 b357532e2022f3b8942fac03553a264
=input.spec-%var-x-2
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-2
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 2, [ 1; 5 ] -> 0, [ 6; 8199 ] -> 128, [ 8200; 8203 ] -> 0, [ 8204; 2101251 ] -> 128, [ 2101252; 2101254 ] -> 0, [ 2101255; 8407039 ] -> 128, [ 8407040; 8407040 ] -> 4, [ 8407041; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 8199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8200; 8203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8204; 2101251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2101252; 2101255 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2101256; 8407039 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8407040; 8407043 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8407044; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.llvm-%m
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda4002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4003Var : BV:32
18 : Lambda4004Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4005Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda4015Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4016Var : BV:32
18 : Lambda4017Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda4018Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 8200 { 0x2008 +1.97751e129 } : BV:32
65 : eq(60, 64) : BOOL
66 : 5 { 0x5 +1.59e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 8201 { 0x2009 +1.97763e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 8203 { 0x200b +1.97787e129 } : BV:32
75 : eq(60, 74) : BOOL
76 : 8202 { 0x200a +1.97775e129 } : BV:32
77 : eq(60, 76) : BOOL
78 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
79 : eq(60, 78) : BOOL
80 : eq(60, 2) : BOOL
81 : 2 { 0x2 } : BV:8
82 : eq(60, 56) : BOOL
83 : 8407040 { 0x804800 +1.219726e130 } : BV:32
84 : eq(60, 83) : BOOL
85 : 4 { 0x4 } : BV:8
86 : eq(60, 57) : BOOL
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(60, 87) : BOOL
89 : 128 { 0x80 -128 } : BV:8
90 : ite(88, 63, 89) : BV:8
91 : ite(86, 63, 90) : BV:8
92 : ite(84, 85, 91) : BV:8
93 : ite(82, 63, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : ite(79, 63, 94) : BV:8
96 : ite(77, 63, 95) : BV:8
97 : ite(75, 63, 96) : BV:8
98 : ite(73, 63, 97) : BV:8
99 : ite(71, 63, 98) : BV:8
100 : ite(69, 63, 99) : BV:8
101 : ite(67, 63, 100) : BV:8
102 : ite(65, 63, 101) : BV:8
103 : ite(62, 63, 102) : BV:8
104 : bvadd(87, 59, 2) : BV:32
105 : eq(104, 61) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 66) : BOOL
108 : eq(104, 68) : BOOL
109 : eq(104, 70) : BOOL
110 : eq(104, 72) : BOOL
111 : eq(104, 74) : BOOL
112 : eq(104, 76) : BOOL
113 : eq(104, 78) : BOOL
114 : eq(104, 2) : BOOL
115 : eq(104, 56) : BOOL
116 : eq(104, 83) : BOOL
117 : eq(104, 57) : BOOL
118 : eq(104, 87) : BOOL
119 : ite(118, 63, 89) : BV:8
120 : ite(117, 63, 119) : BV:8
121 : ite(116, 85, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : ite(114, 81, 122) : BV:8
124 : ite(113, 63, 123) : BV:8
125 : ite(112, 63, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : ite(110, 63, 126) : BV:8
128 : ite(109, 63, 127) : BV:8
129 : ite(108, 63, 128) : BV:8
130 : ite(107, 63, 129) : BV:8
131 : ite(106, 63, 130) : BV:8
132 : ite(105, 63, 131) : BV:8
133 : bvadd(72, 59, 2) : BV:32
134 : eq(133, 61) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 66) : BOOL
137 : eq(133, 68) : BOOL
138 : eq(133, 70) : BOOL
139 : eq(133, 72) : BOOL
140 : eq(133, 74) : BOOL
141 : eq(133, 76) : BOOL
142 : eq(133, 78) : BOOL
143 : eq(133, 2) : BOOL
144 : eq(133, 56) : BOOL
145 : eq(133, 83) : BOOL
146 : eq(133, 57) : BOOL
147 : eq(133, 87) : BOOL
148 : ite(147, 63, 89) : BV:8
149 : ite(146, 63, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 63, 150) : BV:8
152 : ite(143, 81, 151) : BV:8
153 : ite(142, 63, 152) : BV:8
154 : ite(141, 63, 153) : BV:8
155 : ite(140, 63, 154) : BV:8
156 : ite(139, 63, 155) : BV:8
157 : ite(138, 63, 156) : BV:8
158 : ite(137, 63, 157) : BV:8
159 : ite(136, 63, 158) : BV:8
160 : ite(135, 63, 159) : BV:8
161 : ite(134, 63, 160) : BV:8
162 : bvadd(59, 2) : BV:32
163 : eq(162, 61) : BOOL
164 : eq(162, 64) : BOOL
165 : eq(162, 66) : BOOL
166 : eq(162, 68) : BOOL
167 : eq(162, 70) : BOOL
168 : eq(162, 72) : BOOL
169 : eq(162, 74) : BOOL
170 : eq(162, 76) : BOOL
171 : eq(162, 78) : BOOL
172 : eq(162, 2) : BOOL
173 : eq(162, 56) : BOOL
174 : eq(162, 83) : BOOL
175 : eq(162, 57) : BOOL
176 : eq(162, 87) : BOOL
177 : ite(176, 63, 89) : BV:8
178 : ite(175, 63, 177) : BV:8
179 : ite(174, 85, 178) : BV:8
180 : ite(173, 63, 179) : BV:8
181 : ite(172, 81, 180) : BV:8
182 : ite(171, 63, 181) : BV:8
183 : ite(170, 63, 182) : BV:8
184 : ite(169, 63, 183) : BV:8
185 : ite(168, 63, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : ite(166, 63, 186) : BV:8
188 : ite(165, 63, 187) : BV:8
189 : ite(164, 63, 188) : BV:8
190 : ite(163, 63, 189) : BV:8
191 : bvconcat(103, 132, 161, 190) : BV:32
192 : bvadd(56, 58, 191) : BV:32
193 : eq(192, 61) : BOOL
194 : eq(192, 64) : BOOL
195 : eq(192, 66) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 70) : BOOL
198 : eq(192, 72) : BOOL
199 : eq(192, 74) : BOOL
200 : eq(192, 76) : BOOL
201 : eq(192, 78) : BOOL
202 : eq(192, 2) : BOOL
203 : eq(192, 56) : BOOL
204 : eq(192, 83) : BOOL
205 : eq(192, 57) : BOOL
206 : eq(192, 87) : BOOL
207 : ite(206, 63, 89) : BV:8
208 : ite(205, 63, 207) : BV:8
209 : ite(204, 85, 208) : BV:8
210 : ite(203, 63, 209) : BV:8
211 : ite(202, 81, 210) : BV:8
212 : ite(201, 63, 211) : BV:8
213 : ite(200, 63, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : ite(198, 63, 214) : BV:8
216 : ite(197, 63, 215) : BV:8
217 : ite(196, 63, 216) : BV:8
218 : ite(195, 63, 217) : BV:8
219 : ite(194, 63, 218) : BV:8
220 : ite(193, 63, 219) : BV:8
221 : bvadd(87, 58, 191) : BV:32
222 : eq(221, 61) : BOOL
223 : eq(221, 64) : BOOL
224 : eq(221, 66) : BOOL
225 : eq(221, 68) : BOOL
226 : eq(221, 70) : BOOL
227 : eq(221, 72) : BOOL
228 : eq(221, 74) : BOOL
229 : eq(221, 76) : BOOL
230 : eq(221, 78) : BOOL
231 : eq(221, 2) : BOOL
232 : eq(221, 56) : BOOL
233 : eq(221, 83) : BOOL
234 : eq(221, 57) : BOOL
235 : eq(221, 87) : BOOL
236 : ite(235, 63, 89) : BV:8
237 : ite(234, 63, 236) : BV:8
238 : ite(233, 85, 237) : BV:8
239 : ite(232, 63, 238) : BV:8
240 : ite(231, 81, 239) : BV:8
241 : ite(230, 63, 240) : BV:8
242 : ite(229, 63, 241) : BV:8
243 : ite(228, 63, 242) : BV:8
244 : ite(227, 63, 243) : BV:8
245 : ite(226, 63, 244) : BV:8
246 : ite(225, 63, 245) : BV:8
247 : ite(224, 63, 246) : BV:8
248 : ite(223, 63, 247) : BV:8
249 : ite(222, 63, 248) : BV:8
250 : bvadd(72, 58, 191) : BV:32
251 : eq(250, 61) : BOOL
252 : eq(250, 64) : BOOL
253 : eq(250, 66) : BOOL
254 : eq(250, 68) : BOOL
255 : eq(250, 70) : BOOL
256 : eq(250, 72) : BOOL
257 : eq(250, 74) : BOOL
258 : eq(250, 76) : BOOL
259 : eq(250, 78) : BOOL
260 : eq(250, 2) : BOOL
261 : eq(250, 56) : BOOL
262 : eq(250, 83) : BOOL
263 : eq(250, 57) : BOOL
264 : eq(250, 87) : BOOL
265 : ite(264, 63, 89) : BV:8
266 : ite(263, 63, 265) : BV:8
267 : ite(262, 85, 266) : BV:8
268 : ite(261, 63, 267) : BV:8
269 : ite(260, 81, 268) : BV:8
270 : ite(259, 63, 269) : BV:8
271 : ite(258, 63, 270) : BV:8
272 : ite(257, 63, 271) : BV:8
273 : ite(256, 63, 272) : BV:8
274 : ite(255, 63, 273) : BV:8
275 : ite(254, 63, 274) : BV:8
276 : ite(253, 63, 275) : BV:8
277 : ite(252, 63, 276) : BV:8
278 : ite(251, 63, 277) : BV:8
279 : bvadd(58, 191) : BV:32
280 : eq(279, 61) : BOOL
281 : eq(279, 64) : BOOL
282 : eq(279, 66) : BOOL
283 : eq(279, 68) : BOOL
284 : eq(279, 70) : BOOL
285 : eq(279, 72) : BOOL
286 : eq(279, 74) : BOOL
287 : eq(279, 76) : BOOL
288 : eq(279, 78) : BOOL
289 : eq(279, 2) : BOOL
290 : eq(279, 56) : BOOL
291 : eq(279, 83) : BOOL
292 : eq(279, 57) : BOOL
293 : eq(279, 87) : BOOL
294 : ite(293, 63, 89) : BV:8
295 : ite(292, 63, 294) : BV:8
296 : ite(291, 85, 295) : BV:8
297 : ite(290, 63, 296) : BV:8
298 : ite(289, 81, 297) : BV:8
299 : ite(288, 63, 298) : BV:8
300 : ite(287, 63, 299) : BV:8
301 : ite(286, 63, 300) : BV:8
302 : ite(285, 63, 301) : BV:8
303 : ite(284, 63, 302) : BV:8
304 : ite(283, 63, 303) : BV:8
305 : ite(282, 63, 304) : BV:8
306 : ite(281, 63, 305) : BV:8
307 : ite(280, 63, 306) : BV:8
308 : bvconcat(220, 249, 278, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : ite(55, 2, 309) : BV:32
311 : lambda(52, 310) : FUNCTION[BV:32 -> BV:32]
312 : map(51, 311) : MAP[BV:32 -> BV:32]
313 : lambda(17, 312) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
314 : map(16, 313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
315 : sym_const(314) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 894405296 { 0x354f8ab0 +1.62141990e235 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2101255 { 0x201007 +1.25048911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8200 { 0x2008 +1.97751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 8203 { 0x200b +1.97787e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8407040 { 0x804800 +1.219726e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8407043 { 0x804803 +1.219762e130 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda3919Var : BV:32
2 : Lambda3920Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : lambda(1, 2, 260) : FUNCTION[BV:32,BV:32 -> BV:32]
262 : sym_const(261) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda3921Var : BV:32
2 : Lambda3922Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda3923Var : BV:32
2 : Lambda3924Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda3928Var : BV:32
2 : Lambda3929Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda3933Var : BV:32
2 : Lambda3934Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2101253 { 0x201005 +1.25048887e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 8200 { 0x2008 +1.97751e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 8201 { 0x2009 +1.97763e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 2101252 { 0x201004 +1.25048875e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 8203 { 0x200b +1.97787e129 } : BV:32
26 : eq(11, 25) : BOOL
27 : 8202 { 0x200a +1.97775e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 2101254 { 0x201006 +1.25048899e129 } : BV:32
30 : eq(11, 29) : BOOL
31 : eq(11, 3) : BOOL
32 : 2 { 0x2 } : BV:8
33 : eq(11, 7) : BOOL
34 : 8407040 { 0x804800 +1.219726e130 } : BV:32
35 : eq(11, 34) : BOOL
36 : 4 { 0x4 } : BV:8
37 : eq(11, 8) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(11, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : ite(39, 14, 40) : BV:8
42 : ite(37, 14, 41) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(33, 14, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(30, 14, 45) : BV:8
47 : ite(28, 14, 46) : BV:8
48 : ite(26, 14, 47) : BV:8
49 : ite(24, 14, 48) : BV:8
50 : ite(22, 14, 49) : BV:8
51 : ite(20, 14, 50) : BV:8
52 : ite(18, 14, 51) : BV:8
53 : ite(16, 14, 52) : BV:8
54 : ite(13, 14, 53) : BV:8
55 : bvadd(38, 10, 3) : BV:32
56 : eq(55, 12) : BOOL
57 : eq(55, 15) : BOOL
58 : eq(55, 17) : BOOL
59 : eq(55, 19) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 23) : BOOL
62 : eq(55, 25) : BOOL
63 : eq(55, 27) : BOOL
64 : eq(55, 29) : BOOL
65 : eq(55, 3) : BOOL
66 : eq(55, 7) : BOOL
67 : eq(55, 34) : BOOL
68 : eq(55, 8) : BOOL
69 : eq(55, 38) : BOOL
70 : ite(69, 14, 40) : BV:8
71 : ite(68, 14, 70) : BV:8
72 : ite(67, 36, 71) : BV:8
73 : ite(66, 14, 72) : BV:8
74 : ite(65, 32, 73) : BV:8
75 : ite(64, 14, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 14, 76) : BV:8
78 : ite(61, 14, 77) : BV:8
79 : ite(60, 14, 78) : BV:8
80 : ite(59, 14, 79) : BV:8
81 : ite(58, 14, 80) : BV:8
82 : ite(57, 14, 81) : BV:8
83 : ite(56, 14, 82) : BV:8
84 : bvadd(23, 10, 3) : BV:32
85 : eq(84, 12) : BOOL
86 : eq(84, 15) : BOOL
87 : eq(84, 17) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 21) : BOOL
90 : eq(84, 23) : BOOL
91 : eq(84, 25) : BOOL
92 : eq(84, 27) : BOOL
93 : eq(84, 29) : BOOL
94 : eq(84, 3) : BOOL
95 : eq(84, 7) : BOOL
96 : eq(84, 34) : BOOL
97 : eq(84, 8) : BOOL
98 : eq(84, 38) : BOOL
99 : ite(98, 14, 40) : BV:8
100 : ite(97, 14, 99) : BV:8
101 : ite(96, 36, 100) : BV:8
102 : ite(95, 14, 101) : BV:8
103 : ite(94, 32, 102) : BV:8
104 : ite(93, 14, 103) : BV:8
105 : ite(92, 14, 104) : BV:8
106 : ite(91, 14, 105) : BV:8
107 : ite(90, 14, 106) : BV:8
108 : ite(89, 14, 107) : BV:8
109 : ite(88, 14, 108) : BV:8
110 : ite(87, 14, 109) : BV:8
111 : ite(86, 14, 110) : BV:8
112 : ite(85, 14, 111) : BV:8
113 : bvadd(10, 3) : BV:32
114 : eq(113, 12) : BOOL
115 : eq(113, 15) : BOOL
116 : eq(113, 17) : BOOL
117 : eq(113, 19) : BOOL
118 : eq(113, 21) : BOOL
119 : eq(113, 23) : BOOL
120 : eq(113, 25) : BOOL
121 : eq(113, 27) : BOOL
122 : eq(113, 29) : BOOL
123 : eq(113, 3) : BOOL
124 : eq(113, 7) : BOOL
125 : eq(113, 34) : BOOL
126 : eq(113, 8) : BOOL
127 : eq(113, 38) : BOOL
128 : ite(127, 14, 40) : BV:8
129 : ite(126, 14, 128) : BV:8
130 : ite(125, 36, 129) : BV:8
131 : ite(124, 14, 130) : BV:8
132 : ite(123, 32, 131) : BV:8
133 : ite(122, 14, 132) : BV:8
134 : ite(121, 14, 133) : BV:8
135 : ite(120, 14, 134) : BV:8
136 : ite(119, 14, 135) : BV:8
137 : ite(118, 14, 136) : BV:8
138 : ite(117, 14, 137) : BV:8
139 : ite(116, 14, 138) : BV:8
140 : ite(115, 14, 139) : BV:8
141 : ite(114, 14, 140) : BV:8
142 : bvconcat(54, 83, 112, 141) : BV:32
143 : bvadd(7, 9, 142) : BV:32
144 : eq(143, 12) : BOOL
145 : eq(143, 15) : BOOL
146 : eq(143, 17) : BOOL
147 : eq(143, 19) : BOOL
148 : eq(143, 21) : BOOL
149 : eq(143, 23) : BOOL
150 : eq(143, 25) : BOOL
151 : eq(143, 27) : BOOL
152 : eq(143, 29) : BOOL
153 : eq(143, 3) : BOOL
154 : eq(143, 7) : BOOL
155 : eq(143, 34) : BOOL
156 : eq(143, 8) : BOOL
157 : eq(143, 38) : BOOL
158 : ite(157, 14, 40) : BV:8
159 : ite(156, 14, 158) : BV:8
160 : ite(155, 36, 159) : BV:8
161 : ite(154, 14, 160) : BV:8
162 : ite(153, 32, 161) : BV:8
163 : ite(152, 14, 162) : BV:8
164 : ite(151, 14, 163) : BV:8
165 : ite(150, 14, 164) : BV:8
166 : ite(149, 14, 165) : BV:8
167 : ite(148, 14, 166) : BV:8
168 : ite(147, 14, 167) : BV:8
169 : ite(146, 14, 168) : BV:8
170 : ite(145, 14, 169) : BV:8
171 : ite(144, 14, 170) : BV:8
172 : bvadd(38, 9, 142) : BV:32
173 : eq(172, 12) : BOOL
174 : eq(172, 15) : BOOL
175 : eq(172, 17) : BOOL
176 : eq(172, 19) : BOOL
177 : eq(172, 21) : BOOL
178 : eq(172, 23) : BOOL
179 : eq(172, 25) : BOOL
180 : eq(172, 27) : BOOL
181 : eq(172, 29) : BOOL
182 : eq(172, 3) : BOOL
183 : eq(172, 7) : BOOL
184 : eq(172, 34) : BOOL
185 : eq(172, 8) : BOOL
186 : eq(172, 38) : BOOL
187 : ite(186, 14, 40) : BV:8
188 : ite(185, 14, 187) : BV:8
189 : ite(184, 36, 188) : BV:8
190 : ite(183, 14, 189) : BV:8
191 : ite(182, 32, 190) : BV:8
192 : ite(181, 14, 191) : BV:8
193 : ite(180, 14, 192) : BV:8
194 : ite(179, 14, 193) : BV:8
195 : ite(178, 14, 194) : BV:8
196 : ite(177, 14, 195) : BV:8
197 : ite(176, 14, 196) : BV:8
198 : ite(175, 14, 197) : BV:8
199 : ite(174, 14, 198) : BV:8
200 : ite(173, 14, 199) : BV:8
201 : bvadd(23, 9, 142) : BV:32
202 : eq(201, 12) : BOOL
203 : eq(201, 15) : BOOL
204 : eq(201, 17) : BOOL
205 : eq(201, 19) : BOOL
206 : eq(201, 21) : BOOL
207 : eq(201, 23) : BOOL
208 : eq(201, 25) : BOOL
209 : eq(201, 27) : BOOL
210 : eq(201, 29) : BOOL
211 : eq(201, 3) : BOOL
212 : eq(201, 7) : BOOL
213 : eq(201, 34) : BOOL
214 : eq(201, 8) : BOOL
215 : eq(201, 38) : BOOL
216 : ite(215, 14, 40) : BV:8
217 : ite(214, 14, 216) : BV:8
218 : ite(213, 36, 217) : BV:8
219 : ite(212, 14, 218) : BV:8
220 : ite(211, 32, 219) : BV:8
221 : ite(210, 14, 220) : BV:8
222 : ite(209, 14, 221) : BV:8
223 : ite(208, 14, 222) : BV:8
224 : ite(207, 14, 223) : BV:8
225 : ite(206, 14, 224) : BV:8
226 : ite(205, 14, 225) : BV:8
227 : ite(204, 14, 226) : BV:8
228 : ite(203, 14, 227) : BV:8
229 : ite(202, 14, 228) : BV:8
230 : bvadd(9, 142) : BV:32
231 : eq(230, 12) : BOOL
232 : eq(230, 15) : BOOL
233 : eq(230, 17) : BOOL
234 : eq(230, 19) : BOOL
235 : eq(230, 21) : BOOL
236 : eq(230, 23) : BOOL
237 : eq(230, 25) : BOOL
238 : eq(230, 27) : BOOL
239 : eq(230, 29) : BOOL
240 : eq(230, 3) : BOOL
241 : eq(230, 7) : BOOL
242 : eq(230, 34) : BOOL
243 : eq(230, 8) : BOOL
244 : eq(230, 38) : BOOL
245 : ite(244, 14, 40) : BV:8
246 : ite(243, 14, 245) : BV:8
247 : ite(242, 36, 246) : BV:8
248 : ite(241, 14, 247) : BV:8
249 : ite(240, 32, 248) : BV:8
250 : ite(239, 14, 249) : BV:8
251 : ite(238, 14, 250) : BV:8
252 : ite(237, 14, 251) : BV:8
253 : ite(236, 14, 252) : BV:8
254 : ite(235, 14, 253) : BV:8
255 : ite(234, 14, 254) : BV:8
256 : ite(233, 14, 255) : BV:8
257 : ite(232, 14, 256) : BV:8
258 : ite(231, 14, 257) : BV:8
259 : bvconcat(171, 200, 229, 258) : BV:32
260 : ite(6, 3, 259) : BV:32
261 : ite(6, 3, 260) : BV:32
262 : lambda(1, 2, 261) : FUNCTION[BV:32,BV:32 -> BV:32]
263 : sym_const(262) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda3935Var : BV:32
2 : Lambda3936Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2155905027 { 0x80808003 -2139062269 -1.390660e130 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2155905028 { 0x80808004 -2139062268 -1.390672e130 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2155905029 { 0x80808005 -2139062267 -1.390684e130 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
2729452928
=counter_example_end


</MSG>
<MSG>0:34 : Discovered that the correlation was useless for the product-TFG foo.A1.B2 (d:1, s:0, sp: 5)...</MSG>
<MSG>0:34 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:34 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:34 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:34 : Creating ssa-path for the src-tfg path L3%7%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:34 : Adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:34 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B1: Computing loop hoisting select expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B1: Computing loop hoisting non-linear expressions at toPC L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B1: Adding node L3%7%bbentry_Lfor.cond1%1%bbentry to the product-TFG...</MSG>
<MSG>0:34 : foo.A1.B1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:34 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:34 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:34 : foo.A1.B1: Propagated 7 out of 14 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : foo.A1.B1: Added the 7 propagated CEs at PC L3%7%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>0:34 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:34 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:34 : foo.A1.B1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC L3%7%bbentry_Lfor.cond1%1%bbentry, src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : Done adding a CG edge composition using the src path L3%7%bbentry --> L3%7%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:34 : Added correlation to the product-TFG foo.A1.B1 (d:1, s:0, sp: 5) and created a correlation entry...</MSG>
<MSG>0:34 : Chose (after CE propagation) product-TFG foo.A1.B1 (d:1, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%7%bbentry at mu 0 delta {0,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
            L3%7%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry, A (line 4 at column 28))
                L3%7%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 7 counterexamples (for correlating 13 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%7%bbentry[mu 0, delta {0,0}]
<MSG>0:34 : foo.A1.B1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:34 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:34 : foo.A1.B1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:34 : foo.A1.B1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:34 : foo.A1.B1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:34 : foo.A1.B1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:34 : foo.A1.B1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:34 : foo.A1.B1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:34 : foo.A1.B1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 13 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:36 : foo.A1.B1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht17-prove_trivial11-prove6...</MSG>
<MSG>0:36 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:36 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:36 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:36 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:36 : foo.A1.B1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:37 : foo.A1.B1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:37 : foo.A1.B1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial2-prove10...</MSG>
<MSG>0:41 : foo.A1.B1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:41 : foo.A1.B1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:41 : foo.A1.B1 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:41 : foo.A1.B1 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:41 : Chosen product-TFG foo.A1.B1 will be explored later...</MSG>
<MSG>0:41 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:41 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:2, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>0:41 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:41 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:41 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:41 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:41 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:42 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht15-prove_trivial10-prove5...</MSG>
<MSG>0:42 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:42 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:42 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:43 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:43 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:44 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:44 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:44 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:44 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:44 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:44 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:44 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:44 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:44 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:44 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:44 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:44 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht11-prove_trivial2-prove9...</MSG>
<MSG>0:48 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:48 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:48 : foo.A1.B3 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:48 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:48 : Chosen product-TFG foo.A1.B3 will be explored later...</MSG>
<MSG>0:48 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:48 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:2, s:0, sp: 5) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 6 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>0:48 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:48 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:48 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht21-prove_trivial15-prove6...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:48 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:48 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:49 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:49 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht12-prove_trivial3-prove9...</MSG>
<MSG>0:49 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:49 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:49 : foo.A1.B4 (d:2, s:0, sp: 5): checked newly added edge and inferred invariants...</MSG>
<MSG>0:49 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:49 : Chosen product-TFG foo.A1.B4 will be explored later...</MSG>
<MSG>0:49 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:49 : Chose (after CE propagation) product-TFG foo.A1.B3 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
<MSG>0:49 : foo.A1.B3: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:49 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:49 : foo.A1.B3: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht12-prove_trivial10-prove2...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:49 : foo.A1.B3: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:49 : foo.A1.B3 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:49 : foo.A1.B3 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:50 : product-TFG foo.A1.B3: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:50 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:50 : Attempting correlation of src pathset L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:50 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:50 : product-TFG foo.A1.B3: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:50 : product-TFG foo.A1.B3 created 1 possibilities in group foo.A1.B3.C...</MSG>
<MSG>0:50 : Chose (for CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:50 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>0:50 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1...</MSG>
<MSG>0:50 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:50 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:50 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:50 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:50 : Adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : foo.A1.B3.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:50 : foo.A1.B3.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Propagated 9 out of 15 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:50 : foo.A1.B3.C1: Added the 9 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:50 : foo.A1.B3.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : Done adding new edge to the product-TFG foo.A1.B3.C1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:50 : Added correlation to the product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:50 : Chose (after CE propagation) product-TFG foo.A1.B3.C1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 24 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:50 : foo.A1.B3.C1: Updating invariants over the newly added edges in edge composition L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:50 : Constructed infer_invariants_dfa with initial worklist L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:50 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:50 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:51 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:51 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial0-prove7...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:53 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:53 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:54 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:55 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:55 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:56 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:57 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 14 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht11-prove_trivial9-prove2...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:57 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:58 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing dst graph's memlabels for edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:58 : foo.A1.B3.C1: Checking well-formedness assertions on outgoing edges from L3%10%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:58 : foo.A1.B3.C1: Done relaxing memlabels and invariants across the edge composition (L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:58 : foo.A1.B3.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:58 : foo.A1.B3.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:59 : product-TFG foo.A1.B3.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Considering 2 paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Attempting correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Found 2 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : product-TFG foo.A1.B3.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : product-TFG foo.A1.B3.C1 created 2 possibilities in group foo.A1.B3.C1.D...</MSG>
<MSG>0:59 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 4...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:59 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>0:59 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D2...</MSG>
<MSG>0:59 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:59 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:59 : Adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: marking unstable at L3%10%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140860 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140424 : input.dst.llvm-%m : BV:32                 : 536870912
140870 : bvult(140860, 140424) : BOOL              : true
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 562594369
140861 : bvugt(140859, 140860) : BOOL              : true
222483 : not(140861) : BOOL                        : false
222484 : or(140861, 222483) : BOOL                 : true
222495 : and(140870, 222484) : BOOL                : true
225744 : not(222495) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 536870912
169321 : bvuge(140278, 140633) : BOOL              : false
140286 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 562594369
140679 : bvadd(140286, 140614) : BV:32             : 562594370
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2232943392
225617 : bvuge(140679, 140615) : BOOL              : false
225618 : andnot2(169321, 225617) : BOOL            : false
225745 : or(225744, 225618) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce3988 cfe8a954e072151fc051e42565876f90
=input.spec-%var-x-2
1 : Lambda31888Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31889Var : BV:32
18 : Lambda31890Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536870912 { 0x20000000 +1.0e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536870913 { 0x20000001 +1.11e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31891Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
82 : eq(80, 81) : BOOL
83 : 4 { 0x4 } : BV:8
84 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
85 : eq(80, 84) : BOOL
86 : 128 { 0x80 -128 } : BV:8
87 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
88 : eq(80, 87) : BOOL
89 : 9 { 0x9 } : BV:8
90 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
91 : eq(80, 90) : BOOL
92 : 65 { 0x41 } : BV:8
93 : 0 { 0x0 } : BV:8
94 : ite(91, 92, 93) : BV:8
95 : ite(88, 89, 94) : BV:8
96 : ite(85, 86, 95) : BV:8
97 : ite(82, 83, 96) : BV:8
98 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
99 : bvadd(98, 79) : BV:32
100 : eq(99, 81) : BOOL
101 : eq(99, 84) : BOOL
102 : eq(99, 87) : BOOL
103 : eq(99, 90) : BOOL
104 : ite(103, 92, 93) : BV:8
105 : ite(102, 89, 104) : BV:8
106 : ite(101, 86, 105) : BV:8
107 : ite(100, 83, 106) : BV:8
108 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
109 : bvadd(108, 79) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 84) : BOOL
112 : eq(109, 87) : BOOL
113 : eq(109, 90) : BOOL
114 : ite(113, 92, 93) : BV:8
115 : ite(112, 89, 114) : BV:8
116 : ite(111, 86, 115) : BV:8
117 : ite(110, 83, 116) : BV:8
118 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
119 : bvadd(118, 79) : BV:32
120 : eq(119, 81) : BOOL
121 : eq(119, 84) : BOOL
122 : eq(119, 87) : BOOL
123 : eq(119, 90) : BOOL
124 : ite(123, 92, 93) : BV:8
125 : ite(122, 89, 124) : BV:8
126 : ite(121, 86, 125) : BV:8
127 : ite(120, 83, 126) : BV:8
128 : bvconcat(97, 107, 117, 127) : BV:32
129 : bvadd(75, 77, 128) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 84) : BOOL
132 : eq(129, 87) : BOOL
133 : eq(129, 90) : BOOL
134 : ite(133, 92, 93) : BV:8
135 : ite(132, 89, 134) : BV:8
136 : ite(131, 86, 135) : BV:8
137 : ite(130, 83, 136) : BV:8
138 : 2 { 0x2 +1.23e129 } : BV:32
139 : bvadd(138, 77, 128) : BV:32
140 : eq(139, 81) : BOOL
141 : eq(139, 84) : BOOL
142 : eq(139, 87) : BOOL
143 : eq(139, 90) : BOOL
144 : ite(143, 92, 93) : BV:8
145 : ite(142, 89, 144) : BV:8
146 : ite(141, 86, 145) : BV:8
147 : ite(140, 83, 146) : BV:8
148 : 1 { 0x1 +1.11e129 } : BV:32
149 : bvadd(148, 77, 128) : BV:32
150 : eq(149, 81) : BOOL
151 : eq(149, 84) : BOOL
152 : eq(149, 87) : BOOL
153 : eq(149, 90) : BOOL
154 : ite(153, 92, 93) : BV:8
155 : ite(152, 89, 154) : BV:8
156 : ite(151, 86, 155) : BV:8
157 : ite(150, 83, 156) : BV:8
158 : bvadd(77, 128) : BV:32
159 : eq(158, 81) : BOOL
160 : eq(158, 84) : BOOL
161 : eq(158, 87) : BOOL
162 : eq(158, 90) : BOOL
163 : ite(162, 92, 93) : BV:8
164 : ite(161, 89, 163) : BV:8
165 : ite(160, 86, 164) : BV:8
166 : ite(159, 83, 165) : BV:8
167 : bvconcat(137, 147, 157, 166) : BV:32
168 : ite(55, 2, 167) : BV:32
169 : ite(74, 167, 168) : BV:32
170 : ite(55, 2, 169) : BV:32
171 : lambda(52, 170) : FUNCTION[BV:32 -> BV:32]
172 : map(51, 171) : MAP[BV:32 -> BV:32]
173 : lambda(17, 172) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
174 : map(16, 173) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
175 : sym_const(174) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
=input.spec-%var-m-2
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 562594369 { 0x21888241 +1.6647503e196 } : BV:32
=input.spec-%tmpvar-17.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-mem
1 : ([ 0; 152810039 ] -> 0, [ 152810040; 152810040 ] -> 9, [ 152810041; 152810041 ] -> 128, [ 152810042; 152810042 ] -> 65, [ 152810043; 152810043 ] -> 4, [ 152810044; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 286277631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 286277632; 286277635 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 286277636; 2307876123 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2307876124; 2307876127 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2307876128; 2323775491 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2323775492; 2323775495 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2323775496; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 286277632 { 0x11104000 +1.12695312e163 } : BV:32
=input.dst.llvm-%m
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2307876124 { 0x898f651c -1987091172 -1.12027311e148 } : BV:32
=input.dst.llvm-%n
1 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2323775492 { 0x8a820004 -1971191804 -1.1562547e150 } : BV:32
=input.dst.llvm-%x
1 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda31914Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31915Var : BV:32
18 : Lambda31916Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536870912 { 0x20000000 +1.0e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536870913 { 0x20000001 +1.11e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31917Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
63 : eq(61, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
66 : eq(61, 65) : BOOL
67 : 128 { 0x80 -128 } : BV:8
68 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
69 : eq(61, 68) : BOOL
70 : 9 { 0x9 } : BV:8
71 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
72 : eq(61, 71) : BOOL
73 : 65 { 0x41 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
80 : bvadd(79, 60) : BV:32
81 : eq(80, 62) : BOOL
82 : eq(80, 65) : BOOL
83 : eq(80, 68) : BOOL
84 : eq(80, 71) : BOOL
85 : ite(84, 73, 74) : BV:8
86 : ite(83, 70, 85) : BV:8
87 : ite(82, 67, 86) : BV:8
88 : ite(81, 64, 87) : BV:8
89 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
90 : bvadd(89, 60) : BV:32
91 : eq(90, 62) : BOOL
92 : eq(90, 65) : BOOL
93 : eq(90, 68) : BOOL
94 : eq(90, 71) : BOOL
95 : ite(94, 73, 74) : BV:8
96 : ite(93, 70, 95) : BV:8
97 : ite(92, 67, 96) : BV:8
98 : ite(91, 64, 97) : BV:8
99 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
100 : bvadd(99, 60) : BV:32
101 : eq(100, 62) : BOOL
102 : eq(100, 65) : BOOL
103 : eq(100, 68) : BOOL
104 : eq(100, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 70, 105) : BV:8
107 : ite(102, 67, 106) : BV:8
108 : ite(101, 64, 107) : BV:8
109 : bvconcat(78, 88, 98, 108) : BV:32
110 : bvadd(56, 58, 109) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 65) : BOOL
113 : eq(110, 68) : BOOL
114 : eq(110, 71) : BOOL
115 : ite(114, 73, 74) : BV:8
116 : ite(113, 70, 115) : BV:8
117 : ite(112, 67, 116) : BV:8
118 : ite(111, 64, 117) : BV:8
119 : 2 { 0x2 +1.23e129 } : BV:32
120 : bvadd(119, 58, 109) : BV:32
121 : eq(120, 62) : BOOL
122 : eq(120, 65) : BOOL
123 : eq(120, 68) : BOOL
124 : eq(120, 71) : BOOL
125 : ite(124, 73, 74) : BV:8
126 : ite(123, 70, 125) : BV:8
127 : ite(122, 67, 126) : BV:8
128 : ite(121, 64, 127) : BV:8
129 : 1 { 0x1 +1.11e129 } : BV:32
130 : bvadd(129, 58, 109) : BV:32
131 : eq(130, 62) : BOOL
132 : eq(130, 65) : BOOL
133 : eq(130, 68) : BOOL
134 : eq(130, 71) : BOOL
135 : ite(134, 73, 74) : BV:8
136 : ite(133, 70, 135) : BV:8
137 : ite(132, 67, 136) : BV:8
138 : ite(131, 64, 137) : BV:8
139 : bvadd(58, 109) : BV:32
140 : eq(139, 62) : BOOL
141 : eq(139, 65) : BOOL
142 : eq(139, 68) : BOOL
143 : eq(139, 71) : BOOL
144 : ite(143, 73, 74) : BV:8
145 : ite(142, 70, 144) : BV:8
146 : ite(141, 67, 145) : BV:8
147 : ite(140, 64, 146) : BV:8
148 : bvconcat(118, 128, 138, 147) : BV:32
149 : ite(55, 2, 148) : BV:32
150 : lambda(52, 149) : FUNCTION[BV:32 -> BV:32]
151 : map(51, 150) : MAP[BV:32 -> BV:32]
152 : lambda(17, 151) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
153 : map(16, 152) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
154 : sym_const(153) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda31901Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31902Var : BV:32
18 : Lambda31903Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536870912 { 0x20000000 +1.0e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536870913 { 0x20000001 +1.11e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31904Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
82 : eq(80, 81) : BOOL
83 : 4 { 0x4 } : BV:8
84 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
85 : eq(80, 84) : BOOL
86 : 128 { 0x80 -128 } : BV:8
87 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
88 : eq(80, 87) : BOOL
89 : 9 { 0x9 } : BV:8
90 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
91 : eq(80, 90) : BOOL
92 : 65 { 0x41 } : BV:8
93 : 0 { 0x0 } : BV:8
94 : ite(91, 92, 93) : BV:8
95 : ite(88, 89, 94) : BV:8
96 : ite(85, 86, 95) : BV:8
97 : ite(82, 83, 96) : BV:8
98 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
99 : bvadd(98, 79) : BV:32
100 : eq(99, 81) : BOOL
101 : eq(99, 84) : BOOL
102 : eq(99, 87) : BOOL
103 : eq(99, 90) : BOOL
104 : ite(103, 92, 93) : BV:8
105 : ite(102, 89, 104) : BV:8
106 : ite(101, 86, 105) : BV:8
107 : ite(100, 83, 106) : BV:8
108 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
109 : bvadd(108, 79) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 84) : BOOL
112 : eq(109, 87) : BOOL
113 : eq(109, 90) : BOOL
114 : ite(113, 92, 93) : BV:8
115 : ite(112, 89, 114) : BV:8
116 : ite(111, 86, 115) : BV:8
117 : ite(110, 83, 116) : BV:8
118 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
119 : bvadd(118, 79) : BV:32
120 : eq(119, 81) : BOOL
121 : eq(119, 84) : BOOL
122 : eq(119, 87) : BOOL
123 : eq(119, 90) : BOOL
124 : ite(123, 92, 93) : BV:8
125 : ite(122, 89, 124) : BV:8
126 : ite(121, 86, 125) : BV:8
127 : ite(120, 83, 126) : BV:8
128 : bvconcat(97, 107, 117, 127) : BV:32
129 : bvadd(75, 77, 128) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 84) : BOOL
132 : eq(129, 87) : BOOL
133 : eq(129, 90) : BOOL
134 : ite(133, 92, 93) : BV:8
135 : ite(132, 89, 134) : BV:8
136 : ite(131, 86, 135) : BV:8
137 : ite(130, 83, 136) : BV:8
138 : 2 { 0x2 +1.23e129 } : BV:32
139 : bvadd(138, 77, 128) : BV:32
140 : eq(139, 81) : BOOL
141 : eq(139, 84) : BOOL
142 : eq(139, 87) : BOOL
143 : eq(139, 90) : BOOL
144 : ite(143, 92, 93) : BV:8
145 : ite(142, 89, 144) : BV:8
146 : ite(141, 86, 145) : BV:8
147 : ite(140, 83, 146) : BV:8
148 : 1 { 0x1 +1.11e129 } : BV:32
149 : bvadd(148, 77, 128) : BV:32
150 : eq(149, 81) : BOOL
151 : eq(149, 84) : BOOL
152 : eq(149, 87) : BOOL
153 : eq(149, 90) : BOOL
154 : ite(153, 92, 93) : BV:8
155 : ite(152, 89, 154) : BV:8
156 : ite(151, 86, 155) : BV:8
157 : ite(150, 83, 156) : BV:8
158 : bvadd(77, 128) : BV:32
159 : eq(158, 81) : BOOL
160 : eq(158, 84) : BOOL
161 : eq(158, 87) : BOOL
162 : eq(158, 90) : BOOL
163 : ite(162, 92, 93) : BV:8
164 : ite(161, 89, 163) : BV:8
165 : ite(160, 86, 164) : BV:8
166 : ite(159, 83, 165) : BV:8
167 : bvconcat(137, 147, 157, 166) : BV:32
168 : ite(55, 2, 167) : BV:32
169 : ite(74, 167, 168) : BV:32
170 : ite(55, 2, 169) : BV:32
171 : ite(55, 2, 170) : BV:32
172 : lambda(52, 171) : FUNCTION[BV:32 -> BV:32]
173 : map(51, 172) : MAP[BV:32 -> BV:32]
174 : lambda(17, 173) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
175 : map(16, 174) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
176 : sym_const(175) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 562594369 { 0x21888241 +1.6647503e196 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2307876124 { 0x898f651c -1987091172 -1.12027311e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2307876127 { 0x898f651f -1987091169 -1.12027347e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2323775492 { 0x8a820004 -1971191804 -1.1562547e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2323775495 { 0x8a820007 -1971191801 -1.1562583e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 286277632 { 0x11104000 +1.12695312e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 286277635 { 0x11104003 +1.12695348e163 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2232943391 ] -> true, [ 2232943392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2232943391 ] -> true, [ 2232943392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda31748Var : BV:32
2 : Lambda31749Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 536870912 { 0x20000000 +1.0e193 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 536870913 { 0x20000001 +1.11e193 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
55 : eq(53, 54) : BOOL
56 : 4 { 0x4 } : BV:8
57 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
58 : eq(53, 57) : BOOL
59 : 128 { 0x80 -128 } : BV:8
60 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
61 : eq(53, 60) : BOOL
62 : 9 { 0x9 } : BV:8
63 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
64 : eq(53, 63) : BOOL
65 : 65 { 0x41 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(61, 62, 67) : BV:8
69 : ite(58, 59, 68) : BV:8
70 : ite(55, 56, 69) : BV:8
71 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
72 : bvadd(71, 52) : BV:32
73 : eq(72, 54) : BOOL
74 : eq(72, 57) : BOOL
75 : eq(72, 60) : BOOL
76 : eq(72, 63) : BOOL
77 : ite(76, 65, 66) : BV:8
78 : ite(75, 62, 77) : BV:8
79 : ite(74, 59, 78) : BV:8
80 : ite(73, 56, 79) : BV:8
81 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
82 : bvadd(81, 52) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 57) : BOOL
85 : eq(82, 60) : BOOL
86 : eq(82, 63) : BOOL
87 : ite(86, 65, 66) : BV:8
88 : ite(85, 62, 87) : BV:8
89 : ite(84, 59, 88) : BV:8
90 : ite(83, 56, 89) : BV:8
91 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
92 : bvadd(91, 52) : BV:32
93 : eq(92, 54) : BOOL
94 : eq(92, 57) : BOOL
95 : eq(92, 60) : BOOL
96 : eq(92, 63) : BOOL
97 : ite(96, 65, 66) : BV:8
98 : ite(95, 62, 97) : BV:8
99 : ite(94, 59, 98) : BV:8
100 : ite(93, 56, 99) : BV:8
101 : bvconcat(70, 80, 90, 100) : BV:32
102 : bvadd(48, 50, 101) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : eq(102, 63) : BOOL
107 : ite(106, 65, 66) : BV:8
108 : ite(105, 62, 107) : BV:8
109 : ite(104, 59, 108) : BV:8
110 : ite(103, 56, 109) : BV:8
111 : 2 { 0x2 +1.23e129 } : BV:32
112 : bvadd(111, 50, 101) : BV:32
113 : eq(112, 54) : BOOL
114 : eq(112, 57) : BOOL
115 : eq(112, 60) : BOOL
116 : eq(112, 63) : BOOL
117 : ite(116, 65, 66) : BV:8
118 : ite(115, 62, 117) : BV:8
119 : ite(114, 59, 118) : BV:8
120 : ite(113, 56, 119) : BV:8
121 : 1 { 0x1 +1.11e129 } : BV:32
122 : bvadd(121, 50, 101) : BV:32
123 : eq(122, 54) : BOOL
124 : eq(122, 57) : BOOL
125 : eq(122, 60) : BOOL
126 : eq(122, 63) : BOOL
127 : ite(126, 65, 66) : BV:8
128 : ite(125, 62, 127) : BV:8
129 : ite(124, 59, 128) : BV:8
130 : ite(123, 56, 129) : BV:8
131 : bvadd(50, 101) : BV:32
132 : eq(131, 54) : BOOL
133 : eq(131, 57) : BOOL
134 : eq(131, 60) : BOOL
135 : eq(131, 63) : BOOL
136 : ite(135, 65, 66) : BV:8
137 : ite(134, 62, 136) : BV:8
138 : ite(133, 59, 137) : BV:8
139 : ite(132, 56, 138) : BV:8
140 : bvconcat(110, 120, 130, 139) : BV:32
141 : ite(6, 3, 140) : BV:32
142 : ite(47, 140, 141) : BV:32
143 : ite(6, 3, 142) : BV:32
144 : lambda(1, 2, 143) : FUNCTION[BV:32,BV:32 -> BV:32]
145 : sym_const(144) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda31755Var : BV:32
2 : Lambda31756Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
17 : eq(12, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
20 : eq(12, 19) : BOOL
21 : 9 { 0x9 } : BV:8
22 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
23 : eq(12, 22) : BOOL
24 : 65 { 0x41 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(17, 18, 27) : BV:8
29 : ite(14, 15, 28) : BV:8
30 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
31 : bvadd(30, 11) : BV:32
32 : eq(31, 13) : BOOL
33 : eq(31, 16) : BOOL
34 : eq(31, 19) : BOOL
35 : eq(31, 22) : BOOL
36 : ite(35, 24, 25) : BV:8
37 : ite(34, 21, 36) : BV:8
38 : ite(33, 18, 37) : BV:8
39 : ite(32, 15, 38) : BV:8
40 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
41 : bvadd(40, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 16) : BOOL
44 : eq(41, 19) : BOOL
45 : eq(41, 22) : BOOL
46 : ite(45, 24, 25) : BV:8
47 : ite(44, 21, 46) : BV:8
48 : ite(43, 18, 47) : BV:8
49 : ite(42, 15, 48) : BV:8
50 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
51 : bvadd(50, 11) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 19) : BOOL
55 : eq(51, 22) : BOOL
56 : ite(55, 24, 25) : BV:8
57 : ite(54, 21, 56) : BV:8
58 : ite(53, 18, 57) : BV:8
59 : ite(52, 15, 58) : BV:8
60 : bvconcat(29, 39, 49, 59) : BV:32
61 : bvadd(7, 9, 60) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 16) : BOOL
64 : eq(61, 19) : BOOL
65 : eq(61, 22) : BOOL
66 : ite(65, 24, 25) : BV:8
67 : ite(64, 21, 66) : BV:8
68 : ite(63, 18, 67) : BV:8
69 : ite(62, 15, 68) : BV:8
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : bvadd(70, 9, 60) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 16) : BOOL
74 : eq(71, 19) : BOOL
75 : eq(71, 22) : BOOL
76 : ite(75, 24, 25) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 18, 77) : BV:8
79 : ite(72, 15, 78) : BV:8
80 : 1 { 0x1 +1.11e129 } : BV:32
81 : bvadd(80, 9, 60) : BV:32
82 : eq(81, 13) : BOOL
83 : eq(81, 16) : BOOL
84 : eq(81, 19) : BOOL
85 : eq(81, 22) : BOOL
86 : ite(85, 24, 25) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 18, 87) : BV:8
89 : ite(82, 15, 88) : BV:8
90 : bvadd(9, 60) : BV:32
91 : eq(90, 13) : BOOL
92 : eq(90, 16) : BOOL
93 : eq(90, 19) : BOOL
94 : eq(90, 22) : BOOL
95 : ite(94, 24, 25) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 18, 96) : BV:8
98 : ite(91, 15, 97) : BV:8
99 : bvconcat(69, 79, 89, 98) : BV:32
100 : ite(6, 3, 99) : BV:32
101 : lambda(1, 2, 100) : FUNCTION[BV:32,BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda31750Var : BV:32
2 : Lambda31751Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536870913 { 0x20000001 +1.11e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda31757Var : BV:32
2 : Lambda31758Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536870913 { 0x20000001 +1.11e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2232943391 ] -> true, [ 2232943392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda31762Var : BV:32
2 : Lambda31763Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 536870912 { 0x20000000 +1.0e193 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 536870913 { 0x20000001 +1.11e193 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
55 : eq(53, 54) : BOOL
56 : 4 { 0x4 } : BV:8
57 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
58 : eq(53, 57) : BOOL
59 : 128 { 0x80 -128 } : BV:8
60 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
61 : eq(53, 60) : BOOL
62 : 9 { 0x9 } : BV:8
63 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
64 : eq(53, 63) : BOOL
65 : 65 { 0x41 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(61, 62, 67) : BV:8
69 : ite(58, 59, 68) : BV:8
70 : ite(55, 56, 69) : BV:8
71 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
72 : bvadd(71, 52) : BV:32
73 : eq(72, 54) : BOOL
74 : eq(72, 57) : BOOL
75 : eq(72, 60) : BOOL
76 : eq(72, 63) : BOOL
77 : ite(76, 65, 66) : BV:8
78 : ite(75, 62, 77) : BV:8
79 : ite(74, 59, 78) : BV:8
80 : ite(73, 56, 79) : BV:8
81 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
82 : bvadd(81, 52) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 57) : BOOL
85 : eq(82, 60) : BOOL
86 : eq(82, 63) : BOOL
87 : ite(86, 65, 66) : BV:8
88 : ite(85, 62, 87) : BV:8
89 : ite(84, 59, 88) : BV:8
90 : ite(83, 56, 89) : BV:8
91 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
92 : bvadd(91, 52) : BV:32
93 : eq(92, 54) : BOOL
94 : eq(92, 57) : BOOL
95 : eq(92, 60) : BOOL
96 : eq(92, 63) : BOOL
97 : ite(96, 65, 66) : BV:8
98 : ite(95, 62, 97) : BV:8
99 : ite(94, 59, 98) : BV:8
100 : ite(93, 56, 99) : BV:8
101 : bvconcat(70, 80, 90, 100) : BV:32
102 : bvadd(48, 50, 101) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : eq(102, 63) : BOOL
107 : ite(106, 65, 66) : BV:8
108 : ite(105, 62, 107) : BV:8
109 : ite(104, 59, 108) : BV:8
110 : ite(103, 56, 109) : BV:8
111 : 2 { 0x2 +1.23e129 } : BV:32
112 : bvadd(111, 50, 101) : BV:32
113 : eq(112, 54) : BOOL
114 : eq(112, 57) : BOOL
115 : eq(112, 60) : BOOL
116 : eq(112, 63) : BOOL
117 : ite(116, 65, 66) : BV:8
118 : ite(115, 62, 117) : BV:8
119 : ite(114, 59, 118) : BV:8
120 : ite(113, 56, 119) : BV:8
121 : 1 { 0x1 +1.11e129 } : BV:32
122 : bvadd(121, 50, 101) : BV:32
123 : eq(122, 54) : BOOL
124 : eq(122, 57) : BOOL
125 : eq(122, 60) : BOOL
126 : eq(122, 63) : BOOL
127 : ite(126, 65, 66) : BV:8
128 : ite(125, 62, 127) : BV:8
129 : ite(124, 59, 128) : BV:8
130 : ite(123, 56, 129) : BV:8
131 : bvadd(50, 101) : BV:32
132 : eq(131, 54) : BOOL
133 : eq(131, 57) : BOOL
134 : eq(131, 60) : BOOL
135 : eq(131, 63) : BOOL
136 : ite(135, 65, 66) : BV:8
137 : ite(134, 62, 136) : BV:8
138 : ite(133, 59, 137) : BV:8
139 : ite(132, 56, 138) : BV:8
140 : bvconcat(110, 120, 130, 139) : BV:32
141 : ite(6, 3, 140) : BV:32
142 : ite(47, 140, 141) : BV:32
143 : ite(6, 3, 142) : BV:32
144 : ite(6, 3, 143) : BV:32
145 : lambda(1, 2, 144) : FUNCTION[BV:32,BV:32 -> BV:32]
146 : sym_const(145) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda31764Var : BV:32
2 : Lambda31765Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536870913 { 0x20000001 +1.11e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
126452346
=counter_example_end


failcond-expr = or(not(and(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m), or(bvugt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry), not(bvugt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))))), andnot2(bvuge(0, input.spec-%var-m-1.L3%7%bbentry), bvuge(bvadd(1, input.spec-%var-i-1.L3%7%bbentry), input.spec-%var-n-1.L3%7%bbentry))):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvugt(4, 1) : BOOL
6 : not(5) : BOOL
7 : or(5, 6) : BOOL
8 : and(3, 7) : BOOL
9 : not(8) : BOOL
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : input.spec-%var-m-1.L3%7%bbentry : BV:32
12 : bvuge(10, 11) : BOOL
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : input.spec-%var-i-1.L3%7%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : input.spec-%var-n-1.L3%7%bbentry : BV:32
17 : bvuge(15, 16) : BOOL
18 : andnot2(12, 17) : BOOL
19 : or(9, 18) : BOOL
</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D2: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : Done adding new edge to the product-TFG foo.A1.B3.C1.D2 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:59 : Failed correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%10%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
140860 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 0
140424 : input.dst.llvm-%m : BV:32                 : 536870912
140870 : bvult(140860, 140424) : BOOL              : true
140859 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 562594369
140861 : bvugt(140859, 140860) : BOOL              : true
222483 : not(140861) : BOOL                        : false
222484 : or(140861, 222483) : BOOL                 : true
222495 : and(140870, 222484) : BOOL                : true
225744 : not(222495) : BOOL                        : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 536870912
169321 : bvuge(140278, 140633) : BOOL              : false
140286 : 1 { 0x1 +1.11e129 } : BV:32               : 1
140614 : input.spec-%var-i-1.L3%7%bbentry : BV:32  : 562594369
140679 : bvadd(140286, 140614) : BV:32             : 562594370
140615 : input.spec-%var-n-1.L3%7%bbentry : BV:32  : 2232943392
225617 : bvuge(140679, 140615) : BOOL              : false
225618 : andnot2(169321, 225617) : BOOL            : false
225745 : or(225744, 225618) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce3988 cfe8a954e072151fc051e42565876f90
=input.spec-%var-x-2
1 : Lambda31888Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31889Var : BV:32
18 : Lambda31890Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536870912 { 0x20000000 +1.0e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536870913 { 0x20000001 +1.11e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31891Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
82 : eq(80, 81) : BOOL
83 : 4 { 0x4 } : BV:8
84 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
85 : eq(80, 84) : BOOL
86 : 128 { 0x80 -128 } : BV:8
87 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
88 : eq(80, 87) : BOOL
89 : 9 { 0x9 } : BV:8
90 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
91 : eq(80, 90) : BOOL
92 : 65 { 0x41 } : BV:8
93 : 0 { 0x0 } : BV:8
94 : ite(91, 92, 93) : BV:8
95 : ite(88, 89, 94) : BV:8
96 : ite(85, 86, 95) : BV:8
97 : ite(82, 83, 96) : BV:8
98 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
99 : bvadd(98, 79) : BV:32
100 : eq(99, 81) : BOOL
101 : eq(99, 84) : BOOL
102 : eq(99, 87) : BOOL
103 : eq(99, 90) : BOOL
104 : ite(103, 92, 93) : BV:8
105 : ite(102, 89, 104) : BV:8
106 : ite(101, 86, 105) : BV:8
107 : ite(100, 83, 106) : BV:8
108 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
109 : bvadd(108, 79) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 84) : BOOL
112 : eq(109, 87) : BOOL
113 : eq(109, 90) : BOOL
114 : ite(113, 92, 93) : BV:8
115 : ite(112, 89, 114) : BV:8
116 : ite(111, 86, 115) : BV:8
117 : ite(110, 83, 116) : BV:8
118 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
119 : bvadd(118, 79) : BV:32
120 : eq(119, 81) : BOOL
121 : eq(119, 84) : BOOL
122 : eq(119, 87) : BOOL
123 : eq(119, 90) : BOOL
124 : ite(123, 92, 93) : BV:8
125 : ite(122, 89, 124) : BV:8
126 : ite(121, 86, 125) : BV:8
127 : ite(120, 83, 126) : BV:8
128 : bvconcat(97, 107, 117, 127) : BV:32
129 : bvadd(75, 77, 128) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 84) : BOOL
132 : eq(129, 87) : BOOL
133 : eq(129, 90) : BOOL
134 : ite(133, 92, 93) : BV:8
135 : ite(132, 89, 134) : BV:8
136 : ite(131, 86, 135) : BV:8
137 : ite(130, 83, 136) : BV:8
138 : 2 { 0x2 +1.23e129 } : BV:32
139 : bvadd(138, 77, 128) : BV:32
140 : eq(139, 81) : BOOL
141 : eq(139, 84) : BOOL
142 : eq(139, 87) : BOOL
143 : eq(139, 90) : BOOL
144 : ite(143, 92, 93) : BV:8
145 : ite(142, 89, 144) : BV:8
146 : ite(141, 86, 145) : BV:8
147 : ite(140, 83, 146) : BV:8
148 : 1 { 0x1 +1.11e129 } : BV:32
149 : bvadd(148, 77, 128) : BV:32
150 : eq(149, 81) : BOOL
151 : eq(149, 84) : BOOL
152 : eq(149, 87) : BOOL
153 : eq(149, 90) : BOOL
154 : ite(153, 92, 93) : BV:8
155 : ite(152, 89, 154) : BV:8
156 : ite(151, 86, 155) : BV:8
157 : ite(150, 83, 156) : BV:8
158 : bvadd(77, 128) : BV:32
159 : eq(158, 81) : BOOL
160 : eq(158, 84) : BOOL
161 : eq(158, 87) : BOOL
162 : eq(158, 90) : BOOL
163 : ite(162, 92, 93) : BV:8
164 : ite(161, 89, 163) : BV:8
165 : ite(160, 86, 164) : BV:8
166 : ite(159, 83, 165) : BV:8
167 : bvconcat(137, 147, 157, 166) : BV:32
168 : ite(55, 2, 167) : BV:32
169 : ite(74, 167, 168) : BV:32
170 : ite(55, 2, 169) : BV:32
171 : lambda(52, 170) : FUNCTION[BV:32 -> BV:32]
172 : map(51, 171) : MAP[BV:32 -> BV:32]
173 : lambda(17, 172) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
174 : map(16, 173) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
175 : sym_const(174) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
=input.spec-%var-m-2
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 562594369 { 0x21888241 +1.6647503e196 } : BV:32
=input.spec-%tmpvar-17.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-mem
1 : ([ 0; 152810039 ] -> 0, [ 152810040; 152810040 ] -> 9, [ 152810041; 152810041 ] -> 128, [ 152810042; 152810042 ] -> 65, [ 152810043; 152810043 ] -> 4, [ 152810044; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 286277631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 286277632; 286277635 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 286277636; 2307876123 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2307876124; 2307876127 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2307876128; 2323775491 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2323775492; 2323775495 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2323775496; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 286277632 { 0x11104000 +1.12695312e163 } : BV:32
=input.dst.llvm-%m
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2307876124 { 0x898f651c -1987091172 -1.12027311e148 } : BV:32
=input.dst.llvm-%n
1 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2323775492 { 0x8a820004 -1971191804 -1.1562547e150 } : BV:32
=input.dst.llvm-%x
1 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda31914Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31915Var : BV:32
18 : Lambda31916Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536870912 { 0x20000000 +1.0e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536870913 { 0x20000001 +1.11e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31917Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
63 : eq(61, 62) : BOOL
64 : 4 { 0x4 } : BV:8
65 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
66 : eq(61, 65) : BOOL
67 : 128 { 0x80 -128 } : BV:8
68 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
69 : eq(61, 68) : BOOL
70 : 9 { 0x9 } : BV:8
71 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
72 : eq(61, 71) : BOOL
73 : 65 { 0x41 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(63, 64, 77) : BV:8
79 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
80 : bvadd(79, 60) : BV:32
81 : eq(80, 62) : BOOL
82 : eq(80, 65) : BOOL
83 : eq(80, 68) : BOOL
84 : eq(80, 71) : BOOL
85 : ite(84, 73, 74) : BV:8
86 : ite(83, 70, 85) : BV:8
87 : ite(82, 67, 86) : BV:8
88 : ite(81, 64, 87) : BV:8
89 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
90 : bvadd(89, 60) : BV:32
91 : eq(90, 62) : BOOL
92 : eq(90, 65) : BOOL
93 : eq(90, 68) : BOOL
94 : eq(90, 71) : BOOL
95 : ite(94, 73, 74) : BV:8
96 : ite(93, 70, 95) : BV:8
97 : ite(92, 67, 96) : BV:8
98 : ite(91, 64, 97) : BV:8
99 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
100 : bvadd(99, 60) : BV:32
101 : eq(100, 62) : BOOL
102 : eq(100, 65) : BOOL
103 : eq(100, 68) : BOOL
104 : eq(100, 71) : BOOL
105 : ite(104, 73, 74) : BV:8
106 : ite(103, 70, 105) : BV:8
107 : ite(102, 67, 106) : BV:8
108 : ite(101, 64, 107) : BV:8
109 : bvconcat(78, 88, 98, 108) : BV:32
110 : bvadd(56, 58, 109) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 65) : BOOL
113 : eq(110, 68) : BOOL
114 : eq(110, 71) : BOOL
115 : ite(114, 73, 74) : BV:8
116 : ite(113, 70, 115) : BV:8
117 : ite(112, 67, 116) : BV:8
118 : ite(111, 64, 117) : BV:8
119 : 2 { 0x2 +1.23e129 } : BV:32
120 : bvadd(119, 58, 109) : BV:32
121 : eq(120, 62) : BOOL
122 : eq(120, 65) : BOOL
123 : eq(120, 68) : BOOL
124 : eq(120, 71) : BOOL
125 : ite(124, 73, 74) : BV:8
126 : ite(123, 70, 125) : BV:8
127 : ite(122, 67, 126) : BV:8
128 : ite(121, 64, 127) : BV:8
129 : 1 { 0x1 +1.11e129 } : BV:32
130 : bvadd(129, 58, 109) : BV:32
131 : eq(130, 62) : BOOL
132 : eq(130, 65) : BOOL
133 : eq(130, 68) : BOOL
134 : eq(130, 71) : BOOL
135 : ite(134, 73, 74) : BV:8
136 : ite(133, 70, 135) : BV:8
137 : ite(132, 67, 136) : BV:8
138 : ite(131, 64, 137) : BV:8
139 : bvadd(58, 109) : BV:32
140 : eq(139, 62) : BOOL
141 : eq(139, 65) : BOOL
142 : eq(139, 68) : BOOL
143 : eq(139, 71) : BOOL
144 : ite(143, 73, 74) : BV:8
145 : ite(142, 70, 144) : BV:8
146 : ite(141, 67, 145) : BV:8
147 : ite(140, 64, 146) : BV:8
148 : bvconcat(118, 128, 138, 147) : BV:32
149 : ite(55, 2, 148) : BV:32
150 : lambda(52, 149) : FUNCTION[BV:32 -> BV:32]
151 : map(51, 150) : MAP[BV:32 -> BV:32]
152 : lambda(17, 151) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
153 : map(16, 152) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
154 : sym_const(153) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-n-0.L3%17%bbentry
1 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
=input.spec-%var-m-0.L3%17%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-x-0.L3%17%bbentry
1 : Lambda31901Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31902Var : BV:32
18 : Lambda31903Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536870912 { 0x20000000 +1.0e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536870913 { 0x20000001 +1.11e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda31904Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
82 : eq(80, 81) : BOOL
83 : 4 { 0x4 } : BV:8
84 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
85 : eq(80, 84) : BOOL
86 : 128 { 0x80 -128 } : BV:8
87 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
88 : eq(80, 87) : BOOL
89 : 9 { 0x9 } : BV:8
90 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
91 : eq(80, 90) : BOOL
92 : 65 { 0x41 } : BV:8
93 : 0 { 0x0 } : BV:8
94 : ite(91, 92, 93) : BV:8
95 : ite(88, 89, 94) : BV:8
96 : ite(85, 86, 95) : BV:8
97 : ite(82, 83, 96) : BV:8
98 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
99 : bvadd(98, 79) : BV:32
100 : eq(99, 81) : BOOL
101 : eq(99, 84) : BOOL
102 : eq(99, 87) : BOOL
103 : eq(99, 90) : BOOL
104 : ite(103, 92, 93) : BV:8
105 : ite(102, 89, 104) : BV:8
106 : ite(101, 86, 105) : BV:8
107 : ite(100, 83, 106) : BV:8
108 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
109 : bvadd(108, 79) : BV:32
110 : eq(109, 81) : BOOL
111 : eq(109, 84) : BOOL
112 : eq(109, 87) : BOOL
113 : eq(109, 90) : BOOL
114 : ite(113, 92, 93) : BV:8
115 : ite(112, 89, 114) : BV:8
116 : ite(111, 86, 115) : BV:8
117 : ite(110, 83, 116) : BV:8
118 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
119 : bvadd(118, 79) : BV:32
120 : eq(119, 81) : BOOL
121 : eq(119, 84) : BOOL
122 : eq(119, 87) : BOOL
123 : eq(119, 90) : BOOL
124 : ite(123, 92, 93) : BV:8
125 : ite(122, 89, 124) : BV:8
126 : ite(121, 86, 125) : BV:8
127 : ite(120, 83, 126) : BV:8
128 : bvconcat(97, 107, 117, 127) : BV:32
129 : bvadd(75, 77, 128) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 84) : BOOL
132 : eq(129, 87) : BOOL
133 : eq(129, 90) : BOOL
134 : ite(133, 92, 93) : BV:8
135 : ite(132, 89, 134) : BV:8
136 : ite(131, 86, 135) : BV:8
137 : ite(130, 83, 136) : BV:8
138 : 2 { 0x2 +1.23e129 } : BV:32
139 : bvadd(138, 77, 128) : BV:32
140 : eq(139, 81) : BOOL
141 : eq(139, 84) : BOOL
142 : eq(139, 87) : BOOL
143 : eq(139, 90) : BOOL
144 : ite(143, 92, 93) : BV:8
145 : ite(142, 89, 144) : BV:8
146 : ite(141, 86, 145) : BV:8
147 : ite(140, 83, 146) : BV:8
148 : 1 { 0x1 +1.11e129 } : BV:32
149 : bvadd(148, 77, 128) : BV:32
150 : eq(149, 81) : BOOL
151 : eq(149, 84) : BOOL
152 : eq(149, 87) : BOOL
153 : eq(149, 90) : BOOL
154 : ite(153, 92, 93) : BV:8
155 : ite(152, 89, 154) : BV:8
156 : ite(151, 86, 155) : BV:8
157 : ite(150, 83, 156) : BV:8
158 : bvadd(77, 128) : BV:32
159 : eq(158, 81) : BOOL
160 : eq(158, 84) : BOOL
161 : eq(158, 87) : BOOL
162 : eq(158, 90) : BOOL
163 : ite(162, 92, 93) : BV:8
164 : ite(161, 89, 163) : BV:8
165 : ite(160, 86, 164) : BV:8
166 : ite(159, 83, 165) : BV:8
167 : bvconcat(137, 147, 157, 166) : BV:32
168 : ite(55, 2, 167) : BV:32
169 : ite(74, 167, 168) : BV:32
170 : ite(55, 2, 169) : BV:32
171 : ite(55, 2, 170) : BV:32
172 : lambda(52, 171) : FUNCTION[BV:32 -> BV:32]
173 : map(51, 172) : MAP[BV:32 -> BV:32]
174 : lambda(17, 173) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
175 : map(16, 174) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
176 : sym_const(175) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-4.L3%33%bbentry
1 : 456 { 0x1c8 +1.5435e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%38%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%17%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-20.L3%17%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L3%34%bbentry
1 : 123 { 0x7b +1.1466e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 562594369 { 0x21888241 +1.6647503e196 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2307876124 { 0x898f651c -1987091172 -1.12027311e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2307876127 { 0x898f651f -1987091169 -1.12027347e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2323775492 { 0x8a820004 -1971191804 -1.1562547e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2323775495 { 0x8a820007 -1971191801 -1.1562583e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 286277632 { 0x11104000 +1.12695312e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 286277635 { 0x11104003 +1.12695348e163 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 2232943391 ] -> true, [ 2232943392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 2232943391 ] -> true, [ 2232943392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda31748Var : BV:32
2 : Lambda31749Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 536870912 { 0x20000000 +1.0e193 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 536870913 { 0x20000001 +1.11e193 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
55 : eq(53, 54) : BOOL
56 : 4 { 0x4 } : BV:8
57 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
58 : eq(53, 57) : BOOL
59 : 128 { 0x80 -128 } : BV:8
60 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
61 : eq(53, 60) : BOOL
62 : 9 { 0x9 } : BV:8
63 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
64 : eq(53, 63) : BOOL
65 : 65 { 0x41 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(61, 62, 67) : BV:8
69 : ite(58, 59, 68) : BV:8
70 : ite(55, 56, 69) : BV:8
71 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
72 : bvadd(71, 52) : BV:32
73 : eq(72, 54) : BOOL
74 : eq(72, 57) : BOOL
75 : eq(72, 60) : BOOL
76 : eq(72, 63) : BOOL
77 : ite(76, 65, 66) : BV:8
78 : ite(75, 62, 77) : BV:8
79 : ite(74, 59, 78) : BV:8
80 : ite(73, 56, 79) : BV:8
81 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
82 : bvadd(81, 52) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 57) : BOOL
85 : eq(82, 60) : BOOL
86 : eq(82, 63) : BOOL
87 : ite(86, 65, 66) : BV:8
88 : ite(85, 62, 87) : BV:8
89 : ite(84, 59, 88) : BV:8
90 : ite(83, 56, 89) : BV:8
91 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
92 : bvadd(91, 52) : BV:32
93 : eq(92, 54) : BOOL
94 : eq(92, 57) : BOOL
95 : eq(92, 60) : BOOL
96 : eq(92, 63) : BOOL
97 : ite(96, 65, 66) : BV:8
98 : ite(95, 62, 97) : BV:8
99 : ite(94, 59, 98) : BV:8
100 : ite(93, 56, 99) : BV:8
101 : bvconcat(70, 80, 90, 100) : BV:32
102 : bvadd(48, 50, 101) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : eq(102, 63) : BOOL
107 : ite(106, 65, 66) : BV:8
108 : ite(105, 62, 107) : BV:8
109 : ite(104, 59, 108) : BV:8
110 : ite(103, 56, 109) : BV:8
111 : 2 { 0x2 +1.23e129 } : BV:32
112 : bvadd(111, 50, 101) : BV:32
113 : eq(112, 54) : BOOL
114 : eq(112, 57) : BOOL
115 : eq(112, 60) : BOOL
116 : eq(112, 63) : BOOL
117 : ite(116, 65, 66) : BV:8
118 : ite(115, 62, 117) : BV:8
119 : ite(114, 59, 118) : BV:8
120 : ite(113, 56, 119) : BV:8
121 : 1 { 0x1 +1.11e129 } : BV:32
122 : bvadd(121, 50, 101) : BV:32
123 : eq(122, 54) : BOOL
124 : eq(122, 57) : BOOL
125 : eq(122, 60) : BOOL
126 : eq(122, 63) : BOOL
127 : ite(126, 65, 66) : BV:8
128 : ite(125, 62, 127) : BV:8
129 : ite(124, 59, 128) : BV:8
130 : ite(123, 56, 129) : BV:8
131 : bvadd(50, 101) : BV:32
132 : eq(131, 54) : BOOL
133 : eq(131, 57) : BOOL
134 : eq(131, 60) : BOOL
135 : eq(131, 63) : BOOL
136 : ite(135, 65, 66) : BV:8
137 : ite(134, 62, 136) : BV:8
138 : ite(133, 59, 137) : BV:8
139 : ite(132, 56, 138) : BV:8
140 : bvconcat(110, 120, 130, 139) : BV:32
141 : ite(6, 3, 140) : BV:32
142 : ite(47, 140, 141) : BV:32
143 : ite(6, 3, 142) : BV:32
144 : lambda(1, 2, 143) : FUNCTION[BV:32,BV:32 -> BV:32]
145 : sym_const(144) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda31755Var : BV:32
2 : Lambda31756Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
14 : eq(12, 13) : BOOL
15 : 4 { 0x4 } : BV:8
16 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
17 : eq(12, 16) : BOOL
18 : 128 { 0x80 -128 } : BV:8
19 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
20 : eq(12, 19) : BOOL
21 : 9 { 0x9 } : BV:8
22 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
23 : eq(12, 22) : BOOL
24 : 65 { 0x41 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(20, 21, 26) : BV:8
28 : ite(17, 18, 27) : BV:8
29 : ite(14, 15, 28) : BV:8
30 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
31 : bvadd(30, 11) : BV:32
32 : eq(31, 13) : BOOL
33 : eq(31, 16) : BOOL
34 : eq(31, 19) : BOOL
35 : eq(31, 22) : BOOL
36 : ite(35, 24, 25) : BV:8
37 : ite(34, 21, 36) : BV:8
38 : ite(33, 18, 37) : BV:8
39 : ite(32, 15, 38) : BV:8
40 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
41 : bvadd(40, 11) : BV:32
42 : eq(41, 13) : BOOL
43 : eq(41, 16) : BOOL
44 : eq(41, 19) : BOOL
45 : eq(41, 22) : BOOL
46 : ite(45, 24, 25) : BV:8
47 : ite(44, 21, 46) : BV:8
48 : ite(43, 18, 47) : BV:8
49 : ite(42, 15, 48) : BV:8
50 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
51 : bvadd(50, 11) : BV:32
52 : eq(51, 13) : BOOL
53 : eq(51, 16) : BOOL
54 : eq(51, 19) : BOOL
55 : eq(51, 22) : BOOL
56 : ite(55, 24, 25) : BV:8
57 : ite(54, 21, 56) : BV:8
58 : ite(53, 18, 57) : BV:8
59 : ite(52, 15, 58) : BV:8
60 : bvconcat(29, 39, 49, 59) : BV:32
61 : bvadd(7, 9, 60) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 16) : BOOL
64 : eq(61, 19) : BOOL
65 : eq(61, 22) : BOOL
66 : ite(65, 24, 25) : BV:8
67 : ite(64, 21, 66) : BV:8
68 : ite(63, 18, 67) : BV:8
69 : ite(62, 15, 68) : BV:8
70 : 2 { 0x2 +1.23e129 } : BV:32
71 : bvadd(70, 9, 60) : BV:32
72 : eq(71, 13) : BOOL
73 : eq(71, 16) : BOOL
74 : eq(71, 19) : BOOL
75 : eq(71, 22) : BOOL
76 : ite(75, 24, 25) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 18, 77) : BV:8
79 : ite(72, 15, 78) : BV:8
80 : 1 { 0x1 +1.11e129 } : BV:32
81 : bvadd(80, 9, 60) : BV:32
82 : eq(81, 13) : BOOL
83 : eq(81, 16) : BOOL
84 : eq(81, 19) : BOOL
85 : eq(81, 22) : BOOL
86 : ite(85, 24, 25) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 18, 87) : BV:8
89 : ite(82, 15, 88) : BV:8
90 : bvadd(9, 60) : BV:32
91 : eq(90, 13) : BOOL
92 : eq(90, 16) : BOOL
93 : eq(90, 19) : BOOL
94 : eq(90, 22) : BOOL
95 : ite(94, 24, 25) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 18, 96) : BV:8
98 : ite(91, 15, 97) : BV:8
99 : bvconcat(69, 79, 89, 98) : BV:32
100 : ite(6, 3, 99) : BV:32
101 : lambda(1, 2, 100) : FUNCTION[BV:32,BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda31750Var : BV:32
2 : Lambda31751Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536870913 { 0x20000001 +1.11e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda31757Var : BV:32
2 : Lambda31758Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536870913 { 0x20000001 +1.11e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 2232943391 ] -> true, [ 2232943392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda31762Var : BV:32
2 : Lambda31763Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 536870912 { 0x20000000 +1.0e193 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 536870913 { 0x20000001 +1.11e193 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2197399863 { 0x82f9a937 -2097567433 -1.95047652e134 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 152810043 { 0x91bb23b +1.21637666e147 } : BV:32
55 : eq(53, 54) : BOOL
56 : 4 { 0x4 } : BV:8
57 : 152810041 { 0x91bb239 +1.21637642e147 } : BV:32
58 : eq(53, 57) : BOOL
59 : 128 { 0x80 -128 } : BV:8
60 : 152810040 { 0x91bb238 +1.21637630e147 } : BV:32
61 : eq(53, 60) : BOOL
62 : 9 { 0x9 } : BV:8
63 : 152810042 { 0x91bb23a +1.21637654e147 } : BV:32
64 : eq(53, 63) : BOOL
65 : 65 { 0x41 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(61, 62, 67) : BV:8
69 : ite(58, 59, 68) : BV:8
70 : ite(55, 56, 69) : BV:8
71 : 2197399862 { 0x82f9a936 -2097567434 -1.95047640e134 } : BV:32
72 : bvadd(71, 52) : BV:32
73 : eq(72, 54) : BOOL
74 : eq(72, 57) : BOOL
75 : eq(72, 60) : BOOL
76 : eq(72, 63) : BOOL
77 : ite(76, 65, 66) : BV:8
78 : ite(75, 62, 77) : BV:8
79 : ite(74, 59, 78) : BV:8
80 : ite(73, 56, 79) : BV:8
81 : 2197399861 { 0x82f9a935 -2097567435 -1.95047628e134 } : BV:32
82 : bvadd(81, 52) : BV:32
83 : eq(82, 54) : BOOL
84 : eq(82, 57) : BOOL
85 : eq(82, 60) : BOOL
86 : eq(82, 63) : BOOL
87 : ite(86, 65, 66) : BV:8
88 : ite(85, 62, 87) : BV:8
89 : ite(84, 59, 88) : BV:8
90 : ite(83, 56, 89) : BV:8
91 : 2197399860 { 0x82f9a934 -2097567436 -1.95047616e134 } : BV:32
92 : bvadd(91, 52) : BV:32
93 : eq(92, 54) : BOOL
94 : eq(92, 57) : BOOL
95 : eq(92, 60) : BOOL
96 : eq(92, 63) : BOOL
97 : ite(96, 65, 66) : BV:8
98 : ite(95, 62, 97) : BV:8
99 : ite(94, 59, 98) : BV:8
100 : ite(93, 56, 99) : BV:8
101 : bvconcat(70, 80, 90, 100) : BV:32
102 : bvadd(48, 50, 101) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : eq(102, 63) : BOOL
107 : ite(106, 65, 66) : BV:8
108 : ite(105, 62, 107) : BV:8
109 : ite(104, 59, 108) : BV:8
110 : ite(103, 56, 109) : BV:8
111 : 2 { 0x2 +1.23e129 } : BV:32
112 : bvadd(111, 50, 101) : BV:32
113 : eq(112, 54) : BOOL
114 : eq(112, 57) : BOOL
115 : eq(112, 60) : BOOL
116 : eq(112, 63) : BOOL
117 : ite(116, 65, 66) : BV:8
118 : ite(115, 62, 117) : BV:8
119 : ite(114, 59, 118) : BV:8
120 : ite(113, 56, 119) : BV:8
121 : 1 { 0x1 +1.11e129 } : BV:32
122 : bvadd(121, 50, 101) : BV:32
123 : eq(122, 54) : BOOL
124 : eq(122, 57) : BOOL
125 : eq(122, 60) : BOOL
126 : eq(122, 63) : BOOL
127 : ite(126, 65, 66) : BV:8
128 : ite(125, 62, 127) : BV:8
129 : ite(124, 59, 128) : BV:8
130 : ite(123, 56, 129) : BV:8
131 : bvadd(50, 101) : BV:32
132 : eq(131, 54) : BOOL
133 : eq(131, 57) : BOOL
134 : eq(131, 60) : BOOL
135 : eq(131, 63) : BOOL
136 : ite(135, 65, 66) : BV:8
137 : ite(134, 62, 136) : BV:8
138 : ite(133, 59, 137) : BV:8
139 : ite(132, 56, 138) : BV:8
140 : bvconcat(110, 120, 130, 139) : BV:32
141 : ite(6, 3, 140) : BV:32
142 : ite(47, 140, 141) : BV:32
143 : ite(6, 3, 142) : BV:32
144 : ite(6, 3, 143) : BV:32
145 : lambda(1, 2, 144) : FUNCTION[BV:32,BV:32 -> BV:32]
146 : sym_const(145) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda31764Var : BV:32
2 : Lambda31765Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2232943391 { 0x8518031f -2062023905 -1.18759524e139 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2232943393 { 0x85180321 -2062023903 -1.18759548e139 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2232943392 { 0x85180320 -2062023904 -1.18759536e139 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536870913 { 0x20000001 +1.11e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
126452346
=counter_example_end


</MSG>
<MSG>0:59 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D2 (d:2, s:0, sp: 14)...</MSG>
<MSG>0:59 : Chose (for CE propagation) product-TFG foo.A1.B3.C1.D1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%10%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%10%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 37 counterexamples (for correlating 11 bv exprs)
            L3%10%bbentry_Lfor.cond1%1%bbentry (C L3%10%bbentry, A (line 4 at column 28))
                L3%10%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 26 counterexamples (for correlating 14 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:59 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>0:59 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B3.C1.D1...</MSG>
<MSG>0:59 : Creating ssa-path for the src-tfg path L3%10%bbentry --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:59 : Identifying common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Identified no common alloc-deallocs in the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:59 : Adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: Getting alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: Found no alloca-ptrs on edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: Adding edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: Propagated 5 out of 26 counter-examples across edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: marking unstable at L3%10%bbentry_Lfor.cond1%1%bbentry due to failing condition:
wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140860 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 1
140424 : input.dst.llvm-%m : BV:32                 : 1
140870 : bvult(140860, 140424) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 1
169321 : bvuge(140278, 140633) : BOOL              : false
216658 : or(140870, 169321) : BOOL                 : false

ce =
=counter_example_begin z3.ce4099 e479ce73dc4776782f1f21986f5c8cda
=input.spec-%var-x-2
1 : Lambda14928Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14929Var : BV:32
18 : Lambda14930Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda14931Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : bvmul(8, 51) : BV:32
75 : bvmul(8, 17) : BV:32
76 : bvadd(4, 75) : BV:32
77 : eq(76, 2) : BOOL
78 : 248 { 0xf8 -8 } : BV:8
79 : eq(76, 4) : BOOL
80 : 246 { 0xf6 -10 } : BV:8
81 : eq(76, 36) : BOOL
82 : 183 { 0xb7 -73 } : BV:8
83 : eq(76, 40) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(81, 82, 86) : BV:8
88 : ite(79, 80, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : bvadd(40, 75) : BV:32
91 : eq(90, 2) : BOOL
92 : eq(90, 4) : BOOL
93 : eq(90, 36) : BOOL
94 : eq(90, 40) : BOOL
95 : ite(94, 84, 85) : BV:8
96 : ite(93, 82, 95) : BV:8
97 : ite(92, 80, 96) : BV:8
98 : ite(91, 78, 97) : BV:8
99 : bvadd(36, 75) : BV:32
100 : eq(99, 2) : BOOL
101 : eq(99, 4) : BOOL
102 : eq(99, 36) : BOOL
103 : eq(99, 40) : BOOL
104 : ite(103, 84, 85) : BV:8
105 : ite(102, 82, 104) : BV:8
106 : ite(101, 80, 105) : BV:8
107 : ite(100, 78, 106) : BV:8
108 : eq(75, 2) : BOOL
109 : eq(75, 4) : BOOL
110 : eq(75, 36) : BOOL
111 : eq(75, 40) : BOOL
112 : ite(111, 84, 85) : BV:8
113 : ite(110, 82, 112) : BV:8
114 : ite(109, 80, 113) : BV:8
115 : ite(108, 78, 114) : BV:8
116 : bvconcat(89, 98, 107, 115) : BV:32
117 : bvadd(4, 74, 116) : BV:32
118 : eq(117, 2) : BOOL
119 : eq(117, 4) : BOOL
120 : eq(117, 36) : BOOL
121 : eq(117, 40) : BOOL
122 : ite(121, 84, 85) : BV:8
123 : ite(120, 82, 122) : BV:8
124 : ite(119, 80, 123) : BV:8
125 : ite(118, 78, 124) : BV:8
126 : bvadd(40, 74, 116) : BV:32
127 : eq(126, 2) : BOOL
128 : eq(126, 4) : BOOL
129 : eq(126, 36) : BOOL
130 : eq(126, 40) : BOOL
131 : ite(130, 84, 85) : BV:8
132 : ite(129, 82, 131) : BV:8
133 : ite(128, 80, 132) : BV:8
134 : ite(127, 78, 133) : BV:8
135 : bvadd(36, 74, 116) : BV:32
136 : eq(135, 2) : BOOL
137 : eq(135, 4) : BOOL
138 : eq(135, 36) : BOOL
139 : eq(135, 40) : BOOL
140 : ite(139, 84, 85) : BV:8
141 : ite(138, 82, 140) : BV:8
142 : ite(137, 80, 141) : BV:8
143 : ite(136, 78, 142) : BV:8
144 : bvadd(74, 116) : BV:32
145 : eq(144, 2) : BOOL
146 : eq(144, 4) : BOOL
147 : eq(144, 36) : BOOL
148 : eq(144, 40) : BOOL
149 : ite(148, 84, 85) : BV:8
150 : ite(147, 82, 149) : BV:8
151 : ite(146, 80, 150) : BV:8
152 : ite(145, 78, 151) : BV:8
153 : bvconcat(125, 134, 143, 152) : BV:32
154 : ite(54, 2, 153) : BV:32
155 : ite(73, 153, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : lambda(51, 156) : FUNCTION[BV:32 -> BV:32]
158 : map(50, 157) : MAP[BV:32 -> BV:32]
159 : lambda(17, 158) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
160 : map(16, 159) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
161 : sym_const(160) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-m-2
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 248, [ 1; 1 ] -> 183, [ 2; 2 ] -> 255, [ 3; 3 ] -> 246, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1478615215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1478615216; 1478615219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1478615220; 1651575871 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1651575872; 1651575875 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1651575876; 2300575811 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2300575812; 2300575815 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2300575816; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1651575872 { 0x62710c40 +1.88318634e69 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1478615216 { 0x5821e0b0 +1.26466941e49 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2300575812 { 0x89200044 -1994391484 -1.25000810e147 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda14954Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14955Var : BV:32
18 : Lambda14956Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda14957Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : bvmul(8, 51) : BV:32
56 : bvmul(8, 17) : BV:32
57 : bvadd(4, 56) : BV:32
58 : eq(57, 2) : BOOL
59 : 248 { 0xf8 -8 } : BV:8
60 : eq(57, 4) : BOOL
61 : 246 { 0xf6 -10 } : BV:8
62 : eq(57, 36) : BOOL
63 : 183 { 0xb7 -73 } : BV:8
64 : eq(57, 40) : BOOL
65 : 255 { 0xff -1 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : ite(60, 61, 68) : BV:8
70 : ite(58, 59, 69) : BV:8
71 : bvadd(40, 56) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 4) : BOOL
74 : eq(71, 36) : BOOL
75 : eq(71, 40) : BOOL
76 : ite(75, 65, 66) : BV:8
77 : ite(74, 63, 76) : BV:8
78 : ite(73, 61, 77) : BV:8
79 : ite(72, 59, 78) : BV:8
80 : bvadd(36, 56) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 4) : BOOL
83 : eq(80, 36) : BOOL
84 : eq(80, 40) : BOOL
85 : ite(84, 65, 66) : BV:8
86 : ite(83, 63, 85) : BV:8
87 : ite(82, 61, 86) : BV:8
88 : ite(81, 59, 87) : BV:8
89 : eq(56, 2) : BOOL
90 : eq(56, 4) : BOOL
91 : eq(56, 36) : BOOL
92 : eq(56, 40) : BOOL
93 : ite(92, 65, 66) : BV:8
94 : ite(91, 63, 93) : BV:8
95 : ite(90, 61, 94) : BV:8
96 : ite(89, 59, 95) : BV:8
97 : bvconcat(70, 79, 88, 96) : BV:32
98 : bvadd(4, 55, 97) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 4) : BOOL
101 : eq(98, 36) : BOOL
102 : eq(98, 40) : BOOL
103 : ite(102, 65, 66) : BV:8
104 : ite(101, 63, 103) : BV:8
105 : ite(100, 61, 104) : BV:8
106 : ite(99, 59, 105) : BV:8
107 : bvadd(40, 55, 97) : BV:32
108 : eq(107, 2) : BOOL
109 : eq(107, 4) : BOOL
110 : eq(107, 36) : BOOL
111 : eq(107, 40) : BOOL
112 : ite(111, 65, 66) : BV:8
113 : ite(110, 63, 112) : BV:8
114 : ite(109, 61, 113) : BV:8
115 : ite(108, 59, 114) : BV:8
116 : bvadd(36, 55, 97) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 4) : BOOL
119 : eq(116, 36) : BOOL
120 : eq(116, 40) : BOOL
121 : ite(120, 65, 66) : BV:8
122 : ite(119, 63, 121) : BV:8
123 : ite(118, 61, 122) : BV:8
124 : ite(117, 59, 123) : BV:8
125 : bvadd(55, 97) : BV:32
126 : eq(125, 2) : BOOL
127 : eq(125, 4) : BOOL
128 : eq(125, 36) : BOOL
129 : eq(125, 40) : BOOL
130 : ite(129, 65, 66) : BV:8
131 : ite(128, 63, 130) : BV:8
132 : ite(127, 61, 131) : BV:8
133 : ite(126, 59, 132) : BV:8
134 : bvconcat(106, 115, 124, 133) : BV:32
135 : ite(54, 2, 134) : BV:32
136 : lambda(51, 135) : FUNCTION[BV:32 -> BV:32]
137 : map(50, 136) : MAP[BV:32 -> BV:32]
138 : lambda(17, 137) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
139 : map(16, 138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140 : sym_const(139) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1478615216 { 0x5821e0b0 +1.26466941e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1478615219 { 0x5821e0b3 +1.26466977e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2300575812 { 0x89200044 -1994391484 -1.25000810e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2300575815 { 0x89200047 -1994391481 -1.25000846e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1651575872 { 0x62710c40 +1.88318634e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1651575875 { 0x62710c43 +1.88318669e69 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda14837Var : BV:32
2 : Lambda14838Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : bvmul(12, 2) : BV:32
48 : bvmul(12, 1) : BV:32
49 : bvadd(8, 48) : BV:32
50 : eq(49, 3) : BOOL
51 : 248 { 0xf8 -8 } : BV:8
52 : eq(49, 8) : BOOL
53 : 246 { 0xf6 -10 } : BV:8
54 : eq(49, 32) : BOOL
55 : 183 { 0xb7 -73 } : BV:8
56 : eq(49, 36) : BOOL
57 : 255 { 0xff -1 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(54, 55, 59) : BV:8
61 : ite(52, 53, 60) : BV:8
62 : ite(50, 51, 61) : BV:8
63 : bvadd(36, 48) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 8) : BOOL
66 : eq(63, 32) : BOOL
67 : eq(63, 36) : BOOL
68 : ite(67, 57, 58) : BV:8
69 : ite(66, 55, 68) : BV:8
70 : ite(65, 53, 69) : BV:8
71 : ite(64, 51, 70) : BV:8
72 : bvadd(32, 48) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 8) : BOOL
75 : eq(72, 32) : BOOL
76 : eq(72, 36) : BOOL
77 : ite(76, 57, 58) : BV:8
78 : ite(75, 55, 77) : BV:8
79 : ite(74, 53, 78) : BV:8
80 : ite(73, 51, 79) : BV:8
81 : eq(48, 3) : BOOL
82 : eq(48, 8) : BOOL
83 : eq(48, 32) : BOOL
84 : eq(48, 36) : BOOL
85 : ite(84, 57, 58) : BV:8
86 : ite(83, 55, 85) : BV:8
87 : ite(82, 53, 86) : BV:8
88 : ite(81, 51, 87) : BV:8
89 : bvconcat(62, 71, 80, 88) : BV:32
90 : bvadd(8, 47, 89) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 8) : BOOL
93 : eq(90, 32) : BOOL
94 : eq(90, 36) : BOOL
95 : ite(94, 57, 58) : BV:8
96 : ite(93, 55, 95) : BV:8
97 : ite(92, 53, 96) : BV:8
98 : ite(91, 51, 97) : BV:8
99 : bvadd(36, 47, 89) : BV:32
100 : eq(99, 3) : BOOL
101 : eq(99, 8) : BOOL
102 : eq(99, 32) : BOOL
103 : eq(99, 36) : BOOL
104 : ite(103, 57, 58) : BV:8
105 : ite(102, 55, 104) : BV:8
106 : ite(101, 53, 105) : BV:8
107 : ite(100, 51, 106) : BV:8
108 : bvadd(32, 47, 89) : BV:32
109 : eq(108, 3) : BOOL
110 : eq(108, 8) : BOOL
111 : eq(108, 32) : BOOL
112 : eq(108, 36) : BOOL
113 : ite(112, 57, 58) : BV:8
114 : ite(111, 55, 113) : BV:8
115 : ite(110, 53, 114) : BV:8
116 : ite(109, 51, 115) : BV:8
117 : bvadd(47, 89) : BV:32
118 : eq(117, 3) : BOOL
119 : eq(117, 8) : BOOL
120 : eq(117, 32) : BOOL
121 : eq(117, 36) : BOOL
122 : ite(121, 57, 58) : BV:8
123 : ite(120, 55, 122) : BV:8
124 : ite(119, 53, 123) : BV:8
125 : ite(118, 51, 124) : BV:8
126 : bvconcat(98, 107, 116, 125) : BV:32
127 : ite(6, 3, 126) : BV:32
128 : ite(46, 126, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : lambda(1, 2, 129) : FUNCTION[BV:32,BV:32 -> BV:32]
131 : sym_const(130) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda14844Var : BV:32
2 : Lambda14845Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 248 { 0xf8 -8 } : BV:8
14 : eq(11, 7) : BOOL
15 : 246 { 0xf6 -10 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 183 { 0xb7 -73 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda14839Var : BV:32
2 : Lambda14840Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda14846Var : BV:32
2 : Lambda14847Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda14851Var : BV:32
2 : Lambda14852Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : bvmul(12, 2) : BV:32
48 : bvmul(12, 1) : BV:32
49 : bvadd(8, 48) : BV:32
50 : eq(49, 3) : BOOL
51 : 248 { 0xf8 -8 } : BV:8
52 : eq(49, 8) : BOOL
53 : 246 { 0xf6 -10 } : BV:8
54 : eq(49, 32) : BOOL
55 : 183 { 0xb7 -73 } : BV:8
56 : eq(49, 36) : BOOL
57 : 255 { 0xff -1 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(54, 55, 59) : BV:8
61 : ite(52, 53, 60) : BV:8
62 : ite(50, 51, 61) : BV:8
63 : bvadd(36, 48) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 8) : BOOL
66 : eq(63, 32) : BOOL
67 : eq(63, 36) : BOOL
68 : ite(67, 57, 58) : BV:8
69 : ite(66, 55, 68) : BV:8
70 : ite(65, 53, 69) : BV:8
71 : ite(64, 51, 70) : BV:8
72 : bvadd(32, 48) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 8) : BOOL
75 : eq(72, 32) : BOOL
76 : eq(72, 36) : BOOL
77 : ite(76, 57, 58) : BV:8
78 : ite(75, 55, 77) : BV:8
79 : ite(74, 53, 78) : BV:8
80 : ite(73, 51, 79) : BV:8
81 : eq(48, 3) : BOOL
82 : eq(48, 8) : BOOL
83 : eq(48, 32) : BOOL
84 : eq(48, 36) : BOOL
85 : ite(84, 57, 58) : BV:8
86 : ite(83, 55, 85) : BV:8
87 : ite(82, 53, 86) : BV:8
88 : ite(81, 51, 87) : BV:8
89 : bvconcat(62, 71, 80, 88) : BV:32
90 : bvadd(8, 47, 89) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 8) : BOOL
93 : eq(90, 32) : BOOL
94 : eq(90, 36) : BOOL
95 : ite(94, 57, 58) : BV:8
96 : ite(93, 55, 95) : BV:8
97 : ite(92, 53, 96) : BV:8
98 : ite(91, 51, 97) : BV:8
99 : bvadd(36, 47, 89) : BV:32
100 : eq(99, 3) : BOOL
101 : eq(99, 8) : BOOL
102 : eq(99, 32) : BOOL
103 : eq(99, 36) : BOOL
104 : ite(103, 57, 58) : BV:8
105 : ite(102, 55, 104) : BV:8
106 : ite(101, 53, 105) : BV:8
107 : ite(100, 51, 106) : BV:8
108 : bvadd(32, 47, 89) : BV:32
109 : eq(108, 3) : BOOL
110 : eq(108, 8) : BOOL
111 : eq(108, 32) : BOOL
112 : eq(108, 36) : BOOL
113 : ite(112, 57, 58) : BV:8
114 : ite(111, 55, 113) : BV:8
115 : ite(110, 53, 114) : BV:8
116 : ite(109, 51, 115) : BV:8
117 : bvadd(47, 89) : BV:32
118 : eq(117, 3) : BOOL
119 : eq(117, 8) : BOOL
120 : eq(117, 32) : BOOL
121 : eq(117, 36) : BOOL
122 : ite(121, 57, 58) : BV:8
123 : ite(120, 55, 122) : BV:8
124 : ite(119, 53, 123) : BV:8
125 : ite(118, 51, 124) : BV:8
126 : bvconcat(98, 107, 116, 125) : BV:32
127 : ite(6, 3, 126) : BV:32
128 : ite(46, 126, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(6, 3, 129) : BV:32
131 : lambda(1, 2, 130) : FUNCTION[BV:32,BV:32 -> BV:32]
132 : sym_const(131) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda14853Var : BV:32
2 : Lambda14854Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
819101561
=counter_example_end


failcond-expr = or(bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m), bvuge(0, input.spec-%var-m-1.L3%7%bbentry)):
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : input.spec-%var-m-1.L3%7%bbentry : BV:32
6 : bvuge(4, 5) : BOOL
7 : or(3, 6) : BOOL
</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: Computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B3.C1.D1: Done computing CG regions after the addition of the edge L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : Done adding new edge to the product-TFG foo.A1.B3.C1.D1 for fromPC L3%10%bbentry_Lfor.cond1%1%bbentry and toPC L3%10%bbentry_Lfor.cond1%1%bbentry, src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : Done adding a CG edge composition using the src path L3%10%bbentry --> L3%10%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>0:59 : Failed correlation of src pathset L3%10%bbentry=>L3%10%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%10%bbentry_Lfor.cond1%1%bbentry: failcond = wfcond.from_pcL3%10%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140860 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32 : 1
140424 : input.dst.llvm-%m : BV:32                 : 1
140870 : bvult(140860, 140424) : BOOL              : false
140278 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140633 : input.spec-%var-m-1.L3%7%bbentry : BV:32  : 1
169321 : bvuge(140278, 140633) : BOOL              : false
216658 : or(140870, 169321) : BOOL                 : false

ce =
=counter_example_begin z3.ce4099 e479ce73dc4776782f1f21986f5c8cda
=input.spec-%var-x-2
1 : Lambda14928Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14929Var : BV:32
18 : Lambda14930Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda14931Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : bvmul(8, 51) : BV:32
75 : bvmul(8, 17) : BV:32
76 : bvadd(4, 75) : BV:32
77 : eq(76, 2) : BOOL
78 : 248 { 0xf8 -8 } : BV:8
79 : eq(76, 4) : BOOL
80 : 246 { 0xf6 -10 } : BV:8
81 : eq(76, 36) : BOOL
82 : 183 { 0xb7 -73 } : BV:8
83 : eq(76, 40) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(81, 82, 86) : BV:8
88 : ite(79, 80, 87) : BV:8
89 : ite(77, 78, 88) : BV:8
90 : bvadd(40, 75) : BV:32
91 : eq(90, 2) : BOOL
92 : eq(90, 4) : BOOL
93 : eq(90, 36) : BOOL
94 : eq(90, 40) : BOOL
95 : ite(94, 84, 85) : BV:8
96 : ite(93, 82, 95) : BV:8
97 : ite(92, 80, 96) : BV:8
98 : ite(91, 78, 97) : BV:8
99 : bvadd(36, 75) : BV:32
100 : eq(99, 2) : BOOL
101 : eq(99, 4) : BOOL
102 : eq(99, 36) : BOOL
103 : eq(99, 40) : BOOL
104 : ite(103, 84, 85) : BV:8
105 : ite(102, 82, 104) : BV:8
106 : ite(101, 80, 105) : BV:8
107 : ite(100, 78, 106) : BV:8
108 : eq(75, 2) : BOOL
109 : eq(75, 4) : BOOL
110 : eq(75, 36) : BOOL
111 : eq(75, 40) : BOOL
112 : ite(111, 84, 85) : BV:8
113 : ite(110, 82, 112) : BV:8
114 : ite(109, 80, 113) : BV:8
115 : ite(108, 78, 114) : BV:8
116 : bvconcat(89, 98, 107, 115) : BV:32
117 : bvadd(4, 74, 116) : BV:32
118 : eq(117, 2) : BOOL
119 : eq(117, 4) : BOOL
120 : eq(117, 36) : BOOL
121 : eq(117, 40) : BOOL
122 : ite(121, 84, 85) : BV:8
123 : ite(120, 82, 122) : BV:8
124 : ite(119, 80, 123) : BV:8
125 : ite(118, 78, 124) : BV:8
126 : bvadd(40, 74, 116) : BV:32
127 : eq(126, 2) : BOOL
128 : eq(126, 4) : BOOL
129 : eq(126, 36) : BOOL
130 : eq(126, 40) : BOOL
131 : ite(130, 84, 85) : BV:8
132 : ite(129, 82, 131) : BV:8
133 : ite(128, 80, 132) : BV:8
134 : ite(127, 78, 133) : BV:8
135 : bvadd(36, 74, 116) : BV:32
136 : eq(135, 2) : BOOL
137 : eq(135, 4) : BOOL
138 : eq(135, 36) : BOOL
139 : eq(135, 40) : BOOL
140 : ite(139, 84, 85) : BV:8
141 : ite(138, 82, 140) : BV:8
142 : ite(137, 80, 141) : BV:8
143 : ite(136, 78, 142) : BV:8
144 : bvadd(74, 116) : BV:32
145 : eq(144, 2) : BOOL
146 : eq(144, 4) : BOOL
147 : eq(144, 36) : BOOL
148 : eq(144, 40) : BOOL
149 : ite(148, 84, 85) : BV:8
150 : ite(147, 82, 149) : BV:8
151 : ite(146, 80, 150) : BV:8
152 : ite(145, 78, 151) : BV:8
153 : bvconcat(125, 134, 143, 152) : BV:32
154 : ite(54, 2, 153) : BV:32
155 : ite(73, 153, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : lambda(51, 156) : FUNCTION[BV:32 -> BV:32]
158 : map(50, 157) : MAP[BV:32 -> BV:32]
159 : lambda(17, 158) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
160 : map(16, 159) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
161 : sym_const(160) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-2
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-m-2
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.L3%8%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 248, [ 1; 1 ] -> 183, [ 2; 2 ] -> 255, [ 3; 3 ] -> 246, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1478615215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1478615216; 1478615219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1478615220; 1651575871 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1651575872; 1651575875 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1651575876; 2300575811 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2300575812; 2300575815 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2300575816; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1651575872 { 0x62710c40 +1.88318634e69 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1478615216 { 0x5821e0b0 +1.26466941e49 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2300575812 { 0x89200044 -1994391484 -1.25000810e147 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-1.L3%7%bbentry
1 : Lambda14954Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda14955Var : BV:32
18 : Lambda14956Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda14957Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : bvmul(8, 51) : BV:32
56 : bvmul(8, 17) : BV:32
57 : bvadd(4, 56) : BV:32
58 : eq(57, 2) : BOOL
59 : 248 { 0xf8 -8 } : BV:8
60 : eq(57, 4) : BOOL
61 : 246 { 0xf6 -10 } : BV:8
62 : eq(57, 36) : BOOL
63 : 183 { 0xb7 -73 } : BV:8
64 : eq(57, 40) : BOOL
65 : 255 { 0xff -1 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : ite(60, 61, 68) : BV:8
70 : ite(58, 59, 69) : BV:8
71 : bvadd(40, 56) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 4) : BOOL
74 : eq(71, 36) : BOOL
75 : eq(71, 40) : BOOL
76 : ite(75, 65, 66) : BV:8
77 : ite(74, 63, 76) : BV:8
78 : ite(73, 61, 77) : BV:8
79 : ite(72, 59, 78) : BV:8
80 : bvadd(36, 56) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 4) : BOOL
83 : eq(80, 36) : BOOL
84 : eq(80, 40) : BOOL
85 : ite(84, 65, 66) : BV:8
86 : ite(83, 63, 85) : BV:8
87 : ite(82, 61, 86) : BV:8
88 : ite(81, 59, 87) : BV:8
89 : eq(56, 2) : BOOL
90 : eq(56, 4) : BOOL
91 : eq(56, 36) : BOOL
92 : eq(56, 40) : BOOL
93 : ite(92, 65, 66) : BV:8
94 : ite(91, 63, 93) : BV:8
95 : ite(90, 61, 94) : BV:8
96 : ite(89, 59, 95) : BV:8
97 : bvconcat(70, 79, 88, 96) : BV:32
98 : bvadd(4, 55, 97) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 4) : BOOL
101 : eq(98, 36) : BOOL
102 : eq(98, 40) : BOOL
103 : ite(102, 65, 66) : BV:8
104 : ite(101, 63, 103) : BV:8
105 : ite(100, 61, 104) : BV:8
106 : ite(99, 59, 105) : BV:8
107 : bvadd(40, 55, 97) : BV:32
108 : eq(107, 2) : BOOL
109 : eq(107, 4) : BOOL
110 : eq(107, 36) : BOOL
111 : eq(107, 40) : BOOL
112 : ite(111, 65, 66) : BV:8
113 : ite(110, 63, 112) : BV:8
114 : ite(109, 61, 113) : BV:8
115 : ite(108, 59, 114) : BV:8
116 : bvadd(36, 55, 97) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 4) : BOOL
119 : eq(116, 36) : BOOL
120 : eq(116, 40) : BOOL
121 : ite(120, 65, 66) : BV:8
122 : ite(119, 63, 121) : BV:8
123 : ite(118, 61, 122) : BV:8
124 : ite(117, 59, 123) : BV:8
125 : bvadd(55, 97) : BV:32
126 : eq(125, 2) : BOOL
127 : eq(125, 4) : BOOL
128 : eq(125, 36) : BOOL
129 : eq(125, 40) : BOOL
130 : ite(129, 65, 66) : BV:8
131 : ite(128, 63, 130) : BV:8
132 : ite(127, 61, 131) : BV:8
133 : ite(126, 59, 132) : BV:8
134 : bvconcat(106, 115, 124, 133) : BV:32
135 : ite(54, 2, 134) : BV:32
136 : lambda(51, 135) : FUNCTION[BV:32 -> BV:32]
137 : map(50, 136) : MAP[BV:32 -> BV:32]
138 : lambda(17, 137) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
139 : map(16, 138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140 : sym_const(139) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-n-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-m-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-25.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-26.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1478615216 { 0x5821e0b0 +1.26466941e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1478615219 { 0x5821e0b3 +1.26466977e49 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2300575812 { 0x89200044 -1994391484 -1.25000810e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2300575815 { 0x89200047 -1994391481 -1.25000846e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1651575872 { 0x62710c40 +1.88318634e69 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1651575875 { 0x62710c43 +1.88318669e69 } : BV:32
=input.spec-%var-x-2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-2.1.1.1.1
1 : Lambda14837Var : BV:32
2 : Lambda14838Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : bvmul(12, 2) : BV:32
48 : bvmul(12, 1) : BV:32
49 : bvadd(8, 48) : BV:32
50 : eq(49, 3) : BOOL
51 : 248 { 0xf8 -8 } : BV:8
52 : eq(49, 8) : BOOL
53 : 246 { 0xf6 -10 } : BV:8
54 : eq(49, 32) : BOOL
55 : 183 { 0xb7 -73 } : BV:8
56 : eq(49, 36) : BOOL
57 : 255 { 0xff -1 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(54, 55, 59) : BV:8
61 : ite(52, 53, 60) : BV:8
62 : ite(50, 51, 61) : BV:8
63 : bvadd(36, 48) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 8) : BOOL
66 : eq(63, 32) : BOOL
67 : eq(63, 36) : BOOL
68 : ite(67, 57, 58) : BV:8
69 : ite(66, 55, 68) : BV:8
70 : ite(65, 53, 69) : BV:8
71 : ite(64, 51, 70) : BV:8
72 : bvadd(32, 48) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 8) : BOOL
75 : eq(72, 32) : BOOL
76 : eq(72, 36) : BOOL
77 : ite(76, 57, 58) : BV:8
78 : ite(75, 55, 77) : BV:8
79 : ite(74, 53, 78) : BV:8
80 : ite(73, 51, 79) : BV:8
81 : eq(48, 3) : BOOL
82 : eq(48, 8) : BOOL
83 : eq(48, 32) : BOOL
84 : eq(48, 36) : BOOL
85 : ite(84, 57, 58) : BV:8
86 : ite(83, 55, 85) : BV:8
87 : ite(82, 53, 86) : BV:8
88 : ite(81, 51, 87) : BV:8
89 : bvconcat(62, 71, 80, 88) : BV:32
90 : bvadd(8, 47, 89) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 8) : BOOL
93 : eq(90, 32) : BOOL
94 : eq(90, 36) : BOOL
95 : ite(94, 57, 58) : BV:8
96 : ite(93, 55, 95) : BV:8
97 : ite(92, 53, 96) : BV:8
98 : ite(91, 51, 97) : BV:8
99 : bvadd(36, 47, 89) : BV:32
100 : eq(99, 3) : BOOL
101 : eq(99, 8) : BOOL
102 : eq(99, 32) : BOOL
103 : eq(99, 36) : BOOL
104 : ite(103, 57, 58) : BV:8
105 : ite(102, 55, 104) : BV:8
106 : ite(101, 53, 105) : BV:8
107 : ite(100, 51, 106) : BV:8
108 : bvadd(32, 47, 89) : BV:32
109 : eq(108, 3) : BOOL
110 : eq(108, 8) : BOOL
111 : eq(108, 32) : BOOL
112 : eq(108, 36) : BOOL
113 : ite(112, 57, 58) : BV:8
114 : ite(111, 55, 113) : BV:8
115 : ite(110, 53, 114) : BV:8
116 : ite(109, 51, 115) : BV:8
117 : bvadd(47, 89) : BV:32
118 : eq(117, 3) : BOOL
119 : eq(117, 8) : BOOL
120 : eq(117, 32) : BOOL
121 : eq(117, 36) : BOOL
122 : ite(121, 57, 58) : BV:8
123 : ite(120, 55, 122) : BV:8
124 : ite(119, 53, 123) : BV:8
125 : ite(118, 51, 124) : BV:8
126 : bvconcat(98, 107, 116, 125) : BV:32
127 : ite(6, 3, 126) : BV:32
128 : ite(46, 126, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : lambda(1, 2, 129) : FUNCTION[BV:32,BV:32 -> BV:32]
131 : sym_const(130) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.1.1
1 : Lambda14844Var : BV:32
2 : Lambda14845Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 248 { 0xf8 -8 } : BV:8
14 : eq(11, 7) : BOOL
15 : 246 { 0xf6 -10 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 183 { 0xb7 -73 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-2.1.1.0.1
1 : Lambda14839Var : BV:32
2 : Lambda14840Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.0.1
1 : Lambda14846Var : BV:32
2 : Lambda14847Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%17%bbentry.1.1.1.1
1 : Lambda14851Var : BV:32
2 : Lambda14852Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : bvmul(12, 2) : BV:32
48 : bvmul(12, 1) : BV:32
49 : bvadd(8, 48) : BV:32
50 : eq(49, 3) : BOOL
51 : 248 { 0xf8 -8 } : BV:8
52 : eq(49, 8) : BOOL
53 : 246 { 0xf6 -10 } : BV:8
54 : eq(49, 32) : BOOL
55 : 183 { 0xb7 -73 } : BV:8
56 : eq(49, 36) : BOOL
57 : 255 { 0xff -1 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(54, 55, 59) : BV:8
61 : ite(52, 53, 60) : BV:8
62 : ite(50, 51, 61) : BV:8
63 : bvadd(36, 48) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 8) : BOOL
66 : eq(63, 32) : BOOL
67 : eq(63, 36) : BOOL
68 : ite(67, 57, 58) : BV:8
69 : ite(66, 55, 68) : BV:8
70 : ite(65, 53, 69) : BV:8
71 : ite(64, 51, 70) : BV:8
72 : bvadd(32, 48) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 8) : BOOL
75 : eq(72, 32) : BOOL
76 : eq(72, 36) : BOOL
77 : ite(76, 57, 58) : BV:8
78 : ite(75, 55, 77) : BV:8
79 : ite(74, 53, 78) : BV:8
80 : ite(73, 51, 79) : BV:8
81 : eq(48, 3) : BOOL
82 : eq(48, 8) : BOOL
83 : eq(48, 32) : BOOL
84 : eq(48, 36) : BOOL
85 : ite(84, 57, 58) : BV:8
86 : ite(83, 55, 85) : BV:8
87 : ite(82, 53, 86) : BV:8
88 : ite(81, 51, 87) : BV:8
89 : bvconcat(62, 71, 80, 88) : BV:32
90 : bvadd(8, 47, 89) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 8) : BOOL
93 : eq(90, 32) : BOOL
94 : eq(90, 36) : BOOL
95 : ite(94, 57, 58) : BV:8
96 : ite(93, 55, 95) : BV:8
97 : ite(92, 53, 96) : BV:8
98 : ite(91, 51, 97) : BV:8
99 : bvadd(36, 47, 89) : BV:32
100 : eq(99, 3) : BOOL
101 : eq(99, 8) : BOOL
102 : eq(99, 32) : BOOL
103 : eq(99, 36) : BOOL
104 : ite(103, 57, 58) : BV:8
105 : ite(102, 55, 104) : BV:8
106 : ite(101, 53, 105) : BV:8
107 : ite(100, 51, 106) : BV:8
108 : bvadd(32, 47, 89) : BV:32
109 : eq(108, 3) : BOOL
110 : eq(108, 8) : BOOL
111 : eq(108, 32) : BOOL
112 : eq(108, 36) : BOOL
113 : ite(112, 57, 58) : BV:8
114 : ite(111, 55, 113) : BV:8
115 : ite(110, 53, 114) : BV:8
116 : ite(109, 51, 115) : BV:8
117 : bvadd(47, 89) : BV:32
118 : eq(117, 3) : BOOL
119 : eq(117, 8) : BOOL
120 : eq(117, 32) : BOOL
121 : eq(117, 36) : BOOL
122 : ite(121, 57, 58) : BV:8
123 : ite(120, 55, 122) : BV:8
124 : ite(119, 53, 123) : BV:8
125 : ite(118, 51, 124) : BV:8
126 : bvconcat(98, 107, 116, 125) : BV:32
127 : ite(6, 3, 126) : BV:32
128 : ite(46, 126, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(6, 3, 129) : BV:32
131 : lambda(1, 2, 130) : FUNCTION[BV:32,BV:32 -> BV:32]
132 : sym_const(131) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.L3%7%bbentry.1.1.0.1
1 : Lambda14853Var : BV:32
2 : Lambda14854Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=counter_example.random_seed
819101561
=counter_example_end


</MSG>
<MSG>0:59 : Discovered that the correlation was useless for the product-TFG foo.A1.B3.C1.D1 (d:2, s:0, sp: 14)...</MSG>
<MSG>0:59 : Chose (after CE propagation) product-TFG foo.A1.B4 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>0:59 : foo.A1.B4: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:59 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:59 : foo.A1.B4: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht18-prove_trivial15-prove3...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht10-prove_trivial5-prove5...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:59 : foo.A1.B4: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>0:59 : foo.A1.B4: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>0:59 : foo.A1.B4 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>0:59 : foo.A1.B4 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:59 : product-TFG foo.A1.B4: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Considering 1 paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Attempting correlation of src pathset L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : Found 1 feasible correlations for paths to src pc L3%7%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : product-TFG foo.A1.B4: Found 1 correlations for Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>0:59 : product-TFG foo.A1.B4 created 1 possibilities in group foo.A1.B4.C...</MSG>
<MSG>0:59 : Chose (for CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:59 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>0:59 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1...</MSG>
<MSG>0:59 : Creating ssa-path for the src-tfg path L3%17%bbentry --> L3%7%bbentry ending at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:59 : Adding a CG edge composition using the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:59 : Identifying common alloc-deallocs in the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:59 : Identified no common alloc-deallocs in the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:59 : Adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Getting alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Found no alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Adding edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B4.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:59 : foo.A1.B4.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Propagated 9 out of 15 counter-examples across edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:59 : foo.A1.B4.C1: Added the 9 propagated CEs at PC L3%7%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:59 : foo.A1.B4.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : Done adding new edge to the product-TFG foo.A1.B4.C1 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%7%bbentry_Lfor.cond%1%bbentry, src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : Done adding a CG edge composition using the src path L3%17%bbentry --> L3%7%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:59 : Added correlation to the product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>0:59 : Chose (after CE propagation) product-TFG foo.A1.B4.C1 (d:2, s:0, sp: 14) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 24 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 17 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%7%bbentry[mu 1, delta {1,0}]
<MSG>0:59 : foo.A1.B4.C1: Updating invariants over the newly added edges in edge composition L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:59 : Constructed infer_invariants_dfa with initial worklist L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>0:59 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:59 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:00 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:01 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:01 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:02 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:03 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:03 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:04 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:05 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:05 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial2-prove3...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:06 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:07 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:07 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:08 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:09 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:10 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:10 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:11 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:11 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:12 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:13 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:13 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:14 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:14 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:15 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:16 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:16 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:16 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht17-prove_trivial13-prove4...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>1:17 : foo.A1.B4.C1: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht8-prove_trivial7-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>1:17 : foo.A1.B4.C1: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>1:17 : foo.A1.B4.C1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>1:17 : foo.A1.B4.C1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>1:18 : product-TFG foo.A1.B4.C1: Enumerating correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:18 : Considering 2 paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:18 : Attempting correlation of src pathset L3%17%bbentry=>L3%17%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:18 : Attempting correlation of src pathset L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:18 : Found 2 feasible correlations for paths to src pc L3%17%bbentry as correlation candidates for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:18 : product-TFG foo.A1.B4.C1: Found 2 correlations for Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}] starting at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:18 : product-TFG foo.A1.B4.C1 created 2 possibilities in group foo.A1.B4.C1.D...</MSG>
<MSG>1:18 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 40 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 31 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>1:18 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>1:18 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2...</MSG>
<MSG>1:18 : Creating ssa-path for the src-tfg path L3%17%bbentry --> L3%17%bbentry ending at L3%17%bbentry_Lfor.cond1%1%bbentry
</MSG>
<MSG>1:18 : Adding a CG edge composition using the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:18 : Identifying common alloc-deallocs in the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry
</MSG>
<MSG>1:18 : Identified no common alloc-deallocs in the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:18 : Adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>1:18 : foo.A1.B4.C1.D2: Getting alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:18 : foo.A1.B4.C1.D2: Found no alloca-ptrs on edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:18 : foo.A1.B4.C1.D2: Adding edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:18 : foo.A1.B4.C1.D2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>1:18 : foo.A1.B4.C1.D2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>1:18 : foo.A1.B4.C1.D2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>1:23 : foo.A1.B4.C1.D2: Propagated 5 out of 31 counter-examples across edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Added the 5 propagated CEs at PC L3%17%bbentry_Lfor.cond1%1%bbentry and propagated further.
</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Finished executing CG's add edge function...</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Done computing CG regions after the addition of the edge L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:25 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2 for fromPC L3%17%bbentry_Lfor.cond1%1%bbentry and toPC L3%17%bbentry_Lfor.cond1%1%bbentry, src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry...</MSG>
<MSG>1:25 : Done adding a CG edge composition using the src path L3%17%bbentry --> L3%17%bbentry and dst path Lfor.cond1%1%bbentry --> Lfor.cond1%1%bbentry</MSG>
<MSG>1:25 : Added correlation to the product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>1:25 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 41 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 40 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%17%bbentry=>L3%17%bbentry[mu 1, delta {1,0}]
<MSG>1:25 : foo.A1.B4.C1.D2: Updating invariants over the newly added edges in edge composition L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>1:25 : Constructed infer_invariants_dfa with initial worklist L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry...</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:25 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 12 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht16-prove_trivial15-prove22...</MSG>
<MSG>1:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>1:32 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:32 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial2-prove8...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:36 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:37 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:37 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial2-prove2...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:48 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove20...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:50 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed ...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:51 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 14 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial14-prove20...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove2...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove1...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial4-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:52 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 10 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial6-prove2...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry) ...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 20 exprs and 14 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht14-prove_trivial10-prove4...</MSG>
<MSG>2:53 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 10 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 8 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 48 exprs and 9 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial2-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 11 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged ...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing dst graph's memlabels for edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Checking well-formedness assertions on outgoing edges from L3%17%bbentry_Lfor.cond1%1%bbentry ...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 11 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht7-prove_trivial6-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%m (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 11 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 24 exprs and 6 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 6 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) with 0 exprs and 1 CEs across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariant eqclass local-sizes-are-equal (type HOUDINI) across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2: Done relaxing memlabels and invariants across the edge composition (L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>2:54 : foo.A1.B4.C1.D2 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:55 : product-TFG foo.A1.B4.C1.D2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:55 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:55 : Attempting correlation of src pathset L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:55 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:55 : product-TFG foo.A1.B4.C1.D2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%7%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>2:55 : product-TFG foo.A1.B4.C1.D2 created 1 possibilities in group foo.A1.B4.C1.D2.E...</MSG>
<MSG>2:55 : Chose (for CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 58 counterexamples (for correlating 20 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:55 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>2:55 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B4.C1.D2.E1...</MSG>
<MSG>2:55 : Creating ssa-path for the src-tfg path L3%7%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>2:55 : Adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>2:55 : Identifying common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>2:55 : Identified no common alloc-deallocs in the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>2:55 : Adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Getting alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Found no alloca-ptrs on edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Adding edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Propagated 12 out of 34 counter-examples across edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Added the 12 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Finished executing CG's add edge function...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Done computing CG regions after the addition of the edge L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : Done adding new edge to the product-TFG foo.A1.B4.C1.D2.E1 for fromPC L3%7%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>2:55 : Done adding a CG edge composition using the src path L3%7%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>2:55 : Added correlation to the product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) and created a correlation entry...</MSG>
<MSG>2:55 : Chose (after CE propagation) product-TFG foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14) from a frontier of size 3...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 58 counterexamples (for correlating 20 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 9 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%7%bbentry=>E0%0%d[mu 1, delta {1,0}]
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Updating invariants over the newly added edges in edge composition L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>2:55 : Constructed infer_invariants_dfa with initial worklist L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Done relaxing dst graph's memlabels for edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Checking well-formedness assertions on outgoing edges from L3%7%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1: Done relaxing memlabels and invariants across the edge composition (L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): checked newly added edge and inferred invariants...</MSG>
<MSG>2:55 : foo.A1.B4.C1.D2.E1 (d:2, s:0, sp: 14): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:55 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>2:55 : Checking equivalence proof...</MSG>
<MSG>2:57 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%7%bbentry_Lfor.cond%1%bbentry: (d:1, s:0, sp: 5)
  Invariant state (11 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [11]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-ret-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%m ; 9-->input.dst.llvm-%n ; 10-->input.dst.llvm-%x ; 11-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 12-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 
    7 preds:
      0.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      2.: bvneg(bvmul(4294967295, input.spec-%var-ret-1.L3%7%bbentry))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      4.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      5.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      6.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3.ce171      1.:z3v487.ce3      2.:z3v487.ce31      3.:z3v487.ce45      4.:z3.ce59      5.:z3.ce87      6.:z3.ce115      7.:z3.ce143      8.:z3.ce199      9.:z3v487.ce4150      10.:z3.ce7202
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 4-->input.spec-%var-i-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce4150      2.:z3v487.ce4553      3.:z3v487.ce4885      4.:z3v487.ce4665      5.:z3v487.ce4715      6.:z3v487.ce4997      7.:z3v487.ce5176      8.:z3.ce5249      9.:z3v487.ce5419      10.:z3v487.ce5589
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce227      2.:z3v487.ce31      3.:z3v487.ce255
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce87      2.:z3.ce283      3.:z3v487.ce255
    eqclass 5:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce227      2.:z3v487.ce31      3.:z3v487.ce255
    eqclass 6:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce3      1.:z3.ce87      2.:z3.ce283      3.:z3v487.ce255
    eqclass 7:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 11-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    11 visited ces:
      0.:z3v487.ce3      1.:z3v487.ce4150      2.:z3v487.ce4553      3.:z3v487.ce4885      4.:z3v487.ce4665      5.:z3v487.ce4715      6.:z3v487.ce4997      7.:z3v487.ce5176      8.:z3.ce5249      9.:z3v487.ce5419      10.:z3v487.ce5589
    eqclass 8:
    smallest point cover name dst-ineq, type HOUDINI, exprs [24]: 13-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 14-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 15-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 16-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 17-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 18-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 19-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 20-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 21-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 25-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 33-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce3      1.:z3.ce227      2.:z3v487.ce31      3.:z3.ce87      4.:z3v487.ce255      5.:z3v487.ce4150
    eqclass 9:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [6]: 37-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141402](input.spec-%var-x-2, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 38-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142181](input.spec-%var-x-1.L3%7%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 39-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142188](input.spec-%var-x-1.L3%7%bbentry, map[142187](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142186](Lambda0Var, map[142185](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 40-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142195](input.spec-%var-x-1.L3%7%bbentry, map[142194](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142193](Lambda0Var, map[142192](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 41-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142202](input.spec-%var-x-1.L3%7%bbentry, map[142201](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142200](Lambda0Var, map[142199](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 42-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142209](input.spec-%var-x-1.L3%7%bbentry, map[142208](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142207](Lambda0Var, map[142206](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 
    2 preds:
      0.: 141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142181](input.spec-%var-x-1.L3%7%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      1.: 141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141402](input.spec-%var-x-2, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3
    eqclass 10:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce3

L3%17%bbentry_Lfor.cond1%1%bbentry: (d:1, s:0, sp: 9)
  Invariant state (15 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce31
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [20]: 2-->input.spec-%var-n-2 ; 3-->input.spec-%var-m-2 ; 4-->input.spec-%var-i-1.L3%7%bbentry ; 5-->input.spec-%var-n-1.L3%7%bbentry ; 6-->input.spec-%var-ret-1.L3%7%bbentry ; 7-->input.spec-%var-m-1.L3%7%bbentry ; 8-->input.dst.llvm-%m ; 9-->input.dst.llvm-%n ; 10-->input.dst.llvm-%x ; 11-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 43-->input.spec-%tmpvar-17.L3%8%d ; 44-->input.spec-%var-j-0.L3%17%bbentry ; 45-->input.spec-%var-m-0.L3%17%bbentry ; 46-->input.spec-%var-i-0.L3%17%bbentry ; 47-->input.spec-%var-ret-0.L3%17%bbentry ; 48-->input.spec-%tmpvar-19.L3%17%bbentry ; 49-->input.spec-%var-n-0.L3%17%bbentry ; 50-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 51-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 52-->input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry ; 
    14 preds:
      0.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-1.L3%7%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-1.L3%7%bbentry
      3.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.spec-%var-n-0.L3%17%bbentry
      4.: bvneg(bvmul(input.spec-%var-n-2, 4294967295))  ==  input.dst.llvm-%n
      5.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      6.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      7.: bvneg(bvmul(4294967295, input.spec-%var-ret-0.L3%17%bbentry))  ==  input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
      8.: bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry))  ==  input.spec-%var-i-0.L3%17%bbentry
      9.: 0                     ==  bvzero_ext(bool_to_bv(input.spec-%tmpvar-17.L3%8%d), 31)
      10.: bvadd(1, bvneg(bvmul(4294967295, input.spec-%var-i-1.L3%7%bbentry)))  ==  input.spec-%tmpvar-19.L3%17%bbentry
      11.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.spec-%var-m-0.L3%17%bbentry
      12.: bvneg(bvmul(input.spec-%var-m-2, 4294967295))  ==  input.dst.llvm-%m
      13.: bvneg(bvmul(4294967295, input.spec-%var-j-0.L3%17%bbentry))  ==  input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce45      2.:z3.ce59      3.:z3v487.ce255      4.:z3.ce462      5.:z3.ce2121      6.:z3.ce2169      7.:z3.ce2073      8.:z3v487.ce4244      9.:z3v487.ce5947      10.:z3v487.ce5676      11.:z3.ce6070      12.:z3v487.ce6183      13.:z3v487.ce6235
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 5-->input.spec-%var-n-1.L3%7%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%var-n-1.L3%7%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce227      1.:z3v487.ce31      2.:z3v487.ce45      3.:z3v487.ce255      4.:z3.ce2217
    eqclass 3:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 44-->input.spec-%var-j-0.L3%17%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-j-0.L3%17%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-j-0.L3%17%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce5947      2.:z3.ce6482      3.:z3.ce6362      4.:z3.ce6602      5.:z3.ce6722      6.:z3.ce6842      7.:z3.ce6962
    eqclass 4:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 45-->input.spec-%var-m-0.L3%17%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce255      2.:z3.ce2313      3.:z3v487.ce2170      4.:z3.ce2169      5.:z3.ce2265
    eqclass 5:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 46-->input.spec-%var-i-0.L3%17%bbentry ; 
    1 preds:
      0.: bvule(input.spec-%var-i-0.L3%17%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce4283      2.:z3v487.ce4244      3.:z3v487.ce4613      4.:z3v487.ce4748      5.:z3v487.ce4945      6.:z3v487.ce4918      7.:z3.ce5107      8.:z3.ce5282      9.:z3v487.ce5452
    eqclass 6:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 7-->input.spec-%var-m-1.L3%7%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce255      2.:z3.ce2313      3.:z3v487.ce2170      4.:z3.ce2169      5.:z3.ce2265
    eqclass 7:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 48-->input.spec-%tmpvar-19.L3%17%bbentry ; 
    1 preds:
      0.: bvuge(input.spec-%tmpvar-19.L3%17%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce31      1.:z3.ce5070      2.:z3v487.ce4244      3.:z3.ce4827      4.:z3v487.ce4613      5.:z3v487.ce4586      6.:z3v487.ce4918      7.:z3v487.ce5361      8.:z3.ce5107      9.:z3.ce5531
    eqclass 8:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 9-->input.dst.llvm-%n ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce227      1.:z3v487.ce31      2.:z3v487.ce45      3.:z3v487.ce255      4.:z3.ce2217
    eqclass 9:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%m, type BV_CONST_INEQ, exprs [1]: 8-->input.dst.llvm-%m ; 
    0 preds:
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce255      2.:z3.ce2313      3.:z3v487.ce2170      4.:z3.ce2169      5.:z3.ce2265
    eqclass 10:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 11-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce4283      2.:z3v487.ce4244      3.:z3v487.ce4613      4.:z3v487.ce4748      5.:z3v487.ce4945      6.:z3v487.ce4918      7.:z3.ce5107      8.:z3.ce5282      9.:z3v487.ce5452
    eqclass 11:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, type BV_CONST_INEQ, exprs [1]: 50-->input.dst.llvm-%j.0.Lfor.cond1%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce31      1.:z3v487.ce5947      2.:z3.ce6482      3.:z3.ce6362      4.:z3.ce6602      5.:z3.ce6722      6.:z3.ce6842      7.:z3.ce6962
    eqclass 12:
    smallest point cover name dst-ineq, type HOUDINI, exprs [48]: 13-->bvslt(input.dst.llvm-%m, input.dst.llvm-%n) ; 14-->bvult(input.dst.llvm-%m, input.dst.llvm-%n) ; 15-->bvslt(input.dst.llvm-%n, input.dst.llvm-%m) ; 16-->bvult(input.dst.llvm-%n, input.dst.llvm-%m) ; 17-->bvsle(input.dst.llvm-%m, input.dst.llvm-%n) ; 18-->bvule(input.dst.llvm-%m, input.dst.llvm-%n) ; 19-->bvsle(input.dst.llvm-%n, input.dst.llvm-%m) ; 20-->bvule(input.dst.llvm-%n, input.dst.llvm-%m) ; 21-->bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 22-->bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 23-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 24-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 25-->bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 26-->bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 27-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 28-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m) ; 29-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 30-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 31-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 32-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 33-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 34-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 35-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 36-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 53-->bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 54-->bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 55-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 56-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 57-->bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 58-->bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 59-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 60-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m) ; 61-->bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 62-->bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 63-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 64-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 65-->bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 66-->bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 67-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 68-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n) ; 69-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 70-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 71-->bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 72-->bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 73-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 74-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry) ; 75-->bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 76-->bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    3 preds:
      0.: bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)  ==  true
      1.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce227      1.:z3v487.ce31      2.:z3.ce7082      3.:z3v487.ce255      4.:z3.ce2169      5.:z3v487.ce4244      6.:z3v487.ce5452      7.:z3v487.ce5947      8.:z3.ce6184
    eqclass 13:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [11]: 37-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141402](input.spec-%var-x-2, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 38-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142181](input.spec-%var-x-1.L3%7%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 77-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[156233](input.spec-%var-x-2, map[142194](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142193](Lambda0Var, map[142192](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 78-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[160617](input.spec-%var-x-2, map[142187](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142186](Lambda0Var, map[142185](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 79-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169179](input.spec-%var-x-2, map[169176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[169175](Lambda0Var, map[169174](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 80-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169178](input.spec-%var-x-2, map[142201](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142200](Lambda0Var, map[142199](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 81-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169289](input.spec-%var-x-0.L3%17%bbentry, map[142187](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142186](Lambda0Var, map[142185](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%n))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 82-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169290](input.spec-%var-x-0.L3%17%bbentry, map[142194](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142193](Lambda0Var, map[142192](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%x))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 83-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169291](input.spec-%var-x-0.L3%17%bbentry, map[142201](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[142200](Lambda0Var, map[142199](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 84-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169292](input.spec-%var-x-0.L3%17%bbentry, map[169176](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[169175](Lambda0Var, map[169174](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 85-->141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169293](input.spec-%var-x-0.L3%17%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false)))))) ; 
    3 preds:
      0.: 141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[169293](input.spec-%var-x-0.L3%17%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      1.: 141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[142181](input.spec-%var-x-1.L3%7%bbentry, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
      2.: 141329 = memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap;eq[141402](input.spec-%var-x-2, map[141401](lambda(Lambda0Var, and(bvule(0, Lambda0Var), bvult(Lambda0Var, input.dst.llvm-%n))), lambda[141400](Lambda0Var, map[141399](lambda(Lambda1Var, and(bvule(0, Lambda1Var), bvult(Lambda1Var, input.dst.llvm-%m))), lambda[141398](Lambda1Var, select[141397](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd[141396](bvmul(Lambda1Var, 4), select[141395](input.dst.llvm-mem, input.dst.llvm-mem.alloc, 141329, bvadd(bvmul(Lambda0Var, 4), input.dst.llvm-%x), 4, false)), 4, false))))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce31
    eqclass 14:
    smallest point cover name local-sizes-are-equal, type HOUDINI, exprs [0]: 
    0 preds:
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce31

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%7%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%7%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry (C L3%17%bbentry => C L3%7%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry => C L3%17%bbentry at mu 1 delta {1,0}, A (line 4 at column 28) => A (line 4 at column 28) at mu 1 delta {1,0})
            L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%7%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%7%bbentry_Lfor.cond%1%bbentry (C L3%7%bbentry, A (line 3 at column 26))
                L3%7%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 46 counterexamples (for correlating 11 bv exprs)
            L3%17%bbentry_Lfor.cond1%1%bbentry (C L3%17%bbentry, A (line 4 at column 28))
                L3%17%bbentry_Lfor.cond1%1%bbentry [inductive-invariants] contains 58 counterexamples (for correlating 20 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 9 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 154.96s, query:smt.: 27.4737s (num_starts 365; 0.0753s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 71.1454s (num_starts 1427; 0.0499s/start)ftmap_run_pointsto_analysis.: 0.868563s (num_starts 2; 0.4343s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 9e-06s (num_starts 8; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.: 1.4e-05s (num_starts 2; 0.0000s/start)
compute_tfg_pred_eqclass.: 1.6e-05s (num_starts 7; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.6e-05s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.: 1.7e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 1.9e-05s (num_starts 2; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.6e-05s (num_starts 13; 0.0000s/start)
get_paths_with_matching_to_pc.: 3.6e-05s (num_starts 13; 0.0000s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry.: 4.6e-05s (num_starts 1; 0.0000s/start)
prune_dst_memslots.: 5.2e-05s (num_starts 7; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 5.9e-05s (num_starts 69; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 6e-05s (num_starts 6; 0.0000s/start)
get_intersected_lr_status.: 6.2e-05s (num_starts 2; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 6.8e-05s (num_starts 6; 0.0000s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 8.4e-05s (num_starts 8; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 8.6e-05s (num_starts 133; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 8.6e-05s (num_starts 6; 0.0000s/start)
determinize_value_expr_map.: 0.000117s (num_starts 58; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000133s (num_starts 3; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000134s (num_starts 7; 0.0000s/start)
remove_complex_bv_exprs.: 0.000142s (num_starts 7; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000147s (num_starts 3; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000149s (num_starts 45; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 0.00015s (num_starts 131; 0.0000s/start)
ce_perform_memory_fuzzing.: 0.000151s (num_starts 201; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.000171s (num_starts 17; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000175s (num_starts 13; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.000204s (num_starts 17; 0.0000s/start)
invariant_inference_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000222s (num_starts 20; 0.0000s/start)
compute_sprel_relations.: 0.000275s (num_starts 2; 0.0001s/start)
propagate_sprels.: 0.000287s (num_starts 2; 0.0001s/start)
populate_locid2expr_map.: 0.000295s (num_starts 2; 0.0001s/start)
get_lr_status_for_loc_ids.: 0.000308s (num_starts 120; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000367s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000368s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000368s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000368s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000369s (num_starts 1; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000371s (num_starts 1; 0.0004s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000373s (num_starts 3; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000387s (num_starts 1; 0.0004s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.000402s (num_starts 20; 0.0000s/start)
get_sprel_map_pair.: 0.000485s (num_starts 60; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000527s (num_starts 7; 0.0001s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000563s (num_starts 1; 0.0006s/start)
lr_status_meet.: 0.000585s (num_starts 859; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000606s (num_starts 42; 0.0000s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000608s (num_starts 16; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000635s (num_starts 2; 0.0003s/start)
graph_locs_add_local_vars_for_edge.: 0.000692s (num_starts 42; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000721s (num_starts 2; 0.0004s/start)
expr_is_hidden_reg.: 0.000771s (num_starts 1053; 0.0000s/start)
prove_trivial.: 0.000783s (num_starts 912; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.00079s (num_starts 1; 0.0008s/start)
expr_is_callee_save_const.: 0.000929s (num_starts 1065; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.001089s (num_starts 100; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.001249s (num_starts 65; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.00132s (num_starts 2883; 0.0000s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001483s (num_starts 9; 0.0002s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.001545s (num_starts 178; 0.0000s/start)
populate_simplified_to_state.: 0.001668s (num_starts 3; 0.0006s/start)
graph_locs_add_all_llvmvars.: 0.001693s (num_starts 2; 0.0008s/start)
populate_dominator_and_postdominator_relations.: 0.001726s (num_starts 2; 0.0009s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001755s (num_starts 9; 0.0002s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001801s (num_starts 9; 0.0002s/start)
parse_yices_model.: 0.002124s (num_starts 1; 0.0021s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.002158s (num_starts 1528; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.002189s (num_starts 250; 0.0000s/start)
graph_locs_add_all_specvars.: 0.002272s (num_starts 2; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00231s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002314s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002314s (num_starts 1; 0.0023s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.002318s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002319s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;abstract-memlabel-asserts-houdini-guess.: 0.002322s (num_starts 1; 0.0023s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.002324s (num_starts 399; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.002329s (num_starts 1; 0.0023s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.002371s (num_starts 7; 0.0003s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.002393s (num_starts 11; 0.0002s/start)
collect_dst_to_src_submap_preds.: 0.002754s (num_starts 1427; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.002875s (num_starts 7; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.002918s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.002928s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.002932s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002943s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.002953s (num_starts 4; 0.0007s/start)
compute_bv_bool_eqclass.: 0.002955s (num_starts 7; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.002965s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.002968s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.002985s (num_starts 4; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.00299s (num_starts 4; 0.0007s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.003s (num_starts 616; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.003139s (num_starts 2; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.003145s (num_starts 2; 0.0016s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.003205s (num_starts 5; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00324s (num_starts 1; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003243s (num_starts 1; 0.0032s/start)
identify_address_taken_local_variables.: 0.003285s (num_starts 1; 0.0033s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.00359s (num_starts 25; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003668s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-trivial.: 0.003673s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.003676s (num_starts 2; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.00369s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.003696s (num_starts 1; 0.0037s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.00373s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.003735s (num_starts 4; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.003739s (num_starts 4; 0.0009s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.003864s (num_starts 259; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.004037s (num_starts 7; 0.0006s/start)
pth_collect_preds_using_atom_func.: 0.004158s (num_starts 134; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.004188s (num_starts 39; 0.0001s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.004223s (num_starts 406; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.00435s (num_starts 3; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-trivial.: 0.004358s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.004361s (num_starts 3; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004619s (num_starts 2; 0.0023s/start)
tfg::populate_loc_definedness.before_solve.: 0.00496s (num_starts 3; 0.0017s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.004994s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.005055s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.005067s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.005068s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.005069s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed;-trivial.: 0.005069s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.005082s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-signed.: 0.005092s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.005112s (num_starts 3; 0.0017s/start)
tfg_edge_composition_get_assumes.: 0.005254s (num_starts 134; 0.0000s/start)
collect_assumes_around_edge.: 0.005272s (num_starts 13; 0.0004s/start)
graph_visit_exprs.: 0.005277s (num_starts 3; 0.0018s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.005281s (num_starts 178; 0.0000s/start)
removeMostPromising.: 0.005424s (num_starts 36; 0.0002s/start)
tfg::populate_loc_definedness.before_initialize.: 0.005459s (num_starts 3; 0.0018s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.005463s (num_starts 329; 0.0000s/start)
expr_represents_llvm_undef.: 0.005491s (num_starts 1069; 0.0000s/start)
populate_simplified_assets.: 0.005595s (num_starts 6; 0.0009s/start)
tfg::populate_loc_definedness.: 0.005672s (num_starts 3; 0.0019s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.005821s (num_starts 111; 0.0001s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.005891s (num_starts 7; 0.0008s/start)
create_closure_matrix.: 0.006091s (num_starts 376; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.006246s (num_starts 120; 0.0001s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.006253s (num_starts 198; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.006271s (num_starts 3; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.006281s (num_starts 3; 0.0021s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.006403s (num_starts 38; 0.0002s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.006411s (num_starts 1; 0.0064s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.006559s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.006625s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006633s (num_starts 1; 0.0066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.006635s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.006636s (num_starts 1; 0.0066s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.006637s (num_starts 616; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006689s (num_starts 2; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.006692s (num_starts 2; 0.0033s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.006697s (num_starts 1; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.0067s (num_starts 2; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;abstract-memlabel-asserts-houdini-guess.: 0.006707s (num_starts 2; 0.0034s/start)
proof_query_is_trivial_helper.: 0.006744s (num_starts 1598; 0.0000s/start)
corr_graph_enumerate_correlations.: 0.006792s (num_starts 13; 0.0005s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.007044s (num_starts 172; 0.0000s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.00718s (num_starts 6; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.007252s (num_starts 3; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-trivial.: 0.007267s (num_starts 3; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.007271s (num_starts 3; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.007383s (num_starts 3; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.00739s (num_starts 3; 0.0025s/start)
graph_visit_exprs_and_keys.: 0.00747s (num_starts 2; 0.0037s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.007736s (num_starts 120; 0.0001s/start)
set_result_and_counter_example.: 0.007793s (num_starts 365; 0.0000s/start)
graph_identify_back_edges.: 0.007889s (num_starts 44; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-trivial.: 0.007918s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.007926s (num_starts 4; 0.0020s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.008186s (num_starts 1538; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.008189s (num_starts 120; 0.0001s/start)
find_dominators.: 0.008488s (num_starts 48; 0.0002s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.008698s (num_starts 178; 0.0000s/start)
graph_identify_natural_loops.: 0.008812s (num_starts 44; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed;-trivial.: 0.008998s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.009005s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.009029s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-signed.: 0.009045s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009204s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.009208s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.009223s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;abstract-memlabel-asserts-houdini-guess.: 0.009235s (num_starts 2; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.009362s (num_starts 2; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.009605s (num_starts 2; 0.0048s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.010248s (num_starts 2; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-trivial.: 0.010323s (num_starts 6; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.010328s (num_starts 6; 0.0017s/start)
aliasing_constraints.convert_to_expr.: 0.010758s (num_starts 616; 0.0000s/start)
populate_locs_potentially_modified_on_edge.: 0.010811s (num_starts 3; 0.0036s/start)
compute_ssa_vars_renaming_map.: 0.01092s (num_starts 2; 0.0055s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.011011s (num_starts 1538; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-trivial.: 0.011281s (num_starts 6; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.011294s (num_starts 6; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.011503s (num_starts 1; 0.0115s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.011509s (num_starts 1; 0.0115s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.011881s (num_starts 4805; 0.0000s/start)
populate_branch_affecting_locs.: 0.012708s (num_starts 3; 0.0042s/start)
generate_aliasing_constraints_from_expr.: 0.014722s (num_starts 3297; 0.0000s/start)
proof_query_is_trivial.: 0.01546s (num_starts 1528; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.01582s (num_starts 11; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-trivial.: 0.015846s (num_starts 11; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.015865s (num_starts 11; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.016098s (num_starts 5; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-trivial.: 0.016131s (num_starts 5; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.016148s (num_starts 5; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016198s (num_starts 3; 0.0054s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.01621s (num_starts 1; 0.0162s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.016211s (num_starts 1; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.016214s (num_starts 1; 0.0162s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.016216s (num_starts 3; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.016265s (num_starts 1; 0.0163s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.016423s (num_starts 3; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016617s (num_starts 1; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016621s (num_starts 1; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.016623s (num_starts 1; 0.0166s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.017437s (num_starts 8; 0.0022s/start)
construct_linear_combination_exprs.: 0.017688s (num_starts 873; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018429s (num_starts 3; 0.0061s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.018469s (num_starts 616; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.018535s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate;-trivial.: 0.018535s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate;-trivial.: 0.018536s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-trivial.: 0.018536s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.018547s (num_starts 1; 0.0185s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;false-predicate.: 0.018553s (num_starts 1; 0.0186s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.018561s (num_starts 1; 0.0186s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-trivial.: 0.018706s (num_starts 1; 0.0187s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.018707s (num_starts 1; 0.0187s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.019241s (num_starts 8; 0.0024s/start)
expr_linear_relation_holds::visit.var.: 0.019727s (num_starts 1069; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.020011s (num_starts 10; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.020059s (num_starts 10; 0.0020s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-trivial.: 0.020608s (num_starts 1; 0.0206s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.02061s (num_starts 1; 0.0206s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.020615s (num_starts 1; 0.0206s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.020617s (num_starts 1; 0.0206s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.020695s (num_starts 260; 0.0001s/start)
graph_with_guessing_sync_preds.: 0.020976s (num_starts 1427; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.020996s (num_starts 8; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.021037s (num_starts 8; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.021078s (num_starts 3; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.02109s (num_starts 3; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.021382s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.021428s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.021489s (num_starts 3; 0.0072s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.021511s (num_starts 3; 0.0072s/start)
get_unrolled_loop_paths_from.: 0.021549s (num_starts 7; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-trivial.: 0.023219s (num_starts 1; 0.0232s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.023221s (num_starts 1; 0.0232s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.023776s (num_starts 17; 0.0014s/start)
compute_regions.: 0.024011s (num_starts 44; 0.0005s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.024074s (num_starts 832; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.024122s (num_starts 1; 0.0241s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.024128s (num_starts 1; 0.0241s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.024387s (num_starts 304; 0.0001s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.024613s (num_starts 8; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.025011s (num_starts 4; 0.0063s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.025044s (num_starts 4; 0.0063s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.025098s (num_starts 2; 0.0125s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-trivial.: 0.025106s (num_starts 2; 0.0126s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.025112s (num_starts 2; 0.0126s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.025849s (num_starts 1; 0.0258s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.026285s (num_starts 832; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.026591s (num_starts 10; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.026691s (num_starts 1; 0.0267s/start)
tfg_suffixpath_get_expr_helper.: 0.027337s (num_starts 36; 0.0008s/start)
ldr_decomposition.: 0.027505s (num_starts 259; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.027721s (num_starts 14; 0.0020s/start)
populate_transitive_closure.: 0.027826s (num_starts 59; 0.0005s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.028502s (num_starts 122; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.028848s (num_starts 12; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.028954s (num_starts 16; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.029231s (num_starts 16; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.030444s (num_starts 14; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-trivial.: 0.030568s (num_starts 9; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.030581s (num_starts 9; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.031643s (num_starts 2; 0.0158s/start)
expr_substitute_using_available_exprs_submap.: 0.033548s (num_starts 875; 0.0000s/start)
compute_vars_reaching_definitions.: 0.033556s (num_starts 2; 0.0168s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.03417s (num_starts 6; 0.0057s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.034368s (num_starts 6; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.036045s (num_starts 7; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.036088s (num_starts 7; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.036518s (num_starts 4; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.036532s (num_starts 4; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-trivial.: 0.03655s (num_starts 2; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.036554s (num_starts 2; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond;-trivial.: 0.036627s (num_starts 2; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.036628s (num_starts 2; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.036637s (num_starts 2; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;-dst-edgecond-implies-src-edgecond.: 0.036646s (num_starts 2; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-trivial.: 0.036656s (num_starts 2; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.03666s (num_starts 2; 0.0183s/start)
gen_pred_from_coeff_row.simplify.: 0.037019s (num_starts 873; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.03789s (num_starts 3; 0.0126s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.037912s (num_starts 3; 0.0126s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.038146s (num_starts 3; 0.0127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.038181s (num_starts 3; 0.0127s/start)
create_sp_version_relations_lattice_at_pc.: 0.04095s (num_starts 376; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.041801s (num_starts 6; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.041816s (num_starts 6; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.041855s (num_starts 6; 0.0070s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.041941s (num_starts 6; 0.0070s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.042108s (num_starts 2; 0.0211s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.042371s (num_starts 2; 0.0212s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.042381s (num_starts 2; 0.0212s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.042872s (num_starts 2; 0.0214s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.042882s (num_starts 2; 0.0214s/start)
tfg::get_aliasing_constraints_for_edge.: 0.042932s (num_starts 823; 0.0001s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.043079s (num_starts 3565; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.043984s (num_starts 2; 0.0220s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.043997s (num_starts 2; 0.0220s/start)
graph_to_stream.: 0.044153s (num_starts 4; 0.0110s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.046396s (num_starts 12; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.046457s (num_starts 12; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.046552s (num_starts 12; 0.0039s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.046692s (num_starts 12; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.047368s (num_starts 2; 0.0237s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.047821s (num_starts 2; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.047838s (num_starts 2; 0.0239s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.048012s (num_starts 6; 0.0080s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-trivial.: 0.048694s (num_starts 10; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.048708s (num_starts 10; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-trivial.: 0.049166s (num_starts 10; 0.0049s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.049178s (num_starts 10; 0.0049s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.049634s (num_starts 4; 0.0124s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.049736s (num_starts 4; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.050904s (num_starts 3; 0.0170s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.050917s (num_starts 3; 0.0170s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.051478s (num_starts 6; 0.0086s/start)
get_next_potential_correlations.: 0.052519s (num_starts 7; 0.0075s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.054239s (num_starts 10; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.054288s (num_starts 10; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.054315s (num_starts 3; 0.0181s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.054341s (num_starts 3; 0.0181s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.054499s (num_starts 28; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-trivial.: 0.060305s (num_starts 10; 0.0060s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.060979s (num_starts 7; 0.0087s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;abstract-memlabel-asserts-houdini-guess.: 0.061075s (num_starts 7; 0.0087s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.061244s (num_starts 6; 0.0102s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.061267s (num_starts 6; 0.0102s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-trivial.: 0.062374s (num_starts 12; 0.0052s/start)
do_ssa_transformation.: 0.062486s (num_starts 2; 0.0312s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-trivial.: 0.063207s (num_starts 10; 0.0063s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.063372s (num_starts 859; 0.0001s/start)
query:convert_from_z3.: 0.063504s (num_starts 1104; 0.0001s/start)
predicate_canonicalized.: 0.064073s (num_starts 873; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.064364s (num_starts 11; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.064468s (num_starts 11; 0.0059s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.064639s (num_starts 859; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.065537s (num_starts 9; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.065592s (num_starts 9; 0.0073s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.06651s (num_starts 2379; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.066819s (num_starts 10; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;abstract-memlabel-asserts-houdini-guess.: 0.066959s (num_starts 10; 0.0067s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown;-trivial.: 0.067401s (num_starts 20; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;pred-type-unknown.: 0.067674s (num_starts 20; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.067691s (num_starts 1; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.067702s (num_starts 1; 0.0677s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070069s (num_starts 1; 0.0701s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070587s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070598s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.07061s (num_starts 1; 0.0706s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.07077s (num_starts 14; 0.0051s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.071047s (num_starts 14; 0.0051s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071418s (num_starts 1; 0.0714s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071431s (num_starts 1; 0.0714s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071811s (num_starts 1; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071825s (num_starts 1; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071847s (num_starts 1; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071855s (num_starts 1; 0.0719s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07191s (num_starts 1; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.071942s (num_starts 1; 0.0719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.071953s (num_starts 1; 0.0720s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.071968s (num_starts 1; 0.0720s/start)
pth_collect_simplified_preds_using_atom_func.: 0.072673s (num_starts 2245; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.073192s (num_starts 4; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-trivial.: 0.073312s (num_starts 22; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.073361s (num_starts 22; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.073378s (num_starts 13; 0.0056s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.073383s (num_starts 88; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.073403s (num_starts 13; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07347s (num_starts 1; 0.0735s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073479s (num_starts 1; 0.0735s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.073665s (num_starts 88; 0.0008s/start)
bv_const_ref_map2expr_map.: 0.073789s (num_starts 873; 0.0001s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.074059s (num_starts 329; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074111s (num_starts 1; 0.0741s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074121s (num_starts 1; 0.0741s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.074135s (num_starts 1; 0.0741s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.074779s (num_starts 30; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.074901s (num_starts 30; 0.0025s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.075059s (num_starts 114; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075391s (num_starts 1; 0.0754s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.075396s (num_starts 1; 0.0754s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-trivial.: 0.075696s (num_starts 10; 0.0076s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.076047s (num_starts 329; 0.0002s/start)
compute_lr_status_for_expr.: 0.076415s (num_starts 1132; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-trivial.: 0.076617s (num_starts 7; 0.0109s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.07663s (num_starts 7; 0.0109s/start)
get_sprel_map_pair_at_pc.: 0.077878s (num_starts 616; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.077919s (num_starts 15; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.07901s (num_starts 1; 0.0790s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond;-trivial.: 0.079456s (num_starts 4; 0.0199s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.079703s (num_starts 3; 0.0266s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08054s (num_starts 1; 0.0805s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080568s (num_starts 1; 0.0806s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080589s (num_starts 1; 0.0806s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-trivial.: 0.080862s (num_starts 4; 0.0202s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.080869s (num_starts 4; 0.0202s/start)
compute_expr_eqclasses_at_pc.: 0.082579s (num_starts 7; 0.0118s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.082779s (num_starts 14; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.082828s (num_starts 14; 0.0059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.083653s (num_starts 2; 0.0418s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.084239s (num_starts 15; 0.0056s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.084401s (num_starts 329; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.084584s (num_starts 15; 0.0056s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.084991s (num_starts 81; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.085129s (num_starts 2; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.085144s (num_starts 2; 0.0426s/start)
populate_loc_liveness.: 0.08565s (num_starts 3; 0.0286s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086006s (num_starts 1; 0.0860s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.086017s (num_starts 1; 0.0860s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.086367s (num_starts 4; 0.0216s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.086393s (num_starts 4; 0.0216s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.086702s (num_starts 9; 0.0096s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.086948s (num_starts 12; 0.0072s/start)
cg_add_node.: 0.087061s (num_starts 9; 0.0097s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.087137s (num_starts 20; 0.0044s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.087202s (num_starts 12; 0.0073s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087743s (num_starts 1; 0.0877s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.087753s (num_starts 1; 0.0878s/start)
collect_aliasing_constraints_around_path_helper.: 0.088069s (num_starts 475; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed;-trivial.: 0.088263s (num_starts 4; 0.0221s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-signed.: 0.08831s (num_starts 4; 0.0221s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.088641s (num_starts 22; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned;-trivial.: 0.088782s (num_starts 6; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;lb-unsigned.: 0.088849s (num_starts 6; 0.0148s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.088857s (num_starts 22; 0.0040s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-trivial.: 0.090265s (num_starts 4; 0.0226s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.090585s (num_starts 2; 0.0453s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;-dst-edgecond-implies-src-edgecond.: 0.090595s (num_starts 2; 0.0453s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.090838s (num_starts 1; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.090862s (num_starts 1; 0.0909s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.090885s (num_starts 1; 0.0909s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.090901s (num_starts 1; 0.0909s/start)
collect_aliasing_constraints_around_path.: 0.092602s (num_starts 299; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;abstract-memlabel-asserts-houdini-guess.: 0.092605s (num_starts 4; 0.0232s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown;-trivial.: 0.094247s (num_starts 18; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;pred-type-unknown.: 0.094472s (num_starts 18; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.096818s (num_starts 2; 0.0484s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.096853s (num_starts 2; 0.0484s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-trivial.: 0.096853s (num_starts 4; 0.0242s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.096865s (num_starts 4; 0.0242s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.096866s (num_starts 2; 0.0484s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess;-trivial.: 0.099499s (num_starts 7; 0.0142s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-trivial.: 0.103211s (num_starts 6; 0.0172s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-trivial.: 0.103218s (num_starts 6; 0.0172s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.104742s (num_starts 36; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.105719s (num_starts 2; 0.0529s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.107053s (num_starts 3; 0.0357s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.107088s (num_starts 1; 0.1071s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.107547s (num_starts 5; 0.0215s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.108444s (num_starts 28; 0.0039s/start)
query:convert_to_z3.: 0.11101s (num_starts 1104; 0.0001s/start)
create_new_corr_graph_edge.new_node.: 0.11182s (num_starts 8; 0.0140s/start)
create_new_corr_graph_edge.: 0.112419s (num_starts 13; 0.0086s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.113079s (num_starts 13; 0.0087s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.114375s (num_starts 1; 0.1144s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.114473s (num_starts 10; 0.0114s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned;-trivial.: 0.114513s (num_starts 6; 0.0191s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.114519s (num_starts 6; 0.0191s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.114929s (num_starts 30; 0.0038s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.115486s (num_starts 329; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.1157s (num_starts 30; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.1159s (num_starts 38; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.116651s (num_starts 10; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-signed.: 0.11668s (num_starts 10; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-trivial.: 0.117551s (num_starts 15; 0.0078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.11759s (num_starts 15; 0.0078s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.11799s (num_starts 564; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.118591s (num_starts 21; 0.0056s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.118795s (num_starts 4; 0.0297s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.118833s (num_starts 4; 0.0297s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;abstract-memlabel-asserts-houdini-guess.: 0.118863s (num_starts 21; 0.0057s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.120676s (num_starts 11; 0.0110s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-unsigned.: 0.120709s (num_starts 11; 0.0110s/start)
collect_assumes_around_path_helper.: 0.121797s (num_starts 1538; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.122209s (num_starts 20; 0.0061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.124006s (num_starts 12; 0.0103s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.124025s (num_starts 20; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.124082s (num_starts 12; 0.0103s/start)
compute_new_lr_status_on_locs.: 0.124835s (num_starts 329; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.125824s (num_starts 6; 0.0210s/start)
graph_with_paths::collect_assumes_around_path.: 0.127412s (num_starts 1538; 0.0001s/start)
tfg_postprocess_after_pointsto_analysis.: 0.128692s (num_starts 2; 0.0643s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.131534s (num_starts 8; 0.0164s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.133905s (num_starts 17; 0.0079s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-trivial.: 0.135158s (num_starts 8; 0.0169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.136525s (num_starts 11; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;ub-signed.: 0.136555s (num_starts 11; 0.0124s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144714s (num_starts 1; 0.1447s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144734s (num_starts 1; 0.1447s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.144908s (num_starts 49; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149841s (num_starts 2; 0.0749s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.149857s (num_starts 2; 0.0749s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.151217s (num_starts 32; 0.0047s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.154492s (num_starts 3; 0.0515s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;-dst-edgecond-implies-src-edgecond.: 0.15491s (num_starts 5; 0.0310s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.154964s (num_starts 44; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.155209s (num_starts 44; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned;-trivial.: 0.155298s (num_starts 8; 0.0194s/start)
avail_exprs_create_submap.: 0.155351s (num_starts 987; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;ub-unsigned.: 0.155395s (num_starts 8; 0.0194s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-trivial.: 0.157025s (num_starts 38; 0.0041s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.157325s (num_starts 6; 0.0262s/start)
counter_example_satisfies_preds.: 0.157916s (num_starts 3090; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.158247s (num_starts 6; 0.0264s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.158277s (num_starts 6; 0.0264s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159406s (num_starts 1; 0.1594s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159411s (num_starts 1; 0.1594s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159413s (num_starts 1; 0.1594s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.159424s (num_starts 1; 0.1594s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.159428s (num_starts 1; 0.1594s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.159436s (num_starts 1; 0.1594s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159584s (num_starts 2; 0.0798s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159588s (num_starts 2; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159615s (num_starts 2; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159629s (num_starts 2; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.159659s (num_starts 2; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-unsigned.: 0.159669s (num_starts 2; 0.0798s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.159688s (num_starts 2; 0.0798s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.160853s (num_starts 2; 0.0804s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.161371s (num_starts 2; 0.0807s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.161378s (num_starts 2; 0.0807s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.162448s (num_starts 2; 0.0812s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162765s (num_starts 2; 0.0814s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.162786s (num_starts 2; 0.0814s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;outgoing_edges_cover_all_possibilities..: 0.163227s (num_starts 3; 0.0544s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.163244s (num_starts 3; 0.0544s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown;-trivial.: 0.163316s (num_starts 52; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;pred-type-unknown.: 0.163933s (num_starts 52; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-trivial.: 0.16876s (num_starts 4; 0.0422s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-trivial.: 0.169676s (num_starts 34; 0.0050s/start)
get_unrolled_paths_from.: 0.170048s (num_starts 40; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;dst-ineq-houdini-guess.: 0.170213s (num_starts 8; 0.0213s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.170252s (num_starts 4; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.174995s (num_starts 4; 0.0437s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.175009s (num_starts 4; 0.0438s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.175626s (num_starts 2; 0.0878s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183614s (num_starts 2; 0.0918s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.185774s (num_starts 11; 0.0169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.18805s (num_starts 7; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;lb-unsigned.: 0.188079s (num_starts 7; 0.0269s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-trivial.: 0.188463s (num_starts 12; 0.0157s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.188927s (num_starts 17; 0.0111s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.188937s (num_starts 60; 0.0031s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.190866s (num_starts 2; 0.0954s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess;-trivial.: 0.198769s (num_starts 20; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.19881s (num_starts 20; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.198894s (num_starts 20; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst-ineq-houdini-guess.: 0.198933s (num_starts 20; 0.0099s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-trivial.: 0.199426s (num_starts 17; 0.0117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.201116s (num_starts 10; 0.0201s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202171s (num_starts 2; 0.1011s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.202216s (num_starts 2; 0.1011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear;-trivial.: 0.20397s (num_starts 38; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.204032s (num_starts 38; 0.0054s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.20908s (num_starts 32; 0.0065s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214711s (num_starts 2; 0.1074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.214742s (num_starts 2; 0.1074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.215529s (num_starts 40; 0.0054s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217704s (num_starts 2; 0.1089s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217745s (num_starts 2; 0.1089s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.218789s (num_starts 2; 0.1094s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.218805s (num_starts 2; 0.1094s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.220381s (num_starts 3; 0.0735s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-trivial.: 0.220703s (num_starts 11; 0.0201s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.221287s (num_starts 14; 0.0158s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown;-trivial.: 0.221292s (num_starts 14; 0.0158s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.221409s (num_starts 14; 0.0158s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;pred-type-unknown.: 0.221472s (num_starts 14; 0.0158s/start)
tfg_relax_pointsto_vals_on_edge.: 0.221599s (num_starts 131; 0.0017s/start)
gen_pred_from_coeff_row.: 0.222556s (num_starts 873; 0.0003s/start)
compute_preds_for_bv_points.: 0.225818s (num_starts 67; 0.0034s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.226263s (num_starts 112; 0.0020s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.228759s (num_starts 9; 0.0254s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.229796s (num_starts 1; 0.2298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.229799s (num_starts 1; 0.2298s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.229822s (num_starts 1; 0.2298s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst_edge_composition_proves_false.: 0.229826s (num_starts 1; 0.2298s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.230448s (num_starts 28; 0.0082s/start)
check_wfconds_on_edge.L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.231313s (num_starts 3; 0.0771s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;pred-type-unknown.: 0.235457s (num_starts 12; 0.0196s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.235551s (num_starts 3; 0.0785s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.236731s (num_starts 35; 0.0068s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.244543s (num_starts 10; 0.0245s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.245675s (num_starts 5; 0.0491s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250633s (num_starts 1; 0.2506s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250637s (num_starts 1; 0.2506s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.250638s (num_starts 1; 0.2506s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.250654s (num_starts 1; 0.2507s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;false-predicate.: 0.250658s (num_starts 1; 0.2507s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.250675s (num_starts 1; 0.2507s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.252206s (num_starts 3; 0.0841s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.252248s (num_starts 3; 0.0841s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.252366s (num_starts 1; 0.2524s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.252371s (num_starts 1; 0.2524s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.252374s (num_starts 1; 0.2524s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.25239s (num_starts 1; 0.2524s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;false-predicate.: 0.252394s (num_starts 1; 0.2524s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);false-predicate.: 0.2524s (num_starts 1; 0.2524s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.254137s (num_starts 3; 0.0847s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.25421s (num_starts 3; 0.0847s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.254986s (num_starts 3; 0.0850s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.25502s (num_starts 3; 0.0850s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-trivial.: 0.255713s (num_starts 14; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.255739s (num_starts 14; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.257685s (num_starts 4; 0.0644s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.257745s (num_starts 4; 0.0644s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.259877s (num_starts 5500; 0.0000s/start)
query:simplify-z3.: 0.259956s (num_starts 2281; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.260194s (num_starts 1; 0.2602s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.260197s (num_starts 1; 0.2602s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.26022s (num_starts 1; 0.2602s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;dst_edge_composition_proves_false.: 0.260224s (num_starts 1; 0.2602s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%10%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 0.262476s (num_starts 22; 0.0119s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-trivial.: 0.262953s (num_starts 42; 0.0063s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.266014s (num_starts 329; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-trivial.: 0.270939s (num_starts 82; 0.0033s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.274913s (num_starts 4; 0.0687s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.274971s (num_starts 4; 0.0687s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.275321s (num_starts 79; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.276072s (num_starts 39; 0.0071s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4;linear.: 0.276161s (num_starts 39; 0.0071s/start)
check_wfconds_on_edge.L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.277484s (num_starts 4; 0.0694s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.281719s (num_starts 3; 0.0939s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.286021s (num_starts 1; 0.2860s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.286022s (num_starts 1; 0.2860s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.286026s (num_starts 1; 0.2860s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.286028s (num_starts 1; 0.2860s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.286039s (num_starts 1; 0.2860s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.286041s (num_starts 1; 0.2860s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.286045s (num_starts 1; 0.2860s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.286441s (num_starts 2; 0.1432s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.287266s (num_starts 4; 0.0718s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.288691s (num_starts 6; 0.0481s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.288769s (num_starts 6; 0.0481s/start)
invariant_inference_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.289811s (num_starts 6; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.294483s (num_starts 9; 0.0327s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.296749s (num_starts 616; 0.0005s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.296899s (num_starts 67; 0.0044s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.299614s (num_starts 47; 0.0064s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.303412s (num_starts 3040; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.304581s (num_starts 1; 0.3046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.304585s (num_starts 1; 0.3046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.304602s (num_starts 1; 0.3046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.304605s (num_starts 1; 0.3046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.305023s (num_starts 4; 0.0763s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-trivial.: 0.309525s (num_starts 50; 0.0062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-trivial.: 0.310341s (num_starts 56; 0.0055s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 0.310429s (num_starts 50; 0.0062s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.31394s (num_starts 14; 0.0224s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.328453s (num_starts 503; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.332563s (num_starts 12; 0.0277s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-trivial.: 0.339516s (num_starts 52; 0.0065s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.341509s (num_starts 616; 0.0006s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.345565s (num_starts 5; 0.0691s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.347495s (num_starts 4; 0.0869s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.34762s (num_starts 4; 0.0869s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.349373s (num_starts 4; 0.0873s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.354562s (num_starts 5; 0.0709s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.354591s (num_starts 5; 0.0709s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.356649s (num_starts 5678; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.358366s (num_starts 5500; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.359289s (num_starts 7; 0.0513s/start)
ldr_decompose_and_linear_solve.: 0.359339s (num_starts 259; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.369936s (num_starts 1; 0.3699s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.369939s (num_starts 1; 0.3699s/start)
bv_linear_solve.: 0.370495s (num_starts 259; 0.0014s/start)
query:bv_solve.: 0.372039s (num_starts 259; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;-dst-edgecond-implies-src-edgecond.: 0.372753s (num_starts 5; 0.0746s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.380309s (num_starts 7; 0.0543s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-signed.: 0.38033s (num_starts 7; 0.0543s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.392474s (num_starts 198; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.392496s (num_starts 5; 0.0785s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.397938s (num_starts 106; 0.0038s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.398334s (num_starts 4; 0.0996s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.408841s (num_starts 6; 0.0681s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410846s (num_starts 5; 0.0822s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.410881s (num_starts 5; 0.0822s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.411633s (num_starts 3; 0.1372s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.411665s (num_starts 3; 0.1372s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.411686s (num_starts 3; 0.1372s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-trivial.: 0.421053s (num_starts 23; 0.0183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.426425s (num_starts 1; 0.4264s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.426425s (num_starts 1; 0.4264s/start)
bv_solve_returning_intermediate_structures.: 0.432529s (num_starts 259; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.433119s (num_starts 5; 0.0866s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.433182s (num_starts 5; 0.0866s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.433218s (num_starts 5; 0.0866s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.435392s (num_starts 3; 0.1451s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.435441s (num_starts 3; 0.1451s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.437766s (num_starts 7; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;ub-unsigned.: 0.437791s (num_starts 7; 0.0625s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.449487s (num_starts 10; 0.0449s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;dst-ineq-houdini-guess.: 0.449533s (num_starts 10; 0.0450s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.449611s (num_starts 10; 0.0450s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.452377s (num_starts 1; 0.4524s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.452382s (num_starts 1; 0.4524s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.452386s (num_starts 1; 0.4524s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.452716s (num_starts 5500; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.45415s (num_starts 5; 0.0908s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.454221s (num_starts 5; 0.0908s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.456777s (num_starts 4; 0.1142s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;lb-signed.: 0.456788s (num_starts 4; 0.1142s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.456806s (num_starts 4; 0.1142s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.458573s (num_starts 72; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-signed.: 0.458871s (num_starts 14; 0.0328s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.459284s (num_starts 759; 0.0006s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.463223s (num_starts 6; 0.0772s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.464283s (num_starts 43; 0.0108s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.47269s (num_starts 5; 0.0945s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-signed.: 0.474272s (num_starts 15; 0.0316s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.479205s (num_starts 5; 0.0958s/start)
bvsolve_cache_query.miss1.: 0.48438s (num_starts 259; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.490323s (num_starts 5; 0.0981s/start)
bvsolve_cache_query.: 0.492389s (num_starts 259; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.496852s (num_starts 9; 0.0552s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.496957s (num_starts 9; 0.0552s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.503236s (num_starts 48; 0.0105s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.503609s (num_starts 48; 0.0105s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.505231s (num_starts 6; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.506371s (num_starts 6; 0.0844s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.508017s (num_starts 1; 0.5080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.508021s (num_starts 1; 0.5080s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.508035s (num_starts 1; 0.5080s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst_edge_composition_proves_false.: 0.508039s (num_starts 1; 0.5080s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.508949s (num_starts 6; 0.0848s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.519372s (num_starts 49; 0.0106s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;-dst-edgecond-implies-src-edgecond.: 0.527197s (num_starts 7; 0.0753s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 0.528643s (num_starts 20; 0.0264s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;dst-ineq-houdini-guess.: 0.528715s (num_starts 20; 0.0264s/start)
check_wfconds_on_edge.L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.534915s (num_starts 10; 0.0535s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.536858s (num_starts 6; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.536886s (num_starts 6; 0.0895s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-unsigned.: 0.549581s (num_starts 12; 0.0458s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.550654s (num_starts 84; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.553508s (num_starts 3; 0.1845s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.565727s (num_starts 3; 0.1886s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.56575s (num_starts 3; 0.1886s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.573642s (num_starts 8; 0.0717s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;lb-unsigned.: 0.573709s (num_starts 8; 0.0717s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.577944s (num_starts 6; 0.0963s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 0.5794s (num_starts 44; 0.0132s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.580397s (num_starts 4; 0.1451s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.581603s (num_starts 17; 0.0342s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.581708s (num_starts 5; 0.1163s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.598978s (num_starts 33; 0.0182s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.600209s (num_starts 4; 0.1501s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.600252s (num_starts 4; 0.1501s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.600274s (num_starts 4; 0.1501s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 0.602364s (num_starts 5; 0.1205s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;lb-unsigned.: 0.602383s (num_starts 5; 0.1205s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.608769s (num_starts 37; 0.0165s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 0.610836s (num_starts 6; 0.1018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.611796s (num_starts 2; 0.3059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-trivial.: 0.62149s (num_starts 49; 0.0127s/start)
solve_for_bv_points.: 0.626051s (num_starts 259; 0.0024s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.63212s (num_starts 1629; 0.0004s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-trivial.: 0.642353s (num_starts 154; 0.0042s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.65409s (num_starts 2; 0.3270s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.654103s (num_starts 2; 0.3271s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.654109s (num_starts 2; 0.3271s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.657886s (num_starts 6; 0.1096s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.657901s (num_starts 6; 0.1097s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.657936s (num_starts 6; 0.1097s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.659851s (num_starts 17605; 0.0000s/start)
check_wfconds_on_edge.L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry.: 0.66207s (num_starts 9; 0.0736s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.662417s (num_starts 3; 0.2208s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.6636s (num_starts 149; 0.0045s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 0.665104s (num_starts 3; 0.2217s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.666321s (num_starts 5; 0.1333s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.676674s (num_starts 14; 0.0483s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2.E1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 0.676779s (num_starts 14; 0.0483s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.681057s (num_starts 4; 0.1703s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.684024s (num_starts 6; 0.1140s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.685364s (num_starts 40; 0.0171s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.688648s (num_starts 6; 0.1148s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;lb-signed.: 0.690715s (num_starts 8; 0.0863s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-trivial.: 0.6933s (num_starts 68; 0.0102s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.695275s (num_starts 2; 0.3476s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.695285s (num_starts 2; 0.3476s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.695287s (num_starts 2; 0.3476s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.695933s (num_starts 1; 0.6959s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.695937s (num_starts 1; 0.6959s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.695959s (num_starts 1; 0.6960s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst_edge_composition_proves_false.: 0.695962s (num_starts 1; 0.6960s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.696622s (num_starts 198; 0.0035s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 0.699097s (num_starts 22; 0.0318s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.702613s (num_starts 5; 0.1405s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;ub-unsigned.: 0.702635s (num_starts 5; 0.1405s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.70267s (num_starts 5; 0.1405s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.714208s (num_starts 124; 0.0058s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.719442s (num_starts 5; 0.1439s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 0.73597s (num_starts 44; 0.0167s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 0.738811s (num_starts 13; 0.0568s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.739257s (num_starts 11; 0.0672s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.748575s (num_starts 30; 0.0250s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.760707s (num_starts 8; 0.0951s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.76444s (num_starts 101; 0.0076s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.769304s (num_starts 8; 0.0962s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.788005s (num_starts 1544; 0.0005s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.799926s (num_starts 644; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear;-trivial.: 0.800037s (num_starts 37; 0.0216s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.81073s (num_starts 10; 0.0811s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-signed.: 0.812349s (num_starts 54; 0.0150s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.812585s (num_starts 2; 0.4063s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.812657s (num_starts 2; 0.4063s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.819406s (num_starts 259; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.851416s (num_starts 1; 0.8514s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.851419s (num_starts 1; 0.8514s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.851442s (num_starts 1; 0.8514s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst_edge_composition_proves_false.: 0.851446s (num_starts 1; 0.8514s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.855717s (num_starts 7; 0.1222s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.855907s (num_starts 7; 0.1223s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.858255s (num_starts 12; 0.0715s/start)
apply_mask_and_overlay_array_constant.: 0.859241s (num_starts 644; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.859361s (num_starts 11; 0.0781s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-trivial.: 0.862157s (num_starts 60; 0.0144s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.864837s (num_starts 9; 0.0961s/start)
ftmap_run_pointsto_analysis.: 0.868563s (num_starts 2; 0.4343s/start)
tfg_run_pointsto_analysis.: 0.869295s (num_starts 2; 0.4346s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.871627s (num_starts 10; 0.0872s/start)
guarded_predicate_set_and.: 0.885284s (num_starts 616; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.898189s (num_starts 1; 0.8982s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.898194s (num_starts 1; 0.8982s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.898198s (num_starts 1; 0.8982s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.90121s (num_starts 5; 0.1802s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.901224s (num_starts 5; 0.1802s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.901249s (num_starts 5; 0.1802s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 0.911308s (num_starts 20; 0.0456s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;-dst-edgecond-implies-src-edgecond.: 0.914135s (num_starts 12; 0.0762s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.918071s (num_starts 15; 0.0612s/start)
tfg_populate_structs_after_ssa_construction.: 0.925053s (num_starts 2; 0.4625s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.925703s (num_starts 2; 0.4629s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.925709s (num_starts 8; 0.1157s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.925801s (num_starts 2; 0.4629s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-trivial.: 0.938492s (num_starts 228; 0.0041s/start)
lhs_set_sort.: 0.958226s (num_starts 616; 0.0016s/start)
put_smtlib_string_in_file.: 0.961175s (num_starts 730; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.963285s (num_starts 17; 0.0567s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 0.975873s (num_starts 211; 0.0046s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.995077s (num_starts 2; 0.4975s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 1.01446s (num_starts 13; 0.0780s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);lb-signed.: 1.01462s (num_starts 13; 0.0780s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.0553s (num_starts 5; 0.2111s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.05533s (num_starts 5; 0.2111s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%7%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 1.07677s (num_starts 107; 0.0101s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;linear.: 1.0829s (num_starts 92; 0.0118s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-signed.: 1.09602s (num_starts 42; 0.0261s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.10247s (num_starts 9; 0.1225s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.11158s (num_starts 2; 0.5558s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.11169s (num_starts 2; 0.5558s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.11878s (num_starts 1; 1.1188s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.11878s (num_starts 1; 1.1188s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.11879s (num_starts 1; 1.1188s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.11881s (num_starts 1; 1.1188s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-signed.: 1.11881s (num_starts 1; 1.1188s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-signed.: 1.11882s (num_starts 1; 1.1188s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 1.12888s (num_starts 27; 0.0418s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;linear.: 1.12895s (num_starts 27; 0.0418s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 1.13455s (num_starts 3299; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.14122s (num_starts 88; 0.0130s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.14575s (num_starts 6; 0.1910s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2.E1;linear.: 1.15512s (num_starts 42; 0.0275s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 1.15608s (num_starts 17; 0.0680s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-trivial.: 1.16899s (num_starts 184; 0.0064s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 1.17018s (num_starts 20; 0.0585s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 1.17621s (num_starts 13; 0.0905s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 1.17683s (num_starts 20; 0.0588s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1798s (num_starts 5; 0.2360s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.19398s (num_starts 14; 0.0853s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 1.2008s (num_starts 6; 0.2001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.24668s (num_starts 2; 0.6233s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.2467s (num_starts 2; 0.6234s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.30734s (num_starts 27; 0.0484s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.37834s (num_starts 10; 0.1378s/start)
graph_ec_apply_trans_funs_helper.0.: 1.39072s (num_starts 3558; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.39606s (num_starts 16; 0.0873s/start)
graph_ec_apply_trans_funs_helper.: 1.40348s (num_starts 3567; 0.0004s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 1.41199s (num_starts 3567; 0.0004s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 1.41971s (num_starts 3542; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.42382s (num_starts 4; 0.3560s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-trivial.: 1.42499s (num_starts 44; 0.0324s/start)
computeWP_for_pred_across_ec.: 1.43104s (num_starts 3542; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.43282s (num_starts 13; 0.1102s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.43622s (num_starts 11; 0.1306s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 1.46612s (num_starts 127; 0.0115s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.47317s (num_starts 16; 0.0921s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.47329s (num_starts 16; 0.0921s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.47631s (num_starts 11; 0.1342s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.51831s (num_starts 11; 0.1380s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.55951s (num_starts 2034; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;dst-ineq-houdini-guess.: 1.59618s (num_starts 33; 0.0484s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 1.59663s (num_starts 6; 0.2661s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.60443s (num_starts 19; 0.0844s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;dst-ineq-houdini-guess.: 1.61261s (num_starts 16; 0.1008s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.67342s (num_starts 616; 0.0027s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-signed.: 1.70002s (num_starts 53; 0.0321s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);linear.: 1.7089s (num_starts 71; 0.0241s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.72352s (num_starts 616; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 1.72932s (num_starts 30; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;lb-unsigned.: 1.72947s (num_starts 30; 0.0576s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.73473s (num_starts 21; 0.0826s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.74377s (num_starts 14; 0.1246s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 1.74612s (num_starts 1544; 0.0011s/start)
edge_composition_apply_trans_funs_on_pred.: 1.76968s (num_starts 1427; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.78329s (num_starts 6; 0.2972s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.78333s (num_starts 6; 0.2972s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.78336s (num_starts 6; 0.2972s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.79937s (num_starts 17; 0.1058s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;linear.: 1.7994s (num_starts 17; 0.1058s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);linear.: 1.79947s (num_starts 17; 0.1059s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.80131s (num_starts 20; 0.0901s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 1.83649s (num_starts 47; 0.0391s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(epsilon).: 1.84802s (num_starts 20; 0.0924s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.87443s (num_starts 22; 0.0852s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 1.87733s (num_starts 117; 0.0160s/start)
collect_inductive_preds_around_path.: 1.91173s (num_starts 1427; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.91242s (num_starts 10; 0.1912s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.96304s (num_starts 11; 0.1785s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(epsilon).: 2.06092s (num_starts 15; 0.1374s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.07866s (num_starts 11; 0.1890s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.07888s (num_starts 11; 0.1890s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.09313s (num_starts 26; 0.0805s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 2.09638s (num_starts 33; 0.0635s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3.C1;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 2.12315s (num_starts 13; 0.1633s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 2.1233s (num_starts 13; 0.1633s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.12343s (num_starts 11; 0.1930s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.12358s (num_starts 11; 0.1931s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.1283s (num_starts 50; 0.0426s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.14165s (num_starts 24; 0.0892s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.14443s (num_starts 13; 0.1650s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.21114s (num_starts 25; 0.0884s/start)
check_equivalence_proof.: 2.21876s (num_starts 1; 2.2188s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);lb-unsigned.: 2.22387s (num_starts 43; 0.0517s/start)
check_wfconds_on_edge.: 2.24293s (num_starts 37; 0.0606s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 2.24813s (num_starts 23; 0.0977s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 2.2484s (num_starts 23; 0.0978s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-trivial.: 2.27487s (num_starts 95; 0.0239s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 2.3993s (num_starts 170; 0.0141s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 2.45654s (num_starts 69; 0.0356s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.48007s (num_starts 13; 0.1908s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.48012s (num_starts 13; 0.1908s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.: 2.49137s (num_starts 18; 0.1384s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 2.55371s (num_starts 26; 0.0982s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 2.55378s (num_starts 26; 0.0982s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.59926s (num_starts 30; 0.0866s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.6065s (num_starts 67; 0.0389s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 2.67954s (num_starts 2; 1.3398s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.72311s (num_starts 29; 0.0939s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.79823s (num_starts 16; 0.1749s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.83446s (num_starts 18; 0.1575s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3.C1;ub-unsigned.: 2.86208s (num_starts 26; 0.1101s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.9004s (num_starts 15; 0.1934s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);dst-ineq-houdini-guess.: 2.90707s (num_starts 93; 0.0313s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);linear.: 2.91335s (num_starts 33; 0.0883s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 3.07393s (num_starts 237; 0.0130s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-trivial.: 3.10052s (num_starts 510; 0.0061s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.13591s (num_starts 7; 0.4480s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 3.13617s (num_starts 7; 0.4480s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.14875s (num_starts 8; 0.3936s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.14879s (num_starts 8; 0.3936s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.14882s (num_starts 8; 0.3936s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B3;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.1569s (num_starts 12; 0.2631s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B3;pred-type-unknown.: 3.15693s (num_starts 12; 0.2631s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.17814s (num_starts 20; 0.1589s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 3.1989s (num_starts 82; 0.0390s/start)
dst_edge_composition_proves_false.: 3.23327s (num_starts 7; 0.4619s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 3.23725s (num_starts 491; 0.0066s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.24042s (num_starts 9; 0.3600s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.24048s (num_starts 9; 0.3601s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.2405s (num_starts 9; 0.3601s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B1;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.24433s (num_starts 11; 0.2949s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B1;pred-type-unknown.: 3.24438s (num_starts 11; 0.2949s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);pred-type-unknown.: 3.24445s (num_starts 11; 0.2949s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.25453s (num_starts 22; 0.1479s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.28128s (num_starts 33; 0.0994s/start)
decide_hoare_triple.: 3.31428s (num_starts 10; 0.3314s/start)
get_next_dst_edge_composition_to_correlate.: 3.3245s (num_starts 8; 0.4156s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;dst-ineq-houdini-guess.: 3.34607s (num_starts 78; 0.0429s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.43227s (num_starts 4; 0.8581s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.43228s (num_starts 4; 0.8581s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.51124s (num_starts 5; 0.7022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.51322s (num_starts 8; 0.4392s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 3.51325s (num_starts 8; 0.4392s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;linear.: 3.54121s (num_starts 258; 0.0137s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 3.61907s (num_starts 10; 0.3619s/start)
decide_hoare_triple_helper;per-path;L3%10%bbentry_Lfor.cond1%1%bbentry;(L3%10%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 3.71663s (num_starts 94; 0.0395s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 3.74024s (num_starts 2; 1.8701s/start)
compute_z3_expr.: 3.84939s (num_starts 1469; 0.0026s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.88454s (num_starts 21; 0.1850s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 3.89205s (num_starts 70; 0.0556s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.03588s (num_starts 21; 0.1922s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 4.09919s (num_starts 117; 0.0350s/start)
check_preds_on_edge_compositions.: 4.16218s (num_starts 42; 0.0991s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1;ub-unsigned.: 4.37674s (num_starts 73; 0.0600s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 4.43742s (num_starts 105; 0.0423s/start)
parse_z3_model.: 4.71089s (num_starts 171; 0.0275s/start)
read_counter_examples_from_channel.: 4.75501s (num_starts 87; 0.0547s/start)
invariant_inference_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 5.19614s (num_starts 20; 0.2598s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.39105s (num_starts 14; 0.3851s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.3914s (num_starts 14; 0.3851s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.5792s (num_starts 38; 0.1468s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.85323s (num_starts 11; 0.5321s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.85342s (num_starts 11; 0.5321s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 5.97954s (num_starts 17; 0.3517s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.01418s (num_starts 13; 0.4626s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);ub-unsigned.: 6.09865s (num_starts 21; 0.2904s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1.B4.C1.D2;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 6.14051s (num_starts 44; 0.1396s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;ub-unsigned.: 6.14991s (num_starts 21; 0.2929s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.29028s (num_starts 20; 0.3145s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.60697s (num_starts 62; 0.1066s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry).: 6.75644s (num_starts 222; 0.0304s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);linear.: 6.81779s (num_starts 58; 0.1175s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 6.82081s (num_starts 20; 0.3410s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.01629s (num_starts 26; 0.2699s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%7%bbentry_Lfor.cond1%1%bbentry).: 7.07272s (num_starts 54; 0.1310s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1.B4.C1.D2;linear.: 7.15381s (num_starts 80; 0.0894s/start)
corr_graph::add_edge().: 7.27901s (num_starts 13; 0.5599s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 7.39565s (num_starts 13; 0.5689s/start)
corr_graph_add_correlation.: 7.39607s (num_starts 13; 0.5689s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 7.39687s (num_starts 13; 0.5690s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 7.77324s (num_starts 20; 0.3887s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 8.07791s (num_starts 189; 0.0427s/start)
decide_hoare_triple_helper;-trivial.: 8.22189s (num_starts 1091; 0.0075s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 8.49638s (num_starts 32; 0.2655s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.: 8.60963s (num_starts 99; 0.0870s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry).: 8.73547s (num_starts 67; 0.1304s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.32349s (num_starts 57; 0.1636s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.49346s (num_starts 95; 0.0999s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%10%bbentry_Lfor.cond1%1%bbentry).: 9.97319s (num_starts 211; 0.0473s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.98105s (num_starts 23; 0.4340s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 10.6981s (num_starts 147; 0.0728s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 12.1079s (num_starts 17; 0.7122s/start)
invariant_inference_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 12.1479s (num_starts 17; 0.7146s/start)
decide_hoare_triple_helper;per-path;L3%7%bbentry_Lfor.cond%1%bbentry;(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry).: 12.6116s (num_starts 605; 0.0208s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 14.4274s (num_starts 34; 0.4243s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 14.6951s (num_starts 56; 0.2624s/start)
ce_reconcile_sorts.: 14.7521s (num_starts 172; 0.0858s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.4446s (num_starts 90; 0.1716s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 15.4638s (num_starts 157; 0.0985s/start)
decide_hoare_triple_helper;per-path;L3%17%bbentry_Lfor.cond1%1%bbentry;(L3%17%bbentry_Lfor.cond1%1%bbentry=>L3%17%bbentry_Lfor.cond1%1%bbentry).: 16.7074s (num_starts 129; 0.1295s/start)
decide_hoare_triple_helper;per-query-type;linear.: 18.6929s (num_starts 581; 0.0322s/start)
check_node_stability_after_CE_addition.: 21.9158s (num_starts 337; 0.0650s/start)
propagate_nodece_across_edge.: 22.3163s (num_starts 114; 0.1958s/start)
query:smt.: 27.4737s (num_starts 365; 0.0753s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 30.7971s (num_starts 296; 0.1040s/start)
src_tfg_counter_example_translate_on_edge_composition.: 30.7992s (num_starts 341; 0.0903s/start)
spawn_smt_query.: 32.233s (num_starts 365; 0.0883s/start)
counter_example_translate_on_edge_composition_helper.: 43.1629s (num_starts 2814; 0.0153s/start)
counter_example_falsifies_preds.: 46.9333s (num_starts 587; 0.0800s/start)
counter_example_evaluate_preds.: 47.0832s (num_starts 3677; 0.0128s/start)
solver_provable.: 52.7416s (num_starts 616; 0.0856s/start)
solver_satisfiable-cache-miss.: 52.7868s (num_starts 365; 0.1446s/start)
solver_satisfiable.: 52.7928s (num_starts 617; 0.0856s/start)
expr_is_provable.: 53.3907s (num_starts 616; 0.0867s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 53.4018s (num_starts 616; 0.0867s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 53.436s (num_starts 616; 0.0867s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 53.4598s (num_starts 616; 0.0868s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 54.4512s (num_starts 616; 0.0884s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 54.6188s (num_starts 616; 0.0887s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 54.6291s (num_starts 616; 0.0887s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 62.8646s (num_starts 336; 0.1871s/start)
is_expr_equal_using_lhs_set_and_precond.: 63.2565s (num_starts 616; 0.1027s/start)
prove.: 63.2662s (num_starts 616; 0.1027s/start)
prove_spawn_and_join_helper.: 63.27s (num_starts 616; 0.1027s/start)
prove_spawn_and_join.: 66.6359s (num_starts 616; 0.1082s/start)
prove_wrapper.proof_query_not_trivial.: 66.7661s (num_starts 616; 0.1084s/start)
prove_wrapper.: 66.9405s (num_starts 1528; 0.0438s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.: 67.8936s (num_starts 60; 1.1316s/start)
decide_hoare_triple_check_ub.: 68.8203s (num_starts 1427; 0.0482s/start)
decide_hoare_triple_helper.: 71.1454s (num_starts 1427; 0.0499s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%17%bbentry_Lfor.cond1%1%bbentry.inductive-invariants.: 71.8503s (num_starts 40; 1.7963s/start)
add_fresh_counterexample_at_pc_and_propagate.: 73.4001s (num_starts 201; 0.3652s/start)
decide_hoare_triple_with_alias_cons.ce.: 73.4061s (num_starts 1307; 0.0562s/start)
update_invariant_state_for_edges.: 139.798s (num_starts 11; 12.7089s/start)
cg_check_new_cg_ec.: 139.798s (num_starts 11; 12.7089s/start)
correl_entry_apply.: 139.799s (num_starts 11; 12.7090s/start)
expandProductCFG.: 143.178s (num_starts 12; 11.9315s/start)
decide_hoare_triple_with_alias_cons.: 144.562s (num_starts 1427; 0.1013s/start)
bestFirstSearch.: 150.676s (num_starts 1; 150.6756s/start)
Time taken for equivalence check.: 152.91s (num_starts 1; 152.9100s/start)

counters:
# of Paths Prunned through CE propagation.: 5
# of assume sat failures for undef-behavioursome.edge.Lif.else%1%d=>Lif.end%1%bbentry.: 6
# of assume sat failures for undef-behavioursome.edge.Lif.then%1%d=>Lif.end%1%bbentry.: 4
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 5
# of paths enumerated.: 41
# of paths expanded.: 11
# of queries to linear solver.: 259
# of smt-solver-queries.: 365
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 4
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 4
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 5
Lfor.cond%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 4
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_ecs.: 2
Lfor.cond1%1%bbentry=>Lfor.cond1%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 4
removed-siblings.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 17
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 20
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 11
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 20
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 11
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 20
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%m.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 20
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 20
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 4
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 6
smallest_point_cover_xfer.dst-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 18
smallest_point_cover_xfer.dst-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 18
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 20
smallest_point_cover_xfer.dst-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 92
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 10
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 18
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 19
smallest_point_cover_xfer.expr-group-bvs.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 77
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 31
smallest_point_cover_xfer.expr-group-bvs.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 74
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.local-sizes-are-equal.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 7
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 6
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 17
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 47
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 28
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.iters.: 11
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%10%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 15
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.iters.: 35
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%17%bbentry_Lfor.cond1%1%bbentry.prove_queries.: 33
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.iters.: 80
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%7%bbentry_Lfor.cond%1%bbentry.prove_queries.: 77
smt-queries-cache-hits.: 252
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 171
total-correlation-possibilities.: 17
total-correlation-possibilities-mod-lsprels.: 17
total-correlations-explored.: 12

flags:
dst-aloc.: 0
dst-edges.: 16
dst-nodes.: 14
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%17%bbentry_Lfor.cond1%1%bbentry.: 30
final-CG-counterexamples-generated-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 26
final-CG-counterexamples-total-at-L3%17%bbentry_Lfor.cond1%1%bbentry.: 58
final-CG-counterexamples-total-at-L3%7%bbentry_Lfor.cond%1%bbentry.: 46
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 4
final-CG-num-invariants.: 41
final-CG-super-edges.: 0
src-edges.: 26
src-nodes.: 22
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 124.39
final-CG-time-to-total-time-ratio.: 0.83
query-time-to-total-time-ratio.: 0.18

Context stats:
exprs: count: 278105
sorts: count: 168
num_proof_queries: 616
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	104619
	        hit ratio:	0.992334
m_simplify_solver:
	----------- total:	6255
	        hit ratio:	0.811831
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	60
	        hit ratio:	0.333333
m_z3_solver_substitution:
	----------- total:	1177
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	1177
	        hit ratio:	0
m_expr_size:
	----------- total:	23159
	        hit ratio:	0.940714
m_contains_only_constants_or_sp_versions:
	----------- total:	48
	        hit ratio:	0.895833
m_expr_evaluates_to_constant_visitor:
	----------- total:	277408
	        hit ratio:	0.471443

z3_solver expr_query_cache entry size: 365
	----------- total:	617
	             hits:	252
	        hit ratio:	0.408428
histogram (time taken by solver in ms):
[ 33.8740,  43.8042) (avg.  39.5522)     : 67
[ 43.8042,  56.6455) (avg.  49.4733)     : 155
[ 56.6455,  73.2513) (avg.  60.6509)     : 43
[ 73.2513,  94.7251) (avg.  82.5403)     : 30
[ 94.7251, 122.4939) (avg. 106.6122)     : 30
[122.4939, 158.4033) (avg. 138.7305)     : 13
[158.4033, 204.8395) (avg. 181.7085)     : 11
[204.8395, 264.8886) (avg. 237.2150)     : 4
[264.8886, 342.5413) (avg. 308.9170)     : 7
[342.5413, 442.9580) (avg. 390.6260)     : 5
histogram (number of quantifiers in query)
[ 0,  5) (avg.  0)                       : 1
[ 5,  9) (avg.  0)                       : 0
[ 9, 13) (avg.  0)                       : 0
[13, 17) (avg.  0)                       : 0
[17, 21) (avg. 18)                       : 33
[21, 25) (avg. 24)                       : 203
[25, 29) (avg. 26)                       : 16
[29, 33) (avg. 31)                       : 112
[33, 37) (avg.  0)                       : 0
[37, 41) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[103, 161) (avg. 103)                    : 1
[161, 218) (avg.   0)                    : 0
[218, 275) (avg.   0)                    : 0
[275, 332) (avg.   0)                    : 0
[332, 389) (avg. 360)                    : 62
[389, 446) (avg. 415)                    : 164
[446, 503) (avg. 489)                    : 26
[503, 560) (avg. 540)                    : 11
[560, 617) (avg. 585)                    : 38
[617, 674) (avg. 646)                    : 63
Top 10 highest time taking queries:
1. [0.442s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-signed.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
2. [0.426s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-ineq-houdini-guess.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_1.11
3. [0.375s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.1
4. [0.363s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.0
5. [0.348s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.3
6. [0.339s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.5
7. [0.334s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.4
8. [0.332s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst_edge_composition_proves_false.CGfromPC.L3%17%bbentry_Lfor.cond1%1%bbentry.dstToPC.Lfor.cond1%1%bbentry.from_pcL3%17%b.0
9. [0.300s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.cond_apply_set_elem0_of_1.8
10. [0.300s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%17%bbentry_Lfor.cond1%1%bbentry.cond_apply_set_elem0_of_2.2

<MSG>2:58 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 284 time spent: 0:0:0 [0.005428s total; 0.000019 per start]
tfg_computeWP: num_starts 12349 time spent: 0:0:1 [1.234208s total; 0.000100 per start]
tfg_get_simplified_to_state_for_edge: num_starts 27861 time spent: 0:0:0 [0.052962s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 17473 time spent: 0:0:0 [0.032976s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 14436 time spent: 0:0:0 [0.024544s total; 0.000002 per start]
add_nodeces_at_pc_and_propagate: num_starts 210 time spent: 0:0:46 [46.530441s total; 0.221574 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 26 time spent: 0:0:7 [7.241486s total; 0.278519 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 2672 time spent: 0:0:31 [31.055790s total; 0.011623 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 680 time spent: 0:0:47 [47.039368s total; 0.069176 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 2366 time spent: 0:0:18 [18.818173s total; 0.007954 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 10324 time spent: 0:1:17 [77.752789s total; 0.007531 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 2376 time spent: 0:0:0 [0.135084s total; 0.000057 per start]
tfg_graph_get_vars_written_on_edge: num_starts 2366 time spent: 0:0:0 [0.053997s total; 0.000023 per start]
cg_with_rank_add_CE_at_pc: num_starts 341 time spent: 0:0:24 [24.210960s total; 0.071000 per start]
graph_with_ce_add_CE_at_pc: num_starts 185 time spent: 0:0:0 [0.011530s total; 0.000062 per start]
graph_with_guessing_add_CE_at_pc: num_starts 341 time spent: 0:0:24 [24.197527s total; 0.070960 per start]
point_set_add_point_using_CE: num_starts 3040 time spent: 0:0:0 [0.852310s total; 0.000280 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 3040 time spent: 0:0:0 [0.858454s total; 0.000282 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 262 time spent: 0:0:2 [2.267355s total; 0.008654 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 262 time spent: 0:0:1 [1.398085s total; 0.005336 per start]
expr_label_memlabels_using_memlabel_map: num_starts 87247 time spent: 0:0:2 [2.106238s total; 0.000024 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 14414 time spent: 0:0:0 [0.402075s total; 0.000028 per start]
expr_simplify_solver: num_starts 6407 time spent: 0:0:0 [0.470172s total; 0.000073 per start]
expr_simplify_syntactic: num_starts 6615 time spent: 0:0:0 [0.982360s total; 0.000149 per start]
expr_simplify_select_on_store: num_starts 314 time spent: 0:0:0 [0.888200s total; 0.002829 per start]
expr_simplify_using_lhs_set_helper: num_starts 2174 time spent: 0:0:1 [1.594282s total; 0.000733 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 12462 time spent: 0:0:1 [1.579597s total; 0.000127 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 6659 time spent: 0:0:0 [0.024406s total; 0.000004 per start]
expr_simplify_eq: num_starts 825 time spent: 0:0:0 [0.006210s total; 0.000008 per start]
expr_simplify_or: num_starts 140 time spent: 0:0:0 [0.000171s total; 0.000001 per start]
expr_simplify_and: num_starts 563 time spent: 0:0:0 [0.003300s total; 0.000006 per start]
expr_simplify_andnot1: num_starts 148 time spent: 0:0:0 [0.001773s total; 0.000012 per start]
expr_simplify_andnot2: num_starts 52 time spent: 0:0:0 [0.000737s total; 0.000014 per start]
expr_simplify_not: num_starts 163 time spent: 0:0:0 [0.000485s total; 0.000003 per start]
expr_simplify_implies: num_starts 38 time spent: 0:0:0 [0.000330s total; 0.000009 per start]
expr_simplify_ite: num_starts 14 time spent: 0:0:0 [0.001177s total; 0.000084 per start]
canonicalize_expr_tree: num_starts 1265 time spent: 0:0:0 [0.071615s total; 0.000057 per start]
expr_simplify_memalloc_using_memlabel: num_starts 185 time spent: 0:0:0 [0.000556s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 314 time spent: 0:0:0 [0.877011s total; 0.002793 per start]
get_arithmetic_addsub_atoms: num_starts 13583 time spent: 0:0:0 [0.008510s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 2598 time spent: 0:0:0 [0.025499s total; 0.000010 per start]
expr_is_consts_struct_constant: num_starts 7358 time spent: 0:0:0 [0.004163s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 105409 time spent: 0:0:1 [1.065980s total; 0.000010 per start]
expr_do_simplify_helper_cache: num_starts 105409 time spent: 0:0:0 [0.110815s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 72 time spent: 0:0:0 [0.000025s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 72 time spent: 0:0:0 [0.000352s total; 0.000005 per start]
evaluate_expr_and_check_bounds: num_starts 20359 time spent: 0:1:18 [78.152029s total; 0.003839 per start]
array_constant_equals: num_starts 82172 time spent: 0:0:0 [0.077520s total; 0.000001 per start]
combo_dfa_xfer_and_meet: num_starts 198 time spent: 0:0:0 [0.696391s total; 0.003517 per start]
alias_val_xfer_and_meet: num_starts 198 time spent: 0:0:0 [0.392082s total; 0.001980 per start]
get_sprel_map_from_avail_exprs: num_starts 247 time spent: 0:0:0 [0.039539s total; 0.000160 per start]
update_memlabels_for_memslot_locs: num_starts 47 time spent: 0:0:0 [0.000248s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 658 time spent: 0:0:0 [0.120650s total; 0.000183 per start]
compute_simplified_loc_exprs_for_edge: num_starts 1335 time spent: 0:0:0 [0.284058s total; 0.000213 per start]
compute_locs_definitely_written_on_edge: num_starts 658 time spent: 0:0:0 [0.000991s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 144 time spent: 0:0:0 [0.011665s total; 0.000081 per start]
edge_update_memlabel_map_for_mlvars: num_starts 329 time spent: 0:0:0 [0.076497s total; 0.000233 per start]
add_new_locs_based_on_edge: num_starts 198 time spent: 0:0:0 [0.267270s total; 0.001350 per start]
expand_locset_to_include_slots_for_memmask: num_starts 273 time spent: 0:0:0 [0.000982s total; 0.000004 per start]
total: num_starts 1 time spent: 0:3:4 [184.513944s total; 184.513944 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 154.99s.
ftmap_run_pointsto_analysis.: 0.868563s (num_starts 2; 0.4343s/start)s.
EQ Time after pointsto analysis: 154.119s.
EQ Time after pointsto analysis and smt_query: 87.1789s.
EQ Time after pointsto analysis and smt_query and bv-solve: 86.6865s.
Equivalence proof found. The programs are equivalent.
